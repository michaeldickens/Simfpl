; ModuleID = '../c/main.c'
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-apple-darwin12.2.0"

%struct.W128_T = type { [4 x i32] }
%struct.smpType_struct = type { i8*, i32, i8, %struct.smpType_struct**, i64, %struct.minihash_struct*, %struct.minihash_struct*, %struct.minihash_struct*, %struct.minihash_struct* }
%struct.minihash_struct = type { %struct.miniarray_struct*, i64, i64, i64 }
%struct.miniarray_struct = type { %struct.minipair_struct*, i64 }
%struct.minipair_struct = type { i8*, %struct.obj_struct }
%struct.obj_struct = type { %struct.smpType_struct*, i8* }
%struct.__sFILE = type { i8*, i32, i32, i16, i16, %struct.__sbuf, i32, i8*, i32 (i8*)*, i32 (i8*, i8*, i32)*, i64 (i8*, i64, i32)*, i32 (i8*, i8*, i32)*, %struct.__sbuf, %struct.__sFILEX*, i32, [3 x i8], [1 x i8], %struct.__sbuf, i32, i64 }
%struct.__sbuf = type { i8*, i32 }
%struct.__sFILEX = type opaque
%struct.standardcore_struct = type { %struct.minihash_struct }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.smpException_struct = type { i8*, %struct.obj_struct }
%struct.smpstrstruct = type { i8*, i64 }
%struct.__mpz_struct = type { i32, i32, i64* }
%struct.__mpfr_struct = type { i64, i32, i64, i64* }
%struct.smpPair_struct = type { %struct.obj_struct, %struct.obj_struct* }
%struct.smpThrown_struct = type { i8, %struct.obj_struct*, i64 }
%struct.smpFunction_struct = type { i8, i8*, %struct.argspec_struct*, [2 x i8], { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* }
%struct.argspec_struct = type { i8*, i8, %struct.obj_struct, i8 }
%struct.smpTypeError_struct = type { i8*, %struct.obj_struct, %struct.smpType_struct*, %struct.obj_struct }
%struct.listbuf_struct = type { %struct.obj_struct, %struct.obj_struct }
%struct.smpArray_struct = type { %struct.obj_struct*, i64 }
%struct.timeval = type { i64, i32 }
%struct.smpHash_struct = type { %struct.obj_struct*, %struct.obj_struct, i64, i64, i64 }
%struct.smpregexmatch_struct = type { %struct.regmatch_t*, i64 }
%struct.regmatch_t = type { i64, i64 }
%struct.regex_t = type { i32, i64, i8*, %struct.re_guts* }
%struct.re_guts = type opaque

@.str = private unnamed_addr constant [61 x i8] c"SFMT-19937:122-18-1-11-1:dfffffef-ddfecb7f-bffaffff-bffffff6\00", align 1
@initialized = internal global i32 0, align 4
@__func__.gen_rand32 = private unnamed_addr constant [11 x i8] c"gen_rand32\00", align 1
@.str1 = private unnamed_addr constant [24 x i8] c"../c/../lib/SFMT/SFMT.c\00", align 1
@.str2 = private unnamed_addr constant [12 x i8] c"initialized\00", align 1
@idx = internal global i32 0, align 4
@psfmt32 = internal global i32* getelementptr inbounds ([156 x %struct.W128_T]* @sfmt, i32 0, i32 0, i32 0, i32 0), align 8
@__func__.gen_rand64 = private unnamed_addr constant [11 x i8] c"gen_rand64\00", align 1
@.str3 = private unnamed_addr constant [13 x i8] c"idx % 2 == 0\00", align 1
@psfmt64 = internal global i64* bitcast ([156 x %struct.W128_T]* @sfmt to i64*), align 8
@__func__.fill_array32 = private unnamed_addr constant [13 x i8] c"fill_array32\00", align 1
@.str4 = private unnamed_addr constant [11 x i8] c"idx == N32\00", align 1
@.str5 = private unnamed_addr constant [14 x i8] c"size % 4 == 0\00", align 1
@.str6 = private unnamed_addr constant [12 x i8] c"size >= N32\00", align 1
@__func__.fill_array64 = private unnamed_addr constant [13 x i8] c"fill_array64\00", align 1
@.str7 = private unnamed_addr constant [14 x i8] c"size % 2 == 0\00", align 1
@.str8 = private unnamed_addr constant [12 x i8] c"size >= N64\00", align 1
@sfmt = internal global [156 x %struct.W128_T] zeroinitializer, align 16
@smpType_class = common global %struct.smpType_struct zeroinitializer, align 8
@scope_length = common global i64 0, align 8
@scope_stack = common global %struct.minihash_struct* null, align 8
@.str9 = private unnamed_addr constant [24 x i8] c"ImplementationException\00", align 1
@.str10 = private unnamed_addr constant [34 x i8] c"Cannot call an abstract function.\00", align 1
@.str11 = private unnamed_addr constant [31 x i8] c"default unimplemented function\00", align 1
@smp_nil = common global %struct.obj_struct zeroinitializer, align 8
@.str12 = private unnamed_addr constant [9 x i8] c"key: %s\0A\00", align 1
@.str13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str14 = private unnamed_addr constant [24 x i8] c"InitializationException\00", align 1
@.str15 = private unnamed_addr constant [38 x i8] c"Cannot initialize singleton class %s.\00", align 1
@.str16 = private unnamed_addr constant [7 x i8] c"String\00", align 1
@.str17 = private unnamed_addr constant [13 x i8] c"compute-hash\00", align 1
@smpType_id_int = common global i32 0, align 4
@.str18 = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@smpType_id = common global %struct.smpType_struct zeroinitializer, align 8
@smp_true = common global %struct.obj_struct zeroinitializer, align 8
@smpType_id_float = common global i32 0, align 4
@.str19 = private unnamed_addr constant [4 x i8] c"cmp\00", align 1
@smpType_id_nil = common global i32 0, align 4
@smpType_id_list = common global i32 0, align 4
@.str20 = private unnamed_addr constant [14 x i8] c"ArgumentError\00", align 1
@.str21 = private unnamed_addr constant [50 x i8] c"Wrong number of arguments (1 expected, %d found).\00", align 1
@.str22 = private unnamed_addr constant [7 x i8] c"equal?\00", align 1
@.str23 = private unnamed_addr constant [4 x i8] c"eq?\00", align 1
@.str24 = private unnamed_addr constant [9 x i8] c"Function\00", align 1
@.str25 = private unnamed_addr constant [7 x i8] c"Thrown\00", align 1
@.str26 = private unnamed_addr constant [5 x i8] c"List\00", align 1
@smpType_id_class = common global i32 0, align 4
@.str27 = private unnamed_addr constant [21 x i8] c"UndefinedSymbolError\00", align 1
@.str28 = private unnamed_addr constant [41 x i8] c"Class function \22%s\22 is undefined for %s.\00", align 1
@.str29 = private unnamed_addr constant [44 x i8] c"Instance function \22%s\22 is undefined for %s.\00", align 1
@.str30 = private unnamed_addr constant [29 x i8] c"Function expected, %s found.\00", align 1
@.str31 = private unnamed_addr constant [6 x i8] c"Class\00", align 1
@.str32 = private unnamed_addr constant [11 x i8] c"<%s 0x%lx>\00", align 1
@.str33 = private unnamed_addr constant [5 x i8] c"to_s\00", align 1
@scope_classes = common global %struct.minihash_struct zeroinitializer, align 8
@.str34 = private unnamed_addr constant [5 x i8] c"self\00", align 1
@initialized_classesp = common global i32 0, align 4
@smpType_next_id = common global i32 0, align 4
@smpType_ids = common global %struct.minihash_struct zeroinitializer, align 8
@.str35 = private unnamed_addr constant [7 x i8] c"Object\00", align 1
@.str36 = private unnamed_addr constant [3 x i8] c"ID\00", align 1
@smpType_object = common global %struct.smpType_struct zeroinitializer, align 8
@smpType_function = common global %struct.smpType_struct zeroinitializer, align 8
@smpType_id_fun = common global i32 0, align 4
@.str37 = private unnamed_addr constant [5 x i8] c"Atom\00", align 1
@smpType_atom = common global %struct.smpType_struct zeroinitializer, align 8
@smpType_string = common global %struct.smpType_struct zeroinitializer, align 8
@.str38 = private unnamed_addr constant [5 x i8] c"Bool\00", align 1
@.str39 = private unnamed_addr constant [11 x i8] c"Collection\00", align 1
@smpType_collection = common global %struct.smpType_struct zeroinitializer, align 8
@.str40 = private unnamed_addr constant [5 x i8] c"Pair\00", align 1
@smpType_pair = common global %struct.smpType_struct zeroinitializer, align 8
@smpType_list = common global %struct.smpType_struct zeroinitializer, align 8
@.str41 = private unnamed_addr constant [4 x i8] c"Nil\00", align 1
@smpType_nil = common global %struct.smpType_struct zeroinitializer, align 8
@.str42 = private unnamed_addr constant [10 x i8] c"TrueClass\00", align 1
@.str43 = private unnamed_addr constant [10 x i8] c"Exception\00", align 1
@smpType_exception = common global %struct.smpType_struct zeroinitializer, align 8
@.str44 = private unnamed_addr constant [13 x i8] c"CompileError\00", align 1
@.str45 = private unnamed_addr constant [17 x i8] c"RuntimeException\00", align 1
@.str46 = private unnamed_addr constant [14 x i8] c"FunctionError\00", align 1
@.str47 = private unnamed_addr constant [12 x i8] c"SyntaxError\00", align 1
@.str48 = private unnamed_addr constant [10 x i8] c"TypeError\00", align 1
@smpType_thrown = common global %struct.smpType_struct zeroinitializer, align 8
@smpType_id_thrown = common global i32 0, align 4
@.str49 = private unnamed_addr constant [3 x i8] c"==\00", align 1
@.str50 = private unnamed_addr constant [3 x i8] c"->\00", align 1
@.str51 = private unnamed_addr constant [5 x i8] c"cons\00", align 1
@.str52 = private unnamed_addr constant [5 x i8] c"eql?\00", align 1
@.str53 = private unnamed_addr constant [8 x i8] c"funcall\00", align 1
@.str54 = private unnamed_addr constant [6 x i8] c"&rest\00", align 1
@.str55 = private unnamed_addr constant [9 x i8] c"getclass\00", align 1
@.str56 = private unnamed_addr constant [5 x i8] c"hash\00", align 1
@.str57 = private unnamed_addr constant [8 x i8] c"Integer\00", align 1
@.str58 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@.str59 = private unnamed_addr constant [13 x i8] c"types_equal?\00", align 1
@.str60 = private unnamed_addr constant [6 x i8] c"write\00", align 1
@smptest_print_successesp = common global i32 0, align 4
@.str61 = private unnamed_addr constant [23 x i8] c"success: %s equals %s\0A\00", align 1
@.str62 = private unnamed_addr constant [33 x i8] c"failure: %s expected, %s found.\0A\00", align 1
@.str63 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str64 = private unnamed_addr constant [2 x i8] c"y\00", align 1
@.str65 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str66 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str67 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str68 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str69 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str70 = private unnamed_addr constant [3 x i8] c"<<\00", align 1
@.str71 = private unnamed_addr constant [3 x i8] c">>\00", align 1
@.str72 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@.str73 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str74 = private unnamed_addr constant [2 x i8] c"^\00", align 1
@.str75 = private unnamed_addr constant [6 x i8] c"World\00", align 1
@.str76 = private unnamed_addr constant [42 x i8] c"Hello, %s! Mad %w, Wayne's %w, Disney %w.\00", align 1
@.str77 = private unnamed_addr constant [60 x i8] c"Hello, World! Mad \22World\22, Wayne's \22World\22, Disney \22World\22.\00", align 1
@.str78 = private unnamed_addr constant [30 x i8] c"various types: %d, %f, %x, %o\00", align 1
@.str79 = private unnamed_addr constant [10 x i8] c"make_list\00", align 1
@.str80 = private unnamed_addr constant [3 x i8] c"xs\00", align 1
@smpInteger_zero = common global %struct.obj_struct zeroinitializer, align 8
@.str81 = private unnamed_addr constant [16 x i8] c"not a real type\00", align 1
@.str82 = private unnamed_addr constant [16 x i8] c"^[0123456789]+$\00", align 1
@.str83 = private unnamed_addr constant [9 x i8] c"09821409\00", align 1
@.str84 = private unnamed_addr constant [6 x i8] c"array\00", align 1
@smpInteger_one = common global %struct.obj_struct zeroinitializer, align 8
@smp_global = common global %struct.obj_struct zeroinitializer, align 8
@.str85 = private unnamed_addr constant [28 x i8] c"time to sort at %f seconds\0A\00", align 1
@.str86 = private unnamed_addr constant [12 x i8] c"What is Pi?\00", align 1
@.str87 = private unnamed_addr constant [10 x i8] c"second pi\00", align 1
@.str88 = private unnamed_addr constant [8 x i8] c"pi: %s\0A\00", align 1
@.str89 = private unnamed_addr constant [5 x i8] c"Card\00", align 1
@.str90 = private unnamed_addr constant [21 x i8] c"\0A\0ATests succeeded.\0A\0A\00", align 1
@.str91 = private unnamed_addr constant [18 x i8] c"\0A\0ATests failed.\0A\0A\00", align 1
@__stderrp = external global %struct.__sFILE*
@.str92 = private unnamed_addr constant [17 x i8] c"Internal Error: \00", align 1
@.str93 = private unnamed_addr constant [14 x i8] c"Fatal Error: \00", align 1
@.str94 = private unnamed_addr constant [6 x i8] c"Array\00", align 1
@.str95 = private unnamed_addr constant [5 x i8] c"add!\00", align 1
@.str96 = private unnamed_addr constant [3 x i8] c"at\00", align 1
@.str97 = private unnamed_addr constant [4 x i8] c"at=\00", align 1
@.str98 = private unnamed_addr constant [5 x i8] c"copy\00", align 1
@.str99 = private unnamed_addr constant [4 x i8] c"map\00", align 1
@.str100 = private unnamed_addr constant [7 x i8] c"reduce\00", align 1
@.str101 = private unnamed_addr constant [10 x i8] c"&optional\00", align 1
@.str102 = private unnamed_addr constant [8 x i8] c"reverse\00", align 1
@.str103 = private unnamed_addr constant [9 x i8] c"reverse!\00", align 1
@.str104 = private unnamed_addr constant [5 x i8] c"sort\00", align 1
@.str105 = private unnamed_addr constant [6 x i8] c"sort!\00", align 1
@.str106 = private unnamed_addr constant [5 x i8] c"to_a\00", align 1
@.str107 = private unnamed_addr constant [8 x i8] c"to_list\00", align 1
@.str108 = private unnamed_addr constant [26 x i8] c"IndexOutOfBoundsException\00", align 1
@.str109 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str110 = private unnamed_addr constant [28 x i8] c"Index %ld is out of bounds.\00", align 1
@.str111 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str112 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str113 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@.str114 = private unnamed_addr constant [7 x i8] c"(array\00", align 1
@.str115 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str116 = private unnamed_addr constant [2 x i8] c")\00", align 1
@.str117 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str118 = private unnamed_addr constant [25 x i8] c"IncompleteTokenException\00", align 1
@.str119 = private unnamed_addr constant [18 x i8] c"InternalException\00", align 1
@.str120 = private unnamed_addr constant [22 x i8] c"StringFormatException\00", align 1
@.str121 = private unnamed_addr constant [70 x i8] c"In smpException_init(), wrong object type (Class expected, %s found).\00", align 1
@smp_stderr = common global %struct.__sFILE* null, align 8
@.str122 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str123 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str124 = private unnamed_addr constant [8 x i8] c"\0A\09from \00", align 1
@.str125 = private unnamed_addr constant [28 x i8] c"%s: %s expected, %st found.\00", align 1
@.str126 = private unnamed_addr constant [20 x i8] c"%s: unexpected %st.\00", align 1
@smp_mpfr_rnd = common global i32 0, align 4
@smp_mpfr_default_prec = common global i64 0, align 8
@.str127 = private unnamed_addr constant [7 x i8] c"Number\00", align 1
@.str128 = private unnamed_addr constant [6 x i8] c"Float\00", align 1
@smpType_float = common global %struct.smpType_struct zeroinitializer, align 8
@.str129 = private unnamed_addr constant [3 x i8] c"**\00", align 1
@.str130 = private unnamed_addr constant [3 x i8] c"!=\00", align 1
@.str131 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str132 = private unnamed_addr constant [3 x i8] c"<=\00", align 1
@.str133 = private unnamed_addr constant [3 x i8] c">=\00", align 1
@.str134 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str135 = private unnamed_addr constant [3 x i8] c"PI\00", align 1
@.str136 = private unnamed_addr constant [2 x i8] c"E\00", align 1
@.str137 = private unnamed_addr constant [9 x i8] c"%%.%dR*f\00", align 1
@.str138 = private unnamed_addr constant [60 x i8] c"Wrong number of arguments in %s.%s (%d expected, %d found).\00", align 1
@.str139 = private unnamed_addr constant [42 x i8] c"Unexpected token %s after &rest argument.\00", align 1
@.str140 = private unnamed_addr constant [9 x i8] c"&default\00", align 1
@.str141 = private unnamed_addr constant [7 x i8] c"&quote\00", align 1
@.str142 = private unnamed_addr constant [9 x i8] c"&keyword\00", align 1
@.str143 = private unnamed_addr constant [5 x i8] c"%s()\00", align 1
@.str144 = private unnamed_addr constant [16 x i8] c"<Function: %lx>\00", align 1
@__stdinp = external global %struct.__sFILE*
@smp_stdin = common global %struct.__sFILE* null, align 8
@__stdoutp = external global %struct.__sFILE*
@smp_stdout = common global %struct.__sFILE* null, align 8
@.str145 = private unnamed_addr constant [7 x i8] c"Global\00", align 1
@smpType_global = common global %struct.smpType_struct zeroinitializer, align 8
@.str146 = private unnamed_addr constant [2 x i8] c"!\00", align 1
@.str147 = private unnamed_addr constant [2 x i8] c"~\00", align 1
@.str148 = private unnamed_addr constant [6 x i8] c"catch\00", align 1
@.str149 = private unnamed_addr constant [5 x i8] c"Hash\00", align 1
@.str150 = private unnamed_addr constant [5 x i8] c"list\00", align 1
@.str151 = private unnamed_addr constant [6 x i8] c"print\00", align 1
@.str152 = private unnamed_addr constant [7 x i8] c"printf\00", align 1
@.str153 = private unnamed_addr constant [8 x i8] c"println\00", align 1
@.str154 = private unnamed_addr constant [5 x i8] c"rand\00", align 1
@.str155 = private unnamed_addr constant [9 x i8] c"set_seed\00", align 1
@.str156 = private unnamed_addr constant [8 x i8] c"sprintf\00", align 1
@.str157 = private unnamed_addr constant [6 x i8] c"throw\00", align 1
@.str158 = private unnamed_addr constant [4 x i8] c"nil\00", align 1
@.str159 = private unnamed_addr constant [25 x i8] c"catch() not implemented.\00", align 1
@.str160 = private unnamed_addr constant [36 x i8] c"name: %st, parents: %st, body: %st\0A\00", align 1
@.str161 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str162 = private unnamed_addr constant [67 x i8] c"Not enough arguments for formatted output (%d expected, %d found).\00", align 1
@.str163 = private unnamed_addr constant [48 x i8] c"Undefined format %s (does not begin with '%%').\00", align 1
@.str164 = private unnamed_addr constant [26 x i8] c"Undefined format type %c.\00", align 1
@.str165 = private unnamed_addr constant [34 x i8] c"hash contains?() not implemented.\00", align 1
@.str166 = private unnamed_addr constant [6 x i8] c"(hash\00", align 1
@smpType_int = common global %struct.smpType_struct zeroinitializer, align 8
@.str167 = private unnamed_addr constant [4 x i8] c"mod\00", align 1
@.str168 = private unnamed_addr constant [4 x i8] c"inc\00", align 1
@.str169 = private unnamed_addr constant [4 x i8] c"dec\00", align 1
@.str170 = private unnamed_addr constant [6 x i8] c"range\00", align 1
@.str171 = private unnamed_addr constant [52 x i8] c"Invalid range type %s (expected \22Array\22 or \22List\22).\00", align 1
@.str172 = private unnamed_addr constant [7 x i8] c"append\00", align 1
@.str173 = private unnamed_addr constant [8 x i8] c"append!\00", align 1
@.str174 = private unnamed_addr constant [4 x i8] c"car\00", align 1
@.str175 = private unnamed_addr constant [4 x i8] c"cdr\00", align 1
@.str176 = private unnamed_addr constant [7 x i8] c"concat\00", align 1
@.str177 = private unnamed_addr constant [8 x i8] c"concat!\00", align 1
@.str178 = private unnamed_addr constant [5 x i8] c"each\00", align 1
@.str179 = private unnamed_addr constant [7 x i8] c"empty?\00", align 1
@.str180 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str181 = private unnamed_addr constant [6 x i8] c"nsort\00", align 1
@.str182 = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str183 = private unnamed_addr constant [6 x i8] c"(list\00", align 1
@.str184 = private unnamed_addr constant [11 x i8] c"ListBuffer\00", align 1
@.str185 = private unnamed_addr constant [11 x i8] c"(%s -> %s)\00", align 1
@.str186 = private unnamed_addr constant [11 x i8] c"(%w -> %w)\00", align 1
@.str187 = private unnamed_addr constant [11 x i8] c"RegexMatch\00", align 1
@smpType_regmatch = common global %struct.smpType_struct zeroinitializer, align 8
@.str188 = private unnamed_addr constant [55 x i8] c"Regular expression \22%s\22 had invalid '{...}' construct.\00", align 1
@.str189 = private unnamed_addr constant [41 x i8] c"Syntax error in regular expression \22%s\22.\00", align 1
@.str190 = private unnamed_addr constant [97 x i8] c"In regular expression \22%s\22, a repetition operator such as '?' or '*' appeared in a bad position.\00", align 1
@.str191 = private unnamed_addr constant [66 x i8] c"Regular expression \22%s\22 referred to an invalid collating element.\00", align 1
@.str192 = private unnamed_addr constant [69 x i8] c"Regular expression \22%s\22 referred to an invalid character class name.\00", align 1
@.str193 = private unnamed_addr constant [40 x i8] c"Regular expression \22%s\22 ended with '\5C'.\00", align 1
@.str194 = private unnamed_addr constant [70 x i8] c"Regular expression \22%s\22 had invalid number in the '\5Cdigit' construct.\00", align 1
@.str195 = private unnamed_addr constant [56 x i8] c"Regular expression \22%s\22 had unbalanced square brackets.\00", align 1
@.str196 = private unnamed_addr constant [52 x i8] c"Regular expression \22%s\22 had unbalanced parentheses.\00", align 1
@.str197 = private unnamed_addr constant [53 x i8] c"Regular expression \22%s\22 had unbalanced curly braces.\00", align 1
@.str198 = private unnamed_addr constant [84 x i8] c"In regular expression \22%s\22, one of the endpoints in a range expression was invalid.\00", align 1
@.str199 = private unnamed_addr constant [59 x i8] c"Ran out of memory while compiling regular expression \22%s\22.\00", align 1
@.str200 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str201 = private unnamed_addr constant [7 x i8] c"Symbol\00", align 1
@.str202 = private unnamed_addr constant [13 x i8] c"<Thrown: %s>\00", align 1
@.str203 = private unnamed_addr constant [38 x i8] c"Undefined function-variable flag %d.\0A\00", align 1
@.str204 = private unnamed_addr constant [26 x i8] c"Undefined scope flag %d.\0A\00", align 1
@.str205 = private unnamed_addr constant [5 x i8] c"\0A%s\0A\00", align 1
@smpType_id_array = common global i32 0, align 4
@smpType_id_hash = common global i32 0, align 4
@smpType_id_var = common global i32 0, align 4
@parity = internal global [4 x i32] [i32 1, i32 0, i32 0, i32 331998852], align 16

define i8* @get_idstring() nounwind {
  ret i8* getelementptr inbounds ([61 x i8]* @.str, i32 0, i32 0)
}

define i32 @get_min_array_size32() nounwind {
  ret i32 624
}

define i32 @get_min_array_size64() nounwind {
  ret i32 312
}

define i32 @gen_rand32() nounwind {
  %r = alloca i32, align 4
  %1 = load i32* @initialized, align 4
  %2 = icmp ne i32 %1, 0
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i32
  %5 = sext i32 %4 to i64
  %6 = call i64 @llvm.expect.i64(i64 %5, i64 0)
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %0
  call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8]* @__func__.gen_rand32, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 413, i8* getelementptr inbounds ([12 x i8]* @.str2, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %11

; <label>:10                                      ; preds = %0
  br label %11

; <label>:11                                      ; preds = %10, %9
  %12 = load i32* @idx, align 4
  %13 = icmp sge i32 %12, 624
  br i1 %13, label %14, label %15

; <label>:14                                      ; preds = %11
  call void @gen_rand_all()
  store i32 0, i32* @idx, align 4
  br label %15

; <label>:15                                      ; preds = %14, %11
  %16 = load i32* @idx, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* @idx, align 4
  %18 = sext i32 %16 to i64
  %19 = load i32** @psfmt32, align 8
  %20 = getelementptr inbounds i32* %19, i64 %18
  %21 = load i32* %20, align 4
  store i32 %21, i32* %r, align 4
  %22 = load i32* %r, align 4
  ret i32 %22
}

declare i64 @llvm.expect.i64(i64, i64) nounwind readnone

declare void @__assert_rtn(i8*, i8*, i32, i8*) noreturn

define internal void @gen_rand_all() nounwind inlinehint {
  %i = alloca i32, align 4
  %r1 = alloca %struct.W128_T*, align 8
  %r2 = alloca %struct.W128_T*, align 8
  store %struct.W128_T* getelementptr inbounds ([156 x %struct.W128_T]* @sfmt, i32 0, i64 154), %struct.W128_T** %r1, align 8
  store %struct.W128_T* getelementptr inbounds ([156 x %struct.W128_T]* @sfmt, i32 0, i64 155), %struct.W128_T** %r2, align 8
  store i32 0, i32* %i, align 4
  br label %1

; <label>:1                                       ; preds = %21, %0
  %2 = load i32* %i, align 4
  %3 = icmp slt i32 %2, 34
  br i1 %3, label %4, label %24

; <label>:4                                       ; preds = %1
  %5 = load i32* %i, align 4
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %6
  %8 = load i32* %i, align 4
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %9
  %11 = load i32* %i, align 4
  %12 = add nsw i32 %11, 122
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %13
  %15 = load %struct.W128_T** %r1, align 8
  %16 = load %struct.W128_T** %r2, align 8
  call void @do_recursion(%struct.W128_T* %7, %struct.W128_T* %10, %struct.W128_T* %14, %struct.W128_T* %15, %struct.W128_T* %16)
  %17 = load %struct.W128_T** %r2, align 8
  store %struct.W128_T* %17, %struct.W128_T** %r1, align 8
  %18 = load i32* %i, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %19
  store %struct.W128_T* %20, %struct.W128_T** %r2, align 8
  br label %21

; <label>:21                                      ; preds = %4
  %22 = load i32* %i, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %i, align 4
  br label %1

; <label>:24                                      ; preds = %1
  br label %25

; <label>:25                                      ; preds = %46, %24
  %26 = load i32* %i, align 4
  %27 = icmp slt i32 %26, 156
  br i1 %27, label %28, label %49

; <label>:28                                      ; preds = %25
  %29 = load i32* %i, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %30
  %32 = load i32* %i, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %33
  %35 = load i32* %i, align 4
  %36 = add nsw i32 %35, 122
  %37 = sub nsw i32 %36, 156
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %38
  %40 = load %struct.W128_T** %r1, align 8
  %41 = load %struct.W128_T** %r2, align 8
  call void @do_recursion(%struct.W128_T* %31, %struct.W128_T* %34, %struct.W128_T* %39, %struct.W128_T* %40, %struct.W128_T* %41)
  %42 = load %struct.W128_T** %r2, align 8
  store %struct.W128_T* %42, %struct.W128_T** %r1, align 8
  %43 = load i32* %i, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %44
  store %struct.W128_T* %45, %struct.W128_T** %r2, align 8
  br label %46

; <label>:46                                      ; preds = %28
  %47 = load i32* %i, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %i, align 4
  br label %25

; <label>:49                                      ; preds = %25
  ret void
}

define i64 @gen_rand64() nounwind {
  %r = alloca i64, align 8
  %1 = load i32* @initialized, align 4
  %2 = icmp ne i32 %1, 0
  %3 = xor i1 %2, true
  %4 = zext i1 %3 to i32
  %5 = sext i32 %4 to i64
  %6 = call i64 @llvm.expect.i64(i64 %5, i64 0)
  %7 = icmp ne i64 %6, 0
  br i1 %7, label %8, label %10

; <label>:8                                       ; preds = %0
  call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8]* @__func__.gen_rand64, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 436, i8* getelementptr inbounds ([12 x i8]* @.str2, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %11

; <label>:10                                      ; preds = %0
  br label %11

; <label>:11                                      ; preds = %10, %9
  %12 = load i32* @idx, align 4
  %13 = srem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = xor i1 %14, true
  %16 = zext i1 %15 to i32
  %17 = sext i32 %16 to i64
  %18 = call i64 @llvm.expect.i64(i64 %17, i64 0)
  %19 = icmp ne i64 %18, 0
  br i1 %19, label %20, label %22

; <label>:20                                      ; preds = %11
  call void @__assert_rtn(i8* getelementptr inbounds ([11 x i8]* @__func__.gen_rand64, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 437, i8* getelementptr inbounds ([13 x i8]* @.str3, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %23

; <label>:22                                      ; preds = %11
  br label %23

; <label>:23                                      ; preds = %22, %21
  %24 = load i32* @idx, align 4
  %25 = icmp sge i32 %24, 624
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %23
  call void @gen_rand_all()
  store i32 0, i32* @idx, align 4
  br label %27

; <label>:27                                      ; preds = %26, %23
  %28 = load i32* @idx, align 4
  %29 = sdiv i32 %28, 2
  %30 = sext i32 %29 to i64
  %31 = load i64** @psfmt64, align 8
  %32 = getelementptr inbounds i64* %31, i64 %30
  %33 = load i64* %32, align 8
  store i64 %33, i64* %r, align 8
  %34 = load i32* @idx, align 4
  %35 = add nsw i32 %34, 2
  store i32 %35, i32* @idx, align 4
  %36 = load i64* %r, align 8
  ret i64 %36
}

define void @fill_array32(i32* %array, i32 %size) nounwind {
  %1 = alloca i32*, align 8
  %2 = alloca i32, align 4
  store i32* %array, i32** %1, align 8
  store i32 %size, i32* %2, align 4
  %3 = load i32* @initialized, align 4
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = call i64 @llvm.expect.i64(i64 %7, i64 0)
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %0
  call void @__assert_rtn(i8* getelementptr inbounds ([13 x i8]* @__func__.fill_array32, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 482, i8* getelementptr inbounds ([12 x i8]* @.str2, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %13

; <label>:12                                      ; preds = %0
  br label %13

; <label>:13                                      ; preds = %12, %11
  %14 = load i32* @idx, align 4
  %15 = icmp eq i32 %14, 624
  %16 = xor i1 %15, true
  %17 = zext i1 %16 to i32
  %18 = sext i32 %17 to i64
  %19 = call i64 @llvm.expect.i64(i64 %18, i64 0)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %23

; <label>:21                                      ; preds = %13
  call void @__assert_rtn(i8* getelementptr inbounds ([13 x i8]* @__func__.fill_array32, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 483, i8* getelementptr inbounds ([11 x i8]* @.str4, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %24

; <label>:23                                      ; preds = %13
  br label %24

; <label>:24                                      ; preds = %23, %22
  %25 = load i32* %2, align 4
  %26 = srem i32 %25, 4
  %27 = icmp eq i32 %26, 0
  %28 = xor i1 %27, true
  %29 = zext i1 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = call i64 @llvm.expect.i64(i64 %30, i64 0)
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %35

; <label>:33                                      ; preds = %24
  call void @__assert_rtn(i8* getelementptr inbounds ([13 x i8]* @__func__.fill_array32, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 484, i8* getelementptr inbounds ([14 x i8]* @.str5, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %36

; <label>:35                                      ; preds = %24
  br label %36

; <label>:36                                      ; preds = %35, %34
  %37 = load i32* %2, align 4
  %38 = icmp sge i32 %37, 624
  %39 = xor i1 %38, true
  %40 = zext i1 %39 to i32
  %41 = sext i32 %40 to i64
  %42 = call i64 @llvm.expect.i64(i64 %41, i64 0)
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %46

; <label>:44                                      ; preds = %36
  call void @__assert_rtn(i8* getelementptr inbounds ([13 x i8]* @__func__.fill_array32, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 485, i8* getelementptr inbounds ([12 x i8]* @.str6, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %47

; <label>:46                                      ; preds = %36
  br label %47

; <label>:47                                      ; preds = %46, %45
  %48 = load i32** %1, align 8
  %49 = bitcast i32* %48 to %struct.W128_T*
  %50 = load i32* %2, align 4
  %51 = sdiv i32 %50, 4
  call void @gen_rand_array(%struct.W128_T* %49, i32 %51)
  store i32 624, i32* @idx, align 4
  ret void
}

define internal void @gen_rand_array(%struct.W128_T* %array, i32 %size) nounwind inlinehint {
  %1 = alloca %struct.W128_T*, align 8
  %2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %r1 = alloca %struct.W128_T*, align 8
  %r2 = alloca %struct.W128_T*, align 8
  store %struct.W128_T* %array, %struct.W128_T** %1, align 8
  store i32 %size, i32* %2, align 4
  store %struct.W128_T* getelementptr inbounds ([156 x %struct.W128_T]* @sfmt, i32 0, i64 154), %struct.W128_T** %r1, align 8
  store %struct.W128_T* getelementptr inbounds ([156 x %struct.W128_T]* @sfmt, i32 0, i64 155), %struct.W128_T** %r2, align 8
  store i32 0, i32* %i, align 4
  br label %3

; <label>:3                                       ; preds = %25, %0
  %4 = load i32* %i, align 4
  %5 = icmp slt i32 %4, 34
  br i1 %5, label %6, label %28

; <label>:6                                       ; preds = %3
  %7 = load i32* %i, align 4
  %8 = sext i32 %7 to i64
  %9 = load %struct.W128_T** %1, align 8
  %10 = getelementptr inbounds %struct.W128_T* %9, i64 %8
  %11 = load i32* %i, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %12
  %14 = load i32* %i, align 4
  %15 = add nsw i32 %14, 122
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %16
  %18 = load %struct.W128_T** %r1, align 8
  %19 = load %struct.W128_T** %r2, align 8
  call void @do_recursion(%struct.W128_T* %10, %struct.W128_T* %13, %struct.W128_T* %17, %struct.W128_T* %18, %struct.W128_T* %19)
  %20 = load %struct.W128_T** %r2, align 8
  store %struct.W128_T* %20, %struct.W128_T** %r1, align 8
  %21 = load i32* %i, align 4
  %22 = sext i32 %21 to i64
  %23 = load %struct.W128_T** %1, align 8
  %24 = getelementptr inbounds %struct.W128_T* %23, i64 %22
  store %struct.W128_T* %24, %struct.W128_T** %r2, align 8
  br label %25

; <label>:25                                      ; preds = %6
  %26 = load i32* %i, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %i, align 4
  br label %3

; <label>:28                                      ; preds = %3
  br label %29

; <label>:29                                      ; preds = %53, %28
  %30 = load i32* %i, align 4
  %31 = icmp slt i32 %30, 156
  br i1 %31, label %32, label %56

; <label>:32                                      ; preds = %29
  %33 = load i32* %i, align 4
  %34 = sext i32 %33 to i64
  %35 = load %struct.W128_T** %1, align 8
  %36 = getelementptr inbounds %struct.W128_T* %35, i64 %34
  %37 = load i32* %i, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %38
  %40 = load i32* %i, align 4
  %41 = add nsw i32 %40, 122
  %42 = sub nsw i32 %41, 156
  %43 = sext i32 %42 to i64
  %44 = load %struct.W128_T** %1, align 8
  %45 = getelementptr inbounds %struct.W128_T* %44, i64 %43
  %46 = load %struct.W128_T** %r1, align 8
  %47 = load %struct.W128_T** %r2, align 8
  call void @do_recursion(%struct.W128_T* %36, %struct.W128_T* %39, %struct.W128_T* %45, %struct.W128_T* %46, %struct.W128_T* %47)
  %48 = load %struct.W128_T** %r2, align 8
  store %struct.W128_T* %48, %struct.W128_T** %r1, align 8
  %49 = load i32* %i, align 4
  %50 = sext i32 %49 to i64
  %51 = load %struct.W128_T** %1, align 8
  %52 = getelementptr inbounds %struct.W128_T* %51, i64 %50
  store %struct.W128_T* %52, %struct.W128_T** %r2, align 8
  br label %53

; <label>:53                                      ; preds = %32
  %54 = load i32* %i, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %i, align 4
  br label %29

; <label>:56                                      ; preds = %29
  br label %57

; <label>:57                                      ; preds = %85, %56
  %58 = load i32* %i, align 4
  %59 = load i32* %2, align 4
  %60 = sub nsw i32 %59, 156
  %61 = icmp slt i32 %58, %60
  br i1 %61, label %62, label %88

; <label>:62                                      ; preds = %57
  %63 = load i32* %i, align 4
  %64 = sext i32 %63 to i64
  %65 = load %struct.W128_T** %1, align 8
  %66 = getelementptr inbounds %struct.W128_T* %65, i64 %64
  %67 = load i32* %i, align 4
  %68 = sub nsw i32 %67, 156
  %69 = sext i32 %68 to i64
  %70 = load %struct.W128_T** %1, align 8
  %71 = getelementptr inbounds %struct.W128_T* %70, i64 %69
  %72 = load i32* %i, align 4
  %73 = add nsw i32 %72, 122
  %74 = sub nsw i32 %73, 156
  %75 = sext i32 %74 to i64
  %76 = load %struct.W128_T** %1, align 8
  %77 = getelementptr inbounds %struct.W128_T* %76, i64 %75
  %78 = load %struct.W128_T** %r1, align 8
  %79 = load %struct.W128_T** %r2, align 8
  call void @do_recursion(%struct.W128_T* %66, %struct.W128_T* %71, %struct.W128_T* %77, %struct.W128_T* %78, %struct.W128_T* %79)
  %80 = load %struct.W128_T** %r2, align 8
  store %struct.W128_T* %80, %struct.W128_T** %r1, align 8
  %81 = load i32* %i, align 4
  %82 = sext i32 %81 to i64
  %83 = load %struct.W128_T** %1, align 8
  %84 = getelementptr inbounds %struct.W128_T* %83, i64 %82
  store %struct.W128_T* %84, %struct.W128_T** %r2, align 8
  br label %85

; <label>:85                                      ; preds = %62
  %86 = load i32* %i, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %i, align 4
  br label %57

; <label>:88                                      ; preds = %57
  store i32 0, i32* %j, align 4
  br label %89

; <label>:89                                      ; preds = %107, %88
  %90 = load i32* %j, align 4
  %91 = load i32* %2, align 4
  %92 = sub nsw i32 312, %91
  %93 = icmp slt i32 %90, %92
  br i1 %93, label %94, label %110

; <label>:94                                      ; preds = %89
  %95 = load i32* %j, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %96
  %98 = load i32* %j, align 4
  %99 = load i32* %2, align 4
  %100 = add nsw i32 %98, %99
  %101 = sub nsw i32 %100, 156
  %102 = sext i32 %101 to i64
  %103 = load %struct.W128_T** %1, align 8
  %104 = getelementptr inbounds %struct.W128_T* %103, i64 %102
  %105 = bitcast %struct.W128_T* %97 to i8*
  %106 = bitcast %struct.W128_T* %104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 16, i32 4, i1 false)
  br label %107

; <label>:107                                     ; preds = %94
  %108 = load i32* %j, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %j, align 4
  br label %89

; <label>:110                                     ; preds = %89
  br label %111

; <label>:111                                     ; preds = %147, %110
  %112 = load i32* %i, align 4
  %113 = load i32* %2, align 4
  %114 = icmp slt i32 %112, %113
  br i1 %114, label %115, label %152

; <label>:115                                     ; preds = %111
  %116 = load i32* %i, align 4
  %117 = sext i32 %116 to i64
  %118 = load %struct.W128_T** %1, align 8
  %119 = getelementptr inbounds %struct.W128_T* %118, i64 %117
  %120 = load i32* %i, align 4
  %121 = sub nsw i32 %120, 156
  %122 = sext i32 %121 to i64
  %123 = load %struct.W128_T** %1, align 8
  %124 = getelementptr inbounds %struct.W128_T* %123, i64 %122
  %125 = load i32* %i, align 4
  %126 = add nsw i32 %125, 122
  %127 = sub nsw i32 %126, 156
  %128 = sext i32 %127 to i64
  %129 = load %struct.W128_T** %1, align 8
  %130 = getelementptr inbounds %struct.W128_T* %129, i64 %128
  %131 = load %struct.W128_T** %r1, align 8
  %132 = load %struct.W128_T** %r2, align 8
  call void @do_recursion(%struct.W128_T* %119, %struct.W128_T* %124, %struct.W128_T* %130, %struct.W128_T* %131, %struct.W128_T* %132)
  %133 = load %struct.W128_T** %r2, align 8
  store %struct.W128_T* %133, %struct.W128_T** %r1, align 8
  %134 = load i32* %i, align 4
  %135 = sext i32 %134 to i64
  %136 = load %struct.W128_T** %1, align 8
  %137 = getelementptr inbounds %struct.W128_T* %136, i64 %135
  store %struct.W128_T* %137, %struct.W128_T** %r2, align 8
  %138 = load i32* %j, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [156 x %struct.W128_T]* @sfmt, i32 0, i64 %139
  %141 = load i32* %i, align 4
  %142 = sext i32 %141 to i64
  %143 = load %struct.W128_T** %1, align 8
  %144 = getelementptr inbounds %struct.W128_T* %143, i64 %142
  %145 = bitcast %struct.W128_T* %140 to i8*
  %146 = bitcast %struct.W128_T* %144 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %145, i8* %146, i64 16, i32 4, i1 false)
  br label %147

; <label>:147                                     ; preds = %115
  %148 = load i32* %i, align 4
  %149 = add nsw i32 %148, 1
  store i32 %149, i32* %i, align 4
  %150 = load i32* %j, align 4
  %151 = add nsw i32 %150, 1
  store i32 %151, i32* %j, align 4
  br label %111

; <label>:152                                     ; preds = %111
  ret void
}

define void @fill_array64(i64* %array, i32 %size) nounwind {
  %1 = alloca i64*, align 8
  %2 = alloca i32, align 4
  store i64* %array, i64** %1, align 8
  store i32 %size, i32* %2, align 4
  %3 = load i32* @initialized, align 4
  %4 = icmp ne i32 %3, 0
  %5 = xor i1 %4, true
  %6 = zext i1 %5 to i32
  %7 = sext i32 %6 to i64
  %8 = call i64 @llvm.expect.i64(i64 %7, i64 0)
  %9 = icmp ne i64 %8, 0
  br i1 %9, label %10, label %12

; <label>:10                                      ; preds = %0
  call void @__assert_rtn(i8* getelementptr inbounds ([13 x i8]* @__func__.fill_array64, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 518, i8* getelementptr inbounds ([12 x i8]* @.str2, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %13

; <label>:12                                      ; preds = %0
  br label %13

; <label>:13                                      ; preds = %12, %11
  %14 = load i32* @idx, align 4
  %15 = icmp eq i32 %14, 624
  %16 = xor i1 %15, true
  %17 = zext i1 %16 to i32
  %18 = sext i32 %17 to i64
  %19 = call i64 @llvm.expect.i64(i64 %18, i64 0)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %23

; <label>:21                                      ; preds = %13
  call void @__assert_rtn(i8* getelementptr inbounds ([13 x i8]* @__func__.fill_array64, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 519, i8* getelementptr inbounds ([11 x i8]* @.str4, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %24

; <label>:23                                      ; preds = %13
  br label %24

; <label>:24                                      ; preds = %23, %22
  %25 = load i32* %2, align 4
  %26 = srem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = xor i1 %27, true
  %29 = zext i1 %28 to i32
  %30 = sext i32 %29 to i64
  %31 = call i64 @llvm.expect.i64(i64 %30, i64 0)
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %35

; <label>:33                                      ; preds = %24
  call void @__assert_rtn(i8* getelementptr inbounds ([13 x i8]* @__func__.fill_array64, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 520, i8* getelementptr inbounds ([14 x i8]* @.str7, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %36

; <label>:35                                      ; preds = %24
  br label %36

; <label>:36                                      ; preds = %35, %34
  %37 = load i32* %2, align 4
  %38 = icmp sge i32 %37, 312
  %39 = xor i1 %38, true
  %40 = zext i1 %39 to i32
  %41 = sext i32 %40 to i64
  %42 = call i64 @llvm.expect.i64(i64 %41, i64 0)
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %46

; <label>:44                                      ; preds = %36
  call void @__assert_rtn(i8* getelementptr inbounds ([13 x i8]* @__func__.fill_array64, i32 0, i32 0), i8* getelementptr inbounds ([24 x i8]* @.str1, i32 0, i32 0), i32 521, i8* getelementptr inbounds ([12 x i8]* @.str8, i32 0, i32 0)) noreturn
  unreachable
                                                  ; No predecessors!
  br label %47

; <label>:46                                      ; preds = %36
  br label %47

; <label>:47                                      ; preds = %46, %45
  %48 = load i64** %1, align 8
  %49 = bitcast i64* %48 to %struct.W128_T*
  %50 = load i32* %2, align 4
  %51 = sdiv i32 %50, 2
  call void @gen_rand_array(%struct.W128_T* %49, i32 %51)
  store i32 624, i32* @idx, align 4
  ret void
}

define void @init_gen_rand(i32 %seed) nounwind {
  %1 = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %seed, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = call i32 @idxof(i32 0)
  %4 = sext i32 %3 to i64
  %5 = load i32** @psfmt32, align 8
  %6 = getelementptr inbounds i32* %5, i64 %4
  store i32 %2, i32* %6, align 4
  store i32 1, i32* %i, align 4
  br label %7

; <label>:7                                       ; preds = %38, %0
  %8 = load i32* %i, align 4
  %9 = icmp slt i32 %8, 624
  br i1 %9, label %10, label %41

; <label>:10                                      ; preds = %7
  %11 = load i32* %i, align 4
  %12 = sub nsw i32 %11, 1
  %13 = call i32 @idxof(i32 %12)
  %14 = sext i32 %13 to i64
  %15 = load i32** @psfmt32, align 8
  %16 = getelementptr inbounds i32* %15, i64 %14
  %17 = load i32* %16, align 4
  %18 = load i32* %i, align 4
  %19 = sub nsw i32 %18, 1
  %20 = call i32 @idxof(i32 %19)
  %21 = sext i32 %20 to i64
  %22 = load i32** @psfmt32, align 8
  %23 = getelementptr inbounds i32* %22, i64 %21
  %24 = load i32* %23, align 4
  %25 = lshr i32 %24, 30
  %26 = xor i32 %17, %25
  %27 = zext i32 %26 to i64
  %28 = mul i64 1812433253, %27
  %29 = load i32* %i, align 4
  %30 = sext i32 %29 to i64
  %31 = add i64 %28, %30
  %32 = trunc i64 %31 to i32
  %33 = load i32* %i, align 4
  %34 = call i32 @idxof(i32 %33)
  %35 = sext i32 %34 to i64
  %36 = load i32** @psfmt32, align 8
  %37 = getelementptr inbounds i32* %36, i64 %35
  store i32 %32, i32* %37, align 4
  br label %38

; <label>:38                                      ; preds = %10
  %39 = load i32* %i, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %i, align 4
  br label %7

; <label>:41                                      ; preds = %7
  store i32 624, i32* @idx, align 4
  call void @period_certification()
  store i32 1, i32* @initialized, align 4
  ret void
}

define internal i32 @idxof(i32 %i) nounwind inlinehint {
  %1 = alloca i32, align 4
  store i32 %i, i32* %1, align 4
  %2 = load i32* %1, align 4
  ret i32 %2
}

define internal void @period_certification() nounwind {
  %inner = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %work = alloca i32, align 4
  store i32 0, i32* %inner, align 4
  store i32 0, i32* %i, align 4
  br label %1

; <label>:1                                       ; preds = %18, %0
  %2 = load i32* %i, align 4
  %3 = icmp slt i32 %2, 4
  br i1 %3, label %4, label %21

; <label>:4                                       ; preds = %1
  %5 = load i32* %i, align 4
  %6 = call i32 @idxof(i32 %5)
  %7 = sext i32 %6 to i64
  %8 = load i32** @psfmt32, align 8
  %9 = getelementptr inbounds i32* %8, i64 %7
  %10 = load i32* %9, align 4
  %11 = load i32* %i, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [4 x i32]* @parity, i32 0, i64 %12
  %14 = load i32* %13, align 4
  %15 = and i32 %10, %14
  %16 = load i32* %inner, align 4
  %17 = xor i32 %16, %15
  store i32 %17, i32* %inner, align 4
  br label %18

; <label>:18                                      ; preds = %4
  %19 = load i32* %i, align 4
  %20 = add nsw i32 %19, 1
  store i32 %20, i32* %i, align 4
  br label %1

; <label>:21                                      ; preds = %1
  store i32 16, i32* %i, align 4
  br label %22

; <label>:22                                      ; preds = %31, %21
  %23 = load i32* %i, align 4
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %25, label %34

; <label>:25                                      ; preds = %22
  %26 = load i32* %inner, align 4
  %27 = load i32* %i, align 4
  %28 = ashr i32 %26, %27
  %29 = load i32* %inner, align 4
  %30 = xor i32 %29, %28
  store i32 %30, i32* %inner, align 4
  br label %31

; <label>:31                                      ; preds = %25
  %32 = load i32* %i, align 4
  %33 = ashr i32 %32, 1
  store i32 %33, i32* %i, align 4
  br label %22

; <label>:34                                      ; preds = %22
  %35 = load i32* %inner, align 4
  %36 = and i32 %35, 1
  store i32 %36, i32* %inner, align 4
  %37 = load i32* %inner, align 4
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %40

; <label>:39                                      ; preds = %34
  br label %75

; <label>:40                                      ; preds = %34
  store i32 0, i32* %i, align 4
  br label %41

; <label>:41                                      ; preds = %72, %40
  %42 = load i32* %i, align 4
  %43 = icmp slt i32 %42, 4
  br i1 %43, label %44, label %75

; <label>:44                                      ; preds = %41
  store i32 1, i32* %work, align 4
  store i32 0, i32* %j, align 4
  br label %45

; <label>:45                                      ; preds = %68, %44
  %46 = load i32* %j, align 4
  %47 = icmp slt i32 %46, 32
  br i1 %47, label %48, label %71

; <label>:48                                      ; preds = %45
  %49 = load i32* %work, align 4
  %50 = load i32* %i, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [4 x i32]* @parity, i32 0, i64 %51
  %53 = load i32* %52, align 4
  %54 = and i32 %49, %53
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %65

; <label>:56                                      ; preds = %48
  %57 = load i32* %work, align 4
  %58 = load i32* %i, align 4
  %59 = call i32 @idxof(i32 %58)
  %60 = sext i32 %59 to i64
  %61 = load i32** @psfmt32, align 8
  %62 = getelementptr inbounds i32* %61, i64 %60
  %63 = load i32* %62, align 4
  %64 = xor i32 %63, %57
  store i32 %64, i32* %62, align 4
  br label %75

; <label>:65                                      ; preds = %48
  %66 = load i32* %work, align 4
  %67 = shl i32 %66, 1
  store i32 %67, i32* %work, align 4
  br label %68

; <label>:68                                      ; preds = %65
  %69 = load i32* %j, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %j, align 4
  br label %45

; <label>:71                                      ; preds = %45
  br label %72

; <label>:72                                      ; preds = %71
  %73 = load i32* %i, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %i, align 4
  br label %41

; <label>:75                                      ; preds = %39, %56, %41
  ret void
}

define void @init_by_array(i32* %init_key, i32 %key_length) nounwind {
  %1 = alloca i32*, align 8
  %2 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %count = alloca i32, align 4
  %r = alloca i32, align 4
  %lag = alloca i32, align 4
  %mid = alloca i32, align 4
  %size = alloca i32, align 4
  store i32* %init_key, i32** %1, align 8
  store i32 %key_length, i32* %2, align 4
  store i32 624, i32* %size, align 4
  %3 = load i32* %size, align 4
  %4 = icmp sge i32 %3, 623
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  store i32 11, i32* %lag, align 4
  br label %17

; <label>:6                                       ; preds = %0
  %7 = load i32* %size, align 4
  %8 = icmp sge i32 %7, 68
  br i1 %8, label %9, label %10

; <label>:9                                       ; preds = %6
  store i32 7, i32* %lag, align 4
  br label %16

; <label>:10                                      ; preds = %6
  %11 = load i32* %size, align 4
  %12 = icmp sge i32 %11, 39
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %10
  store i32 5, i32* %lag, align 4
  br label %15

; <label>:14                                      ; preds = %10
  store i32 3, i32* %lag, align 4
  br label %15

; <label>:15                                      ; preds = %14, %13
  br label %16

; <label>:16                                      ; preds = %15, %9
  br label %17

; <label>:17                                      ; preds = %16, %5
  %18 = load i32* %size, align 4
  %19 = load i32* %lag, align 4
  %20 = sub nsw i32 %18, %19
  %21 = sdiv i32 %20, 2
  store i32 %21, i32* %mid, align 4
  call void @llvm.memset.p0i8.i64(i8* bitcast ([156 x %struct.W128_T]* @sfmt to i8*), i8 -117, i64 2496, i32 1, i1 false)
  %22 = load i32* %2, align 4
  %23 = add nsw i32 %22, 1
  %24 = icmp sgt i32 %23, 624
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %17
  %26 = load i32* %2, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %count, align 4
  br label %29

; <label>:28                                      ; preds = %17
  store i32 624, i32* %count, align 4
  br label %29

; <label>:29                                      ; preds = %28, %25
  %30 = call i32 @idxof(i32 0)
  %31 = sext i32 %30 to i64
  %32 = load i32** @psfmt32, align 8
  %33 = getelementptr inbounds i32* %32, i64 %31
  %34 = load i32* %33, align 4
  %35 = load i32* %mid, align 4
  %36 = call i32 @idxof(i32 %35)
  %37 = sext i32 %36 to i64
  %38 = load i32** @psfmt32, align 8
  %39 = getelementptr inbounds i32* %38, i64 %37
  %40 = load i32* %39, align 4
  %41 = xor i32 %34, %40
  %42 = call i32 @idxof(i32 623)
  %43 = sext i32 %42 to i64
  %44 = load i32** @psfmt32, align 8
  %45 = getelementptr inbounds i32* %44, i64 %43
  %46 = load i32* %45, align 4
  %47 = xor i32 %41, %46
  %48 = call i32 @func1(i32 %47)
  store i32 %48, i32* %r, align 4
  %49 = load i32* %r, align 4
  %50 = load i32* %mid, align 4
  %51 = call i32 @idxof(i32 %50)
  %52 = sext i32 %51 to i64
  %53 = load i32** @psfmt32, align 8
  %54 = getelementptr inbounds i32* %53, i64 %52
  %55 = load i32* %54, align 4
  %56 = add i32 %55, %49
  store i32 %56, i32* %54, align 4
  %57 = load i32* %2, align 4
  %58 = load i32* %r, align 4
  %59 = add i32 %58, %57
  store i32 %59, i32* %r, align 4
  %60 = load i32* %r, align 4
  %61 = load i32* %mid, align 4
  %62 = load i32* %lag, align 4
  %63 = add nsw i32 %61, %62
  %64 = call i32 @idxof(i32 %63)
  %65 = sext i32 %64 to i64
  %66 = load i32** @psfmt32, align 8
  %67 = getelementptr inbounds i32* %66, i64 %65
  %68 = load i32* %67, align 4
  %69 = add i32 %68, %60
  store i32 %69, i32* %67, align 4
  %70 = load i32* %r, align 4
  %71 = call i32 @idxof(i32 0)
  %72 = sext i32 %71 to i64
  %73 = load i32** @psfmt32, align 8
  %74 = getelementptr inbounds i32* %73, i64 %72
  store i32 %70, i32* %74, align 4
  %75 = load i32* %count, align 4
  %76 = add nsw i32 %75, -1
  store i32 %76, i32* %count, align 4
  store i32 1, i32* %i, align 4
  store i32 0, i32* %j, align 4
  br label %77

; <label>:77                                      ; preds = %157, %29
  %78 = load i32* %j, align 4
  %79 = load i32* %count, align 4
  %80 = icmp slt i32 %78, %79
  br i1 %80, label %81, label %85

; <label>:81                                      ; preds = %77
  %82 = load i32* %j, align 4
  %83 = load i32* %2, align 4
  %84 = icmp slt i32 %82, %83
  br label %85

; <label>:85                                      ; preds = %81, %77
  %86 = phi i1 [ false, %77 ], [ %84, %81 ]
  br i1 %86, label %87, label %160

; <label>:87                                      ; preds = %85
  %88 = load i32* %i, align 4
  %89 = call i32 @idxof(i32 %88)
  %90 = sext i32 %89 to i64
  %91 = load i32** @psfmt32, align 8
  %92 = getelementptr inbounds i32* %91, i64 %90
  %93 = load i32* %92, align 4
  %94 = load i32* %i, align 4
  %95 = load i32* %mid, align 4
  %96 = add nsw i32 %94, %95
  %97 = srem i32 %96, 624
  %98 = call i32 @idxof(i32 %97)
  %99 = sext i32 %98 to i64
  %100 = load i32** @psfmt32, align 8
  %101 = getelementptr inbounds i32* %100, i64 %99
  %102 = load i32* %101, align 4
  %103 = xor i32 %93, %102
  %104 = load i32* %i, align 4
  %105 = add nsw i32 %104, 624
  %106 = sub nsw i32 %105, 1
  %107 = srem i32 %106, 624
  %108 = call i32 @idxof(i32 %107)
  %109 = sext i32 %108 to i64
  %110 = load i32** @psfmt32, align 8
  %111 = getelementptr inbounds i32* %110, i64 %109
  %112 = load i32* %111, align 4
  %113 = xor i32 %103, %112
  %114 = call i32 @func1(i32 %113)
  store i32 %114, i32* %r, align 4
  %115 = load i32* %r, align 4
  %116 = load i32* %i, align 4
  %117 = load i32* %mid, align 4
  %118 = add nsw i32 %116, %117
  %119 = srem i32 %118, 624
  %120 = call i32 @idxof(i32 %119)
  %121 = sext i32 %120 to i64
  %122 = load i32** @psfmt32, align 8
  %123 = getelementptr inbounds i32* %122, i64 %121
  %124 = load i32* %123, align 4
  %125 = add i32 %124, %115
  store i32 %125, i32* %123, align 4
  %126 = load i32* %j, align 4
  %127 = sext i32 %126 to i64
  %128 = load i32** %1, align 8
  %129 = getelementptr inbounds i32* %128, i64 %127
  %130 = load i32* %129, align 4
  %131 = load i32* %i, align 4
  %132 = add i32 %130, %131
  %133 = load i32* %r, align 4
  %134 = add i32 %133, %132
  store i32 %134, i32* %r, align 4
  %135 = load i32* %r, align 4
  %136 = load i32* %i, align 4
  %137 = load i32* %mid, align 4
  %138 = add nsw i32 %136, %137
  %139 = load i32* %lag, align 4
  %140 = add nsw i32 %138, %139
  %141 = srem i32 %140, 624
  %142 = call i32 @idxof(i32 %141)
  %143 = sext i32 %142 to i64
  %144 = load i32** @psfmt32, align 8
  %145 = getelementptr inbounds i32* %144, i64 %143
  %146 = load i32* %145, align 4
  %147 = add i32 %146, %135
  store i32 %147, i32* %145, align 4
  %148 = load i32* %r, align 4
  %149 = load i32* %i, align 4
  %150 = call i32 @idxof(i32 %149)
  %151 = sext i32 %150 to i64
  %152 = load i32** @psfmt32, align 8
  %153 = getelementptr inbounds i32* %152, i64 %151
  store i32 %148, i32* %153, align 4
  %154 = load i32* %i, align 4
  %155 = add nsw i32 %154, 1
  %156 = srem i32 %155, 624
  store i32 %156, i32* %i, align 4
  br label %157

; <label>:157                                     ; preds = %87
  %158 = load i32* %j, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %j, align 4
  br label %77

; <label>:160                                     ; preds = %85
  br label %161

; <label>:161                                     ; preds = %229, %160
  %162 = load i32* %j, align 4
  %163 = load i32* %count, align 4
  %164 = icmp slt i32 %162, %163
  br i1 %164, label %165, label %232

; <label>:165                                     ; preds = %161
  %166 = load i32* %i, align 4
  %167 = call i32 @idxof(i32 %166)
  %168 = sext i32 %167 to i64
  %169 = load i32** @psfmt32, align 8
  %170 = getelementptr inbounds i32* %169, i64 %168
  %171 = load i32* %170, align 4
  %172 = load i32* %i, align 4
  %173 = load i32* %mid, align 4
  %174 = add nsw i32 %172, %173
  %175 = srem i32 %174, 624
  %176 = call i32 @idxof(i32 %175)
  %177 = sext i32 %176 to i64
  %178 = load i32** @psfmt32, align 8
  %179 = getelementptr inbounds i32* %178, i64 %177
  %180 = load i32* %179, align 4
  %181 = xor i32 %171, %180
  %182 = load i32* %i, align 4
  %183 = add nsw i32 %182, 624
  %184 = sub nsw i32 %183, 1
  %185 = srem i32 %184, 624
  %186 = call i32 @idxof(i32 %185)
  %187 = sext i32 %186 to i64
  %188 = load i32** @psfmt32, align 8
  %189 = getelementptr inbounds i32* %188, i64 %187
  %190 = load i32* %189, align 4
  %191 = xor i32 %181, %190
  %192 = call i32 @func1(i32 %191)
  store i32 %192, i32* %r, align 4
  %193 = load i32* %r, align 4
  %194 = load i32* %i, align 4
  %195 = load i32* %mid, align 4
  %196 = add nsw i32 %194, %195
  %197 = srem i32 %196, 624
  %198 = call i32 @idxof(i32 %197)
  %199 = sext i32 %198 to i64
  %200 = load i32** @psfmt32, align 8
  %201 = getelementptr inbounds i32* %200, i64 %199
  %202 = load i32* %201, align 4
  %203 = add i32 %202, %193
  store i32 %203, i32* %201, align 4
  %204 = load i32* %i, align 4
  %205 = load i32* %r, align 4
  %206 = add i32 %205, %204
  store i32 %206, i32* %r, align 4
  %207 = load i32* %r, align 4
  %208 = load i32* %i, align 4
  %209 = load i32* %mid, align 4
  %210 = add nsw i32 %208, %209
  %211 = load i32* %lag, align 4
  %212 = add nsw i32 %210, %211
  %213 = srem i32 %212, 624
  %214 = call i32 @idxof(i32 %213)
  %215 = sext i32 %214 to i64
  %216 = load i32** @psfmt32, align 8
  %217 = getelementptr inbounds i32* %216, i64 %215
  %218 = load i32* %217, align 4
  %219 = add i32 %218, %207
  store i32 %219, i32* %217, align 4
  %220 = load i32* %r, align 4
  %221 = load i32* %i, align 4
  %222 = call i32 @idxof(i32 %221)
  %223 = sext i32 %222 to i64
  %224 = load i32** @psfmt32, align 8
  %225 = getelementptr inbounds i32* %224, i64 %223
  store i32 %220, i32* %225, align 4
  %226 = load i32* %i, align 4
  %227 = add nsw i32 %226, 1
  %228 = srem i32 %227, 624
  store i32 %228, i32* %i, align 4
  br label %229

; <label>:229                                     ; preds = %165
  %230 = load i32* %j, align 4
  %231 = add nsw i32 %230, 1
  store i32 %231, i32* %j, align 4
  br label %161

; <label>:232                                     ; preds = %161
  store i32 0, i32* %j, align 4
  br label %233

; <label>:233                                     ; preds = %300, %232
  %234 = load i32* %j, align 4
  %235 = icmp slt i32 %234, 624
  br i1 %235, label %236, label %303

; <label>:236                                     ; preds = %233
  %237 = load i32* %i, align 4
  %238 = call i32 @idxof(i32 %237)
  %239 = sext i32 %238 to i64
  %240 = load i32** @psfmt32, align 8
  %241 = getelementptr inbounds i32* %240, i64 %239
  %242 = load i32* %241, align 4
  %243 = load i32* %i, align 4
  %244 = load i32* %mid, align 4
  %245 = add nsw i32 %243, %244
  %246 = srem i32 %245, 624
  %247 = call i32 @idxof(i32 %246)
  %248 = sext i32 %247 to i64
  %249 = load i32** @psfmt32, align 8
  %250 = getelementptr inbounds i32* %249, i64 %248
  %251 = load i32* %250, align 4
  %252 = add i32 %242, %251
  %253 = load i32* %i, align 4
  %254 = add nsw i32 %253, 624
  %255 = sub nsw i32 %254, 1
  %256 = srem i32 %255, 624
  %257 = call i32 @idxof(i32 %256)
  %258 = sext i32 %257 to i64
  %259 = load i32** @psfmt32, align 8
  %260 = getelementptr inbounds i32* %259, i64 %258
  %261 = load i32* %260, align 4
  %262 = add i32 %252, %261
  %263 = call i32 @func2(i32 %262)
  store i32 %263, i32* %r, align 4
  %264 = load i32* %r, align 4
  %265 = load i32* %i, align 4
  %266 = load i32* %mid, align 4
  %267 = add nsw i32 %265, %266
  %268 = srem i32 %267, 624
  %269 = call i32 @idxof(i32 %268)
  %270 = sext i32 %269 to i64
  %271 = load i32** @psfmt32, align 8
  %272 = getelementptr inbounds i32* %271, i64 %270
  %273 = load i32* %272, align 4
  %274 = xor i32 %273, %264
  store i32 %274, i32* %272, align 4
  %275 = load i32* %i, align 4
  %276 = load i32* %r, align 4
  %277 = sub i32 %276, %275
  store i32 %277, i32* %r, align 4
  %278 = load i32* %r, align 4
  %279 = load i32* %i, align 4
  %280 = load i32* %mid, align 4
  %281 = add nsw i32 %279, %280
  %282 = load i32* %lag, align 4
  %283 = add nsw i32 %281, %282
  %284 = srem i32 %283, 624
  %285 = call i32 @idxof(i32 %284)
  %286 = sext i32 %285 to i64
  %287 = load i32** @psfmt32, align 8
  %288 = getelementptr inbounds i32* %287, i64 %286
  %289 = load i32* %288, align 4
  %290 = xor i32 %289, %278
  store i32 %290, i32* %288, align 4
  %291 = load i32* %r, align 4
  %292 = load i32* %i, align 4
  %293 = call i32 @idxof(i32 %292)
  %294 = sext i32 %293 to i64
  %295 = load i32** @psfmt32, align 8
  %296 = getelementptr inbounds i32* %295, i64 %294
  store i32 %291, i32* %296, align 4
  %297 = load i32* %i, align 4
  %298 = add nsw i32 %297, 1
  %299 = srem i32 %298, 624
  store i32 %299, i32* %i, align 4
  br label %300

; <label>:300                                     ; preds = %236
  %301 = load i32* %j, align 4
  %302 = add nsw i32 %301, 1
  store i32 %302, i32* %j, align 4
  br label %233

; <label>:303                                     ; preds = %233
  store i32 624, i32* @idx, align 4
  call void @period_certification()
  store i32 1, i32* @initialized, align 4
  ret void
}

declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) nounwind

define internal i32 @func1(i32 %x) nounwind inlinehint {
  %1 = alloca i32, align 4
  store i32 %x, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = load i32* %1, align 4
  %4 = lshr i32 %3, 27
  %5 = xor i32 %2, %4
  %6 = mul i32 %5, 1664525
  ret i32 %6
}

define internal i32 @func2(i32 %x) nounwind inlinehint {
  %1 = alloca i32, align 4
  store i32 %x, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = load i32* %1, align 4
  %4 = lshr i32 %3, 27
  %5 = xor i32 %2, %4
  %6 = mul i32 %5, 1566083941
  ret i32 %6
}

define i32 @smp_putclass(%struct.smpType_struct* byval align 8 %type) nounwind {
  %wrapper = alloca %struct.obj_struct, align 8
  %1 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_class)
  %2 = bitcast %struct.obj_struct* %wrapper to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  %4 = extractvalue { %struct.smpType_struct*, i8* } %1, 0
  store %struct.smpType_struct* %4, %struct.smpType_struct** %3, align 1
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  %6 = extractvalue { %struct.smpType_struct*, i8* } %1, 1
  store i8* %6, i8** %5, align 1
  %7 = call noalias i8* @GC_malloc(i64 64)
  %8 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  store i8* %7, i8** %8, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  %10 = load i8** %9, align 8
  %11 = bitcast i8* %10 to %struct.smpType_struct*
  %12 = bitcast %struct.smpType_struct* %11 to i8*
  %13 = bitcast %struct.smpType_struct* %type to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 64, i32 8, i1 false)
  %14 = getelementptr inbounds %struct.smpType_struct* %type, i32 0, i32 0
  %15 = load i8** %14, align 8
  %16 = bitcast %struct.obj_struct* %wrapper to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = load i8** %19, align 1
  %21 = call i32 @scope_add(i8* %15, %struct.smpType_struct* %18, i8* %20)
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %type) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.smpType_struct*, align 8
  %obj = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %core = alloca %struct.standardcore_struct, align 8
  %5 = alloca %struct.minihash_struct, align 8
  store %struct.smpType_struct* %type, %struct.smpType_struct** %2, align 8
  %6 = load %struct.smpType_struct** %2, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %7, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  store i8* null, i8** %8, align 8
  %9 = load %struct.smpType_struct** %2, align 8
  %10 = bitcast %struct.smpType_struct* %9 to i8*
  %11 = getelementptr i8* %10, i32 12
  %12 = bitcast i8* %11 to i32*
  %13 = load i32* %12, align 4
  %14 = lshr i32 %13, 2
  %15 = and i32 %14, 3
  %16 = shl i32 %15, 30
  %17 = ashr i32 %16, 30
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %70

; <label>:19                                      ; preds = %0
  %20 = load %struct.smpType_struct** %2, align 8
  %21 = bitcast %struct.smpType_struct* %20 to i8*
  %22 = getelementptr i8* %21, i32 12
  %23 = bitcast i8* %22 to i32*
  %24 = load i32* %23, align 4
  %25 = lshr i32 %24, 1
  %26 = and i32 %25, 1
  %27 = shl i32 %26, 31
  %28 = ashr i32 %27, 31
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %62

; <label>:30                                      ; preds = %19
  %31 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %32 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = load %struct.smpType_struct** %2, align 8
  %38 = getelementptr inbounds %struct.smpType_struct* %37, i32 0, i32 0
  %39 = load i8** %38, align 8
  %40 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = load %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = load i8** %43, align 1
  %45 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %42, i8* %44, i8* getelementptr inbounds ([38 x i8]* @.str15, i32 0, i32 0), i8* %39)
  %46 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = extractvalue { %struct.smpType_struct*, i8* } %45, 0
  store %struct.smpType_struct* %48, %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = extractvalue { %struct.smpType_struct*, i8* } %45, 1
  store i8* %50, i8** %49, align 1
  %51 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = load %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = load i8** %54, align 1
  %56 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %53, i8* %55)
  %57 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = extractvalue { %struct.smpType_struct*, i8* } %56, 0
  store %struct.smpType_struct* %59, %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = extractvalue { %struct.smpType_struct*, i8* } %56, 1
  store i8* %61, i8** %60, align 1
  br label %94

; <label>:62                                      ; preds = %19
  %63 = load %struct.smpType_struct** %2, align 8
  %64 = bitcast %struct.smpType_struct* %63 to i8*
  %65 = getelementptr i8* %64, i32 12
  %66 = bitcast i8* %65 to i32*
  %67 = load i32* %66, align 4
  %68 = and i32 %67, -3
  %69 = or i32 %68, 2
  store i32 %69, i32* %66, align 4
  br label %70

; <label>:70                                      ; preds = %62, %0
  %71 = load %struct.smpType_struct** %2, align 8
  %72 = bitcast %struct.smpType_struct* %71 to i8*
  %73 = getelementptr i8* %72, i32 12
  %74 = bitcast i8* %73 to i32*
  %75 = load i32* %74, align 4
  %76 = and i32 %75, 1
  %77 = shl i32 %76, 31
  %78 = ashr i32 %77, 31
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %91

; <label>:80                                      ; preds = %70
  %81 = getelementptr inbounds %struct.standardcore_struct* %core, i32 0, i32 0
  call void @minihash_init(%struct.minihash_struct* sret %5)
  %82 = bitcast %struct.minihash_struct* %81 to i8*
  %83 = bitcast %struct.minihash_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* %83, i64 32, i32 8, i1 false)
  %84 = call noalias i8* @GC_malloc(i64 32)
  %85 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  store i8* %84, i8** %85, align 8
  %86 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %87 = load i8** %86, align 8
  %88 = bitcast i8* %87 to %struct.standardcore_struct*
  %89 = bitcast %struct.standardcore_struct* %88 to i8*
  %90 = bitcast %struct.standardcore_struct* %core to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %89, i8* %90, i64 32, i32 8, i1 false)
  br label %91

; <label>:91                                      ; preds = %80, %70
  %92 = bitcast %struct.obj_struct* %1 to i8*
  %93 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %92, i8* %93, i64 16, i32 8, i1 false)
  br label %94

; <label>:94                                      ; preds = %91, %30
  %95 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %96 = load { %struct.smpType_struct*, i8* }* %95, align 1
  ret { %struct.smpType_struct*, i8* } %96
}

declare noalias i8* @GC_malloc(i64)

declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture, i64, i32, i1) nounwind

define i32 @scope_add(i8* %name, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca i8*, align 8
  %obj = alloca %struct.obj_struct, align 8
  store i8* %name, i8** %1, align 8
  %2 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %obj.coerce1, i8** %4
  %5 = load i64* @scope_length, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %7, label %8

; <label>:7                                       ; preds = %0
  br label %13

; <label>:8                                       ; preds = %0
  %9 = load i64* @scope_length, align 8
  %10 = sub i64 %9, 1
  %11 = load %struct.minihash_struct** @scope_stack, align 8
  %12 = getelementptr inbounds %struct.minihash_struct* %11, i64 %10
  br label %13

; <label>:13                                      ; preds = %8, %7
  %14 = phi %struct.minihash_struct* [ null, %7 ], [ %12, %8 ]
  %15 = load i8** %1, align 8
  %16 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = load i8** %19, align 1
  %21 = call i32 @minihash_add(%struct.minihash_struct* %14, i8* %15, %struct.smpType_struct* %18, i8* %20)
  ret i32 %21
}

define { %struct.smpType_struct*, i8* } @smp_getclass(i8* %name) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  store i8* %name, i8** %2, align 8
  %3 = load i64* @scope_length, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  br label %11

; <label>:6                                       ; preds = %0
  %7 = load i64* @scope_length, align 8
  %8 = sub i64 %7, 1
  %9 = load %struct.minihash_struct** @scope_stack, align 8
  %10 = getelementptr inbounds %struct.minihash_struct* %9, i64 %8
  br label %11

; <label>:11                                      ; preds = %6, %5
  %12 = phi %struct.minihash_struct* [ null, %5 ], [ %10, %6 ]
  %13 = load i8** %2, align 8
  %14 = call { %struct.smpType_struct*, i8* } @minihash_get(%struct.minihash_struct* %12, i8* %13)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @minihash_get(%struct.minihash_struct* %hash, i8* %key) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.minihash_struct*, align 8
  %3 = alloca i8*, align 8
  %index = alloca i32, align 4
  %i = alloca i64, align 8
  store %struct.minihash_struct* %hash, %struct.minihash_struct** %2, align 8
  store i8* %key, i8** %3, align 8
  %4 = load %struct.minihash_struct** %2, align 8
  %5 = icmp ne %struct.minihash_struct* %4, null
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %0
  %7 = load %struct.minihash_struct** %2, align 8
  %8 = getelementptr inbounds %struct.minihash_struct* %7, i32 0, i32 0
  %9 = load %struct.miniarray_struct** %8, align 8
  %10 = icmp ne %struct.miniarray_struct* %9, null
  br i1 %10, label %13, label %11

; <label>:11                                      ; preds = %6, %0
  %12 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %80

; <label>:13                                      ; preds = %6
  %14 = load i8** %3, align 8
  %15 = call i32 @minihash_function(i8* %14)
  %16 = sext i32 %15 to i64
  %17 = load %struct.minihash_struct** %2, align 8
  %18 = getelementptr inbounds %struct.minihash_struct* %17, i32 0, i32 1
  %19 = load i64* %18, align 8
  %20 = urem i64 %16, %19
  %21 = trunc i64 %20 to i32
  store i32 %21, i32* %index, align 4
  %22 = load i32* %index, align 4
  %23 = sext i32 %22 to i64
  %24 = load %struct.minihash_struct** %2, align 8
  %25 = getelementptr inbounds %struct.minihash_struct* %24, i32 0, i32 0
  %26 = load %struct.miniarray_struct** %25, align 8
  %27 = getelementptr inbounds %struct.miniarray_struct* %26, i64 %23
  %28 = getelementptr inbounds %struct.miniarray_struct* %27, i32 0, i32 0
  %29 = load %struct.minipair_struct** %28, align 8
  %30 = icmp ne %struct.minipair_struct* %29, null
  br i1 %30, label %31, label %78

; <label>:31                                      ; preds = %13
  store i64 0, i64* %i, align 8
  br label %32

; <label>:32                                      ; preds = %74, %31
  %33 = load i64* %i, align 8
  %34 = load i32* %index, align 4
  %35 = sext i32 %34 to i64
  %36 = load %struct.minihash_struct** %2, align 8
  %37 = getelementptr inbounds %struct.minihash_struct* %36, i32 0, i32 0
  %38 = load %struct.miniarray_struct** %37, align 8
  %39 = getelementptr inbounds %struct.miniarray_struct* %38, i64 %35
  %40 = getelementptr inbounds %struct.miniarray_struct* %39, i32 0, i32 1
  %41 = load i64* %40, align 8
  %42 = icmp ult i64 %33, %41
  br i1 %42, label %43, label %77

; <label>:43                                      ; preds = %32
  %44 = load i64* %i, align 8
  %45 = load i32* %index, align 4
  %46 = sext i32 %45 to i64
  %47 = load %struct.minihash_struct** %2, align 8
  %48 = getelementptr inbounds %struct.minihash_struct* %47, i32 0, i32 0
  %49 = load %struct.miniarray_struct** %48, align 8
  %50 = getelementptr inbounds %struct.miniarray_struct* %49, i64 %46
  %51 = getelementptr inbounds %struct.miniarray_struct* %50, i32 0, i32 0
  %52 = load %struct.minipair_struct** %51, align 8
  %53 = getelementptr inbounds %struct.minipair_struct* %52, i64 %44
  %54 = getelementptr inbounds %struct.minipair_struct* %53, i32 0, i32 0
  %55 = load i8** %54, align 8
  %56 = load i8** %3, align 8
  %57 = call i32 @strcmp(i8* %55, i8* %56)
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %73

; <label>:59                                      ; preds = %43
  %60 = load i64* %i, align 8
  %61 = load i32* %index, align 4
  %62 = sext i32 %61 to i64
  %63 = load %struct.minihash_struct** %2, align 8
  %64 = getelementptr inbounds %struct.minihash_struct* %63, i32 0, i32 0
  %65 = load %struct.miniarray_struct** %64, align 8
  %66 = getelementptr inbounds %struct.miniarray_struct* %65, i64 %62
  %67 = getelementptr inbounds %struct.miniarray_struct* %66, i32 0, i32 0
  %68 = load %struct.minipair_struct** %67, align 8
  %69 = getelementptr inbounds %struct.minipair_struct* %68, i64 %60
  %70 = getelementptr inbounds %struct.minipair_struct* %69, i32 0, i32 1
  %71 = bitcast %struct.obj_struct* %1 to i8*
  %72 = bitcast %struct.obj_struct* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %71, i8* %72, i64 16, i32 8, i1 false)
  br label %80

; <label>:73                                      ; preds = %43
  br label %74

; <label>:74                                      ; preds = %73
  %75 = load i64* %i, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %i, align 8
  br label %32

; <label>:77                                      ; preds = %32
  br label %78

; <label>:78                                      ; preds = %77, %13
  %79 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %80

; <label>:80                                      ; preds = %78, %59, %11
  %81 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %82 = load { %struct.smpType_struct*, i8* }* %81, align 1
  ret { %struct.smpType_struct*, i8* } %82
}

define { %struct.smpType_struct*, i8* } @smp_abstract_function(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str9, i32 0, i32 0))
  %10 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %17, i8* %19, i8* getelementptr inbounds ([34 x i8]* @.str10, i32 0, i32 0))
  %21 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = extractvalue { %struct.smpType_struct*, i8* } %20, 0
  store %struct.smpType_struct* %23, %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = extractvalue { %struct.smpType_struct*, i8* } %20, 1
  store i8* %25, i8** %24, align 1
  %26 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %28, i8* %30)
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = load { %struct.smpType_struct*, i8* }* %37, align 1
  ret { %struct.smpType_struct*, i8* } %38
}

define { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %exc.coerce0, i8* %exc.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %exc = alloca %struct.obj_struct, align 8
  %thrown = alloca %struct.obj_struct, align 8
  %2 = bitcast %struct.obj_struct* %exc to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %exc.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %exc.coerce1, i8** %4
  %5 = bitcast %struct.obj_struct* %exc to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  %7 = load %struct.smpType_struct** %6, align 1
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  %9 = load i8** %8, align 1
  %10 = call { %struct.smpType_struct*, i8* } @smpThrown_init(i32 0, %struct.smpType_struct* %7, i8* %9)
  %11 = bitcast %struct.obj_struct* %thrown to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = extractvalue { %struct.smpType_struct*, i8* } %10, 0
  store %struct.smpType_struct* %13, %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = extractvalue { %struct.smpType_struct*, i8* } %10, 1
  store i8* %15, i8** %14, align 1
  %16 = bitcast %struct.obj_struct* %1 to i8*
  %17 = bitcast %struct.obj_struct* %thrown to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 16, i32 8, i1 false)
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpException_init_fmt(%struct.smpType_struct* %type.coerce0, i8* %type.coerce1, i8* %fmt, ...) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %type = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %res = alloca %struct.obj_struct, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %3 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %type.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %type.coerce1, i8** %5
  store i8* %fmt, i8** %2, align 8
  %6 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  %8 = load %struct.smpType_struct** %7, align 1
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  %10 = load i8** %9, align 1
  %11 = call { %struct.smpType_struct*, i8* } @smpException_init(%struct.smpType_struct* %8, i8* %10)
  %12 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %18 = bitcast %struct.__va_list_tag* %17 to i8*
  call void @llvm.va_start(i8* %18)
  %19 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %20 = load i8** %19, align 8
  %21 = bitcast i8* %20 to %struct.smpException_struct*
  %22 = getelementptr inbounds %struct.smpException_struct* %21, i32 0, i32 0
  %23 = load i8** %2, align 8
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %25 = call i32 @vasprintf(i8** %22, i8* %23, %struct.__va_list_tag* %24)
  %26 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %27 = bitcast %struct.__va_list_tag* %26 to i8*
  call void @llvm.va_end(i8* %27)
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  %30 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %31 = load { %struct.smpType_struct*, i8* }* %30, align 1
  ret { %struct.smpType_struct*, i8* } %31
}

define { %struct.smpType_struct*, i8* } @smp_unimplemented_function(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str9, i32 0, i32 0))
  %10 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %17, i8* %19, i8* getelementptr inbounds ([31 x i8]* @.str11, i32 0, i32 0))
  %21 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = extractvalue { %struct.smpType_struct*, i8* } %20, 0
  store %struct.smpType_struct* %23, %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = extractvalue { %struct.smpType_struct*, i8* } %20, 1
  store i8* %25, i8** %24, align 1
  %26 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %28, i8* %30)
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = load { %struct.smpType_struct*, i8* }* %37, align 1
  ret { %struct.smpType_struct*, i8* } %38
}

define void @minihash_init(%struct.minihash_struct* noalias sret %agg.result) nounwind {
  call void @minihash_init_capacity(%struct.minihash_struct* sret %agg.result, i64 10)
  ret void
}

define void @minihash_init_capacity(%struct.minihash_struct* noalias sret %agg.result, i64 %capacity) nounwind {
  %1 = alloca i64, align 8
  %hash = alloca %struct.minihash_struct, align 8
  store i64 %capacity, i64* %1, align 8
  %2 = load i64* %1, align 8
  %3 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 1
  store i64 %2, i64* %3, align 8
  %4 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 1
  %5 = load i64* %4, align 8
  %6 = mul i64 16, %5
  %7 = call noalias i8* @GC_malloc(i64 %6)
  %8 = bitcast i8* %7 to %struct.miniarray_struct*
  %9 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 0
  store %struct.miniarray_struct* %8, %struct.miniarray_struct** %9, align 8
  %10 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 0
  %11 = load %struct.miniarray_struct** %10, align 8
  %12 = bitcast %struct.miniarray_struct* %11 to i8*
  %13 = call i64 @llvm.objectsize.i64(i8* %12, i1 false)
  %14 = icmp ne i64 %13, -1
  br i1 %14, label %15, label %27

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 0
  %17 = load %struct.miniarray_struct** %16, align 8
  %18 = bitcast %struct.miniarray_struct* %17 to i8*
  %19 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 1
  %20 = load i64* %19, align 8
  %21 = mul i64 16, %20
  %22 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 0
  %23 = load %struct.miniarray_struct** %22, align 8
  %24 = bitcast %struct.miniarray_struct* %23 to i8*
  %25 = call i64 @llvm.objectsize.i64(i8* %24, i1 false)
  %26 = call i8* @__memset_chk(i8* %18, i32 0, i64 %21, i64 %25) nounwind
  br label %35

; <label>:27                                      ; preds = %0
  %28 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 0
  %29 = load %struct.miniarray_struct** %28, align 8
  %30 = bitcast %struct.miniarray_struct* %29 to i8*
  %31 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 1
  %32 = load i64* %31, align 8
  %33 = mul i64 16, %32
  %34 = call i8* @__inline_memset_chk(i8* %30, i32 0, i64 %33)
  br label %35

; <label>:35                                      ; preds = %27, %15
  %36 = phi i8* [ %26, %15 ], [ %34, %27 ]
  %37 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 2
  store i64 0, i64* %37, align 8
  %38 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 3
  store i64 0, i64* %38, align 8
  %39 = bitcast %struct.minihash_struct* %agg.result to i8*
  %40 = bitcast %struct.minihash_struct* %hash to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 32, i32 8, i1 false)
  ret void
}

declare i64 @llvm.objectsize.i64(i8*, i1) nounwind readnone

declare i8* @__memset_chk(i8*, i32, i64, i64) nounwind

define internal i8* @__inline_memset_chk(i8* %__dest, i32 %__val, i64 %__len) nounwind inlinehint {
  %1 = alloca i8*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  store i8* %__dest, i8** %1, align 8
  store i32 %__val, i32* %2, align 4
  store i64 %__len, i64* %3, align 8
  %4 = load i8** %1, align 8
  %5 = load i32* %2, align 4
  %6 = load i64* %3, align 8
  %7 = load i8** %1, align 8
  %8 = call i64 @llvm.objectsize.i64(i8* %7, i1 false)
  %9 = call i8* @__memset_chk(i8* %4, i32 %5, i64 %6, i64 %8) nounwind
  ret i8* %9
}

define i32 @minihash_clear(%struct.minihash_struct* %hash) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.minihash_struct*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store %struct.minihash_struct* %hash, %struct.minihash_struct** %2, align 8
  %3 = load %struct.minihash_struct** %2, align 8
  %4 = getelementptr inbounds %struct.minihash_struct* %3, i32 0, i32 0
  %5 = load %struct.miniarray_struct** %4, align 8
  %6 = icmp ne %struct.miniarray_struct* %5, null
  br i1 %6, label %8, label %7

; <label>:7                                       ; preds = %0
  store i32 0, i32* %1
  br label %94

; <label>:8                                       ; preds = %0
  store i64 0, i64* %i, align 8
  br label %9

; <label>:9                                       ; preds = %80, %8
  %10 = load i64* %i, align 8
  %11 = load %struct.minihash_struct** %2, align 8
  %12 = getelementptr inbounds %struct.minihash_struct* %11, i32 0, i32 1
  %13 = load i64* %12, align 8
  %14 = icmp ult i64 %10, %13
  br i1 %14, label %15, label %83

; <label>:15                                      ; preds = %9
  %16 = load i64* %i, align 8
  %17 = load %struct.minihash_struct** %2, align 8
  %18 = getelementptr inbounds %struct.minihash_struct* %17, i32 0, i32 0
  %19 = load %struct.miniarray_struct** %18, align 8
  %20 = getelementptr inbounds %struct.miniarray_struct* %19, i64 %16
  %21 = getelementptr inbounds %struct.miniarray_struct* %20, i32 0, i32 0
  %22 = load %struct.minipair_struct** %21, align 8
  %23 = icmp ne %struct.minipair_struct* %22, null
  br i1 %23, label %24, label %79

; <label>:24                                      ; preds = %15
  store i64 0, i64* %j, align 8
  br label %25

; <label>:25                                      ; preds = %61, %24
  %26 = load i64* %j, align 8
  %27 = load i64* %i, align 8
  %28 = load %struct.minihash_struct** %2, align 8
  %29 = getelementptr inbounds %struct.minihash_struct* %28, i32 0, i32 0
  %30 = load %struct.miniarray_struct** %29, align 8
  %31 = getelementptr inbounds %struct.miniarray_struct* %30, i64 %27
  %32 = getelementptr inbounds %struct.miniarray_struct* %31, i32 0, i32 1
  %33 = load i64* %32, align 8
  %34 = icmp ult i64 %26, %33
  br i1 %34, label %35, label %64

; <label>:35                                      ; preds = %25
  %36 = load i64* %j, align 8
  %37 = load i64* %i, align 8
  %38 = load %struct.minihash_struct** %2, align 8
  %39 = getelementptr inbounds %struct.minihash_struct* %38, i32 0, i32 0
  %40 = load %struct.miniarray_struct** %39, align 8
  %41 = getelementptr inbounds %struct.miniarray_struct* %40, i64 %37
  %42 = getelementptr inbounds %struct.miniarray_struct* %41, i32 0, i32 0
  %43 = load %struct.minipair_struct** %42, align 8
  %44 = getelementptr inbounds %struct.minipair_struct* %43, i64 %36
  %45 = getelementptr inbounds %struct.minipair_struct* %44, i32 0, i32 0
  %46 = load i8** %45, align 8
  %47 = icmp ne i8* %46, null
  br i1 %47, label %48, label %60

; <label>:48                                      ; preds = %35
  %49 = load i64* %j, align 8
  %50 = load i64* %i, align 8
  %51 = load %struct.minihash_struct** %2, align 8
  %52 = getelementptr inbounds %struct.minihash_struct* %51, i32 0, i32 0
  %53 = load %struct.miniarray_struct** %52, align 8
  %54 = getelementptr inbounds %struct.miniarray_struct* %53, i64 %50
  %55 = getelementptr inbounds %struct.miniarray_struct* %54, i32 0, i32 0
  %56 = load %struct.minipair_struct** %55, align 8
  %57 = getelementptr inbounds %struct.minipair_struct* %56, i64 %49
  %58 = getelementptr inbounds %struct.minipair_struct* %57, i32 0, i32 0
  %59 = load i8** %58, align 8
  call void @GC_free(i8* %59)
  br label %60

; <label>:60                                      ; preds = %48, %35
  br label %61

; <label>:61                                      ; preds = %60
  %62 = load i64* %j, align 8
  %63 = add i64 %62, 1
  store i64 %63, i64* %j, align 8
  br label %25

; <label>:64                                      ; preds = %25
  %65 = load i64* %i, align 8
  %66 = load %struct.minihash_struct** %2, align 8
  %67 = getelementptr inbounds %struct.minihash_struct* %66, i32 0, i32 0
  %68 = load %struct.miniarray_struct** %67, align 8
  %69 = getelementptr inbounds %struct.miniarray_struct* %68, i64 %65
  %70 = getelementptr inbounds %struct.miniarray_struct* %69, i32 0, i32 0
  %71 = load %struct.minipair_struct** %70, align 8
  %72 = bitcast %struct.minipair_struct* %71 to i8*
  call void @GC_free(i8* %72)
  %73 = load i64* %i, align 8
  %74 = load %struct.minihash_struct** %2, align 8
  %75 = getelementptr inbounds %struct.minihash_struct* %74, i32 0, i32 0
  %76 = load %struct.miniarray_struct** %75, align 8
  %77 = getelementptr inbounds %struct.miniarray_struct* %76, i64 %73
  %78 = getelementptr inbounds %struct.miniarray_struct* %77, i32 0, i32 1
  store i64 0, i64* %78, align 8
  br label %79

; <label>:79                                      ; preds = %64, %15
  br label %80

; <label>:80                                      ; preds = %79
  %81 = load i64* %i, align 8
  %82 = add i64 %81, 1
  store i64 %82, i64* %i, align 8
  br label %9

; <label>:83                                      ; preds = %9
  %84 = load %struct.minihash_struct** %2, align 8
  %85 = getelementptr inbounds %struct.minihash_struct* %84, i32 0, i32 0
  %86 = load %struct.miniarray_struct** %85, align 8
  %87 = bitcast %struct.miniarray_struct* %86 to i8*
  call void @GC_free(i8* %87)
  %88 = load %struct.minihash_struct** %2, align 8
  %89 = getelementptr inbounds %struct.minihash_struct* %88, i32 0, i32 3
  store i64 0, i64* %89, align 8
  %90 = load %struct.minihash_struct** %2, align 8
  %91 = getelementptr inbounds %struct.minihash_struct* %90, i32 0, i32 2
  store i64 0, i64* %91, align 8
  %92 = load %struct.minihash_struct** %2, align 8
  %93 = getelementptr inbounds %struct.minihash_struct* %92, i32 0, i32 1
  store i64 0, i64* %93, align 8
  store i32 0, i32* %1
  br label %94

; <label>:94                                      ; preds = %83, %7
  %95 = load i32* %1
  ret i32 %95
}

declare void @GC_free(i8*)

define i32 @minihash_fullclear(%struct.minihash_struct* %hash) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.minihash_struct*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %3 = alloca %struct.obj_struct, align 8
  store %struct.minihash_struct* %hash, %struct.minihash_struct** %2, align 8
  %4 = load %struct.minihash_struct** %2, align 8
  %5 = getelementptr inbounds %struct.minihash_struct* %4, i32 0, i32 0
  %6 = load %struct.miniarray_struct** %5, align 8
  %7 = icmp ne %struct.miniarray_struct* %6, null
  br i1 %7, label %9, label %8

; <label>:8                                       ; preds = %0
  store i32 0, i32* %1
  br label %126

; <label>:9                                       ; preds = %0
  store i64 0, i64* %i, align 8
  br label %10

; <label>:10                                      ; preds = %112, %9
  %11 = load i64* %i, align 8
  %12 = load %struct.minihash_struct** %2, align 8
  %13 = getelementptr inbounds %struct.minihash_struct* %12, i32 0, i32 1
  %14 = load i64* %13, align 8
  %15 = icmp ult i64 %11, %14
  br i1 %15, label %16, label %115

; <label>:16                                      ; preds = %10
  %17 = load i64* %i, align 8
  %18 = load %struct.minihash_struct** %2, align 8
  %19 = getelementptr inbounds %struct.minihash_struct* %18, i32 0, i32 0
  %20 = load %struct.miniarray_struct** %19, align 8
  %21 = getelementptr inbounds %struct.miniarray_struct* %20, i64 %17
  %22 = getelementptr inbounds %struct.miniarray_struct* %21, i32 0, i32 0
  %23 = load %struct.minipair_struct** %22, align 8
  %24 = icmp ne %struct.minipair_struct* %23, null
  br i1 %24, label %25, label %111

; <label>:25                                      ; preds = %16
  store i64 0, i64* %j, align 8
  br label %26

; <label>:26                                      ; preds = %93, %25
  %27 = load i64* %j, align 8
  %28 = load i64* %i, align 8
  %29 = load %struct.minihash_struct** %2, align 8
  %30 = getelementptr inbounds %struct.minihash_struct* %29, i32 0, i32 0
  %31 = load %struct.miniarray_struct** %30, align 8
  %32 = getelementptr inbounds %struct.miniarray_struct* %31, i64 %28
  %33 = getelementptr inbounds %struct.miniarray_struct* %32, i32 0, i32 1
  %34 = load i64* %33, align 8
  %35 = icmp ult i64 %27, %34
  br i1 %35, label %36, label %96

; <label>:36                                      ; preds = %26
  %37 = load i64* %j, align 8
  %38 = load i64* %i, align 8
  %39 = load %struct.minihash_struct** %2, align 8
  %40 = getelementptr inbounds %struct.minihash_struct* %39, i32 0, i32 0
  %41 = load %struct.miniarray_struct** %40, align 8
  %42 = getelementptr inbounds %struct.miniarray_struct* %41, i64 %38
  %43 = getelementptr inbounds %struct.miniarray_struct* %42, i32 0, i32 0
  %44 = load %struct.minipair_struct** %43, align 8
  %45 = getelementptr inbounds %struct.minipair_struct* %44, i64 %37
  %46 = getelementptr inbounds %struct.minipair_struct* %45, i32 0, i32 0
  %47 = load i8** %46, align 8
  %48 = icmp ne i8* %47, null
  br i1 %48, label %49, label %61

; <label>:49                                      ; preds = %36
  %50 = load i64* %j, align 8
  %51 = load i64* %i, align 8
  %52 = load %struct.minihash_struct** %2, align 8
  %53 = getelementptr inbounds %struct.minihash_struct* %52, i32 0, i32 0
  %54 = load %struct.miniarray_struct** %53, align 8
  %55 = getelementptr inbounds %struct.miniarray_struct* %54, i64 %51
  %56 = getelementptr inbounds %struct.miniarray_struct* %55, i32 0, i32 0
  %57 = load %struct.minipair_struct** %56, align 8
  %58 = getelementptr inbounds %struct.minipair_struct* %57, i64 %50
  %59 = getelementptr inbounds %struct.minipair_struct* %58, i32 0, i32 0
  %60 = load i8** %59, align 8
  call void @GC_free(i8* %60)
  br label %61

; <label>:61                                      ; preds = %49, %36
  %62 = load i64* %j, align 8
  %63 = load i64* %i, align 8
  %64 = load %struct.minihash_struct** %2, align 8
  %65 = getelementptr inbounds %struct.minihash_struct* %64, i32 0, i32 0
  %66 = load %struct.miniarray_struct** %65, align 8
  %67 = getelementptr inbounds %struct.miniarray_struct* %66, i64 %63
  %68 = getelementptr inbounds %struct.miniarray_struct* %67, i32 0, i32 0
  %69 = load %struct.minipair_struct** %68, align 8
  %70 = getelementptr inbounds %struct.minipair_struct* %69, i64 %62
  %71 = getelementptr inbounds %struct.minipair_struct* %70, i32 0, i32 1
  %72 = getelementptr inbounds %struct.obj_struct* %71, i32 0, i32 1
  %73 = load i8** %72, align 8
  %74 = icmp ne i8* %73, null
  br i1 %74, label %75, label %92

; <label>:75                                      ; preds = %61
  %76 = load i64* %j, align 8
  %77 = load i64* %i, align 8
  %78 = load %struct.minihash_struct** %2, align 8
  %79 = getelementptr inbounds %struct.minihash_struct* %78, i32 0, i32 0
  %80 = load %struct.miniarray_struct** %79, align 8
  %81 = getelementptr inbounds %struct.miniarray_struct* %80, i64 %77
  %82 = getelementptr inbounds %struct.miniarray_struct* %81, i32 0, i32 0
  %83 = load %struct.minipair_struct** %82, align 8
  %84 = getelementptr inbounds %struct.minipair_struct* %83, i64 %76
  %85 = getelementptr inbounds %struct.minipair_struct* %84, i32 0, i32 1
  %86 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %85)
  %87 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = extractvalue { %struct.smpType_struct*, i8* } %86, 0
  store %struct.smpType_struct* %89, %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = extractvalue { %struct.smpType_struct*, i8* } %86, 1
  store i8* %91, i8** %90, align 1
  br label %92

; <label>:92                                      ; preds = %75, %61
  br label %93

; <label>:93                                      ; preds = %92
  %94 = load i64* %j, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %j, align 8
  br label %26

; <label>:96                                      ; preds = %26
  %97 = load i64* %i, align 8
  %98 = load %struct.minihash_struct** %2, align 8
  %99 = getelementptr inbounds %struct.minihash_struct* %98, i32 0, i32 0
  %100 = load %struct.miniarray_struct** %99, align 8
  %101 = getelementptr inbounds %struct.miniarray_struct* %100, i64 %97
  %102 = getelementptr inbounds %struct.miniarray_struct* %101, i32 0, i32 0
  %103 = load %struct.minipair_struct** %102, align 8
  %104 = bitcast %struct.minipair_struct* %103 to i8*
  call void @GC_free(i8* %104)
  %105 = load i64* %i, align 8
  %106 = load %struct.minihash_struct** %2, align 8
  %107 = getelementptr inbounds %struct.minihash_struct* %106, i32 0, i32 0
  %108 = load %struct.miniarray_struct** %107, align 8
  %109 = getelementptr inbounds %struct.miniarray_struct* %108, i64 %105
  %110 = getelementptr inbounds %struct.miniarray_struct* %109, i32 0, i32 1
  store i64 0, i64* %110, align 8
  br label %111

; <label>:111                                     ; preds = %96, %16
  br label %112

; <label>:112                                     ; preds = %111
  %113 = load i64* %i, align 8
  %114 = add i64 %113, 1
  store i64 %114, i64* %i, align 8
  br label %10

; <label>:115                                     ; preds = %10
  %116 = load %struct.minihash_struct** %2, align 8
  %117 = getelementptr inbounds %struct.minihash_struct* %116, i32 0, i32 0
  %118 = load %struct.miniarray_struct** %117, align 8
  %119 = bitcast %struct.miniarray_struct* %118 to i8*
  call void @GC_free(i8* %119)
  %120 = load %struct.minihash_struct** %2, align 8
  %121 = getelementptr inbounds %struct.minihash_struct* %120, i32 0, i32 3
  store i64 0, i64* %121, align 8
  %122 = load %struct.minihash_struct** %2, align 8
  %123 = getelementptr inbounds %struct.minihash_struct* %122, i32 0, i32 2
  store i64 0, i64* %123, align 8
  %124 = load %struct.minihash_struct** %2, align 8
  %125 = getelementptr inbounds %struct.minihash_struct* %124, i32 0, i32 1
  store i64 0, i64* %125, align 8
  store i32 0, i32* %1
  br label %126

; <label>:126                                     ; preds = %115, %8
  %127 = load i32* %1
  ret i32 %127
}

define { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %obj) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %3 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %obj, %struct.obj_struct** %2, align 8
  %4 = load %struct.obj_struct** %2, align 8
  %5 = getelementptr inbounds %struct.obj_struct* %4, i32 0, i32 0
  %6 = load %struct.smpType_struct** %5, align 8
  %7 = bitcast %struct.smpType_struct* %6 to i8*
  %8 = getelementptr i8* %7, i32 12
  %9 = bitcast i8* %8 to i32*
  %10 = load i32* %9, align 4
  %11 = lshr i32 %10, 2
  %12 = and i32 %11, 3
  %13 = shl i32 %12, 30
  %14 = ashr i32 %13, 30
  %15 = icmp eq i32 %14, 1
  br i1 %15, label %16, label %18

; <label>:16                                      ; preds = %0
  %17 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %41

; <label>:18                                      ; preds = %0
  %19 = load %struct.obj_struct** %2, align 8
  %20 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 1
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 1
  %24 = load i8** %23, align 1
  %25 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %22, i8* %24, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %26 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = extractvalue { %struct.smpType_struct*, i8* } %25, 0
  store %struct.smpType_struct* %28, %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = extractvalue { %struct.smpType_struct*, i8* } %25, 1
  store i8* %30, i8** %29, align 1
  %31 = load %struct.obj_struct** %2, align 8
  %32 = getelementptr inbounds %struct.obj_struct* %31, i32 0, i32 1
  %33 = load i8** %32, align 8
  call void @GC_free(i8* %33)
  %34 = load %struct.obj_struct** %2, align 8
  %35 = getelementptr inbounds %struct.obj_struct* %34, i32 0, i32 0
  store %struct.smpType_struct* null, %struct.smpType_struct** %35, align 8
  %36 = load %struct.obj_struct** %2, align 8
  %37 = getelementptr inbounds %struct.obj_struct* %36, i32 0, i32 1
  store i8* null, i8** %37, align 8
  %38 = load %struct.obj_struct** %2, align 8
  %39 = bitcast %struct.obj_struct* %1 to i8*
  %40 = bitcast %struct.obj_struct* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false)
  br label %41

; <label>:41                                      ; preds = %18, %16
  %42 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %43 = load { %struct.smpType_struct*, i8* }* %42, align 1
  ret { %struct.smpType_struct*, i8* } %43
}

define i32 @minihash_function(i8* %key) nounwind {
  %1 = alloca i8*, align 8
  %hash = alloca i32, align 4
  store i8* %key, i8** %1, align 8
  store i32 5381, i32* %hash, align 4
  %2 = load i8** %1, align 8
  %3 = getelementptr inbounds i8* %2, i32 -1
  store i8* %3, i8** %1, align 8
  br label %4

; <label>:4                                       ; preds = %9, %0
  %5 = load i8** %1, align 8
  %6 = getelementptr inbounds i8* %5, i32 1
  store i8* %6, i8** %1, align 8
  %7 = load i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %9, label %18

; <label>:9                                       ; preds = %4
  %10 = load i32* %hash, align 4
  %11 = shl i32 %10, 5
  %12 = load i32* %hash, align 4
  %13 = add nsw i32 %11, %12
  %14 = load i8** %1, align 8
  %15 = load i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = xor i32 %13, %16
  store i32 %17, i32* %hash, align 4
  br label %4

; <label>:18                                      ; preds = %4
  %19 = load i32* %hash, align 4
  ret i32 %19
}

define i32 @minihash_add(%struct.minihash_struct* %hash, i8* %key, %struct.smpType_struct* %val.coerce0, i8* %val.coerce1) nounwind {
  %1 = alloca %struct.minihash_struct*, align 8
  %2 = alloca i8*, align 8
  %val = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.minihash_struct, align 8
  %index = alloca i32, align 4
  %pair = alloca %struct.minipair_struct, align 8
  %hash2 = alloca %struct.minihash_struct, align 8
  store %struct.minihash_struct* %hash, %struct.minihash_struct** %1, align 8
  store i8* %key, i8** %2, align 8
  %4 = bitcast %struct.obj_struct* %val to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %val.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %val.coerce1, i8** %6
  %7 = load %struct.minihash_struct** %1, align 8
  %8 = getelementptr inbounds %struct.minihash_struct* %7, i32 0, i32 0
  %9 = load %struct.miniarray_struct** %8, align 8
  %10 = icmp ne %struct.miniarray_struct* %9, null
  br i1 %10, label %15, label %11

; <label>:11                                      ; preds = %0
  %12 = load %struct.minihash_struct** %1, align 8
  call void @minihash_init(%struct.minihash_struct* sret %3)
  %13 = bitcast %struct.minihash_struct* %12 to i8*
  %14 = bitcast %struct.minihash_struct* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 32, i32 8, i1 false)
  br label %15

; <label>:15                                      ; preds = %11, %0
  %16 = load i8** %2, align 8
  %17 = call i32 @minihash_function(i8* %16)
  %18 = sext i32 %17 to i64
  %19 = load %struct.minihash_struct** %1, align 8
  %20 = getelementptr inbounds %struct.minihash_struct* %19, i32 0, i32 1
  %21 = load i64* %20, align 8
  %22 = urem i64 %18, %21
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* %index, align 4
  %24 = load i8** %2, align 8
  %25 = call i64 @strlen(i8* %24)
  %26 = add i64 %25, 1
  %27 = mul i64 1, %26
  %28 = call noalias i8* @GC_malloc(i64 %27)
  %29 = getelementptr inbounds %struct.minipair_struct* %pair, i32 0, i32 0
  store i8* %28, i8** %29, align 8
  %30 = getelementptr inbounds %struct.minipair_struct* %pair, i32 0, i32 0
  %31 = load i8** %30, align 8
  %32 = call i64 @llvm.objectsize.i64(i8* %31, i1 false)
  %33 = icmp ne i64 %32, -1
  br i1 %33, label %34, label %42

; <label>:34                                      ; preds = %15
  %35 = getelementptr inbounds %struct.minipair_struct* %pair, i32 0, i32 0
  %36 = load i8** %35, align 8
  %37 = load i8** %2, align 8
  %38 = getelementptr inbounds %struct.minipair_struct* %pair, i32 0, i32 0
  %39 = load i8** %38, align 8
  %40 = call i64 @llvm.objectsize.i64(i8* %39, i1 false)
  %41 = call i8* @__strcpy_chk(i8* %36, i8* %37, i64 %40) nounwind
  br label %47

; <label>:42                                      ; preds = %15
  %43 = getelementptr inbounds %struct.minipair_struct* %pair, i32 0, i32 0
  %44 = load i8** %43, align 8
  %45 = load i8** %2, align 8
  %46 = call i8* @__inline_strcpy_chk(i8* %44, i8* %45)
  br label %47

; <label>:47                                      ; preds = %42, %34
  %48 = phi i8* [ %41, %34 ], [ %46, %42 ]
  %49 = getelementptr inbounds %struct.minipair_struct* %pair, i32 0, i32 1
  %50 = bitcast %struct.obj_struct* %49 to i8*
  %51 = bitcast %struct.obj_struct* %val to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 16, i32 8, i1 false)
  %52 = load i32* %index, align 4
  %53 = sext i32 %52 to i64
  %54 = load %struct.minihash_struct** %1, align 8
  %55 = getelementptr inbounds %struct.minihash_struct* %54, i32 0, i32 0
  %56 = load %struct.miniarray_struct** %55, align 8
  %57 = getelementptr inbounds %struct.miniarray_struct* %56, i64 %53
  %58 = getelementptr inbounds %struct.miniarray_struct* %57, i32 0, i32 0
  %59 = load %struct.minipair_struct** %58, align 8
  %60 = icmp ne %struct.minipair_struct* %59, null
  br i1 %60, label %66, label %61

; <label>:61                                      ; preds = %47
  %62 = load %struct.minihash_struct** %1, align 8
  %63 = getelementptr inbounds %struct.minihash_struct* %62, i32 0, i32 2
  %64 = load i64* %63, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %63, align 8
  br label %66

; <label>:66                                      ; preds = %61, %47
  %67 = load i32* %index, align 4
  %68 = sext i32 %67 to i64
  %69 = load %struct.minihash_struct** %1, align 8
  %70 = getelementptr inbounds %struct.minihash_struct* %69, i32 0, i32 0
  %71 = load %struct.miniarray_struct** %70, align 8
  %72 = getelementptr inbounds %struct.miniarray_struct* %71, i64 %68
  %73 = call i32 @miniarray_push(%struct.miniarray_struct* %72, %struct.minipair_struct* byval align 8 %pair)
  %74 = load %struct.minihash_struct** %1, align 8
  %75 = getelementptr inbounds %struct.minihash_struct* %74, i32 0, i32 3
  %76 = load i64* %75, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %75, align 8
  %78 = load %struct.minihash_struct** %1, align 8
  %79 = getelementptr inbounds %struct.minihash_struct* %78, i32 0, i32 2
  %80 = load i64* %79, align 8
  %81 = load %struct.minihash_struct** %1, align 8
  %82 = getelementptr inbounds %struct.minihash_struct* %81, i32 0, i32 1
  %83 = load i64* %82, align 8
  %84 = udiv i64 %80, %83
  %85 = uitofp i64 %84 to double
  %86 = fcmp ogt double %85, 7.500000e-01
  br i1 %86, label %87, label %102

; <label>:87                                      ; preds = %66
  %88 = load %struct.minihash_struct** %1, align 8
  %89 = getelementptr inbounds %struct.minihash_struct* %88, i32 0, i32 1
  %90 = load i64* %89, align 8
  %91 = uitofp i64 %90 to double
  %92 = fmul double %91, 7.500000e-01
  %93 = fdiv double %92, 2.500000e-01
  %94 = fptoui double %93 to i64
  call void @minihash_init_capacity(%struct.minihash_struct* sret %hash2, i64 %94)
  %95 = load %struct.minihash_struct** %1, align 8
  %96 = call i32 @minihash_copy(%struct.minihash_struct* %hash2, %struct.minihash_struct* %95)
  %97 = load %struct.minihash_struct** %1, align 8
  %98 = call i32 @minihash_clear(%struct.minihash_struct* %97)
  %99 = load %struct.minihash_struct** %1, align 8
  %100 = bitcast %struct.minihash_struct* %99 to i8*
  %101 = bitcast %struct.minihash_struct* %hash2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* %101, i64 32, i32 8, i1 false)
  br label %102

; <label>:102                                     ; preds = %87, %66
  ret i32 0
}

declare i64 @strlen(i8*)

declare i8* @__strcpy_chk(i8*, i8*, i64) nounwind

define internal i8* @__inline_strcpy_chk(i8* noalias %__dest, i8* noalias %__src) nounwind inlinehint {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  store i8* %__dest, i8** %1, align 8
  store i8* %__src, i8** %2, align 8
  %3 = load i8** %1, align 8
  %4 = load i8** %2, align 8
  %5 = load i8** %1, align 8
  %6 = call i64 @llvm.objectsize.i64(i8* %5, i1 false)
  %7 = call i8* @__strcpy_chk(i8* %3, i8* %4, i64 %6) nounwind
  ret i8* %7
}

define i32 @miniarray_push(%struct.miniarray_struct* %arr, %struct.minipair_struct* byval align 8 %pair) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.miniarray_struct*, align 8
  %i = alloca i64, align 8
  store %struct.miniarray_struct* %arr, %struct.miniarray_struct** %2, align 8
  %3 = load %struct.miniarray_struct** %2, align 8
  %4 = getelementptr inbounds %struct.miniarray_struct* %3, i32 0, i32 0
  %5 = load %struct.minipair_struct** %4, align 8
  %6 = icmp ne %struct.minipair_struct* %5, null
  br i1 %6, label %16, label %7

; <label>:7                                       ; preds = %0
  %8 = call i64 @next_power_of_2(i64 1)
  %9 = mul i64 24, %8
  %10 = call noalias i8* @GC_malloc(i64 %9)
  %11 = bitcast i8* %10 to %struct.minipair_struct*
  %12 = load %struct.miniarray_struct** %2, align 8
  %13 = getelementptr inbounds %struct.miniarray_struct* %12, i32 0, i32 0
  store %struct.minipair_struct* %11, %struct.minipair_struct** %13, align 8
  %14 = load %struct.miniarray_struct** %2, align 8
  %15 = getelementptr inbounds %struct.miniarray_struct* %14, i32 0, i32 1
  store i64 0, i64* %15, align 8
  br label %16

; <label>:16                                      ; preds = %7, %0
  store i64 0, i64* %i, align 8
  br label %17

; <label>:17                                      ; preds = %46, %16
  %18 = load i64* %i, align 8
  %19 = load %struct.miniarray_struct** %2, align 8
  %20 = getelementptr inbounds %struct.miniarray_struct* %19, i32 0, i32 1
  %21 = load i64* %20, align 8
  %22 = icmp ult i64 %18, %21
  br i1 %22, label %23, label %49

; <label>:23                                      ; preds = %17
  %24 = load i64* %i, align 8
  %25 = load %struct.miniarray_struct** %2, align 8
  %26 = getelementptr inbounds %struct.miniarray_struct* %25, i32 0, i32 0
  %27 = load %struct.minipair_struct** %26, align 8
  %28 = getelementptr inbounds %struct.minipair_struct* %27, i64 %24
  %29 = getelementptr inbounds %struct.minipair_struct* %28, i32 0, i32 0
  %30 = load i8** %29, align 8
  %31 = getelementptr inbounds %struct.minipair_struct* %pair, i32 0, i32 0
  %32 = load i8** %31, align 8
  %33 = call i32 @strcmp(i8* %30, i8* %32)
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %45

; <label>:35                                      ; preds = %23
  %36 = load i64* %i, align 8
  %37 = load %struct.miniarray_struct** %2, align 8
  %38 = getelementptr inbounds %struct.miniarray_struct* %37, i32 0, i32 0
  %39 = load %struct.minipair_struct** %38, align 8
  %40 = getelementptr inbounds %struct.minipair_struct* %39, i64 %36
  %41 = getelementptr inbounds %struct.minipair_struct* %40, i32 0, i32 1
  %42 = getelementptr inbounds %struct.minipair_struct* %pair, i32 0, i32 1
  %43 = bitcast %struct.obj_struct* %41 to i8*
  %44 = bitcast %struct.obj_struct* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 16, i32 8, i1 false)
  store i32 0, i32* %1
  br label %88

; <label>:45                                      ; preds = %23
  br label %46

; <label>:46                                      ; preds = %45
  %47 = load i64* %i, align 8
  %48 = add i64 %47, 1
  store i64 %48, i64* %i, align 8
  br label %17

; <label>:49                                      ; preds = %17
  %50 = load %struct.miniarray_struct** %2, align 8
  %51 = getelementptr inbounds %struct.miniarray_struct* %50, i32 0, i32 1
  %52 = load i64* %51, align 8
  %53 = add i64 %52, 1
  %54 = icmp uge i64 %53, 1
  br i1 %54, label %55, label %77

; <label>:55                                      ; preds = %49
  %56 = load %struct.miniarray_struct** %2, align 8
  %57 = getelementptr inbounds %struct.miniarray_struct* %56, i32 0, i32 1
  %58 = load i64* %57, align 8
  %59 = add i64 %58, 1
  %60 = call i32 @is_power_of_2(i64 %59)
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %77

; <label>:62                                      ; preds = %55
  %63 = load %struct.miniarray_struct** %2, align 8
  %64 = getelementptr inbounds %struct.miniarray_struct* %63, i32 0, i32 0
  %65 = load %struct.minipair_struct** %64, align 8
  %66 = bitcast %struct.minipair_struct* %65 to i8*
  %67 = load %struct.miniarray_struct** %2, align 8
  %68 = getelementptr inbounds %struct.miniarray_struct* %67, i32 0, i32 1
  %69 = load i64* %68, align 8
  %70 = add i64 %69, 1
  %71 = call i64 @next_power_of_2(i64 %70)
  %72 = mul i64 24, %71
  %73 = call i8* @GC_realloc(i8* %66, i64 %72)
  %74 = bitcast i8* %73 to %struct.minipair_struct*
  %75 = load %struct.miniarray_struct** %2, align 8
  %76 = getelementptr inbounds %struct.miniarray_struct* %75, i32 0, i32 0
  store %struct.minipair_struct* %74, %struct.minipair_struct** %76, align 8
  br label %77

; <label>:77                                      ; preds = %62, %55, %49
  %78 = load %struct.miniarray_struct** %2, align 8
  %79 = getelementptr inbounds %struct.miniarray_struct* %78, i32 0, i32 1
  %80 = load i64* %79, align 8
  %81 = add i64 %80, 1
  store i64 %81, i64* %79, align 8
  %82 = load %struct.miniarray_struct** %2, align 8
  %83 = getelementptr inbounds %struct.miniarray_struct* %82, i32 0, i32 0
  %84 = load %struct.minipair_struct** %83, align 8
  %85 = getelementptr inbounds %struct.minipair_struct* %84, i64 %80
  %86 = bitcast %struct.minipair_struct* %85 to i8*
  %87 = bitcast %struct.minipair_struct* %pair to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 24, i32 8, i1 false)
  store i32 0, i32* %1
  br label %88

; <label>:88                                      ; preds = %77, %35
  %89 = load i32* %1
  ret i32 %89
}

define i32 @minihash_copy(%struct.minihash_struct* %res, %struct.minihash_struct* %hash) nounwind {
  %1 = alloca %struct.minihash_struct*, align 8
  %2 = alloca %struct.minihash_struct*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  store %struct.minihash_struct* %res, %struct.minihash_struct** %1, align 8
  store %struct.minihash_struct* %hash, %struct.minihash_struct** %2, align 8
  store i64 0, i64* %i, align 8
  br label %3

; <label>:3                                       ; preds = %63, %0
  %4 = load i64* %i, align 8
  %5 = load %struct.minihash_struct** %2, align 8
  %6 = getelementptr inbounds %struct.minihash_struct* %5, i32 0, i32 1
  %7 = load i64* %6, align 8
  %8 = icmp ult i64 %4, %7
  br i1 %8, label %9, label %66

; <label>:9                                       ; preds = %3
  %10 = load i64* %i, align 8
  %11 = load %struct.minihash_struct** %2, align 8
  %12 = getelementptr inbounds %struct.minihash_struct* %11, i32 0, i32 0
  %13 = load %struct.miniarray_struct** %12, align 8
  %14 = getelementptr inbounds %struct.miniarray_struct* %13, i64 %10
  %15 = getelementptr inbounds %struct.miniarray_struct* %14, i32 0, i32 0
  %16 = load %struct.minipair_struct** %15, align 8
  %17 = icmp ne %struct.minipair_struct* %16, null
  br i1 %17, label %18, label %62

; <label>:18                                      ; preds = %9
  store i64 0, i64* %j, align 8
  br label %19

; <label>:19                                      ; preds = %58, %18
  %20 = load i64* %j, align 8
  %21 = load i64* %i, align 8
  %22 = load %struct.minihash_struct** %2, align 8
  %23 = getelementptr inbounds %struct.minihash_struct* %22, i32 0, i32 0
  %24 = load %struct.miniarray_struct** %23, align 8
  %25 = getelementptr inbounds %struct.miniarray_struct* %24, i64 %21
  %26 = getelementptr inbounds %struct.miniarray_struct* %25, i32 0, i32 1
  %27 = load i64* %26, align 8
  %28 = icmp ult i64 %20, %27
  br i1 %28, label %29, label %61

; <label>:29                                      ; preds = %19
  %30 = load %struct.minihash_struct** %1, align 8
  %31 = load i64* %j, align 8
  %32 = load i64* %i, align 8
  %33 = load %struct.minihash_struct** %2, align 8
  %34 = getelementptr inbounds %struct.minihash_struct* %33, i32 0, i32 0
  %35 = load %struct.miniarray_struct** %34, align 8
  %36 = getelementptr inbounds %struct.miniarray_struct* %35, i64 %32
  %37 = getelementptr inbounds %struct.miniarray_struct* %36, i32 0, i32 0
  %38 = load %struct.minipair_struct** %37, align 8
  %39 = getelementptr inbounds %struct.minipair_struct* %38, i64 %31
  %40 = getelementptr inbounds %struct.minipair_struct* %39, i32 0, i32 0
  %41 = load i8** %40, align 8
  %42 = load i64* %j, align 8
  %43 = load i64* %i, align 8
  %44 = load %struct.minihash_struct** %2, align 8
  %45 = getelementptr inbounds %struct.minihash_struct* %44, i32 0, i32 0
  %46 = load %struct.miniarray_struct** %45, align 8
  %47 = getelementptr inbounds %struct.miniarray_struct* %46, i64 %43
  %48 = getelementptr inbounds %struct.miniarray_struct* %47, i32 0, i32 0
  %49 = load %struct.minipair_struct** %48, align 8
  %50 = getelementptr inbounds %struct.minipair_struct* %49, i64 %42
  %51 = getelementptr inbounds %struct.minipair_struct* %50, i32 0, i32 1
  %52 = bitcast %struct.obj_struct* %51 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call i32 @minihash_add(%struct.minihash_struct* %30, i8* %41, %struct.smpType_struct* %54, i8* %56)
  br label %58

; <label>:58                                      ; preds = %29
  %59 = load i64* %j, align 8
  %60 = add i64 %59, 1
  store i64 %60, i64* %j, align 8
  br label %19

; <label>:61                                      ; preds = %19
  br label %62

; <label>:62                                      ; preds = %61, %9
  br label %63

; <label>:63                                      ; preds = %62
  %64 = load i64* %i, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %i, align 8
  br label %3

; <label>:66                                      ; preds = %3
  ret i32 0
}

define i64 @next_power_of_2(i64 %x) nounwind {
  %1 = alloca i64, align 8
  store i64 %x, i64* %1, align 8
  %2 = load i64* %1, align 8
  %3 = lshr i64 %2, 1
  %4 = load i64* %1, align 8
  %5 = or i64 %4, %3
  store i64 %5, i64* %1, align 8
  %6 = load i64* %1, align 8
  %7 = lshr i64 %6, 2
  %8 = load i64* %1, align 8
  %9 = or i64 %8, %7
  store i64 %9, i64* %1, align 8
  %10 = load i64* %1, align 8
  %11 = lshr i64 %10, 4
  %12 = load i64* %1, align 8
  %13 = or i64 %12, %11
  store i64 %13, i64* %1, align 8
  %14 = load i64* %1, align 8
  %15 = lshr i64 %14, 8
  %16 = load i64* %1, align 8
  %17 = or i64 %16, %15
  store i64 %17, i64* %1, align 8
  %18 = load i64* %1, align 8
  %19 = lshr i64 %18, 16
  %20 = load i64* %1, align 8
  %21 = or i64 %20, %19
  store i64 %21, i64* %1, align 8
  %22 = load i64* %1, align 8
  %23 = lshr i64 %22, 32
  %24 = load i64* %1, align 8
  %25 = or i64 %24, %23
  store i64 %25, i64* %1, align 8
  %26 = load i64* %1, align 8
  %27 = add i64 %26, 1
  ret i64 %27
}

declare i32 @strcmp(i8*, i8*)

define i32 @is_power_of_2(i64 %x) nounwind {
  %1 = alloca i64, align 8
  store i64 %x, i64* %1, align 8
  %2 = load i64* %1, align 8
  %3 = icmp ne i64 %2, 0
  br i1 %3, label %4, label %11

; <label>:4                                       ; preds = %0
  %5 = load i64* %1, align 8
  %6 = load i64* %1, align 8
  %7 = sub i64 %6, 1
  %8 = and i64 %5, %7
  %9 = icmp ne i64 %8, 0
  %10 = xor i1 %9, true
  br label %11

; <label>:11                                      ; preds = %4, %0
  %12 = phi i1 [ false, %0 ], [ %10, %4 ]
  %13 = zext i1 %12 to i32
  ret i32 %13
}

declare i8* @GC_realloc(i8*, i64)

define i32 @minihash_containsp(%struct.minihash_struct* %hash, i8* %key) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.minihash_struct*, align 8
  %3 = alloca i8*, align 8
  %index = alloca i32, align 4
  %i = alloca i64, align 8
  store %struct.minihash_struct* %hash, %struct.minihash_struct** %2, align 8
  store i8* %key, i8** %3, align 8
  %4 = load %struct.minihash_struct** %2, align 8
  %5 = icmp ne %struct.minihash_struct* %4, null
  br i1 %5, label %6, label %11

; <label>:6                                       ; preds = %0
  %7 = load %struct.minihash_struct** %2, align 8
  %8 = getelementptr inbounds %struct.minihash_struct* %7, i32 0, i32 0
  %9 = load %struct.miniarray_struct** %8, align 8
  %10 = icmp ne %struct.miniarray_struct* %9, null
  br i1 %10, label %12, label %11

; <label>:11                                      ; preds = %6, %0
  store i32 0, i32* %1
  br label %65

; <label>:12                                      ; preds = %6
  %13 = load i8** %3, align 8
  %14 = call i32 @minihash_function(i8* %13)
  %15 = sext i32 %14 to i64
  %16 = load %struct.minihash_struct** %2, align 8
  %17 = getelementptr inbounds %struct.minihash_struct* %16, i32 0, i32 1
  %18 = load i64* %17, align 8
  %19 = urem i64 %15, %18
  %20 = trunc i64 %19 to i32
  store i32 %20, i32* %index, align 4
  %21 = load i32* %index, align 4
  %22 = sext i32 %21 to i64
  %23 = load %struct.minihash_struct** %2, align 8
  %24 = getelementptr inbounds %struct.minihash_struct* %23, i32 0, i32 0
  %25 = load %struct.miniarray_struct** %24, align 8
  %26 = getelementptr inbounds %struct.miniarray_struct* %25, i64 %22
  %27 = getelementptr inbounds %struct.miniarray_struct* %26, i32 0, i32 0
  %28 = load %struct.minipair_struct** %27, align 8
  %29 = icmp ne %struct.minipair_struct* %28, null
  br i1 %29, label %30, label %64

; <label>:30                                      ; preds = %12
  store i64 0, i64* %i, align 8
  br label %31

; <label>:31                                      ; preds = %60, %30
  %32 = load i64* %i, align 8
  %33 = load i32* %index, align 4
  %34 = sext i32 %33 to i64
  %35 = load %struct.minihash_struct** %2, align 8
  %36 = getelementptr inbounds %struct.minihash_struct* %35, i32 0, i32 0
  %37 = load %struct.miniarray_struct** %36, align 8
  %38 = getelementptr inbounds %struct.miniarray_struct* %37, i64 %34
  %39 = getelementptr inbounds %struct.miniarray_struct* %38, i32 0, i32 1
  %40 = load i64* %39, align 8
  %41 = icmp ult i64 %32, %40
  br i1 %41, label %42, label %63

; <label>:42                                      ; preds = %31
  %43 = load i64* %i, align 8
  %44 = load i32* %index, align 4
  %45 = sext i32 %44 to i64
  %46 = load %struct.minihash_struct** %2, align 8
  %47 = getelementptr inbounds %struct.minihash_struct* %46, i32 0, i32 0
  %48 = load %struct.miniarray_struct** %47, align 8
  %49 = getelementptr inbounds %struct.miniarray_struct* %48, i64 %45
  %50 = getelementptr inbounds %struct.miniarray_struct* %49, i32 0, i32 0
  %51 = load %struct.minipair_struct** %50, align 8
  %52 = getelementptr inbounds %struct.minipair_struct* %51, i64 %43
  %53 = getelementptr inbounds %struct.minipair_struct* %52, i32 0, i32 0
  %54 = load i8** %53, align 8
  %55 = load i8** %3, align 8
  %56 = call i32 @strcmp(i8* %54, i8* %55)
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

; <label>:58                                      ; preds = %42
  store i32 1, i32* %1
  br label %65

; <label>:59                                      ; preds = %42
  br label %60

; <label>:60                                      ; preds = %59
  %61 = load i64* %i, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %i, align 8
  br label %31

; <label>:63                                      ; preds = %31
  br label %64

; <label>:64                                      ; preds = %63, %12
  store i32 0, i32* %1
  br label %65

; <label>:65                                      ; preds = %64, %58, %11
  %66 = load i32* %1
  ret i32 %66
}

define i32 @minihash_each(%struct.minihash_struct* %hash, i32 (i8*, %struct.smpType_struct*, i8*)* %fun) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.minihash_struct*, align 8
  %3 = alloca i32 (i8*, %struct.smpType_struct*, i8*)*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %res = alloca i32, align 4
  store %struct.minihash_struct* %hash, %struct.minihash_struct** %2, align 8
  store i32 (i8*, %struct.smpType_struct*, i8*)* %fun, i32 (i8*, %struct.smpType_struct*, i8*)** %3, align 8
  %4 = load %struct.minihash_struct** %2, align 8
  %5 = getelementptr inbounds %struct.minihash_struct* %4, i32 0, i32 0
  %6 = load %struct.miniarray_struct** %5, align 8
  %7 = icmp ne %struct.miniarray_struct* %6, null
  br i1 %7, label %8, label %13

; <label>:8                                       ; preds = %0
  %9 = load %struct.minihash_struct** %2, align 8
  %10 = getelementptr inbounds %struct.minihash_struct* %9, i32 0, i32 3
  %11 = load i64* %10, align 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %8, %0
  store i32 0, i32* %1
  br label %84

; <label>:14                                      ; preds = %8
  store i64 0, i64* %i, align 8
  br label %15

; <label>:15                                      ; preds = %80, %14
  %16 = load i64* %i, align 8
  %17 = load %struct.minihash_struct** %2, align 8
  %18 = getelementptr inbounds %struct.minihash_struct* %17, i32 0, i32 1
  %19 = load i64* %18, align 8
  %20 = icmp ult i64 %16, %19
  br i1 %20, label %21, label %83

; <label>:21                                      ; preds = %15
  %22 = load i64* %i, align 8
  %23 = load %struct.minihash_struct** %2, align 8
  %24 = getelementptr inbounds %struct.minihash_struct* %23, i32 0, i32 0
  %25 = load %struct.miniarray_struct** %24, align 8
  %26 = getelementptr inbounds %struct.miniarray_struct* %25, i64 %22
  %27 = getelementptr inbounds %struct.miniarray_struct* %26, i32 0, i32 0
  %28 = load %struct.minipair_struct** %27, align 8
  %29 = icmp ne %struct.minipair_struct* %28, null
  br i1 %29, label %30, label %79

; <label>:30                                      ; preds = %21
  store i64 0, i64* %j, align 8
  br label %31

; <label>:31                                      ; preds = %75, %30
  %32 = load i64* %j, align 8
  %33 = load i64* %i, align 8
  %34 = load %struct.minihash_struct** %2, align 8
  %35 = getelementptr inbounds %struct.minihash_struct* %34, i32 0, i32 0
  %36 = load %struct.miniarray_struct** %35, align 8
  %37 = getelementptr inbounds %struct.miniarray_struct* %36, i64 %33
  %38 = getelementptr inbounds %struct.miniarray_struct* %37, i32 0, i32 1
  %39 = load i64* %38, align 8
  %40 = icmp ult i64 %32, %39
  br i1 %40, label %41, label %78

; <label>:41                                      ; preds = %31
  %42 = load i32 (i8*, %struct.smpType_struct*, i8*)** %3, align 8
  %43 = load i64* %j, align 8
  %44 = load i64* %i, align 8
  %45 = load %struct.minihash_struct** %2, align 8
  %46 = getelementptr inbounds %struct.minihash_struct* %45, i32 0, i32 0
  %47 = load %struct.miniarray_struct** %46, align 8
  %48 = getelementptr inbounds %struct.miniarray_struct* %47, i64 %44
  %49 = getelementptr inbounds %struct.miniarray_struct* %48, i32 0, i32 0
  %50 = load %struct.minipair_struct** %49, align 8
  %51 = getelementptr inbounds %struct.minipair_struct* %50, i64 %43
  %52 = getelementptr inbounds %struct.minipair_struct* %51, i32 0, i32 0
  %53 = load i8** %52, align 8
  %54 = load i64* %j, align 8
  %55 = load i64* %i, align 8
  %56 = load %struct.minihash_struct** %2, align 8
  %57 = getelementptr inbounds %struct.minihash_struct* %56, i32 0, i32 0
  %58 = load %struct.miniarray_struct** %57, align 8
  %59 = getelementptr inbounds %struct.miniarray_struct* %58, i64 %55
  %60 = getelementptr inbounds %struct.miniarray_struct* %59, i32 0, i32 0
  %61 = load %struct.minipair_struct** %60, align 8
  %62 = getelementptr inbounds %struct.minipair_struct* %61, i64 %54
  %63 = getelementptr inbounds %struct.minipair_struct* %62, i32 0, i32 1
  %64 = bitcast %struct.obj_struct* %63 to { %struct.smpType_struct*, i8* }*
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 0
  %66 = load %struct.smpType_struct** %65, align 1
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 1
  %68 = load i8** %67, align 1
  %69 = call i32 %42(i8* %53, %struct.smpType_struct* %66, i8* %68)
  store i32 %69, i32* %res, align 4
  %70 = load i32* %res, align 4
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %74

; <label>:72                                      ; preds = %41
  %73 = load i32* %res, align 4
  store i32 %73, i32* %1
  br label %84

; <label>:74                                      ; preds = %41
  br label %75

; <label>:75                                      ; preds = %74
  %76 = load i64* %j, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %j, align 8
  br label %31

; <label>:78                                      ; preds = %31
  br label %79

; <label>:79                                      ; preds = %78, %21
  br label %80

; <label>:80                                      ; preds = %79
  %81 = load i64* %i, align 8
  %82 = add i64 %81, 1
  store i64 %82, i64* %i, align 8
  br label %15

; <label>:83                                      ; preds = %15
  store i32 0, i32* %1
  br label %84

; <label>:84                                      ; preds = %83, %72, %13
  %85 = load i32* %1
  ret i32 %85
}

define i32 @minihash_print(%struct.minihash_struct* byval align 8 %hash) nounwind {
  %1 = alloca i32, align 4
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %2 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 0
  %3 = load %struct.miniarray_struct** %2, align 8
  %4 = icmp ne %struct.miniarray_struct* %3, null
  br i1 %4, label %6, label %5

; <label>:5                                       ; preds = %0
  store i32 0, i32* %1
  br label %52

; <label>:6                                       ; preds = %0
  store i64 0, i64* %i, align 8
  br label %7

; <label>:7                                       ; preds = %47, %6
  %8 = load i64* %i, align 8
  %9 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 1
  %10 = load i64* %9, align 8
  %11 = icmp ult i64 %8, %10
  br i1 %11, label %12, label %50

; <label>:12                                      ; preds = %7
  %13 = load i64* %i, align 8
  %14 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 0
  %15 = load %struct.miniarray_struct** %14, align 8
  %16 = getelementptr inbounds %struct.miniarray_struct* %15, i64 %13
  %17 = getelementptr inbounds %struct.miniarray_struct* %16, i32 0, i32 0
  %18 = load %struct.minipair_struct** %17, align 8
  %19 = icmp ne %struct.minipair_struct* %18, null
  br i1 %19, label %20, label %46

; <label>:20                                      ; preds = %12
  store i64 0, i64* %j, align 8
  br label %21

; <label>:21                                      ; preds = %42, %20
  %22 = load i64* %j, align 8
  %23 = load i64* %i, align 8
  %24 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 0
  %25 = load %struct.miniarray_struct** %24, align 8
  %26 = getelementptr inbounds %struct.miniarray_struct* %25, i64 %23
  %27 = getelementptr inbounds %struct.miniarray_struct* %26, i32 0, i32 1
  %28 = load i64* %27, align 8
  %29 = icmp ult i64 %22, %28
  br i1 %29, label %30, label %45

; <label>:30                                      ; preds = %21
  %31 = load i64* %j, align 8
  %32 = load i64* %i, align 8
  %33 = getelementptr inbounds %struct.minihash_struct* %hash, i32 0, i32 0
  %34 = load %struct.miniarray_struct** %33, align 8
  %35 = getelementptr inbounds %struct.miniarray_struct* %34, i64 %32
  %36 = getelementptr inbounds %struct.miniarray_struct* %35, i32 0, i32 0
  %37 = load %struct.minipair_struct** %36, align 8
  %38 = getelementptr inbounds %struct.minipair_struct* %37, i64 %31
  %39 = getelementptr inbounds %struct.minipair_struct* %38, i32 0, i32 0
  %40 = load i8** %39, align 8
  %41 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([9 x i8]* @.str12, i32 0, i32 0), i8* %40)
  br label %42

; <label>:42                                      ; preds = %30
  %43 = load i64* %j, align 8
  %44 = add i64 %43, 1
  store i64 %44, i64* %j, align 8
  br label %21

; <label>:45                                      ; preds = %21
  br label %46

; <label>:46                                      ; preds = %45, %12
  br label %47

; <label>:47                                      ; preds = %46
  %48 = load i64* %i, align 8
  %49 = add i64 %48, 1
  store i64 %49, i64* %i, align 8
  br label %7

; <label>:50                                      ; preds = %7
  %51 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @.str13, i32 0, i32 0))
  store i32 0, i32* %1
  br label %52

; <label>:52                                      ; preds = %50, %5
  %53 = load i32* %1
  ret i32 %53
}

declare i32 @printf(i8*, ...)

define i32 @obj_hash(i32* %dest, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %obj = alloca %struct.obj_struct, align 8
  %hash = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  store i32* %dest, i32** %2, align 8
  %3 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %obj.coerce1, i8** %5
  %6 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %7 = load %struct.smpType_struct** %6, align 8
  %8 = getelementptr inbounds %struct.smpType_struct* %7, i32 0, i32 0
  %9 = load i8** %8, align 8
  %10 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %21

; <label>:12                                      ; preds = %0
  %13 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = load %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = load i8** %16, align 1
  %18 = call i8* @smpString_to_cstr(%struct.smpType_struct* %15, i8* %17)
  %19 = call i32 @minihash_function(i8* %18)
  %20 = load i32** %2, align 8
  store i32 %19, i32* %20, align 4
  store i32 0, i32* %1
  br label %50

; <label>:21                                      ; preds = %0
  %22 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = load i8** %25, align 1
  %27 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %24, i8* %26, i8* getelementptr inbounds ([13 x i8]* @.str17, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %28 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = extractvalue { %struct.smpType_struct*, i8* } %27, 0
  store %struct.smpType_struct* %30, %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = extractvalue { %struct.smpType_struct*, i8* } %27, 1
  store i8* %32, i8** %31, align 1
  %33 = getelementptr inbounds %struct.obj_struct* %hash, i32 0, i32 0
  %34 = load %struct.smpType_struct** %33, align 8
  %35 = getelementptr inbounds %struct.smpType_struct* %34, i32 0, i32 1
  %36 = load i32* %35, align 4
  %37 = load i32* @smpType_id_int, align 4
  %38 = icmp eq i32 %36, %37
  br i1 %38, label %39, label %49

; <label>:39                                      ; preds = %21
  %40 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %41 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call i64 @smpInteger_to_clong(%struct.obj_struct* %ret, %struct.smpType_struct* %43, i8* %45)
  %47 = trunc i64 %46 to i32
  %48 = load i32** %2, align 8
  store i32 %47, i32* %48, align 4
  store i32 0, i32* %1
  br label %50

; <label>:49                                      ; preds = %21
  store i32 1, i32* %1
  br label %50

; <label>:50                                      ; preds = %49, %39, %12
  %51 = load i32* %1
  ret i32 %51
}

define i8* @smpString_to_cstr(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %obj = alloca %struct.obj_struct, align 8
  %1 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %2 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %2
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 1
  store i8* %obj.coerce1, i8** %3
  %4 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %5 = load i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.smpstrstruct*
  %7 = getelementptr inbounds %struct.smpstrstruct* %6, i32 0, i32 0
  %8 = load i8** %7, align 8
  ret i8* %8
}

define { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i8* %name, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %fun = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i8* %name, i8** %2, align 8
  store i32 %argc, i32* %3, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %4, align 8
  %9 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %10 = load i8** %2, align 8
  %11 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = load i8** %14, align 1
  %16 = call { %struct.smpType_struct*, i8* } @smpObject_get_fun(%struct.smpType_struct* %13, i8* %15, i8* %10)
  %17 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 0
  %19 = extractvalue { %struct.smpType_struct*, i8* } %16, 0
  store %struct.smpType_struct* %19, %struct.smpType_struct** %18, align 1
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 1
  %21 = extractvalue { %struct.smpType_struct*, i8* } %16, 1
  store i8* %21, i8** %20, align 1
  %22 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = load i8** %25, align 1
  %27 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %24, i8* %26)
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %32

; <label>:29                                      ; preds = %0
  %30 = bitcast %struct.obj_struct* %1 to i8*
  %31 = bitcast %struct.obj_struct* %fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false)
  br label %55

; <label>:32                                      ; preds = %0
  %33 = load i32* %3, align 4
  %34 = load %struct.obj_struct** %4, align 8
  %35 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = load %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = load i8** %38, align 1
  %40 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = load %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = load i8** %43, align 1
  %45 = call { %struct.smpType_struct*, i8* } @smpFunction_call(%struct.smpType_struct* %37, i8* %39, %struct.smpType_struct* %42, i8* %44, i32 %33, %struct.obj_struct* %34)
  %46 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = extractvalue { %struct.smpType_struct*, i8* } %45, 0
  store %struct.smpType_struct* %48, %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = extractvalue { %struct.smpType_struct*, i8* } %45, 1
  store i8* %50, i8** %49, align 1
  %51 = bitcast %struct.obj_struct* %res to i8*
  %52 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %52, i64 16, i32 8, i1 false)
  %53 = bitcast %struct.obj_struct* %1 to i8*
  %54 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 16, i32 8, i1 false)
  br label %55

; <label>:55                                      ; preds = %32, %29
  %56 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %57 = load { %struct.smpType_struct*, i8* }* %56, align 1
  ret { %struct.smpType_struct*, i8* } %57
}

define i64 @smpInteger_to_clong(%struct.obj_struct* %ret, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca i64, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %obj = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %ret, %struct.obj_struct** %2, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  %9 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %10 = load i8** %9, align 8
  %11 = bitcast i8* %10 to [1 x %struct.__mpz_struct]*
  %12 = getelementptr inbounds [1 x %struct.__mpz_struct]* %11, i32 0, i32 0
  %13 = call i32 @__gmpz_fits_slong_p(%struct.__mpz_struct* %12) nounwind readonly
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %47, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %2, align 8
  %17 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([26 x i8]* @.str108, i32 0, i32 0))
  %18 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = load i8** %26, align 1
  %28 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %25, i8* %27, i8* getelementptr inbounds ([4 x i8]* @.str109, i32 0, i32 0), i8* (i8*, i32)* @index)
  %29 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = extractvalue { %struct.smpType_struct*, i8* } %28, 0
  store %struct.smpType_struct* %31, %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = extractvalue { %struct.smpType_struct*, i8* } %28, 1
  store i8* %33, i8** %32, align 1
  %34 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = load i8** %37, align 1
  %39 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %36, i8* %38)
  %40 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = extractvalue { %struct.smpType_struct*, i8* } %39, 0
  store %struct.smpType_struct* %42, %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = extractvalue { %struct.smpType_struct*, i8* } %39, 1
  store i8* %44, i8** %43, align 1
  %45 = bitcast %struct.obj_struct* %16 to i8*
  %46 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %46, i64 16, i32 8, i1 false)
  store i64 9223372036854775807, i64* %1
  br label %53

; <label>:47                                      ; preds = %0
  %48 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %49 = load i8** %48, align 8
  %50 = bitcast i8* %49 to [1 x %struct.__mpz_struct]*
  %51 = getelementptr inbounds [1 x %struct.__mpz_struct]* %50, i32 0, i32 0
  %52 = call i64 @__gmpz_get_si(%struct.__mpz_struct* %51) nounwind readonly
  store i64 %52, i64* %1
  br label %53

; <label>:53                                      ; preds = %47, %15
  %54 = load i64* %1
  ret i64 %54
}

define { %struct.smpType_struct*, i8* } @objid_init(i32 %type_id) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %res = alloca %struct.obj_struct, align 8
  store i32 %type_id, i32* %2, align 4
  %3 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_id)
  %4 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = load i32* %2, align 4
  %10 = sext i32 %9 to i64
  %11 = inttoptr i64 %10 to i8*
  %12 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %11, i8** %12, align 8
  %13 = bitcast %struct.obj_struct* %1 to i8*
  %14 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = load { %struct.smpType_struct*, i8* }* %15, align 1
  ret { %struct.smpType_struct*, i8* } %16
}

define { %struct.smpType_struct*, i8* } @obj_eq(%struct.smpType_struct* %obj1.coerce0, i8* %obj1.coerce1, %struct.smpType_struct* %obj2.coerce0, i8* %obj2.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj1 = alloca %struct.obj_struct, align 8
  %obj2 = alloca %struct.obj_struct, align 8
  %2 = bitcast %struct.obj_struct* %obj1 to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %obj1.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %obj1.coerce1, i8** %4
  %5 = bitcast %struct.obj_struct* %obj2 to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj2.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj2.coerce1, i8** %7
  %8 = getelementptr inbounds %struct.obj_struct* %obj1, i32 0, i32 1
  %9 = load i8** %8, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %obj2, i32 0, i32 1
  %11 = load i8** %10, align 8
  %12 = icmp eq i8* %9, %11
  br i1 %12, label %13, label %15

; <label>:13                                      ; preds = %0
  %14 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* bitcast (%struct.obj_struct* @smp_true to i8*), i64 16, i32 8, i1 false)
  br label %17

; <label>:15                                      ; preds = %0
  %16 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %17

; <label>:17                                      ; preds = %15, %13
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @obj_types_equalp(%struct.smpType_struct* %obj1.coerce0, i8* %obj1.coerce1, %struct.smpType_struct* %obj2.coerce0, i8* %obj2.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj1 = alloca %struct.obj_struct, align 8
  %obj2 = alloca %struct.obj_struct, align 8
  %2 = bitcast %struct.obj_struct* %obj1 to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %obj1.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %obj1.coerce1, i8** %4
  %5 = bitcast %struct.obj_struct* %obj2 to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj2.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj2.coerce1, i8** %7
  %8 = getelementptr inbounds %struct.obj_struct* %obj1, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 8
  %10 = getelementptr inbounds %struct.smpType_struct* %9, i32 0, i32 0
  %11 = load i8** %10, align 8
  %12 = getelementptr inbounds %struct.obj_struct* %obj2, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = getelementptr inbounds %struct.smpType_struct* %13, i32 0, i32 0
  %15 = load i8** %14, align 8
  %16 = call i32 @strcmp(i8* %11, i8* %15)
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %0
  %19 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* bitcast (%struct.obj_struct* @smp_true to i8*), i64 16, i32 8, i1 false)
  br label %22

; <label>:20                                      ; preds = %0
  %21 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %22

; <label>:22                                      ; preds = %20, %18
  %23 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %24 = load { %struct.smpType_struct*, i8* }* %23, align 1
  ret { %struct.smpType_struct*, i8* } %24
}

define { %struct.smpType_struct*, i8* } @smpObject_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define i32 @smpObject_cmp_fast(%struct.obj_struct* %err, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, %struct.smpType_struct* %arg.coerce0, i8* %arg.coerce1) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.obj_struct*, align 8
  %obj = alloca %struct.obj_struct, align 8
  %arg = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %err, %struct.obj_struct** %2, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  %7 = bitcast %struct.obj_struct* %arg to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %arg.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %arg.coerce1, i8** %9
  %10 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = load i32* @smpType_id_int, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %29

; <label>:16                                      ; preds = %0
  %17 = load %struct.obj_struct** %2, align 8
  %18 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = bitcast %struct.obj_struct* %arg to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = load i8** %26, align 1
  %28 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %17, %struct.smpType_struct* %20, i8* %22, %struct.smpType_struct* %25, i8* %27)
  store i32 %28, i32* %1
  br label %82

; <label>:29                                      ; preds = %0
  %30 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 8
  %32 = getelementptr inbounds %struct.smpType_struct* %31, i32 0, i32 1
  %33 = load i32* %32, align 4
  %34 = load i32* @smpType_id_float, align 4
  %35 = icmp eq i32 %33, %34
  br i1 %35, label %36, label %49

; <label>:36                                      ; preds = %29
  %37 = load %struct.obj_struct** %2, align 8
  %38 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = load %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = load i8** %41, align 1
  %43 = bitcast %struct.obj_struct* %arg to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = load i8** %46, align 1
  %48 = call i32 @smpFloat_cmp_cint(%struct.obj_struct* %37, %struct.smpType_struct* %40, i8* %42, %struct.smpType_struct* %45, i8* %47)
  store i32 %48, i32* %1
  br label %82

; <label>:49                                      ; preds = %29
  %50 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = load %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = load i8** %53, align 1
  %55 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %52, i8* %54, i8* getelementptr inbounds ([4 x i8]* @.str19, i32 0, i32 0), i32 1, %struct.obj_struct* %arg)
  %56 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = extractvalue { %struct.smpType_struct*, i8* } %55, 0
  store %struct.smpType_struct* %58, %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = extractvalue { %struct.smpType_struct*, i8* } %55, 1
  store i8* %60, i8** %59, align 1
  %61 = bitcast %struct.obj_struct* %res to i8*
  %62 = bitcast %struct.obj_struct* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* %62, i64 16, i32 8, i1 false)
  %63 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 0
  %64 = load %struct.smpType_struct** %63, align 8
  %65 = getelementptr inbounds %struct.smpType_struct* %64, i32 0, i32 1
  %66 = load i32* %65, align 4
  %67 = load i32* @smpType_id_int, align 4
  %68 = icmp eq i32 %66, %67
  br i1 %68, label %69, label %78

; <label>:69                                      ; preds = %49
  %70 = load %struct.obj_struct** %2, align 8
  %71 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = load i8** %74, align 1
  %76 = call i64 @smpInteger_to_clong(%struct.obj_struct* %70, %struct.smpType_struct* %73, i8* %75)
  %77 = trunc i64 %76 to i32
  store i32 %77, i32* %1
  br label %82

; <label>:78                                      ; preds = %49
  %79 = load %struct.obj_struct** %2, align 8
  %80 = bitcast %struct.obj_struct* %79 to i8*
  %81 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %80, i8* %81, i64 16, i32 8, i1 false)
  store i32 -2, i32* %1
  br label %82

; <label>:82                                      ; preds = %78, %69, %36, %16
  %83 = load i32* %1
  ret i32 %83
}

define i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, %struct.smpType_struct* %arg.coerce0, i8* %arg.coerce1) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.obj_struct*, align 8
  %obj = alloca %struct.obj_struct, align 8
  %arg = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %err, %struct.obj_struct** %2, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  %9 = bitcast %struct.obj_struct* %arg to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  store %struct.smpType_struct* %arg.coerce0, %struct.smpType_struct** %10
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  store i8* %arg.coerce1, i8** %11
  %12 = getelementptr inbounds %struct.obj_struct* %arg, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = getelementptr inbounds %struct.smpType_struct* %13, i32 0, i32 1
  %15 = load i32* %14, align 4
  %16 = load i32* @smpType_id_int, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %18, label %29

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %20 = load i8** %19, align 8
  %21 = bitcast i8* %20 to [1 x %struct.__mpz_struct]*
  %22 = getelementptr inbounds [1 x %struct.__mpz_struct]* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.obj_struct* %arg, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to [1 x %struct.__mpz_struct]*
  %26 = getelementptr inbounds [1 x %struct.__mpz_struct]* %25, i32 0, i32 0
  %27 = call i32 @__gmpz_cmp(%struct.__mpz_struct* %22, %struct.__mpz_struct* %26) nounwind readonly
  store i32 %27, i32* %num, align 4
  %28 = load i32* %num, align 4
  store i32 %28, i32* %1
  br label %84

; <label>:29                                      ; preds = %0
  %30 = getelementptr inbounds %struct.obj_struct* %arg, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 8
  %32 = getelementptr inbounds %struct.smpType_struct* %31, i32 0, i32 1
  %33 = load i32* %32, align 4
  %34 = load i32* @smpType_id_float, align 4
  %35 = icmp eq i32 %33, %34
  br i1 %35, label %36, label %49

; <label>:36                                      ; preds = %29
  %37 = load %struct.obj_struct** %2, align 8
  %38 = bitcast %struct.obj_struct* %arg to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = load %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = load i8** %41, align 1
  %43 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = load i8** %46, align 1
  %48 = call i32 @smpFloat_cmp_cint(%struct.obj_struct* %37, %struct.smpType_struct* %40, i8* %42, %struct.smpType_struct* %45, i8* %47)
  store i32 %48, i32* %1
  br label %84

; <label>:49                                      ; preds = %29
  %50 = load %struct.obj_struct** %2, align 8
  %51 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = extractvalue { %struct.smpType_struct*, i8* } %51, 0
  store %struct.smpType_struct* %54, %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = extractvalue { %struct.smpType_struct*, i8* } %51, 1
  store i8* %56, i8** %55, align 1
  %57 = getelementptr inbounds %struct.obj_struct* %4, i32 0, i32 1
  %58 = load i8** %57, align 8
  %59 = bitcast i8* %58 to %struct.smpType_struct*
  %60 = bitcast %struct.obj_struct* %arg to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = load %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = load i8** %63, align 1
  %65 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %59, %struct.smpType_struct* %62, i8* %64)
  %66 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = extractvalue { %struct.smpType_struct*, i8* } %65, 0
  store %struct.smpType_struct* %68, %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = extractvalue { %struct.smpType_struct*, i8* } %65, 1
  store i8* %70, i8** %69, align 1
  %71 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = load i8** %74, align 1
  %76 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %73, i8* %75)
  %77 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 0
  %79 = extractvalue { %struct.smpType_struct*, i8* } %76, 0
  store %struct.smpType_struct* %79, %struct.smpType_struct** %78, align 1
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 1
  %81 = extractvalue { %struct.smpType_struct*, i8* } %76, 1
  store i8* %81, i8** %80, align 1
  %82 = bitcast %struct.obj_struct* %50 to i8*
  %83 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* %83, i64 16, i32 8, i1 false)
  store i32 -2, i32* %1
  br label %84

; <label>:84                                      ; preds = %49, %36, %18
  %85 = load i32* %1
  ret i32 %85
}

define i32 @smpFloat_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, %struct.smpType_struct* %arg.coerce0, i8* %arg.coerce1) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.obj_struct*, align 8
  %obj = alloca %struct.obj_struct, align 8
  %arg = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %num1 = alloca i32, align 4
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %err, %struct.obj_struct** %2, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  %9 = bitcast %struct.obj_struct* %arg to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  store %struct.smpType_struct* %arg.coerce0, %struct.smpType_struct** %10
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  store i8* %arg.coerce1, i8** %11
  %12 = getelementptr inbounds %struct.obj_struct* %arg, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = getelementptr inbounds %struct.smpType_struct* %13, i32 0, i32 1
  %15 = load i32* %14, align 4
  %16 = load i32* @smpType_id_int, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %18, label %29

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %20 = load i8** %19, align 8
  %21 = bitcast i8* %20 to [1 x %struct.__mpfr_struct]*
  %22 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.obj_struct* %arg, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to [1 x %struct.__mpz_struct]*
  %26 = getelementptr inbounds [1 x %struct.__mpz_struct]* %25, i32 0, i32 0
  %27 = call i32 @mpfr_cmp_z(%struct.__mpfr_struct* %22, %struct.__mpz_struct* %26)
  store i32 %27, i32* %num, align 4
  %28 = load i32* %num, align 4
  store i32 %28, i32* %1
  br label %82

; <label>:29                                      ; preds = %0
  %30 = getelementptr inbounds %struct.obj_struct* %arg, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 8
  %32 = getelementptr inbounds %struct.smpType_struct* %31, i32 0, i32 1
  %33 = load i32* %32, align 4
  %34 = load i32* @smpType_id_float, align 4
  %35 = icmp eq i32 %33, %34
  br i1 %35, label %36, label %47

; <label>:36                                      ; preds = %29
  %37 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %38 = load i8** %37, align 8
  %39 = bitcast i8* %38 to [1 x %struct.__mpfr_struct]*
  %40 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %39, i32 0, i32 0
  %41 = getelementptr inbounds %struct.obj_struct* %arg, i32 0, i32 1
  %42 = load i8** %41, align 8
  %43 = bitcast i8* %42 to [1 x %struct.__mpfr_struct]*
  %44 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %43, i32 0, i32 0
  %45 = call i32 @mpfr_cmp3(%struct.__mpfr_struct* %40, %struct.__mpfr_struct* %44, i32 1)
  store i32 %45, i32* %num1, align 4
  %46 = load i32* %num1, align 4
  store i32 %46, i32* %1
  br label %82

; <label>:47                                      ; preds = %29
  %48 = load %struct.obj_struct** %2, align 8
  %49 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %50 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = extractvalue { %struct.smpType_struct*, i8* } %49, 0
  store %struct.smpType_struct* %52, %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = extractvalue { %struct.smpType_struct*, i8* } %49, 1
  store i8* %54, i8** %53, align 1
  %55 = getelementptr inbounds %struct.obj_struct* %4, i32 0, i32 1
  %56 = load i8** %55, align 8
  %57 = bitcast i8* %56 to %struct.smpType_struct*
  %58 = bitcast %struct.obj_struct* %arg to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = load %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = load i8** %61, align 1
  %63 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %57, %struct.smpType_struct* %60, i8* %62)
  %64 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 0
  %66 = extractvalue { %struct.smpType_struct*, i8* } %63, 0
  store %struct.smpType_struct* %66, %struct.smpType_struct** %65, align 1
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 1
  %68 = extractvalue { %struct.smpType_struct*, i8* } %63, 1
  store i8* %68, i8** %67, align 1
  %69 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 0
  %71 = load %struct.smpType_struct** %70, align 1
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 1
  %73 = load i8** %72, align 1
  %74 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %71, i8* %73)
  %75 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 0
  %77 = extractvalue { %struct.smpType_struct*, i8* } %74, 0
  store %struct.smpType_struct* %77, %struct.smpType_struct** %76, align 1
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 1
  %79 = extractvalue { %struct.smpType_struct*, i8* } %74, 1
  store i8* %79, i8** %78, align 1
  %80 = bitcast %struct.obj_struct* %48 to i8*
  %81 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %80, i8* %81, i64 16, i32 8, i1 false)
  store i32 -2, i32* %1
  br label %82

; <label>:82                                      ; preds = %47, %36, %18
  %83 = load i32* %1
  ret i32 %83
}

define { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %list = alloca %struct.smpPair_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.smpPair_struct* %list, i32 0, i32 0
  %8 = bitcast %struct.obj_struct* %7 to i8*
  %9 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 16, i32 8, i1 false)
  %10 = load %struct.obj_struct** %3, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %10, i64 0
  %12 = getelementptr inbounds %struct.obj_struct* %11, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = getelementptr inbounds %struct.smpType_struct* %13, i32 0, i32 1
  %15 = load i32* %14, align 4
  %16 = load i32* @smpType_id_nil, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %struct.smpPair_struct* %list, i32 0, i32 1
  store %struct.obj_struct* null, %struct.obj_struct** %19, align 8
  br label %59

; <label>:20                                      ; preds = %0
  %21 = load %struct.obj_struct** %3, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %21, i64 0
  %23 = getelementptr inbounds %struct.obj_struct* %22, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 8
  %25 = getelementptr inbounds %struct.smpType_struct* %24, i32 0, i32 1
  %26 = load i32* %25, align 4
  %27 = load i32* @smpType_id_list, align 4
  %28 = icmp eq i32 %26, %27
  br i1 %28, label %29, label %39

; <label>:29                                      ; preds = %20
  %30 = call noalias i8* @GC_malloc(i64 16)
  %31 = bitcast i8* %30 to %struct.obj_struct*
  %32 = getelementptr inbounds %struct.smpPair_struct* %list, i32 0, i32 1
  store %struct.obj_struct* %31, %struct.obj_struct** %32, align 8
  %33 = getelementptr inbounds %struct.smpPair_struct* %list, i32 0, i32 1
  %34 = load %struct.obj_struct** %33, align 8
  %35 = load %struct.obj_struct** %3, align 8
  %36 = getelementptr inbounds %struct.obj_struct* %35, i64 0
  %37 = bitcast %struct.obj_struct* %34 to i8*
  %38 = bitcast %struct.obj_struct* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 16, i32 8, i1 false)
  br label %58

; <label>:39                                      ; preds = %20
  %40 = load %struct.obj_struct** %3, align 8
  %41 = getelementptr inbounds %struct.obj_struct* %40, i64 0
  %42 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = load %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = load i8** %45, align 1
  %47 = bitcast %struct.obj_struct* %41 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = load %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = load i8** %50, align 1
  %52 = call { %struct.smpType_struct*, i8* } @smpPair_init(%struct.smpType_struct* %44, i8* %46, %struct.smpType_struct* %49, i8* %51)
  %53 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = extractvalue { %struct.smpType_struct*, i8* } %52, 0
  store %struct.smpType_struct* %55, %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = extractvalue { %struct.smpType_struct*, i8* } %52, 1
  store i8* %57, i8** %56, align 1
  br label %66

; <label>:58                                      ; preds = %29
  br label %59

; <label>:59                                      ; preds = %58, %18
  %60 = call { %struct.smpType_struct*, i8* } @smpList_init(%struct.smpPair_struct* byval align 8 %list)
  %61 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 0
  %63 = extractvalue { %struct.smpType_struct*, i8* } %60, 0
  store %struct.smpType_struct* %63, %struct.smpType_struct** %62, align 1
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 1
  %65 = extractvalue { %struct.smpType_struct*, i8* } %60, 1
  store i8* %65, i8** %64, align 1
  br label %66

; <label>:66                                      ; preds = %59, %39
  %67 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %68 = load { %struct.smpType_struct*, i8* }* %67, align 1
  ret { %struct.smpType_struct*, i8* } %68
}

define { %struct.smpType_struct*, i8* } @smpPair_init(%struct.smpType_struct* %car.coerce0, i8* %car.coerce1, %struct.smpType_struct* %cdr.coerce0, i8* %cdr.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %car = alloca %struct.obj_struct, align 8
  %cdr = alloca %struct.obj_struct, align 8
  %pair = alloca %struct.smpPair_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = bitcast %struct.obj_struct* %car to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %car.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %car.coerce1, i8** %5
  %6 = bitcast %struct.obj_struct* %cdr to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %cdr.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %cdr.coerce1, i8** %8
  %9 = getelementptr inbounds %struct.smpPair_struct* %pair, i32 0, i32 0
  %10 = bitcast %struct.obj_struct* %9 to i8*
  %11 = bitcast %struct.obj_struct* %car to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 16, i32 8, i1 false)
  %12 = getelementptr inbounds %struct.obj_struct* %cdr, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = getelementptr inbounds %struct.smpType_struct* %13, i32 0, i32 1
  %15 = load i32* %14, align 4
  %16 = load i32* @smpType_id_nil, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %struct.smpPair_struct* %pair, i32 0, i32 1
  store %struct.obj_struct* null, %struct.obj_struct** %19, align 8
  br label %28

; <label>:20                                      ; preds = %0
  %21 = call noalias i8* @GC_malloc(i64 16)
  %22 = bitcast i8* %21 to %struct.obj_struct*
  %23 = getelementptr inbounds %struct.smpPair_struct* %pair, i32 0, i32 1
  store %struct.obj_struct* %22, %struct.obj_struct** %23, align 8
  %24 = getelementptr inbounds %struct.smpPair_struct* %pair, i32 0, i32 1
  %25 = load %struct.obj_struct** %24, align 8
  %26 = bitcast %struct.obj_struct* %25 to i8*
  %27 = bitcast %struct.obj_struct* %cdr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  br label %28

; <label>:28                                      ; preds = %20, %18
  %29 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str40, i32 0, i32 0))
  %30 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 0
  %32 = extractvalue { %struct.smpType_struct*, i8* } %29, 0
  store %struct.smpType_struct* %32, %struct.smpType_struct** %31, align 1
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 1
  %34 = extractvalue { %struct.smpType_struct*, i8* } %29, 1
  store i8* %34, i8** %33, align 1
  %35 = getelementptr inbounds %struct.obj_struct* %2, i32 0, i32 1
  %36 = load i8** %35, align 8
  %37 = bitcast i8* %36 to %struct.smpType_struct*
  %38 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %37)
  %39 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = extractvalue { %struct.smpType_struct*, i8* } %38, 0
  store %struct.smpType_struct* %41, %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = extractvalue { %struct.smpType_struct*, i8* } %38, 1
  store i8* %43, i8** %42, align 1
  %44 = call noalias i8* @GC_malloc(i64 24)
  %45 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %44, i8** %45, align 8
  %46 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %47 = load i8** %46, align 8
  %48 = bitcast i8* %47 to %struct.smpPair_struct*
  %49 = bitcast %struct.smpPair_struct* %48 to i8*
  %50 = bitcast %struct.smpPair_struct* %pair to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %49, i8* %50, i64 24, i32 8, i1 false)
  %51 = bitcast %struct.obj_struct* %1 to i8*
  %52 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %52, i64 16, i32 8, i1 false)
  %53 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %54 = load { %struct.smpType_struct*, i8* }* %53, align 1
  ret { %struct.smpType_struct*, i8* } %54
}

define { %struct.smpType_struct*, i8* } @smpList_init(%struct.smpPair_struct* byval align 8 %list) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %2 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_list)
  %3 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  %5 = extractvalue { %struct.smpType_struct*, i8* } %2, 0
  store %struct.smpType_struct* %5, %struct.smpType_struct** %4, align 1
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  %7 = extractvalue { %struct.smpType_struct*, i8* } %2, 1
  store i8* %7, i8** %6, align 1
  %8 = call noalias i8* @GC_malloc(i64 24)
  %9 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %8, i8** %9, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %11 = load i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.smpPair_struct*
  %13 = bitcast %struct.smpPair_struct* %12 to i8*
  %14 = bitcast %struct.smpPair_struct* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 24, i32 8, i1 false)
  %15 = bitcast %struct.obj_struct* %1 to i8*
  %16 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 16, i32 8, i1 false)
  %17 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %18 = load { %struct.smpType_struct*, i8* }* %17, align 1
  ret { %struct.smpType_struct*, i8* } %18
}

define { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %car.coerce0, i8* %car.coerce1, %struct.smpType_struct* %cdr.coerce0, i8* %cdr.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %car = alloca %struct.obj_struct, align 8
  %cdr = alloca %struct.obj_struct, align 8
  %2 = bitcast %struct.obj_struct* %car to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %car.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %car.coerce1, i8** %4
  %5 = bitcast %struct.obj_struct* %cdr to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %cdr.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %cdr.coerce1, i8** %7
  %8 = bitcast %struct.obj_struct* %car to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = load %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = load i8** %11, align 1
  %13 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %10, i8* %12, i32 1, %struct.obj_struct* %cdr)
  %14 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = extractvalue { %struct.smpType_struct*, i8* } %13, 0
  store %struct.smpType_struct* %16, %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = extractvalue { %struct.smpType_struct*, i8* } %13, 1
  store i8* %18, i8** %17, align 1
  %19 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %20 = load { %struct.smpType_struct*, i8* }* %19, align 1
  ret { %struct.smpType_struct*, i8* } %20
}

define { %struct.smpType_struct*, i8* } @smpObject_eq(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load i32* %2, align 4
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %26

; <label>:11                                      ; preds = %0
  %12 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %13 = load i8** %12, align 8
  %14 = load %struct.obj_struct** %3, align 8
  %15 = getelementptr inbounds %struct.obj_struct* %14, i64 0
  %16 = getelementptr inbounds %struct.obj_struct* %15, i32 0, i32 1
  %17 = load i8** %16, align 8
  %18 = icmp eq i8* %13, %17
  %19 = zext i1 %18 to i32
  %20 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %19)
  %21 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = extractvalue { %struct.smpType_struct*, i8* } %20, 0
  store %struct.smpType_struct* %23, %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = extractvalue { %struct.smpType_struct*, i8* } %20, 1
  store i8* %25, i8** %24, align 1
  br label %56

; <label>:26                                      ; preds = %0
  %27 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([14 x i8]* @.str20, i32 0, i32 0))
  %28 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = extractvalue { %struct.smpType_struct*, i8* } %27, 0
  store %struct.smpType_struct* %30, %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = extractvalue { %struct.smpType_struct*, i8* } %27, 1
  store i8* %32, i8** %31, align 1
  %33 = load i32* %2, align 4
  %34 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = load i8** %37, align 1
  %39 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %36, i8* %38, i8* getelementptr inbounds ([50 x i8]* @.str21, i32 0, i32 0), i32 %33)
  %40 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = extractvalue { %struct.smpType_struct*, i8* } %39, 0
  store %struct.smpType_struct* %42, %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = extractvalue { %struct.smpType_struct*, i8* } %39, 1
  store i8* %44, i8** %43, align 1
  %45 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = load i8** %48, align 1
  %50 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %47, i8* %49)
  %51 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = extractvalue { %struct.smpType_struct*, i8* } %50, 0
  store %struct.smpType_struct* %53, %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = extractvalue { %struct.smpType_struct*, i8* } %50, 1
  store i8* %55, i8** %54, align 1
  br label %56

; <label>:56                                      ; preds = %26, %11
  %57 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %58 = load { %struct.smpType_struct*, i8* }* %57, align 1
  ret { %struct.smpType_struct*, i8* } %58
}

define { %struct.smpType_struct*, i8* } @smpBool_init(i32 %truep) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  store i32 %truep, i32* %2, align 4
  %3 = load i32* %2, align 4
  %4 = icmp ne i32 %3, 0
  br i1 %4, label %5, label %7

; <label>:5                                       ; preds = %0
  %6 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* bitcast (%struct.obj_struct* @smp_true to i8*), i64 16, i32 8, i1 false)
  br label %9

; <label>:7                                       ; preds = %0
  %8 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %9

; <label>:9                                       ; preds = %7, %5
  %10 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %11 = load { %struct.smpType_struct*, i8* }* %10, align 1
  ret { %struct.smpType_struct*, i8* } %11
}

define { %struct.smpType_struct*, i8* } @smpObject_eql(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load i32* %2, align 4
  %8 = load %struct.obj_struct** %3, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %11, i8* %13, i8* getelementptr inbounds ([7 x i8]* @.str22, i32 0, i32 0), i32 %7, %struct.obj_struct* %8)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smpObject_equalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load i32* %2, align 4
  %8 = load %struct.obj_struct** %3, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %11, i8* %13, i8* getelementptr inbounds ([4 x i8]* @.str23, i32 0, i32 0), i32 %7, %struct.obj_struct* %8)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smpObject_get_fun(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i8* %name) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %type = alloca %struct.smpType_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %type1 = alloca %struct.smpType_struct*, align 8
  %res2 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %obj.coerce1, i8** %9
  store i8* %name, i8** %2, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = load i32* @smpType_id_class, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %70

; <label>:16                                      ; preds = %0
  %17 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %18 = load i8** %17, align 8
  %19 = bitcast i8* %18 to %struct.smpType_struct*
  store %struct.smpType_struct* %19, %struct.smpType_struct** %type, align 8
  %20 = load %struct.smpType_struct** %type, align 8
  %21 = load i8** %2, align 8
  %22 = call { %struct.smpType_struct*, i8* } @smpObject_get_fun_rec(%struct.smpType_struct* %20, i8* %21, i32 0)
  %23 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = extractvalue { %struct.smpType_struct*, i8* } %22, 0
  store %struct.smpType_struct* %25, %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = extractvalue { %struct.smpType_struct*, i8* } %22, 1
  store i8* %27, i8** %26, align 1
  %28 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 0
  %29 = load %struct.smpType_struct** %28, align 8
  %30 = getelementptr inbounds %struct.smpType_struct* %29, i32 0, i32 1
  %31 = load i32* %30, align 4
  %32 = load i32* @smpType_id_nil, align 4
  %33 = icmp eq i32 %31, %32
  br i1 %33, label %34, label %67

; <label>:34                                      ; preds = %16
  %35 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([21 x i8]* @.str27, i32 0, i32 0))
  %36 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  %41 = load i8** %2, align 8
  %42 = load %struct.smpType_struct** %type, align 8
  %43 = getelementptr inbounds %struct.smpType_struct* %42, i32 0, i32 0
  %44 = load i8** %43, align 8
  %45 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = load i8** %48, align 1
  %50 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %47, i8* %49, i8* getelementptr inbounds ([41 x i8]* @.str28, i32 0, i32 0), i8* %41, i8* %44)
  %51 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = extractvalue { %struct.smpType_struct*, i8* } %50, 0
  store %struct.smpType_struct* %53, %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = extractvalue { %struct.smpType_struct*, i8* } %50, 1
  store i8* %55, i8** %54, align 1
  %56 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = load %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = load i8** %59, align 1
  %61 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %58, i8* %60)
  %62 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = extractvalue { %struct.smpType_struct*, i8* } %61, 0
  store %struct.smpType_struct* %64, %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = extractvalue { %struct.smpType_struct*, i8* } %61, 1
  store i8* %66, i8** %65, align 1
  br label %123

; <label>:67                                      ; preds = %16
  %68 = bitcast %struct.obj_struct* %1 to i8*
  %69 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %68, i8* %69, i64 16, i32 8, i1 false)
  br label %123

; <label>:70                                      ; preds = %0
  %71 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %72 = load %struct.smpType_struct** %71, align 8
  store %struct.smpType_struct* %72, %struct.smpType_struct** %type1, align 8
  %73 = load %struct.smpType_struct** %type1, align 8
  %74 = load i8** %2, align 8
  %75 = call { %struct.smpType_struct*, i8* } @smpObject_get_fun_rec(%struct.smpType_struct* %73, i8* %74, i32 1)
  %76 = bitcast %struct.obj_struct* %res2 to { %struct.smpType_struct*, i8* }*
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 0
  %78 = extractvalue { %struct.smpType_struct*, i8* } %75, 0
  store %struct.smpType_struct* %78, %struct.smpType_struct** %77, align 1
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 1
  %80 = extractvalue { %struct.smpType_struct*, i8* } %75, 1
  store i8* %80, i8** %79, align 1
  %81 = getelementptr inbounds %struct.obj_struct* %res2, i32 0, i32 0
  %82 = load %struct.smpType_struct** %81, align 8
  %83 = getelementptr inbounds %struct.smpType_struct* %82, i32 0, i32 1
  %84 = load i32* %83, align 4
  %85 = load i32* @smpType_id_nil, align 4
  %86 = icmp eq i32 %84, %85
  br i1 %86, label %87, label %120

; <label>:87                                      ; preds = %70
  %88 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([21 x i8]* @.str27, i32 0, i32 0))
  %89 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %89, i32 0, i32 0
  %91 = extractvalue { %struct.smpType_struct*, i8* } %88, 0
  store %struct.smpType_struct* %91, %struct.smpType_struct** %90, align 1
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %89, i32 0, i32 1
  %93 = extractvalue { %struct.smpType_struct*, i8* } %88, 1
  store i8* %93, i8** %92, align 1
  %94 = load i8** %2, align 8
  %95 = load %struct.smpType_struct** %type1, align 8
  %96 = getelementptr inbounds %struct.smpType_struct* %95, i32 0, i32 0
  %97 = load i8** %96, align 8
  %98 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 0
  %100 = load %struct.smpType_struct** %99, align 1
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 1
  %102 = load i8** %101, align 1
  %103 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %100, i8* %102, i8* getelementptr inbounds ([44 x i8]* @.str29, i32 0, i32 0), i8* %94, i8* %97)
  %104 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 0
  %106 = extractvalue { %struct.smpType_struct*, i8* } %103, 0
  store %struct.smpType_struct* %106, %struct.smpType_struct** %105, align 1
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 1
  %108 = extractvalue { %struct.smpType_struct*, i8* } %103, 1
  store i8* %108, i8** %107, align 1
  %109 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 0
  %111 = load %struct.smpType_struct** %110, align 1
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 1
  %113 = load i8** %112, align 1
  %114 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %111, i8* %113)
  %115 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 0
  %117 = extractvalue { %struct.smpType_struct*, i8* } %114, 0
  store %struct.smpType_struct* %117, %struct.smpType_struct** %116, align 1
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 1
  %119 = extractvalue { %struct.smpType_struct*, i8* } %114, 1
  store i8* %119, i8** %118, align 1
  br label %123

; <label>:120                                     ; preds = %70
  %121 = bitcast %struct.obj_struct* %1 to i8*
  %122 = bitcast %struct.obj_struct* %res2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* %122, i64 16, i32 8, i1 false)
  br label %123

; <label>:123                                     ; preds = %120, %87, %67, %34
  %124 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %125 = load { %struct.smpType_struct*, i8* }* %124, align 1
  ret { %struct.smpType_struct*, i8* } %125
}

define i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %obj = alloca %struct.obj_struct, align 8
  %1 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %2 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %2
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 1
  store i8* %obj.coerce1, i8** %3
  %4 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %5 = load %struct.smpType_struct** %4, align 8
  %6 = getelementptr inbounds %struct.smpType_struct* %5, i32 0, i32 1
  %7 = load i32* %6, align 4
  %8 = load i32* @smpType_id_thrown, align 4
  %9 = icmp eq i32 %7, %8
  br i1 %9, label %10, label %20

; <label>:10                                      ; preds = %0
  %11 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %12 = load i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.smpThrown_struct*
  %14 = bitcast %struct.smpThrown_struct* %13 to i32*
  %15 = load i32* %14, align 8
  %16 = and i32 %15, 15
  %17 = shl i32 %16, 28
  %18 = ashr i32 %17, 28
  %19 = icmp eq i32 %18, 0
  br label %20

; <label>:20                                      ; preds = %10, %0
  %21 = phi i1 [ false, %0 ], [ %19, %10 ]
  %22 = zext i1 %21 to i32
  ret i32 %22
}

define { %struct.smpType_struct*, i8* } @smpFunction_call(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, %struct.smpType_struct* %fun.coerce0, i8* %fun.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %fun = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %fun_core = alloca %struct.smpFunction_struct, align 8
  %i = alloca i32, align 4
  %restp = alloca i32, align 4
  %new_argc = alloca i32, align 4
  %5 = alloca i8*
  %list = alloca %struct.obj_struct, align 8
  %j = alloca i32, align 4
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca i32
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %i1 = alloca i64, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %14
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  store i8* %obj.coerce1, i8** %15
  %16 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  store %struct.smpType_struct* %fun.coerce0, %struct.smpType_struct** %17
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  store i8* %fun.coerce1, i8** %18
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %19 = getelementptr inbounds %struct.obj_struct* %fun, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 8
  %21 = getelementptr inbounds %struct.smpType_struct* %20, i32 0, i32 0
  %22 = load i8** %21, align 8
  %23 = call i32 @strcmp(i8* %22, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %48, label %25

; <label>:25                                      ; preds = %0
  %26 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_function, %struct.smpType_struct* %28, i8* %30)
  %32 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = load %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = load i8** %40, align 1
  %42 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %39, i8* %41)
  %43 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = extractvalue { %struct.smpType_struct*, i8* } %42, 0
  store %struct.smpType_struct* %45, %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = extractvalue { %struct.smpType_struct*, i8* } %42, 1
  store i8* %47, i8** %46, align 1
  br label %347

; <label>:48                                      ; preds = %0
  %49 = getelementptr inbounds %struct.obj_struct* %fun, i32 0, i32 1
  %50 = load i8** %49, align 8
  %51 = bitcast i8* %50 to %struct.smpFunction_struct*
  %52 = bitcast %struct.smpFunction_struct* %fun_core to i8*
  %53 = bitcast %struct.smpFunction_struct* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* %53, i64 40, i32 8, i1 false)
  store i32 0, i32* %restp, align 4
  %54 = bitcast %struct.smpFunction_struct* %fun_core to i8*
  %55 = getelementptr i8* %54, i32 24
  %56 = bitcast i8* %55 to i32*
  %57 = load i32* %56, align 8
  %58 = and i32 %57, 65535
  %59 = shl i32 %58, 16
  %60 = ashr i32 %59, 16
  %61 = sub nsw i32 %60, 1
  store i32 %61, i32* %new_argc, align 4
  %62 = load i32* %new_argc, align 4
  %63 = zext i32 %62 to i64
  %64 = call i8* @llvm.stacksave()
  store i8* %64, i8** %5
  %65 = alloca %struct.obj_struct, i64 %63, align 16
  store i32 0, i32* %i, align 4
  br label %66

; <label>:66                                      ; preds = %231, %48
  %67 = load i32* %i, align 4
  %68 = load i32* %new_argc, align 4
  %69 = icmp slt i32 %67, %68
  br i1 %69, label %70, label %234

; <label>:70                                      ; preds = %66
  %71 = load i32* %i, align 4
  %72 = load i32* %2, align 4
  %73 = icmp sge i32 %71, %72
  br i1 %73, label %74, label %122

; <label>:74                                      ; preds = %70
  %75 = load i32* %i, align 4
  %76 = add nsw i32 %75, 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds %struct.smpFunction_struct* %fun_core, i32 0, i32 2
  %79 = load %struct.argspec_struct** %78, align 8
  %80 = getelementptr inbounds %struct.argspec_struct* %79, i64 %77
  %81 = bitcast %struct.argspec_struct* %80 to i8*
  %82 = getelementptr i8* %81, i32 8
  %83 = bitcast i8* %82 to i32*
  %84 = load i32* %83, align 8
  %85 = lshr i32 %84, 1
  %86 = and i32 %85, 1
  %87 = shl i32 %86, 31
  %88 = ashr i32 %87, 31
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %90, label %122

; <label>:90                                      ; preds = %74
  %91 = load i32* %i, align 4
  %92 = add nsw i32 %91, 1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds %struct.smpFunction_struct* %fun_core, i32 0, i32 2
  %95 = load %struct.argspec_struct** %94, align 8
  %96 = getelementptr inbounds %struct.argspec_struct* %95, i64 %93
  %97 = bitcast %struct.argspec_struct* %96 to i8*
  %98 = getelementptr i8* %97, i32 8
  %99 = bitcast i8* %98 to i32*
  %100 = load i32* %99, align 8
  %101 = lshr i32 %100, 2
  %102 = and i32 %101, 1
  %103 = shl i32 %102, 31
  %104 = ashr i32 %103, 31
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %106, label %119

; <label>:106                                     ; preds = %90
  %107 = load i32* %i, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %struct.obj_struct* %65, i64 %108
  %110 = load i32* %i, align 4
  %111 = add nsw i32 %110, 1
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.smpFunction_struct* %fun_core, i32 0, i32 2
  %114 = load %struct.argspec_struct** %113, align 8
  %115 = getelementptr inbounds %struct.argspec_struct* %114, i64 %112
  %116 = getelementptr inbounds %struct.argspec_struct* %115, i32 0, i32 2
  %117 = bitcast %struct.obj_struct* %109 to i8*
  %118 = bitcast %struct.obj_struct* %116 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %117, i8* %118, i64 16, i32 8, i1 false)
  br label %121

; <label>:119                                     ; preds = %90
  %120 = load i32* %i, align 4
  store i32 %120, i32* %new_argc, align 4
  br label %234

; <label>:121                                     ; preds = %106
  br label %230

; <label>:122                                     ; preds = %74, %70
  %123 = load i32* %i, align 4
  %124 = add nsw i32 %123, 1
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds %struct.smpFunction_struct* %fun_core, i32 0, i32 2
  %127 = load %struct.argspec_struct** %126, align 8
  %128 = getelementptr inbounds %struct.argspec_struct* %127, i64 %125
  %129 = bitcast %struct.argspec_struct* %128 to i8*
  %130 = getelementptr i8* %129, i32 32
  %131 = bitcast i8* %130 to i32*
  %132 = load i32* %131, align 8
  %133 = and i32 %132, 1
  %134 = shl i32 %133, 31
  %135 = ashr i32 %134, 31
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %137, label %177

; <label>:137                                     ; preds = %122
  store i32 1, i32* %restp, align 4
  %138 = bitcast %struct.obj_struct* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %138, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %139 = load i32* %2, align 4
  %140 = sub nsw i32 %139, 1
  store i32 %140, i32* %j, align 4
  br label %141

; <label>:141                                     ; preds = %168, %137
  %142 = load i32* %j, align 4
  %143 = load i32* %i, align 4
  %144 = icmp sge i32 %142, %143
  br i1 %144, label %145, label %171

; <label>:145                                     ; preds = %141
  %146 = load i32* %j, align 4
  %147 = sext i32 %146 to i64
  %148 = load %struct.obj_struct** %3, align 8
  %149 = getelementptr inbounds %struct.obj_struct* %148, i64 %147
  %150 = bitcast %struct.obj_struct* %149 to { %struct.smpType_struct*, i8* }*
  %151 = getelementptr { %struct.smpType_struct*, i8* }* %150, i32 0, i32 0
  %152 = load %struct.smpType_struct** %151, align 1
  %153 = getelementptr { %struct.smpType_struct*, i8* }* %150, i32 0, i32 1
  %154 = load i8** %153, align 1
  %155 = bitcast %struct.obj_struct* %list to { %struct.smpType_struct*, i8* }*
  %156 = getelementptr { %struct.smpType_struct*, i8* }* %155, i32 0, i32 0
  %157 = load %struct.smpType_struct** %156, align 1
  %158 = getelementptr { %struct.smpType_struct*, i8* }* %155, i32 0, i32 1
  %159 = load i8** %158, align 1
  %160 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %152, i8* %154, %struct.smpType_struct* %157, i8* %159)
  %161 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %162 = getelementptr { %struct.smpType_struct*, i8* }* %161, i32 0, i32 0
  %163 = extractvalue { %struct.smpType_struct*, i8* } %160, 0
  store %struct.smpType_struct* %163, %struct.smpType_struct** %162, align 1
  %164 = getelementptr { %struct.smpType_struct*, i8* }* %161, i32 0, i32 1
  %165 = extractvalue { %struct.smpType_struct*, i8* } %160, 1
  store i8* %165, i8** %164, align 1
  %166 = bitcast %struct.obj_struct* %list to i8*
  %167 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %166, i8* %167, i64 16, i32 8, i1 false)
  br label %168

; <label>:168                                     ; preds = %145
  %169 = load i32* %j, align 4
  %170 = add nsw i32 %169, -1
  store i32 %170, i32* %j, align 4
  br label %141

; <label>:171                                     ; preds = %141
  %172 = load i32* %i, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds %struct.obj_struct* %65, i64 %173
  %175 = bitcast %struct.obj_struct* %174 to i8*
  %176 = bitcast %struct.obj_struct* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %175, i8* %176, i64 16, i32 8, i1 false)
  br label %234

; <label>:177                                     ; preds = %122
  %178 = load i32* %i, align 4
  %179 = load i32* %2, align 4
  %180 = icmp sge i32 %178, %179
  br i1 %180, label %181, label %218

; <label>:181                                     ; preds = %177
  %182 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([14 x i8]* @.str20, i32 0, i32 0))
  %183 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %184 = getelementptr { %struct.smpType_struct*, i8* }* %183, i32 0, i32 0
  %185 = extractvalue { %struct.smpType_struct*, i8* } %182, 0
  store %struct.smpType_struct* %185, %struct.smpType_struct** %184, align 1
  %186 = getelementptr { %struct.smpType_struct*, i8* }* %183, i32 0, i32 1
  %187 = extractvalue { %struct.smpType_struct*, i8* } %182, 1
  store i8* %187, i8** %186, align 1
  %188 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %189 = load %struct.smpType_struct** %188, align 8
  %190 = getelementptr inbounds %struct.smpType_struct* %189, i32 0, i32 0
  %191 = load i8** %190, align 8
  %192 = getelementptr inbounds %struct.smpFunction_struct* %fun_core, i32 0, i32 1
  %193 = load i8** %192, align 8
  %194 = load i32* %new_argc, align 4
  %195 = load i32* %2, align 4
  %196 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %197 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 0
  %198 = load %struct.smpType_struct** %197, align 1
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 1
  %200 = load i8** %199, align 1
  %201 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %198, i8* %200, i8* getelementptr inbounds ([60 x i8]* @.str138, i32 0, i32 0), i8* %191, i8* %193, i32 %194, i32 %195)
  %202 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %203 = getelementptr { %struct.smpType_struct*, i8* }* %202, i32 0, i32 0
  %204 = extractvalue { %struct.smpType_struct*, i8* } %201, 0
  store %struct.smpType_struct* %204, %struct.smpType_struct** %203, align 1
  %205 = getelementptr { %struct.smpType_struct*, i8* }* %202, i32 0, i32 1
  %206 = extractvalue { %struct.smpType_struct*, i8* } %201, 1
  store i8* %206, i8** %205, align 1
  %207 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %208 = getelementptr { %struct.smpType_struct*, i8* }* %207, i32 0, i32 0
  %209 = load %struct.smpType_struct** %208, align 1
  %210 = getelementptr { %struct.smpType_struct*, i8* }* %207, i32 0, i32 1
  %211 = load i8** %210, align 1
  %212 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %209, i8* %211)
  %213 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %214 = getelementptr { %struct.smpType_struct*, i8* }* %213, i32 0, i32 0
  %215 = extractvalue { %struct.smpType_struct*, i8* } %212, 0
  store %struct.smpType_struct* %215, %struct.smpType_struct** %214, align 1
  %216 = getelementptr { %struct.smpType_struct*, i8* }* %213, i32 0, i32 1
  %217 = extractvalue { %struct.smpType_struct*, i8* } %212, 1
  store i8* %217, i8** %216, align 1
  store i32 1, i32* %9
  br label %345

; <label>:218                                     ; preds = %177
  %219 = load i32* %i, align 4
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds %struct.obj_struct* %65, i64 %220
  %222 = load i32* %i, align 4
  %223 = sext i32 %222 to i64
  %224 = load %struct.obj_struct** %3, align 8
  %225 = getelementptr inbounds %struct.obj_struct* %224, i64 %223
  %226 = bitcast %struct.obj_struct* %221 to i8*
  %227 = bitcast %struct.obj_struct* %225 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %226, i8* %227, i64 16, i32 8, i1 false)
  br label %228

; <label>:228                                     ; preds = %218
  br label %229

; <label>:229                                     ; preds = %228
  br label %230

; <label>:230                                     ; preds = %229, %121
  br label %231

; <label>:231                                     ; preds = %230
  %232 = load i32* %i, align 4
  %233 = add nsw i32 %232, 1
  store i32 %233, i32* %i, align 4
  br label %66

; <label>:234                                     ; preds = %171, %119, %66
  %235 = load i32* %restp, align 4
  %236 = icmp ne i32 %235, 0
  br i1 %236, label %278, label %237

; <label>:237                                     ; preds = %234
  %238 = load i32* %new_argc, align 4
  %239 = load i32* %2, align 4
  %240 = icmp slt i32 %238, %239
  br i1 %240, label %241, label %278

; <label>:241                                     ; preds = %237
  %242 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([14 x i8]* @.str20, i32 0, i32 0))
  %243 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %244 = getelementptr { %struct.smpType_struct*, i8* }* %243, i32 0, i32 0
  %245 = extractvalue { %struct.smpType_struct*, i8* } %242, 0
  store %struct.smpType_struct* %245, %struct.smpType_struct** %244, align 1
  %246 = getelementptr { %struct.smpType_struct*, i8* }* %243, i32 0, i32 1
  %247 = extractvalue { %struct.smpType_struct*, i8* } %242, 1
  store i8* %247, i8** %246, align 1
  %248 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %249 = load %struct.smpType_struct** %248, align 8
  %250 = getelementptr inbounds %struct.smpType_struct* %249, i32 0, i32 0
  %251 = load i8** %250, align 8
  %252 = getelementptr inbounds %struct.smpFunction_struct* %fun_core, i32 0, i32 1
  %253 = load i8** %252, align 8
  %254 = load i32* %new_argc, align 4
  %255 = load i32* %2, align 4
  %256 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %257 = getelementptr { %struct.smpType_struct*, i8* }* %256, i32 0, i32 0
  %258 = load %struct.smpType_struct** %257, align 1
  %259 = getelementptr { %struct.smpType_struct*, i8* }* %256, i32 0, i32 1
  %260 = load i8** %259, align 1
  %261 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %258, i8* %260, i8* getelementptr inbounds ([60 x i8]* @.str138, i32 0, i32 0), i8* %251, i8* %253, i32 %254, i32 %255)
  %262 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %263 = getelementptr { %struct.smpType_struct*, i8* }* %262, i32 0, i32 0
  %264 = extractvalue { %struct.smpType_struct*, i8* } %261, 0
  store %struct.smpType_struct* %264, %struct.smpType_struct** %263, align 1
  %265 = getelementptr { %struct.smpType_struct*, i8* }* %262, i32 0, i32 1
  %266 = extractvalue { %struct.smpType_struct*, i8* } %261, 1
  store i8* %266, i8** %265, align 1
  %267 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %268 = getelementptr { %struct.smpType_struct*, i8* }* %267, i32 0, i32 0
  %269 = load %struct.smpType_struct** %268, align 1
  %270 = getelementptr { %struct.smpType_struct*, i8* }* %267, i32 0, i32 1
  %271 = load i8** %270, align 1
  %272 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %269, i8* %271)
  %273 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %274 = getelementptr { %struct.smpType_struct*, i8* }* %273, i32 0, i32 0
  %275 = extractvalue { %struct.smpType_struct*, i8* } %272, 0
  store %struct.smpType_struct* %275, %struct.smpType_struct** %274, align 1
  %276 = getelementptr { %struct.smpType_struct*, i8* }* %273, i32 0, i32 1
  %277 = extractvalue { %struct.smpType_struct*, i8* } %272, 1
  store i8* %277, i8** %276, align 1
  store i32 1, i32* %9
  br label %345

; <label>:278                                     ; preds = %237, %234
  %279 = getelementptr inbounds %struct.smpFunction_struct* %fun_core, i32 0, i32 4
  %280 = load { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)** %279, align 8
  %281 = load i32* %new_argc, align 4
  %282 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %283 = getelementptr { %struct.smpType_struct*, i8* }* %282, i32 0, i32 0
  %284 = load %struct.smpType_struct** %283, align 1
  %285 = getelementptr { %struct.smpType_struct*, i8* }* %282, i32 0, i32 1
  %286 = load i8** %285, align 1
  %287 = call { %struct.smpType_struct*, i8* } %280(%struct.smpType_struct* %284, i8* %286, i32 %281, %struct.obj_struct* %65)
  %288 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %289 = getelementptr { %struct.smpType_struct*, i8* }* %288, i32 0, i32 0
  %290 = extractvalue { %struct.smpType_struct*, i8* } %287, 0
  store %struct.smpType_struct* %290, %struct.smpType_struct** %289, align 1
  %291 = getelementptr { %struct.smpType_struct*, i8* }* %288, i32 0, i32 1
  %292 = extractvalue { %struct.smpType_struct*, i8* } %287, 1
  store i8* %292, i8** %291, align 1
  %293 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %294 = getelementptr { %struct.smpType_struct*, i8* }* %293, i32 0, i32 0
  %295 = load %struct.smpType_struct** %294, align 1
  %296 = getelementptr { %struct.smpType_struct*, i8* }* %293, i32 0, i32 1
  %297 = load i8** %296, align 1
  %298 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %295, i8* %297)
  %299 = icmp ne i32 %298, 0
  br i1 %299, label %300, label %342

; <label>:300                                     ; preds = %278
  store i64 0, i64* %i1, align 8
  br label %301

; <label>:301                                     ; preds = %338, %300
  %302 = load i64* %i1, align 8
  %303 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %304 = load i8** %303, align 8
  %305 = bitcast i8* %304 to %struct.smpThrown_struct*
  %306 = getelementptr inbounds %struct.smpThrown_struct* %305, i32 0, i32 2
  %307 = load i64* %306, align 8
  %308 = icmp ult i64 %302, %307
  br i1 %308, label %309, label %341

; <label>:309                                     ; preds = %301
  %310 = load i64* %i1, align 8
  %311 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %312 = load i8** %311, align 8
  %313 = bitcast i8* %312 to %struct.smpThrown_struct*
  %314 = getelementptr inbounds %struct.smpThrown_struct* %313, i32 0, i32 1
  %315 = load %struct.obj_struct** %314, align 8
  %316 = getelementptr inbounds %struct.obj_struct* %315, i64 %310
  %317 = bitcast %struct.obj_struct* %316 to { %struct.smpType_struct*, i8* }*
  %318 = getelementptr { %struct.smpType_struct*, i8* }* %317, i32 0, i32 0
  %319 = load %struct.smpType_struct** %318, align 1
  %320 = getelementptr { %struct.smpType_struct*, i8* }* %317, i32 0, i32 1
  %321 = load i8** %320, align 1
  %322 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %323 = getelementptr { %struct.smpType_struct*, i8* }* %322, i32 0, i32 0
  %324 = load %struct.smpType_struct** %323, align 1
  %325 = getelementptr { %struct.smpType_struct*, i8* }* %322, i32 0, i32 1
  %326 = load i8** %325, align 1
  %327 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %328 = getelementptr { %struct.smpType_struct*, i8* }* %327, i32 0, i32 0
  %329 = load %struct.smpType_struct** %328, align 1
  %330 = getelementptr { %struct.smpType_struct*, i8* }* %327, i32 0, i32 1
  %331 = load i8** %330, align 1
  %332 = call { %struct.smpType_struct*, i8* } @smpException_backtrace_add_now(%struct.smpType_struct* %319, i8* %321, %struct.smpType_struct* %324, i8* %326, %struct.smpType_struct* %329, i8* %331)
  %333 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %334 = getelementptr { %struct.smpType_struct*, i8* }* %333, i32 0, i32 0
  %335 = extractvalue { %struct.smpType_struct*, i8* } %332, 0
  store %struct.smpType_struct* %335, %struct.smpType_struct** %334, align 1
  %336 = getelementptr { %struct.smpType_struct*, i8* }* %333, i32 0, i32 1
  %337 = extractvalue { %struct.smpType_struct*, i8* } %332, 1
  store i8* %337, i8** %336, align 1
  br label %338

; <label>:338                                     ; preds = %309
  %339 = load i64* %i1, align 8
  %340 = add i64 %339, 1
  store i64 %340, i64* %i1, align 8
  br label %301

; <label>:341                                     ; preds = %301
  br label %342

; <label>:342                                     ; preds = %341, %278
  %343 = bitcast %struct.obj_struct* %1 to i8*
  %344 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %343, i8* %344, i64 16, i32 8, i1 false)
  store i32 1, i32* %9
  br label %345

; <label>:345                                     ; preds = %342, %241, %181
  %346 = load i8** %5
  call void @llvm.stackrestore(i8* %346)
  br label %347

; <label>:347                                     ; preds = %345, %25
  %348 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %349 = load { %struct.smpType_struct*, i8* }* %348, align 1
  ret { %struct.smpType_struct*, i8* } %349
}

define { %struct.smpType_struct*, i8* } @smpObject_funcall_arg(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %arglist = alloca %struct.obj_struct, align 8
  %i = alloca i32, align 4
  %length = alloca i32, align 4
  %8 = alloca i8*
  %9 = alloca i32
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %11
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  store i8* %obj.coerce1, i8** %12
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %13 = load %struct.obj_struct** %3, align 8
  %14 = getelementptr inbounds %struct.obj_struct* %13, i64 0
  %15 = getelementptr inbounds %struct.obj_struct* %14, i32 0, i32 0
  %16 = load %struct.smpType_struct** %15, align 8
  %17 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %16, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %67, label %19

; <label>:19                                      ; preds = %0
  %20 = load %struct.obj_struct** %3, align 8
  %21 = getelementptr inbounds %struct.obj_struct* %20, i64 0
  %22 = getelementptr inbounds %struct.obj_struct* %21, i32 0, i32 0
  %23 = load %struct.smpType_struct** %22, align 8
  %24 = getelementptr inbounds %struct.smpType_struct* %23, i32 0, i32 0
  %25 = load i8** %24, align 8
  %26 = call i32 @strcmp(i8* %25, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %33

; <label>:28                                      ; preds = %19
  %29 = load %struct.obj_struct** %3, align 8
  %30 = getelementptr inbounds %struct.obj_struct* %29, i64 0
  %31 = bitcast %struct.obj_struct* %1 to i8*
  %32 = bitcast %struct.obj_struct* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 16, i32 8, i1 false)
  br label %193

; <label>:33                                      ; preds = %19
  %34 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %35 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %41 = load i8** %40, align 8
  %42 = bitcast i8* %41 to %struct.smpType_struct*
  %43 = load %struct.obj_struct** %3, align 8
  %44 = getelementptr inbounds %struct.obj_struct* %43, i64 0
  %45 = bitcast %struct.obj_struct* %44 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = load i8** %48, align 1
  %50 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %42, %struct.smpType_struct* %47, i8* %49)
  %51 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = extractvalue { %struct.smpType_struct*, i8* } %50, 0
  store %struct.smpType_struct* %53, %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = extractvalue { %struct.smpType_struct*, i8* } %50, 1
  store i8* %55, i8** %54, align 1
  %56 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = load %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = load i8** %59, align 1
  %61 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %58, i8* %60)
  %62 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = extractvalue { %struct.smpType_struct*, i8* } %61, 0
  store %struct.smpType_struct* %64, %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = extractvalue { %struct.smpType_struct*, i8* } %61, 1
  store i8* %66, i8** %65, align 1
  br label %193

; <label>:67                                      ; preds = %0
  %68 = load %struct.obj_struct** %3, align 8
  %69 = getelementptr inbounds %struct.obj_struct* %68, i64 1
  %70 = getelementptr inbounds %struct.obj_struct* %69, i32 0, i32 0
  %71 = load %struct.smpType_struct** %70, align 8
  %72 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %71, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %122, label %74

; <label>:74                                      ; preds = %67
  %75 = load %struct.obj_struct** %3, align 8
  %76 = getelementptr inbounds %struct.obj_struct* %75, i64 1
  %77 = getelementptr inbounds %struct.obj_struct* %76, i32 0, i32 0
  %78 = load %struct.smpType_struct** %77, align 8
  %79 = getelementptr inbounds %struct.smpType_struct* %78, i32 0, i32 0
  %80 = load i8** %79, align 8
  %81 = call i32 @strcmp(i8* %80, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %88

; <label>:83                                      ; preds = %74
  %84 = load %struct.obj_struct** %3, align 8
  %85 = getelementptr inbounds %struct.obj_struct* %84, i64 1
  %86 = bitcast %struct.obj_struct* %1 to i8*
  %87 = bitcast %struct.obj_struct* %85 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 16, i32 8, i1 false)
  br label %193

; <label>:88                                      ; preds = %74
  %89 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %90 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = extractvalue { %struct.smpType_struct*, i8* } %89, 0
  store %struct.smpType_struct* %92, %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = extractvalue { %struct.smpType_struct*, i8* } %89, 1
  store i8* %94, i8** %93, align 1
  %95 = getelementptr inbounds %struct.obj_struct* %7, i32 0, i32 1
  %96 = load i8** %95, align 8
  %97 = bitcast i8* %96 to %struct.smpType_struct*
  %98 = load %struct.obj_struct** %3, align 8
  %99 = getelementptr inbounds %struct.obj_struct* %98, i64 1
  %100 = bitcast %struct.obj_struct* %99 to { %struct.smpType_struct*, i8* }*
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 0
  %102 = load %struct.smpType_struct** %101, align 1
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 1
  %104 = load i8** %103, align 1
  %105 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %97, %struct.smpType_struct* %102, i8* %104)
  %106 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 0
  %108 = extractvalue { %struct.smpType_struct*, i8* } %105, 0
  store %struct.smpType_struct* %108, %struct.smpType_struct** %107, align 1
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 1
  %110 = extractvalue { %struct.smpType_struct*, i8* } %105, 1
  store i8* %110, i8** %109, align 1
  %111 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %111, i32 0, i32 0
  %113 = load %struct.smpType_struct** %112, align 1
  %114 = getelementptr { %struct.smpType_struct*, i8* }* %111, i32 0, i32 1
  %115 = load i8** %114, align 1
  %116 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %113, i8* %115)
  %117 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 0
  %119 = extractvalue { %struct.smpType_struct*, i8* } %116, 0
  store %struct.smpType_struct* %119, %struct.smpType_struct** %118, align 1
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 1
  %121 = extractvalue { %struct.smpType_struct*, i8* } %116, 1
  store i8* %121, i8** %120, align 1
  br label %193

; <label>:122                                     ; preds = %67
  %123 = load %struct.obj_struct** %3, align 8
  %124 = getelementptr inbounds %struct.obj_struct* %123, i64 1
  %125 = bitcast %struct.obj_struct* %arglist to i8*
  %126 = bitcast %struct.obj_struct* %124 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %125, i8* %126, i64 16, i32 8, i1 false)
  %127 = bitcast %struct.obj_struct* %arglist to { %struct.smpType_struct*, i8* }*
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 0
  %129 = load %struct.smpType_struct** %128, align 1
  %130 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 1
  %131 = load i8** %130, align 1
  %132 = call i64 @smpList_length_clong(%struct.smpType_struct* %129, i8* %131)
  %133 = trunc i64 %132 to i32
  store i32 %133, i32* %length, align 4
  %134 = load i32* %length, align 4
  %135 = zext i32 %134 to i64
  %136 = call i8* @llvm.stacksave()
  store i8* %136, i8** %8
  %137 = alloca %struct.obj_struct, i64 %135, align 16
  store i32 0, i32* %i, align 4
  br label %138

; <label>:138                                     ; preds = %169, %122
  %139 = load i32* %i, align 4
  %140 = load i32* %length, align 4
  %141 = icmp slt i32 %139, %140
  br i1 %141, label %142, label %172

; <label>:142                                     ; preds = %138
  %143 = load i32* %i, align 4
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds %struct.obj_struct* %137, i64 %144
  %146 = getelementptr inbounds %struct.obj_struct* %arglist, i32 0, i32 1
  %147 = load i8** %146, align 8
  %148 = bitcast i8* %147 to %struct.smpPair_struct*
  %149 = getelementptr inbounds %struct.smpPair_struct* %148, i32 0, i32 0
  %150 = bitcast %struct.obj_struct* %145 to i8*
  %151 = bitcast %struct.obj_struct* %149 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %150, i8* %151, i64 16, i32 8, i1 false)
  %152 = getelementptr inbounds %struct.obj_struct* %arglist, i32 0, i32 1
  %153 = load i8** %152, align 8
  %154 = bitcast i8* %153 to %struct.smpPair_struct*
  %155 = getelementptr inbounds %struct.smpPair_struct* %154, i32 0, i32 1
  %156 = load %struct.obj_struct** %155, align 8
  %157 = icmp ne %struct.obj_struct* %156, null
  br i1 %157, label %158, label %166

; <label>:158                                     ; preds = %142
  %159 = getelementptr inbounds %struct.obj_struct* %arglist, i32 0, i32 1
  %160 = load i8** %159, align 8
  %161 = bitcast i8* %160 to %struct.smpPair_struct*
  %162 = getelementptr inbounds %struct.smpPair_struct* %161, i32 0, i32 1
  %163 = load %struct.obj_struct** %162, align 8
  %164 = bitcast %struct.obj_struct* %arglist to i8*
  %165 = bitcast %struct.obj_struct* %163 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %164, i8* %165, i64 16, i32 8, i1 false)
  br label %168

; <label>:166                                     ; preds = %142
  %167 = bitcast %struct.obj_struct* %arglist to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %167, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %168

; <label>:168                                     ; preds = %166, %158
  br label %169

; <label>:169                                     ; preds = %168
  %170 = load i32* %i, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %i, align 4
  br label %138

; <label>:172                                     ; preds = %138
  %173 = load %struct.obj_struct** %3, align 8
  %174 = getelementptr inbounds %struct.obj_struct* %173, i64 0
  %175 = load i32* %length, align 4
  %176 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %177 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 0
  %178 = load %struct.smpType_struct** %177, align 1
  %179 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 1
  %180 = load i8** %179, align 1
  %181 = bitcast %struct.obj_struct* %174 to { %struct.smpType_struct*, i8* }*
  %182 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 0
  %183 = load %struct.smpType_struct** %182, align 1
  %184 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 1
  %185 = load i8** %184, align 1
  %186 = call { %struct.smpType_struct*, i8* } @smpFunction_call(%struct.smpType_struct* %178, i8* %180, %struct.smpType_struct* %183, i8* %185, i32 %175, %struct.obj_struct* %137)
  %187 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %188 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 0
  %189 = extractvalue { %struct.smpType_struct*, i8* } %186, 0
  store %struct.smpType_struct* %189, %struct.smpType_struct** %188, align 1
  %190 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 1
  %191 = extractvalue { %struct.smpType_struct*, i8* } %186, 1
  store i8* %191, i8** %190, align 1
  store i32 1, i32* %9
  %192 = load i8** %8
  call void @llvm.stackrestore(i8* %192)
  br label %193

; <label>:193                                     ; preds = %172, %88, %83, %33, %28
  %194 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %195 = load { %struct.smpType_struct*, i8* }* %194, align 1
  ret { %struct.smpType_struct*, i8* } %195
}

define i32 @smpObject_instancep_cstr(%struct.smpType_struct* %objtype, i8* %type) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.smpType_struct*, align 8
  %3 = alloca i8*, align 8
  %i = alloca i64, align 8
  store %struct.smpType_struct* %objtype, %struct.smpType_struct** %2, align 8
  store i8* %type, i8** %3, align 8
  %4 = load %struct.smpType_struct** %2, align 8
  %5 = getelementptr inbounds %struct.smpType_struct* %4, i32 0, i32 0
  %6 = load i8** %5, align 8
  %7 = load i8** %3, align 8
  %8 = call i32 @strcmp(i8* %6, i8* %7)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

; <label>:10                                      ; preds = %0
  store i32 1, i32* %1
  br label %34

; <label>:11                                      ; preds = %0
  store i64 0, i64* %i, align 8
  br label %12

; <label>:12                                      ; preds = %30, %11
  %13 = load i64* %i, align 8
  %14 = load %struct.smpType_struct** %2, align 8
  %15 = getelementptr inbounds %struct.smpType_struct* %14, i32 0, i32 4
  %16 = load i64* %15, align 8
  %17 = icmp ult i64 %13, %16
  br i1 %17, label %18, label %33

; <label>:18                                      ; preds = %12
  %19 = load i64* %i, align 8
  %20 = load %struct.smpType_struct** %2, align 8
  %21 = getelementptr inbounds %struct.smpType_struct* %20, i32 0, i32 3
  %22 = load %struct.smpType_struct*** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct** %22, i64 %19
  %24 = load %struct.smpType_struct** %23, align 8
  %25 = load i8** %3, align 8
  %26 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %24, i8* %25)
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

; <label>:28                                      ; preds = %18
  store i32 1, i32* %1
  br label %34

; <label>:29                                      ; preds = %18
  br label %30

; <label>:30                                      ; preds = %29
  %31 = load i64* %i, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %i, align 8
  br label %12

; <label>:33                                      ; preds = %12
  store i32 0, i32* %1
  br label %34

; <label>:34                                      ; preds = %33, %28, %10
  %35 = load i32* %1
  ret i32 %35
}

define { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %expected, %struct.smpType_struct* %found.coerce0, i8* %found.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.smpType_struct*, align 8
  %found = alloca %struct.obj_struct, align 8
  %res = alloca %struct.smpTypeError_struct, align 8
  %wrapper = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  store %struct.smpType_struct* %expected, %struct.smpType_struct** %2, align 8
  %4 = bitcast %struct.obj_struct* %found to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %found.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %found.coerce1, i8** %6
  %7 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 0
  store i8* null, i8** %7, align 8
  %8 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 1
  %9 = bitcast %struct.obj_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %10 = load %struct.smpType_struct** %2, align 8
  %11 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 2
  store %struct.smpType_struct* %10, %struct.smpType_struct** %11, align 8
  %12 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 3
  %13 = bitcast %struct.obj_struct* %12 to i8*
  %14 = bitcast %struct.obj_struct* %found to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  %15 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([10 x i8]* @.str48, i32 0, i32 0))
  %16 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = extractvalue { %struct.smpType_struct*, i8* } %15, 0
  store %struct.smpType_struct* %18, %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = extractvalue { %struct.smpType_struct*, i8* } %15, 1
  store i8* %20, i8** %19, align 1
  %21 = getelementptr inbounds %struct.obj_struct* %3, i32 0, i32 1
  %22 = load i8** %21, align 8
  %23 = bitcast i8* %22 to %struct.smpType_struct*
  %24 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %23)
  %25 = bitcast %struct.obj_struct* %wrapper to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = extractvalue { %struct.smpType_struct*, i8* } %24, 0
  store %struct.smpType_struct* %27, %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = extractvalue { %struct.smpType_struct*, i8* } %24, 1
  store i8* %29, i8** %28, align 1
  %30 = call noalias i8* @GC_malloc(i64 48)
  %31 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  store i8* %30, i8** %31, align 8
  %32 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  %33 = load i8** %32, align 8
  %34 = bitcast i8* %33 to %struct.smpTypeError_struct*
  %35 = bitcast %struct.smpTypeError_struct* %34 to i8*
  %36 = bitcast %struct.smpTypeError_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 48, i32 8, i1 false)
  %37 = bitcast %struct.obj_struct* %1 to i8*
  %38 = bitcast %struct.obj_struct* %wrapper to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 16, i32 8, i1 false)
  %39 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %40 = load { %struct.smpType_struct*, i8* }* %39, align 1
  ret { %struct.smpType_struct*, i8* } %40
}

define i64 @smpList_length_clong(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca i64, align 8
  %obj = alloca %struct.obj_struct, align 8
  %length = alloca i64, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %2 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %obj.coerce1, i8** %4
  %5 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %6 = load %struct.smpType_struct** %5, align 8
  %7 = getelementptr inbounds %struct.smpType_struct* %6, i32 0, i32 1
  %8 = load i32* %7, align 4
  %9 = load i32* @smpType_id_nil, align 4
  %10 = icmp eq i32 %8, %9
  br i1 %10, label %11, label %12

; <label>:11                                      ; preds = %0
  store i64 0, i64* %1
  br label %27

; <label>:12                                      ; preds = %0
  store i64 0, i64* %length, align 8
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  br label %13

; <label>:13                                      ; preds = %16, %12
  %14 = load %struct.obj_struct** %ptr, align 8
  %15 = icmp ne %struct.obj_struct* %14, null
  br i1 %15, label %16, label %25

; <label>:16                                      ; preds = %13
  %17 = load i64* %length, align 8
  %18 = add nsw i64 %17, 1
  store i64 %18, i64* %length, align 8
  %19 = load %struct.obj_struct** %ptr, align 8
  %20 = getelementptr inbounds %struct.obj_struct* %19, i32 0, i32 1
  %21 = load i8** %20, align 8
  %22 = bitcast i8* %21 to %struct.smpPair_struct*
  %23 = getelementptr inbounds %struct.smpPair_struct* %22, i32 0, i32 1
  %24 = load %struct.obj_struct** %23, align 8
  store %struct.obj_struct* %24, %struct.obj_struct** %ptr, align 8
  br label %13

; <label>:25                                      ; preds = %13
  %26 = load i64* %length, align 8
  store i64 %26, i64* %1
  br label %27

; <label>:27                                      ; preds = %25, %11
  %28 = load i64* %1
  ret i64 %28
}

declare i8* @llvm.stacksave() nounwind

declare void @llvm.stackrestore(i8*) nounwind

define { %struct.smpType_struct*, i8* } @smpObject_getclass(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %8 = load %struct.smpType_struct** %7, align 8
  %9 = getelementptr inbounds %struct.smpType_struct* %8, i32 0, i32 0
  %10 = load i8** %9, align 8
  %11 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* %10)
  %12 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %18 = load { %struct.smpType_struct*, i8* }* %17, align 1
  ret { %struct.smpType_struct*, i8* } %18
}

define { %struct.smpType_struct*, i8* } @smpObject_get_fun_rec(%struct.smpType_struct* %type, i8* %name, i32 %instance_funp) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.smpType_struct*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %fun = alloca %struct.obj_struct, align 8
  %hash = alloca %struct.minihash_struct*, align 8
  %5 = alloca %struct.obj_struct, align 8
  %i = alloca i64, align 8
  %6 = alloca %struct.obj_struct, align 8
  store %struct.smpType_struct* %type, %struct.smpType_struct** %2, align 8
  store i8* %name, i8** %3, align 8
  store i32 %instance_funp, i32* %4, align 4
  %7 = load %struct.smpType_struct** %2, align 8
  %8 = icmp eq %struct.smpType_struct* %7, null
  br i1 %8, label %9, label %11

; <label>:9                                       ; preds = %0
  %10 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %102

; <label>:11                                      ; preds = %0
  store %struct.minihash_struct* null, %struct.minihash_struct** %hash, align 8
  %12 = load i32* %4, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %11
  %15 = load %struct.smpType_struct** %2, align 8
  %16 = getelementptr inbounds %struct.smpType_struct* %15, i32 0, i32 5
  %17 = load %struct.minihash_struct** %16, align 8
  store %struct.minihash_struct* %17, %struct.minihash_struct** %hash, align 8
  br label %22

; <label>:18                                      ; preds = %11
  %19 = load %struct.smpType_struct** %2, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 7
  %21 = load %struct.minihash_struct** %20, align 8
  store %struct.minihash_struct* %21, %struct.minihash_struct** %hash, align 8
  br label %22

; <label>:22                                      ; preds = %18, %14
  %23 = load %struct.minihash_struct** %hash, align 8
  %24 = load i8** %3, align 8
  %25 = call i32 @minihash_containsp(%struct.minihash_struct* %23, i8* %24)
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %54

; <label>:27                                      ; preds = %22
  %28 = load %struct.minihash_struct** %hash, align 8
  %29 = load i8** %3, align 8
  %30 = call { %struct.smpType_struct*, i8* } @minihash_get(%struct.minihash_struct* %28, i8* %29)
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = bitcast %struct.obj_struct* %fun to i8*
  %37 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 16, i32 8, i1 false)
  %38 = getelementptr inbounds %struct.obj_struct* %fun, i32 0, i32 0
  %39 = load %struct.smpType_struct** %38, align 8
  %40 = getelementptr inbounds %struct.smpType_struct* %39, i32 0, i32 0
  %41 = load i8** %40, align 8
  %42 = call i32 @strcmp(i8* %41, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %43 = icmp eq i32 %42, 0
  %44 = zext i1 %43 to i32
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %51

; <label>:46                                      ; preds = %27
  %47 = getelementptr inbounds %struct.obj_struct* %fun, i32 0, i32 0
  %48 = load %struct.smpType_struct** %47, align 8
  %49 = getelementptr inbounds %struct.smpType_struct* %48, i32 0, i32 0
  %50 = load i8** %49, align 8
  call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([29 x i8]* @.str30, i32 0, i32 0), i8* %50)
  br label %51

; <label>:51                                      ; preds = %46, %27
  %52 = bitcast %struct.obj_struct* %1 to i8*
  %53 = bitcast %struct.obj_struct* %fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* %53, i64 16, i32 8, i1 false)
  br label %102

; <label>:54                                      ; preds = %22
  %55 = load %struct.smpType_struct** %2, align 8
  %56 = getelementptr inbounds %struct.smpType_struct* %55, i32 0, i32 3
  %57 = load %struct.smpType_struct*** %56, align 8
  %58 = icmp eq %struct.smpType_struct** %57, null
  br i1 %58, label %59, label %61

; <label>:59                                      ; preds = %54
  %60 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %60, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %102

; <label>:61                                      ; preds = %54
  store i64 0, i64* %i, align 8
  br label %62

; <label>:62                                      ; preds = %97, %61
  %63 = load i64* %i, align 8
  %64 = load %struct.smpType_struct** %2, align 8
  %65 = getelementptr inbounds %struct.smpType_struct* %64, i32 0, i32 4
  %66 = load i64* %65, align 8
  %67 = icmp ult i64 %63, %66
  br i1 %67, label %68, label %100

; <label>:68                                      ; preds = %62
  %69 = load i64* %i, align 8
  %70 = load %struct.smpType_struct** %2, align 8
  %71 = getelementptr inbounds %struct.smpType_struct* %70, i32 0, i32 3
  %72 = load %struct.smpType_struct*** %71, align 8
  %73 = getelementptr inbounds %struct.smpType_struct** %72, i64 %69
  %74 = load %struct.smpType_struct** %73, align 8
  %75 = load i8** %3, align 8
  %76 = load i32* %4, align 4
  %77 = call { %struct.smpType_struct*, i8* } @smpObject_get_fun_rec(%struct.smpType_struct* %74, i8* %75, i32 %76)
  %78 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = bitcast %struct.obj_struct* %fun to i8*
  %84 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %83, i8* %84, i64 16, i32 8, i1 false)
  %85 = getelementptr inbounds %struct.obj_struct* %fun, i32 0, i32 0
  %86 = load %struct.smpType_struct** %85, align 8
  %87 = getelementptr inbounds %struct.smpType_struct* %86, i32 0, i32 1
  %88 = load i32* %87, align 4
  %89 = load i32* @smpType_id_nil, align 4
  %90 = icmp eq i32 %88, %89
  %91 = zext i1 %90 to i32
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %96

; <label>:93                                      ; preds = %68
  %94 = bitcast %struct.obj_struct* %1 to i8*
  %95 = bitcast %struct.obj_struct* %fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* %95, i64 16, i32 8, i1 false)
  br label %102

; <label>:96                                      ; preds = %68
  br label %97

; <label>:97                                      ; preds = %96
  %98 = load i64* %i, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %i, align 8
  br label %62

; <label>:100                                     ; preds = %62
  %101 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %101, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %102

; <label>:102                                     ; preds = %100, %93, %59, %51, %9
  %103 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %104 = load { %struct.smpType_struct*, i8* }* %103, align 1
  ret { %struct.smpType_struct*, i8* } %104
}

define void @internal_error(i8* %format, ...) nounwind {
  %1 = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %intentional_crash = alloca i32*, align 8
  store i8* %format, i8** %1, align 8
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %3 = bitcast %struct.__va_list_tag* %2 to i8*
  call void @llvm.va_start(i8* %3)
  %4 = load %struct.__sFILE** @__stderrp, align 8
  %5 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %4, i8* getelementptr inbounds ([17 x i8]* @.str92, i32 0, i32 0))
  %6 = load %struct.__sFILE** @__stderrp, align 8
  %7 = load i8** %1, align 8
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %9 = call i32 @vfprintf(%struct.__sFILE* %6, i8* %7, %struct.__va_list_tag* %8)
  %10 = load %struct.__sFILE** @__stderrp, align 8
  %11 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %10, i8* getelementptr inbounds ([2 x i8]* @.str13, i32 0, i32 0))
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %13 = bitcast %struct.__va_list_tag* %12 to i8*
  call void @llvm.va_end(i8* %13)
  store i32* null, i32** %intentional_crash, align 8
  %14 = load i32** %intentional_crash, align 8
  store i32 1, i32* %14, align 4
  ret void
}

define { %struct.smpType_struct*, i8* } @smpObject_hash(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca i64, align 8
  %hash = alloca i64, align 8
  %key = alloca i8*, align 8
  %i = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = ptrtoint i8* %8 to i64
  store i64 %9, i64* %core, align 8
  %10 = load i64* %core, align 8
  %11 = load i64* %core, align 8
  %12 = ashr i64 %11, 6
  %13 = xor i64 %10, %12
  %14 = load i64* %core, align 8
  %15 = ashr i64 %14, 10
  %16 = xor i64 %13, %15
  store i64 %16, i64* %hash, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 8
  %19 = getelementptr inbounds %struct.smpType_struct* %18, i32 0, i32 0
  %20 = load i8** %19, align 8
  store i8* %20, i8** %key, align 8
  store i32 0, i32* %i, align 4
  br label %21

; <label>:21                                      ; preds = %41, %0
  %22 = load i32* %i, align 4
  %23 = icmp slt i32 %22, 3
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %21
  %25 = load i8** %key, align 8
  %26 = load i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = icmp ne i32 %27, 0
  br label %29

; <label>:29                                      ; preds = %24, %21
  %30 = phi i1 [ false, %21 ], [ %28, %24 ]
  br i1 %30, label %31, label %44

; <label>:31                                      ; preds = %29
  %32 = load i64* %hash, align 8
  %33 = shl i64 %32, 5
  %34 = load i64* %hash, align 8
  %35 = add nsw i64 %33, %34
  %36 = load i8** %key, align 8
  %37 = getelementptr inbounds i8* %36, i32 1
  store i8* %37, i8** %key, align 8
  %38 = load i8* %36, align 1
  %39 = sext i8 %38 to i64
  %40 = xor i64 %35, %39
  store i64 %40, i64* %hash, align 8
  br label %41

; <label>:41                                      ; preds = %31
  %42 = load i32* %i, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %i, align 4
  br label %21

; <label>:44                                      ; preds = %29
  %45 = load i64* %hash, align 8
  %46 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %45)
  %47 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %53 = load { %struct.smpType_struct*, i8* }* %52, align 1
  ret { %struct.smpType_struct*, i8* } %53
}

define { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %x) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i64, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %res = alloca %struct.obj_struct, align 8
  store i64 %x, i64* %2, align 8
  %3 = call noalias i8* @GC_malloc(i64 16)
  %4 = bitcast i8* %3 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %4, [1 x %struct.__mpz_struct]** %z, align 8
  %5 = load [1 x %struct.__mpz_struct]** %z, align 8
  %6 = getelementptr inbounds [1 x %struct.__mpz_struct]* %5, i32 0, i32 0
  %7 = load i64* %2, align 8
  call void @__gmpz_init_set_si(%struct.__mpz_struct* %6, i64 %7)
  %8 = load [1 x %struct.__mpz_struct]** %z, align 8
  %9 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %8)
  %10 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %1 to i8*
  %16 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 16, i32 8, i1 false)
  %17 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %18 = load { %struct.smpType_struct*, i8* }* %17, align 1
  ret { %struct.smpType_struct*, i8* } %18
}

define { %struct.smpType_struct*, i8* } @smpObject_instancep(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %63, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = getelementptr inbounds %struct.obj_struct* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %15
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %78

; <label>:29                                      ; preds = %15
  %30 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0))
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %37 = load i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.smpType_struct*
  %39 = load %struct.obj_struct** %3, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 0
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %38, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %78

; <label>:63                                      ; preds = %0
  %64 = load i32* %2, align 4
  %65 = load %struct.obj_struct** %3, align 8
  %66 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = load %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = load i8** %69, align 1
  %71 = call i32 @smpObject_instancep_cint(%struct.smpType_struct* %68, i8* %70, i32 %64, %struct.obj_struct* %65)
  %72 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %71)
  %73 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  br label %78

; <label>:78                                      ; preds = %63, %29, %24
  %79 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %80 = load { %struct.smpType_struct*, i8* }* %79, align 1
  ret { %struct.smpType_struct*, i8* } %80
}

define i32 @smpObject_instancep_cint(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %obj = alloca %struct.obj_struct, align 8
  %1 = alloca i32, align 4
  %2 = alloca %struct.obj_struct*, align 8
  %objtype = alloca %struct.smpType_struct*, align 8
  %type = alloca %struct.smpType_struct, align 8
  %3 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %obj.coerce1, i8** %5
  store i32 %argc, i32* %1, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %2, align 8
  %6 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %7 = load %struct.smpType_struct** %6, align 8
  store %struct.smpType_struct* %7, %struct.smpType_struct** %objtype, align 8
  %8 = load %struct.obj_struct** %2, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 1
  %11 = load i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.smpType_struct*
  %13 = bitcast %struct.smpType_struct* %type to i8*
  %14 = bitcast %struct.smpType_struct* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 64, i32 8, i1 false)
  %15 = load %struct.smpType_struct** %objtype, align 8
  %16 = call i32 @smpObject_instancep_c(%struct.smpType_struct* %15, %struct.smpType_struct* byval align 8 %type)
  ret i32 %16
}

define i32 @smpObject_instancep_c(%struct.smpType_struct* %objtype, %struct.smpType_struct* byval align 8 %type) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.smpType_struct*, align 8
  %i = alloca i64, align 8
  store %struct.smpType_struct* %objtype, %struct.smpType_struct** %2, align 8
  %3 = load %struct.smpType_struct** %2, align 8
  %4 = icmp eq %struct.smpType_struct* %3, null
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  store i32 0, i32* %1
  br label %36

; <label>:6                                       ; preds = %0
  %7 = load %struct.smpType_struct** %2, align 8
  %8 = getelementptr inbounds %struct.smpType_struct* %7, i32 0, i32 1
  %9 = load i32* %8, align 4
  %10 = getelementptr inbounds %struct.smpType_struct* %type, i32 0, i32 1
  %11 = load i32* %10, align 4
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %13, label %14

; <label>:13                                      ; preds = %6
  store i32 1, i32* %1
  br label %36

; <label>:14                                      ; preds = %6
  store i64 0, i64* %i, align 8
  br label %15

; <label>:15                                      ; preds = %32, %14
  %16 = load i64* %i, align 8
  %17 = load %struct.smpType_struct** %2, align 8
  %18 = getelementptr inbounds %struct.smpType_struct* %17, i32 0, i32 4
  %19 = load i64* %18, align 8
  %20 = icmp ult i64 %16, %19
  br i1 %20, label %21, label %35

; <label>:21                                      ; preds = %15
  %22 = load i64* %i, align 8
  %23 = load %struct.smpType_struct** %2, align 8
  %24 = getelementptr inbounds %struct.smpType_struct* %23, i32 0, i32 3
  %25 = load %struct.smpType_struct*** %24, align 8
  %26 = getelementptr inbounds %struct.smpType_struct** %25, i64 %22
  %27 = load %struct.smpType_struct** %26, align 8
  %28 = call i32 @smpObject_instancep_c(%struct.smpType_struct* %27, %struct.smpType_struct* byval align 8 %type)
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %31

; <label>:30                                      ; preds = %21
  store i32 1, i32* %1
  br label %36

; <label>:31                                      ; preds = %21
  br label %32

; <label>:32                                      ; preds = %31
  %33 = load i64* %i, align 8
  %34 = add i64 %33, 1
  store i64 %34, i64* %i, align 8
  br label %15

; <label>:35                                      ; preds = %15
  store i32 0, i32* %1
  br label %36

; <label>:36                                      ; preds = %35, %30, %13, %5
  %37 = load i32* %1
  ret i32 %37
}

define { %struct.smpType_struct*, i8* } @smpObject_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %8 = load %struct.smpType_struct** %7, align 8
  %9 = getelementptr inbounds %struct.smpType_struct* %8, i32 0, i32 0
  %10 = load i8** %9, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %12 = load i8** %11, align 8
  %13 = ptrtoint i8* %12 to i64
  %14 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpString_init_fmt(i8* getelementptr inbounds ([11 x i8]* @.str32, i32 0, i32 0), i8* %10, i64 %13)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smpString_init_fmt(i8* %format, ...) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %str = alloca i8*, align 8
  store i8* %format, i8** %2, align 8
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %4 = bitcast %struct.__va_list_tag* %3 to i8*
  call void @llvm.va_start(i8* %4)
  %5 = load i8** %2, align 8
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %7 = call i32 @vasprintf(i8** %str, i8* %5, %struct.__va_list_tag* %6)
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %9 = bitcast %struct.__va_list_tag* %8 to i8*
  call void @llvm.va_end(i8* %9)
  %10 = call { %struct.smpType_struct*, i8* } @smpString_init_ref(i8** %str)
  %11 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = extractvalue { %struct.smpType_struct*, i8* } %10, 0
  store %struct.smpType_struct* %13, %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = extractvalue { %struct.smpType_struct*, i8* } %10, 1
  store i8* %15, i8** %14, align 1
  %16 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %17 = load { %struct.smpType_struct*, i8* }* %16, align 1
  ret { %struct.smpType_struct*, i8* } %17
}

define { %struct.smpType_struct*, i8* } @smpObject_to_s_class(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpType_struct*
  %10 = getelementptr inbounds %struct.smpType_struct* %9, i32 0, i32 0
  %11 = load i8** %10, align 8
  %12 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %11)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpString_init(i8* %str) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %res = alloca %struct.obj_struct, align 8
  store i8* %str, i8** %2, align 8
  %3 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_string)
  %4 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = load i8** %2, align 8
  %10 = call i32 @obj_init_str(%struct.obj_struct* %res, i8* %9)
  %11 = bitcast %struct.obj_struct* %1 to i8*
  %12 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 16, i32 8, i1 false)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = load { %struct.smpType_struct*, i8* }* %13, align 1
  ret { %struct.smpType_struct*, i8* } %14
}

define { %struct.smpType_struct*, i8* } @smpObject_type(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %8 = load %struct.smpType_struct** %7, align 8
  %9 = getelementptr inbounds %struct.smpType_struct* %8, i32 0, i32 0
  %10 = load i8** %9, align 8
  %11 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* %10)
  %12 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %18 = load { %struct.smpType_struct*, i8* }* %17, align 1
  ret { %struct.smpType_struct*, i8* } %18
}

define { %struct.smpType_struct*, i8* } @smpObject_types_equalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = load %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = load i8** %17, align 1
  %19 = call { %struct.smpType_struct*, i8* } @obj_types_equalp(%struct.smpType_struct* %11, i8* %13, %struct.smpType_struct* %16, i8* %18)
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 0
  %22 = extractvalue { %struct.smpType_struct*, i8* } %19, 0
  store %struct.smpType_struct* %22, %struct.smpType_struct** %21, align 1
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 1
  %24 = extractvalue { %struct.smpType_struct*, i8* } %19, 1
  store i8* %24, i8** %23, align 1
  %25 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %26 = load { %struct.smpType_struct*, i8* }* %25, align 1
  ret { %struct.smpType_struct*, i8* } %26
}

define { %struct.smpType_struct*, i8* } @smpObject_varcall(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i8* %name) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %res = alloca %struct.obj_struct, align 8
  %hash = alloca %struct.minihash_struct*, align 8
  %var = alloca %struct.obj_struct, align 8
  %3 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %obj.coerce1, i8** %5
  store i8* %name, i8** %2, align 8
  %6 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  store %struct.minihash_struct* null, %struct.minihash_struct** %hash, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %8 = load %struct.smpType_struct** %7, align 8
  %9 = getelementptr inbounds %struct.smpType_struct* %8, i32 0, i32 1
  %10 = load i32* %9, align 4
  %11 = load i32* @smpType_id_class, align 4
  %12 = icmp eq i32 %10, %11
  br i1 %12, label %13, label %19

; <label>:13                                      ; preds = %0
  %14 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %15 = load i8** %14, align 8
  %16 = bitcast i8* %15 to %struct.smpType_struct*
  %17 = getelementptr inbounds %struct.smpType_struct* %16, i32 0, i32 8
  %18 = load %struct.minihash_struct** %17, align 8
  store %struct.minihash_struct* %18, %struct.minihash_struct** %hash, align 8
  br label %24

; <label>:19                                      ; preds = %0
  %20 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %21 = load i8** %20, align 8
  %22 = bitcast i8* %21 to %struct.standardcore_struct*
  %23 = getelementptr inbounds %struct.standardcore_struct* %22, i32 0, i32 0
  store %struct.minihash_struct* %23, %struct.minihash_struct** %hash, align 8
  br label %24

; <label>:24                                      ; preds = %19, %13
  %25 = load %struct.minihash_struct** %hash, align 8
  %26 = load i8** %2, align 8
  %27 = call { %struct.smpType_struct*, i8* } @minihash_get(%struct.minihash_struct* %25, i8* %26)
  %28 = bitcast %struct.obj_struct* %var to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = extractvalue { %struct.smpType_struct*, i8* } %27, 0
  store %struct.smpType_struct* %30, %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = extractvalue { %struct.smpType_struct*, i8* } %27, 1
  store i8* %32, i8** %31, align 1
  %33 = bitcast %struct.obj_struct* %res to i8*
  %34 = bitcast %struct.obj_struct* %var to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 16, i32 8, i1 false)
  %35 = bitcast %struct.obj_struct* %1 to i8*
  %36 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 16, i32 8, i1 false)
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = load { %struct.smpType_struct*, i8* }* %37, align 1
  ret { %struct.smpType_struct*, i8* } %38
}

define { %struct.smpType_struct*, i8* } @smpObject_write(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %9, i8* %11, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpObject_write_class(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %9, i8* %11, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define i32 @scope_init() nounwind {
  %1 = alloca %struct.minihash_struct, align 8
  %2 = alloca %struct.minihash_struct, align 8
  store i64 1, i64* @scope_length, align 8
  %3 = call i64 @next_power_of_2(i64 4)
  %4 = mul i64 32, %3
  %5 = call noalias i8* @GC_malloc(i64 %4)
  %6 = bitcast i8* %5 to %struct.minihash_struct*
  store %struct.minihash_struct* %6, %struct.minihash_struct** @scope_stack, align 8
  %7 = load %struct.minihash_struct** @scope_stack, align 8
  %8 = getelementptr inbounds %struct.minihash_struct* %7, i64 0
  call void @minihash_init(%struct.minihash_struct* sret %1)
  %9 = bitcast %struct.minihash_struct* %8 to i8*
  %10 = bitcast %struct.minihash_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 32, i32 8, i1 false)
  call void @minihash_init(%struct.minihash_struct* sret %2)
  %11 = bitcast %struct.minihash_struct* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.minihash_struct* @scope_classes to i8*), i8* %11, i64 32, i32 8, i1 false)
  ret i32 0
}

define i32 @scope_push() nounwind {
  %1 = alloca %struct.minihash_struct, align 8
  %2 = load i64* @scope_length, align 8
  %3 = icmp uge i64 %2, 4
  br i1 %3, label %4, label %16

; <label>:4                                       ; preds = %0
  %5 = load i64* @scope_length, align 8
  %6 = call i32 @is_power_of_2(i64 %5)
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %16

; <label>:8                                       ; preds = %4
  %9 = load %struct.minihash_struct** @scope_stack, align 8
  %10 = bitcast %struct.minihash_struct* %9 to i8*
  %11 = load i64* @scope_length, align 8
  %12 = call i64 @next_power_of_2(i64 %11)
  %13 = mul i64 32, %12
  %14 = call i8* @GC_realloc(i8* %10, i64 %13)
  %15 = bitcast i8* %14 to %struct.minihash_struct*
  store %struct.minihash_struct* %15, %struct.minihash_struct** @scope_stack, align 8
  br label %16

; <label>:16                                      ; preds = %8, %4, %0
  %17 = load i64* @scope_length, align 8
  %18 = add i64 %17, 1
  store i64 %18, i64* @scope_length, align 8
  %19 = load %struct.minihash_struct** @scope_stack, align 8
  %20 = getelementptr inbounds %struct.minihash_struct* %19, i64 %17
  call void @minihash_init(%struct.minihash_struct* sret %1)
  %21 = bitcast %struct.minihash_struct* %20 to i8*
  %22 = bitcast %struct.minihash_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 32, i32 8, i1 false)
  %23 = load i64* @scope_length, align 8
  %24 = sub i64 %23, 1
  %25 = load %struct.minihash_struct** @scope_stack, align 8
  %26 = getelementptr inbounds %struct.minihash_struct* %25, i64 %24
  %27 = load i64* @scope_length, align 8
  %28 = sub i64 %27, 2
  %29 = load %struct.minihash_struct** @scope_stack, align 8
  %30 = getelementptr inbounds %struct.minihash_struct* %29, i64 %28
  %31 = call i32 @minihash_copy(%struct.minihash_struct* %26, %struct.minihash_struct* %30)
  ret i32 0
}

define i32 @scope_pop() nounwind {
  %1 = load i64* @scope_length, align 8
  %2 = add i64 %1, -1
  store i64 %2, i64* @scope_length, align 8
  %3 = load %struct.minihash_struct** @scope_stack, align 8
  %4 = getelementptr inbounds %struct.minihash_struct* %3, i64 %2
  %5 = call i32 @minihash_clear(%struct.minihash_struct* %4)
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @scope_get(i8* %name) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  store i8* %name, i8** %2, align 8
  %3 = load i64* @scope_length, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %6

; <label>:5                                       ; preds = %0
  br label %11

; <label>:6                                       ; preds = %0
  %7 = load i64* @scope_length, align 8
  %8 = sub i64 %7, 1
  %9 = load %struct.minihash_struct** @scope_stack, align 8
  %10 = getelementptr inbounds %struct.minihash_struct* %9, i64 %8
  br label %11

; <label>:11                                      ; preds = %6, %5
  %12 = phi %struct.minihash_struct* [ null, %5 ], [ %10, %6 ]
  %13 = load i8** %2, align 8
  %14 = call { %struct.smpType_struct*, i8* } @minihash_get(%struct.minihash_struct* %12, i8* %13)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @scope_self() nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = load i64* @scope_length, align 8
  %3 = icmp eq i64 %2, 0
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  br label %10

; <label>:5                                       ; preds = %0
  %6 = load i64* @scope_length, align 8
  %7 = sub i64 %6, 1
  %8 = load %struct.minihash_struct** @scope_stack, align 8
  %9 = getelementptr inbounds %struct.minihash_struct* %8, i64 %7
  br label %10

; <label>:10                                      ; preds = %5, %4
  %11 = phi %struct.minihash_struct* [ null, %4 ], [ %9, %5 ]
  %12 = call { %struct.smpType_struct*, i8* } @minihash_get(%struct.minihash_struct* %11, i8* getelementptr inbounds ([5 x i8]* @.str34, i32 0, i32 0))
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define i32 @scope_clear() nounwind {
  %1 = load i64* @scope_length, align 8
  %2 = sub i64 %1, 1
  %3 = load %struct.minihash_struct** @scope_stack, align 8
  %4 = getelementptr inbounds %struct.minihash_struct* %3, i64 %2
  %5 = call i32 @minihash_clear(%struct.minihash_struct* %4)
  br label %6

; <label>:6                                       ; preds = %9, %0
  %7 = load i64* @scope_length, align 8
  %8 = icmp ugt i64 %7, 1
  br i1 %8, label %9, label %16

; <label>:9                                       ; preds = %6
  %10 = load i64* @scope_length, align 8
  %11 = add i64 %10, -1
  store i64 %11, i64* @scope_length, align 8
  %12 = sub i64 %11, 1
  %13 = load %struct.minihash_struct** @scope_stack, align 8
  %14 = getelementptr inbounds %struct.minihash_struct* %13, i64 %12
  %15 = call i32 @minihash_clear(%struct.minihash_struct* %14)
  br label %6

; <label>:16                                      ; preds = %6
  %17 = load i64* @scope_length, align 8
  %18 = add i64 %17, -1
  store i64 %18, i64* @scope_length, align 8
  ret i32 0
}

define i32 @init_smp_classes() nounwind {
  store i32 0, i32* @initialized_classesp, align 4
  %1 = call i32 @init_fundamental_classes()
  %2 = call i32 @init_required_classes()
  %3 = call i32 @smpNumber_create_class()
  %4 = call i32 @smpInteger_create_class()
  %5 = call i32 @smpFloat_create_class()
  store i32 1, i32* @initialized_classesp, align 4
  ret i32 0
}

define i32 @init_required_classes() nounwind {
  %1 = call i32 @smpGlobal_create_class()
  %2 = call i32 @smpRegex_create_class()
  %3 = call i32 @smpArray_create_class()
  %4 = call i32 @smpHash_create_class()
  %5 = call i32 @smpSymbol_create_class()
  ret i32 0
}

define i32 @init_fundamental_classes() nounwind {
  %1 = alloca %struct.minihash_struct, align 8
  %object = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %boolclass = alloca %struct.obj_struct, align 8
  %nil_parents_length = alloca i64, align 8
  %nil_parents = alloca %struct.smpType_struct**, align 8
  %nilclass = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %exc = alloca %struct.obj_struct, align 8
  %smpType_compiletime = alloca %struct.smpType_struct*, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = alloca %struct.obj_struct, align 8
  %16 = alloca %struct.obj_struct, align 8
  %17 = alloca %struct.obj_struct, align 8
  %18 = alloca %struct.obj_struct, align 8
  %19 = alloca %struct.obj_struct, align 8
  %20 = alloca %struct.obj_struct, align 8
  %21 = alloca %struct.obj_struct, align 8
  %22 = alloca %struct.obj_struct, align 8
  %23 = alloca %struct.obj_struct, align 8
  %24 = alloca %struct.obj_struct, align 8
  %25 = alloca %struct.obj_struct, align 8
  %26 = alloca %struct.obj_struct, align 8
  %27 = alloca %struct.obj_struct, align 8
  %28 = alloca %struct.obj_struct, align 8
  %29 = alloca %struct.obj_struct, align 8
  %30 = alloca %struct.obj_struct, align 8
  %31 = alloca %struct.obj_struct, align 8
  %32 = alloca %struct.obj_struct, align 8
  %33 = alloca %struct.obj_struct, align 8
  %34 = alloca %struct.obj_struct, align 8
  %35 = alloca %struct.obj_struct, align 8
  %36 = alloca %struct.obj_struct, align 8
  %37 = alloca %struct.obj_struct, align 8
  %38 = alloca %struct.obj_struct, align 8
  %39 = alloca %struct.obj_struct, align 8
  %40 = alloca %struct.obj_struct, align 8
  %41 = alloca %struct.obj_struct, align 8
  %42 = alloca %struct.obj_struct, align 8
  %43 = alloca %struct.obj_struct, align 8
  %44 = alloca %struct.obj_struct, align 8
  %45 = alloca %struct.obj_struct, align 8
  %46 = alloca %struct.obj_struct, align 8
  %47 = alloca %struct.obj_struct, align 8
  %48 = alloca %struct.obj_struct, align 8
  %49 = alloca %struct.obj_struct, align 8
  %50 = alloca %struct.obj_struct, align 8
  store i32 1, i32* @smpType_next_id, align 4
  call void @minihash_init(%struct.minihash_struct* sret %1)
  %51 = bitcast %struct.minihash_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.minihash_struct* @smpType_ids to i8*), i8* %51, i64 32, i32 8, i1 false)
  %52 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), %struct.smpType_struct* null, i32 128)
  store i8* getelementptr inbounds ([3 x i8]* @.str36, i32 0, i32 0), i8** getelementptr inbounds (%struct.smpType_struct* @smpType_id, i32 0, i32 0), align 8
  %53 = load i32* @smpType_next_id, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* @smpType_next_id, align 4
  store i32 %53, i32* getelementptr inbounds (%struct.smpType_struct* @smpType_id, i32 0, i32 1), align 4
  store i64 1, i64* getelementptr inbounds (%struct.smpType_struct* @smpType_id, i32 0, i32 4), align 8
  %55 = load i64* getelementptr inbounds (%struct.smpType_struct* @smpType_id, i32 0, i32 4), align 8
  %56 = mul i64 8, %55
  %57 = call noalias i8* @GC_malloc(i64 %56)
  %58 = bitcast i8* %57 to %struct.smpType_struct**
  store %struct.smpType_struct** %58, %struct.smpType_struct*** getelementptr inbounds (%struct.smpType_struct* @smpType_id, i32 0, i32 3), align 8
  %59 = load %struct.smpType_struct*** getelementptr inbounds (%struct.smpType_struct* @smpType_id, i32 0, i32 3), align 8
  %60 = getelementptr inbounds %struct.smpType_struct** %59, i64 0
  store %struct.smpType_struct* @smpType_object, %struct.smpType_struct** %60, align 8
  store %struct.minihash_struct* null, %struct.minihash_struct** getelementptr inbounds (%struct.smpType_struct* @smpType_id, i32 0, i32 5), align 8
  store %struct.minihash_struct* null, %struct.minihash_struct** getelementptr inbounds (%struct.smpType_struct* @smpType_id, i32 0, i32 6), align 8
  %61 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %62 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = extractvalue { %struct.smpType_struct*, i8* } %61, 0
  store %struct.smpType_struct* %64, %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = extractvalue { %struct.smpType_struct*, i8* } %61, 1
  store i8* %66, i8** %65, align 1
  %67 = getelementptr inbounds %struct.obj_struct* %object, i32 0, i32 1
  %68 = load i8** %67, align 8
  %69 = bitcast i8* %68 to %struct.smpType_struct*
  %70 = bitcast %struct.smpType_struct* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_object to i8*), i8* %70, i64 64, i32 8, i1 false)
  %71 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 128)
  %72 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0))
  %73 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  %78 = getelementptr inbounds %struct.obj_struct* %2, i32 0, i32 1
  %79 = load i8** %78, align 8
  %80 = bitcast i8* %79 to %struct.smpType_struct*
  %81 = bitcast %struct.smpType_struct* %80 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_class to i8*), i8* %81, i64 64, i32 8, i1 false)
  %82 = load i32* getelementptr inbounds (%struct.smpType_struct* @smpType_class, i32 0, i32 1), align 4
  store i32 %82, i32* @smpType_id_class, align 4
  %83 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 128)
  %84 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %85 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 0
  %87 = extractvalue { %struct.smpType_struct*, i8* } %84, 0
  store %struct.smpType_struct* %87, %struct.smpType_struct** %86, align 1
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 1
  %89 = extractvalue { %struct.smpType_struct*, i8* } %84, 1
  store i8* %89, i8** %88, align 1
  %90 = getelementptr inbounds %struct.obj_struct* %3, i32 0, i32 1
  %91 = load i8** %90, align 8
  %92 = bitcast i8* %91 to %struct.smpType_struct*
  %93 = bitcast %struct.smpType_struct* %92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_function to i8*), i8* %93, i64 64, i32 8, i1 false)
  %94 = load i32* getelementptr inbounds (%struct.smpType_struct* @smpType_class, i32 0, i32 1), align 4
  store i32 %94, i32* @smpType_id_fun, align 4
  %95 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([5 x i8]* @.str37, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 160)
  %96 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str37, i32 0, i32 0))
  %97 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 0
  %99 = extractvalue { %struct.smpType_struct*, i8* } %96, 0
  store %struct.smpType_struct* %99, %struct.smpType_struct** %98, align 1
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 1
  %101 = extractvalue { %struct.smpType_struct*, i8* } %96, 1
  store i8* %101, i8** %100, align 1
  %102 = getelementptr inbounds %struct.obj_struct* %4, i32 0, i32 1
  %103 = load i8** %102, align 8
  %104 = bitcast i8* %103 to %struct.smpType_struct*
  %105 = bitcast %struct.smpType_struct* %104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_atom to i8*), i8* %105, i64 64, i32 8, i1 false)
  %106 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0), %struct.smpType_struct* @smpType_atom, i32 128)
  %107 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %108 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 0
  %110 = extractvalue { %struct.smpType_struct*, i8* } %107, 0
  store %struct.smpType_struct* %110, %struct.smpType_struct** %109, align 1
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 1
  %112 = extractvalue { %struct.smpType_struct*, i8* } %107, 1
  store i8* %112, i8** %111, align 1
  %113 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %114 = load i8** %113, align 8
  %115 = bitcast i8* %114 to %struct.smpType_struct*
  %116 = bitcast %struct.smpType_struct* %115 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_string to i8*), i8* %116, i64 64, i32 8, i1 false)
  %117 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), %struct.smpType_struct* @smpType_atom, i32 160)
  %118 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([11 x i8]* @.str39, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 160)
  %119 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([11 x i8]* @.str39, i32 0, i32 0))
  %120 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %121 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 0
  %122 = extractvalue { %struct.smpType_struct*, i8* } %119, 0
  store %struct.smpType_struct* %122, %struct.smpType_struct** %121, align 1
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 1
  %124 = extractvalue { %struct.smpType_struct*, i8* } %119, 1
  store i8* %124, i8** %123, align 1
  %125 = getelementptr inbounds %struct.obj_struct* %6, i32 0, i32 1
  %126 = load i8** %125, align 8
  %127 = bitcast i8* %126 to %struct.smpType_struct*
  %128 = bitcast %struct.smpType_struct* %127 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_collection to i8*), i8* %128, i64 64, i32 8, i1 false)
  %129 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([5 x i8]* @.str40, i32 0, i32 0), %struct.smpType_struct* @smpType_collection, i32 128)
  %130 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str40, i32 0, i32 0))
  %131 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %132 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 0
  %133 = extractvalue { %struct.smpType_struct*, i8* } %130, 0
  store %struct.smpType_struct* %133, %struct.smpType_struct** %132, align 1
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 1
  %135 = extractvalue { %struct.smpType_struct*, i8* } %130, 1
  store i8* %135, i8** %134, align 1
  %136 = getelementptr inbounds %struct.obj_struct* %7, i32 0, i32 1
  %137 = load i8** %136, align 8
  %138 = bitcast i8* %137 to %struct.smpType_struct*
  %139 = bitcast %struct.smpType_struct* %138 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_pair to i8*), i8* %139, i64 64, i32 8, i1 false)
  %140 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), %struct.smpType_struct* @smpType_pair, i32 128)
  %141 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %142 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %143 = getelementptr { %struct.smpType_struct*, i8* }* %142, i32 0, i32 0
  %144 = extractvalue { %struct.smpType_struct*, i8* } %141, 0
  store %struct.smpType_struct* %144, %struct.smpType_struct** %143, align 1
  %145 = getelementptr { %struct.smpType_struct*, i8* }* %142, i32 0, i32 1
  %146 = extractvalue { %struct.smpType_struct*, i8* } %141, 1
  store i8* %146, i8** %145, align 1
  %147 = getelementptr inbounds %struct.obj_struct* %8, i32 0, i32 1
  %148 = load i8** %147, align 8
  %149 = bitcast i8* %148 to %struct.smpType_struct*
  %150 = bitcast %struct.smpType_struct* %149 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_list to i8*), i8* %150, i64 64, i32 8, i1 false)
  %151 = load i32* getelementptr inbounds (%struct.smpType_struct* @smpType_list, i32 0, i32 1), align 4
  store i32 %151, i32* @smpType_id_list, align 4
  %152 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0))
  %153 = bitcast %struct.obj_struct* %boolclass to { %struct.smpType_struct*, i8* }*
  %154 = getelementptr { %struct.smpType_struct*, i8* }* %153, i32 0, i32 0
  %155 = extractvalue { %struct.smpType_struct*, i8* } %152, 0
  store %struct.smpType_struct* %155, %struct.smpType_struct** %154, align 1
  %156 = getelementptr { %struct.smpType_struct*, i8* }* %153, i32 0, i32 1
  %157 = extractvalue { %struct.smpType_struct*, i8* } %152, 1
  store i8* %157, i8** %156, align 1
  store i64 2, i64* %nil_parents_length, align 8
  %158 = load i64* %nil_parents_length, align 8
  %159 = mul i64 8, %158
  %160 = call noalias i8* @GC_malloc(i64 %159)
  %161 = bitcast i8* %160 to %struct.smpType_struct**
  store %struct.smpType_struct** %161, %struct.smpType_struct*** %nil_parents, align 8
  %162 = load %struct.smpType_struct*** %nil_parents, align 8
  %163 = getelementptr inbounds %struct.smpType_struct** %162, i64 0
  store %struct.smpType_struct* @smpType_list, %struct.smpType_struct** %163, align 8
  %164 = getelementptr inbounds %struct.obj_struct* %boolclass, i32 0, i32 1
  %165 = load i8** %164, align 8
  %166 = bitcast i8* %165 to %struct.smpType_struct*
  %167 = load %struct.smpType_struct*** %nil_parents, align 8
  %168 = getelementptr inbounds %struct.smpType_struct** %167, i64 1
  store %struct.smpType_struct* %166, %struct.smpType_struct** %168, align 8
  %169 = load %struct.smpType_struct*** %nil_parents, align 8
  %170 = load i64* %nil_parents_length, align 8
  %171 = call i32 @smpGlobal_class_multiple(i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), %struct.smpType_struct** %169, i64 %170, i32 144)
  %172 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %173 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %174 = getelementptr { %struct.smpType_struct*, i8* }* %173, i32 0, i32 0
  %175 = extractvalue { %struct.smpType_struct*, i8* } %172, 0
  store %struct.smpType_struct* %175, %struct.smpType_struct** %174, align 1
  %176 = getelementptr { %struct.smpType_struct*, i8* }* %173, i32 0, i32 1
  %177 = extractvalue { %struct.smpType_struct*, i8* } %172, 1
  store i8* %177, i8** %176, align 1
  %178 = getelementptr inbounds %struct.obj_struct* %nilclass, i32 0, i32 1
  %179 = load i8** %178, align 8
  %180 = bitcast i8* %179 to %struct.smpType_struct*
  %181 = bitcast %struct.smpType_struct* %180 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_nil to i8*), i8* %181, i64 64, i32 8, i1 false)
  %182 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_nil)
  %183 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %184 = getelementptr { %struct.smpType_struct*, i8* }* %183, i32 0, i32 0
  %185 = extractvalue { %struct.smpType_struct*, i8* } %182, 0
  store %struct.smpType_struct* %185, %struct.smpType_struct** %184, align 1
  %186 = getelementptr { %struct.smpType_struct*, i8* }* %183, i32 0, i32 1
  %187 = extractvalue { %struct.smpType_struct*, i8* } %182, 1
  store i8* %187, i8** %186, align 1
  %188 = bitcast %struct.obj_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i8* %188, i64 16, i32 8, i1 false)
  %189 = load i32* getelementptr inbounds (%struct.smpType_struct* @smpType_nil, i32 0, i32 1), align 4
  store i32 %189, i32* @smpType_id_nil, align 4
  %190 = getelementptr inbounds %struct.obj_struct* %boolclass, i32 0, i32 1
  %191 = load i8** %190, align 8
  %192 = bitcast i8* %191 to %struct.smpType_struct*
  %193 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([10 x i8]* @.str42, i32 0, i32 0), %struct.smpType_struct* %192, i32 144)
  %194 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([10 x i8]* @.str42, i32 0, i32 0))
  %195 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %196 = getelementptr { %struct.smpType_struct*, i8* }* %195, i32 0, i32 0
  %197 = extractvalue { %struct.smpType_struct*, i8* } %194, 0
  store %struct.smpType_struct* %197, %struct.smpType_struct** %196, align 1
  %198 = getelementptr { %struct.smpType_struct*, i8* }* %195, i32 0, i32 1
  %199 = extractvalue { %struct.smpType_struct*, i8* } %194, 1
  store i8* %199, i8** %198, align 1
  %200 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 1
  %201 = load i8** %200, align 8
  %202 = bitcast i8* %201 to %struct.smpType_struct*
  %203 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %202)
  %204 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %205 = getelementptr { %struct.smpType_struct*, i8* }* %204, i32 0, i32 0
  %206 = extractvalue { %struct.smpType_struct*, i8* } %203, 0
  store %struct.smpType_struct* %206, %struct.smpType_struct** %205, align 1
  %207 = getelementptr { %struct.smpType_struct*, i8* }* %204, i32 0, i32 1
  %208 = extractvalue { %struct.smpType_struct*, i8* } %203, 1
  store i8* %208, i8** %207, align 1
  %209 = bitcast %struct.obj_struct* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.obj_struct* @smp_true to i8*), i8* %209, i64 16, i32 8, i1 false)
  %210 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([10 x i8]* @.str43, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 128)
  %211 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([10 x i8]* @.str43, i32 0, i32 0))
  %212 = bitcast %struct.obj_struct* %exc to { %struct.smpType_struct*, i8* }*
  %213 = getelementptr { %struct.smpType_struct*, i8* }* %212, i32 0, i32 0
  %214 = extractvalue { %struct.smpType_struct*, i8* } %211, 0
  store %struct.smpType_struct* %214, %struct.smpType_struct** %213, align 1
  %215 = getelementptr { %struct.smpType_struct*, i8* }* %212, i32 0, i32 1
  %216 = extractvalue { %struct.smpType_struct*, i8* } %211, 1
  store i8* %216, i8** %215, align 1
  %217 = getelementptr inbounds %struct.obj_struct* %exc, i32 0, i32 1
  %218 = load i8** %217, align 8
  %219 = bitcast i8* %218 to %struct.smpType_struct*
  %220 = bitcast %struct.smpType_struct* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_exception to i8*), i8* %220, i64 64, i32 8, i1 false)
  %221 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([13 x i8]* @.str44, i32 0, i32 0), %struct.smpType_struct* @smpType_exception, i32 0)
  %222 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([17 x i8]* @.str45, i32 0, i32 0), %struct.smpType_struct* @smpType_exception, i32 0)
  %223 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([13 x i8]* @.str44, i32 0, i32 0))
  %224 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %225 = getelementptr { %struct.smpType_struct*, i8* }* %224, i32 0, i32 0
  %226 = extractvalue { %struct.smpType_struct*, i8* } %223, 0
  store %struct.smpType_struct* %226, %struct.smpType_struct** %225, align 1
  %227 = getelementptr { %struct.smpType_struct*, i8* }* %224, i32 0, i32 1
  %228 = extractvalue { %struct.smpType_struct*, i8* } %223, 1
  store i8* %228, i8** %227, align 1
  %229 = getelementptr inbounds %struct.obj_struct* %12, i32 0, i32 1
  %230 = load i8** %229, align 8
  %231 = bitcast i8* %230 to %struct.smpType_struct*
  store %struct.smpType_struct* %231, %struct.smpType_struct** %smpType_compiletime, align 8
  %232 = load %struct.smpType_struct** %smpType_compiletime, align 8
  %233 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([14 x i8]* @.str20, i32 0, i32 0), %struct.smpType_struct* %232, i32 0)
  %234 = load %struct.smpType_struct** %smpType_compiletime, align 8
  %235 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([14 x i8]* @.str46, i32 0, i32 0), %struct.smpType_struct* %234, i32 0)
  %236 = load %struct.smpType_struct** %smpType_compiletime, align 8
  %237 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([12 x i8]* @.str47, i32 0, i32 0), %struct.smpType_struct* %236, i32 0)
  %238 = load %struct.smpType_struct** %smpType_compiletime, align 8
  %239 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([10 x i8]* @.str48, i32 0, i32 0), %struct.smpType_struct* %238, i32 0)
  %240 = load %struct.smpType_struct** %smpType_compiletime, align 8
  %241 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([21 x i8]* @.str27, i32 0, i32 0), %struct.smpType_struct* %240, i32 0)
  %242 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 128)
  %243 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %244 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %245 = getelementptr { %struct.smpType_struct*, i8* }* %244, i32 0, i32 0
  %246 = extractvalue { %struct.smpType_struct*, i8* } %243, 0
  store %struct.smpType_struct* %246, %struct.smpType_struct** %245, align 1
  %247 = getelementptr { %struct.smpType_struct*, i8* }* %244, i32 0, i32 1
  %248 = extractvalue { %struct.smpType_struct*, i8* } %243, 1
  store i8* %248, i8** %247, align 1
  %249 = getelementptr inbounds %struct.obj_struct* %13, i32 0, i32 1
  %250 = load i8** %249, align 8
  %251 = bitcast i8* %250 to %struct.smpType_struct*
  %252 = bitcast %struct.smpType_struct* %251 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_thrown to i8*), i8* %252, i64 64, i32 8, i1 false)
  %253 = load i32* getelementptr inbounds (%struct.smpType_struct* @smpType_thrown, i32 0, i32 1), align 4
  store i32 %253, i32* @smpType_id_thrown, align 4
  %254 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_eq, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %255 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %256 = getelementptr { %struct.smpType_struct*, i8* }* %255, i32 0, i32 0
  %257 = extractvalue { %struct.smpType_struct*, i8* } %254, 0
  store %struct.smpType_struct* %257, %struct.smpType_struct** %256, align 1
  %258 = getelementptr { %struct.smpType_struct*, i8* }* %255, i32 0, i32 1
  %259 = extractvalue { %struct.smpType_struct*, i8* } %254, 1
  store i8* %259, i8** %258, align 1
  %260 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %261 = getelementptr { %struct.smpType_struct*, i8* }* %260, i32 0, i32 0
  %262 = load %struct.smpType_struct** %261, align 1
  %263 = getelementptr { %struct.smpType_struct*, i8* }* %260, i32 0, i32 1
  %264 = load i8** %263, align 1
  %265 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %266 = getelementptr { %struct.smpType_struct*, i8* }* %265, i32 0, i32 0
  %267 = load %struct.smpType_struct** %266, align 1
  %268 = getelementptr { %struct.smpType_struct*, i8* }* %265, i32 0, i32 1
  %269 = load i8** %268, align 1
  %270 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %262, i8* %264, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str49, i32 0, i32 0), %struct.smpType_struct* %267, i8* %269)
  %271 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %272 = getelementptr { %struct.smpType_struct*, i8* }* %271, i32 0, i32 0
  %273 = extractvalue { %struct.smpType_struct*, i8* } %270, 0
  store %struct.smpType_struct* %273, %struct.smpType_struct** %272, align 1
  %274 = getelementptr { %struct.smpType_struct*, i8* }* %271, i32 0, i32 1
  %275 = extractvalue { %struct.smpType_struct*, i8* } %270, 1
  store i8* %275, i8** %274, align 1
  %276 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %277 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %278 = getelementptr { %struct.smpType_struct*, i8* }* %277, i32 0, i32 0
  %279 = extractvalue { %struct.smpType_struct*, i8* } %276, 0
  store %struct.smpType_struct* %279, %struct.smpType_struct** %278, align 1
  %280 = getelementptr { %struct.smpType_struct*, i8* }* %277, i32 0, i32 1
  %281 = extractvalue { %struct.smpType_struct*, i8* } %276, 1
  store i8* %281, i8** %280, align 1
  %282 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %283 = getelementptr { %struct.smpType_struct*, i8* }* %282, i32 0, i32 0
  %284 = load %struct.smpType_struct** %283, align 1
  %285 = getelementptr { %struct.smpType_struct*, i8* }* %282, i32 0, i32 1
  %286 = load i8** %285, align 1
  %287 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %288 = getelementptr { %struct.smpType_struct*, i8* }* %287, i32 0, i32 0
  %289 = load %struct.smpType_struct** %288, align 1
  %290 = getelementptr { %struct.smpType_struct*, i8* }* %287, i32 0, i32 1
  %291 = load i8** %290, align 1
  %292 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %284, i8* %286, i32 64, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %289, i8* %291)
  %293 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %294 = getelementptr { %struct.smpType_struct*, i8* }* %293, i32 0, i32 0
  %295 = extractvalue { %struct.smpType_struct*, i8* } %292, 0
  store %struct.smpType_struct* %295, %struct.smpType_struct** %294, align 1
  %296 = getelementptr { %struct.smpType_struct*, i8* }* %293, i32 0, i32 1
  %297 = extractvalue { %struct.smpType_struct*, i8* } %292, 1
  store i8* %297, i8** %296, align 1
  %298 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_cons, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %299 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %300 = getelementptr { %struct.smpType_struct*, i8* }* %299, i32 0, i32 0
  %301 = extractvalue { %struct.smpType_struct*, i8* } %298, 0
  store %struct.smpType_struct* %301, %struct.smpType_struct** %300, align 1
  %302 = getelementptr { %struct.smpType_struct*, i8* }* %299, i32 0, i32 1
  %303 = extractvalue { %struct.smpType_struct*, i8* } %298, 1
  store i8* %303, i8** %302, align 1
  %304 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %305 = getelementptr { %struct.smpType_struct*, i8* }* %304, i32 0, i32 0
  %306 = load %struct.smpType_struct** %305, align 1
  %307 = getelementptr { %struct.smpType_struct*, i8* }* %304, i32 0, i32 1
  %308 = load i8** %307, align 1
  %309 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %310 = getelementptr { %struct.smpType_struct*, i8* }* %309, i32 0, i32 0
  %311 = load %struct.smpType_struct** %310, align 1
  %312 = getelementptr { %struct.smpType_struct*, i8* }* %309, i32 0, i32 1
  %313 = load i8** %312, align 1
  %314 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %306, i8* %308, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str50, i32 0, i32 0), %struct.smpType_struct* %311, i8* %313)
  %315 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %316 = getelementptr { %struct.smpType_struct*, i8* }* %315, i32 0, i32 0
  %317 = extractvalue { %struct.smpType_struct*, i8* } %314, 0
  store %struct.smpType_struct* %317, %struct.smpType_struct** %316, align 1
  %318 = getelementptr { %struct.smpType_struct*, i8* }* %315, i32 0, i32 1
  %319 = extractvalue { %struct.smpType_struct*, i8* } %314, 1
  store i8* %319, i8** %318, align 1
  %320 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_cons, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %321 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %322 = getelementptr { %struct.smpType_struct*, i8* }* %321, i32 0, i32 0
  %323 = extractvalue { %struct.smpType_struct*, i8* } %320, 0
  store %struct.smpType_struct* %323, %struct.smpType_struct** %322, align 1
  %324 = getelementptr { %struct.smpType_struct*, i8* }* %321, i32 0, i32 1
  %325 = extractvalue { %struct.smpType_struct*, i8* } %320, 1
  store i8* %325, i8** %324, align 1
  %326 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %327 = getelementptr { %struct.smpType_struct*, i8* }* %326, i32 0, i32 0
  %328 = load %struct.smpType_struct** %327, align 1
  %329 = getelementptr { %struct.smpType_struct*, i8* }* %326, i32 0, i32 1
  %330 = load i8** %329, align 1
  %331 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %332 = getelementptr { %struct.smpType_struct*, i8* }* %331, i32 0, i32 0
  %333 = load %struct.smpType_struct** %332, align 1
  %334 = getelementptr { %struct.smpType_struct*, i8* }* %331, i32 0, i32 1
  %335 = load i8** %334, align 1
  %336 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %328, i8* %330, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str51, i32 0, i32 0), %struct.smpType_struct* %333, i8* %335)
  %337 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %338 = getelementptr { %struct.smpType_struct*, i8* }* %337, i32 0, i32 0
  %339 = extractvalue { %struct.smpType_struct*, i8* } %336, 0
  store %struct.smpType_struct* %339, %struct.smpType_struct** %338, align 1
  %340 = getelementptr { %struct.smpType_struct*, i8* }* %337, i32 0, i32 1
  %341 = extractvalue { %struct.smpType_struct*, i8* } %336, 1
  store i8* %341, i8** %340, align 1
  %342 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_eq, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %343 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %344 = getelementptr { %struct.smpType_struct*, i8* }* %343, i32 0, i32 0
  %345 = extractvalue { %struct.smpType_struct*, i8* } %342, 0
  store %struct.smpType_struct* %345, %struct.smpType_struct** %344, align 1
  %346 = getelementptr { %struct.smpType_struct*, i8* }* %343, i32 0, i32 1
  %347 = extractvalue { %struct.smpType_struct*, i8* } %342, 1
  store i8* %347, i8** %346, align 1
  %348 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %349 = getelementptr { %struct.smpType_struct*, i8* }* %348, i32 0, i32 0
  %350 = load %struct.smpType_struct** %349, align 1
  %351 = getelementptr { %struct.smpType_struct*, i8* }* %348, i32 0, i32 1
  %352 = load i8** %351, align 1
  %353 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %354 = getelementptr { %struct.smpType_struct*, i8* }* %353, i32 0, i32 0
  %355 = load %struct.smpType_struct** %354, align 1
  %356 = getelementptr { %struct.smpType_struct*, i8* }* %353, i32 0, i32 1
  %357 = load i8** %356, align 1
  %358 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %350, i8* %352, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str23, i32 0, i32 0), %struct.smpType_struct* %355, i8* %357)
  %359 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %360 = getelementptr { %struct.smpType_struct*, i8* }* %359, i32 0, i32 0
  %361 = extractvalue { %struct.smpType_struct*, i8* } %358, 0
  store %struct.smpType_struct* %361, %struct.smpType_struct** %360, align 1
  %362 = getelementptr { %struct.smpType_struct*, i8* }* %359, i32 0, i32 1
  %363 = extractvalue { %struct.smpType_struct*, i8* } %358, 1
  store i8* %363, i8** %362, align 1
  %364 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_eql, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %365 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %366 = getelementptr { %struct.smpType_struct*, i8* }* %365, i32 0, i32 0
  %367 = extractvalue { %struct.smpType_struct*, i8* } %364, 0
  store %struct.smpType_struct* %367, %struct.smpType_struct** %366, align 1
  %368 = getelementptr { %struct.smpType_struct*, i8* }* %365, i32 0, i32 1
  %369 = extractvalue { %struct.smpType_struct*, i8* } %364, 1
  store i8* %369, i8** %368, align 1
  %370 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %371 = getelementptr { %struct.smpType_struct*, i8* }* %370, i32 0, i32 0
  %372 = load %struct.smpType_struct** %371, align 1
  %373 = getelementptr { %struct.smpType_struct*, i8* }* %370, i32 0, i32 1
  %374 = load i8** %373, align 1
  %375 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %376 = getelementptr { %struct.smpType_struct*, i8* }* %375, i32 0, i32 0
  %377 = load %struct.smpType_struct** %376, align 1
  %378 = getelementptr { %struct.smpType_struct*, i8* }* %375, i32 0, i32 1
  %379 = load i8** %378, align 1
  %380 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %372, i8* %374, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str52, i32 0, i32 0), %struct.smpType_struct* %377, i8* %379)
  %381 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %382 = getelementptr { %struct.smpType_struct*, i8* }* %381, i32 0, i32 0
  %383 = extractvalue { %struct.smpType_struct*, i8* } %380, 0
  store %struct.smpType_struct* %383, %struct.smpType_struct** %382, align 1
  %384 = getelementptr { %struct.smpType_struct*, i8* }* %381, i32 0, i32 1
  %385 = extractvalue { %struct.smpType_struct*, i8* } %380, 1
  store i8* %385, i8** %384, align 1
  %386 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_equalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %387 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %388 = getelementptr { %struct.smpType_struct*, i8* }* %387, i32 0, i32 0
  %389 = extractvalue { %struct.smpType_struct*, i8* } %386, 0
  store %struct.smpType_struct* %389, %struct.smpType_struct** %388, align 1
  %390 = getelementptr { %struct.smpType_struct*, i8* }* %387, i32 0, i32 1
  %391 = extractvalue { %struct.smpType_struct*, i8* } %386, 1
  store i8* %391, i8** %390, align 1
  %392 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %393 = getelementptr { %struct.smpType_struct*, i8* }* %392, i32 0, i32 0
  %394 = load %struct.smpType_struct** %393, align 1
  %395 = getelementptr { %struct.smpType_struct*, i8* }* %392, i32 0, i32 1
  %396 = load i8** %395, align 1
  %397 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %398 = getelementptr { %struct.smpType_struct*, i8* }* %397, i32 0, i32 0
  %399 = load %struct.smpType_struct** %398, align 1
  %400 = getelementptr { %struct.smpType_struct*, i8* }* %397, i32 0, i32 1
  %401 = load i8** %400, align 1
  %402 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %394, i8* %396, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str22, i32 0, i32 0), %struct.smpType_struct* %399, i8* %401)
  %403 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %404 = getelementptr { %struct.smpType_struct*, i8* }* %403, i32 0, i32 0
  %405 = extractvalue { %struct.smpType_struct*, i8* } %402, 0
  store %struct.smpType_struct* %405, %struct.smpType_struct** %404, align 1
  %406 = getelementptr { %struct.smpType_struct*, i8* }* %403, i32 0, i32 1
  %407 = extractvalue { %struct.smpType_struct*, i8* } %402, 1
  store i8* %407, i8** %406, align 1
  %408 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_funcall_arg, i32 4, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %409 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %410 = getelementptr { %struct.smpType_struct*, i8* }* %409, i32 0, i32 0
  %411 = extractvalue { %struct.smpType_struct*, i8* } %408, 0
  store %struct.smpType_struct* %411, %struct.smpType_struct** %410, align 1
  %412 = getelementptr { %struct.smpType_struct*, i8* }* %409, i32 0, i32 1
  %413 = extractvalue { %struct.smpType_struct*, i8* } %408, 1
  store i8* %413, i8** %412, align 1
  %414 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %415 = getelementptr { %struct.smpType_struct*, i8* }* %414, i32 0, i32 0
  %416 = load %struct.smpType_struct** %415, align 1
  %417 = getelementptr { %struct.smpType_struct*, i8* }* %414, i32 0, i32 1
  %418 = load i8** %417, align 1
  %419 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %420 = getelementptr { %struct.smpType_struct*, i8* }* %419, i32 0, i32 0
  %421 = load %struct.smpType_struct** %420, align 1
  %422 = getelementptr { %struct.smpType_struct*, i8* }* %419, i32 0, i32 1
  %423 = load i8** %422, align 1
  %424 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %416, i8* %418, i32 1, i8* getelementptr inbounds ([8 x i8]* @.str53, i32 0, i32 0), %struct.smpType_struct* %421, i8* %423)
  %425 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %426 = getelementptr { %struct.smpType_struct*, i8* }* %425, i32 0, i32 0
  %427 = extractvalue { %struct.smpType_struct*, i8* } %424, 0
  store %struct.smpType_struct* %427, %struct.smpType_struct** %426, align 1
  %428 = getelementptr { %struct.smpType_struct*, i8* }* %425, i32 0, i32 1
  %429 = extractvalue { %struct.smpType_struct*, i8* } %424, 1
  store i8* %429, i8** %428, align 1
  %430 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_funcall_arg, i32 4, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %431 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %432 = getelementptr { %struct.smpType_struct*, i8* }* %431, i32 0, i32 0
  %433 = extractvalue { %struct.smpType_struct*, i8* } %430, 0
  store %struct.smpType_struct* %433, %struct.smpType_struct** %432, align 1
  %434 = getelementptr { %struct.smpType_struct*, i8* }* %431, i32 0, i32 1
  %435 = extractvalue { %struct.smpType_struct*, i8* } %430, 1
  store i8* %435, i8** %434, align 1
  %436 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %437 = getelementptr { %struct.smpType_struct*, i8* }* %436, i32 0, i32 0
  %438 = load %struct.smpType_struct** %437, align 1
  %439 = getelementptr { %struct.smpType_struct*, i8* }* %436, i32 0, i32 1
  %440 = load i8** %439, align 1
  %441 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %442 = getelementptr { %struct.smpType_struct*, i8* }* %441, i32 0, i32 0
  %443 = load %struct.smpType_struct** %442, align 1
  %444 = getelementptr { %struct.smpType_struct*, i8* }* %441, i32 0, i32 1
  %445 = load i8** %444, align 1
  %446 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %438, i8* %440, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str53, i32 0, i32 0), %struct.smpType_struct* %443, i8* %445)
  %447 = bitcast %struct.obj_struct* %31 to { %struct.smpType_struct*, i8* }*
  %448 = getelementptr { %struct.smpType_struct*, i8* }* %447, i32 0, i32 0
  %449 = extractvalue { %struct.smpType_struct*, i8* } %446, 0
  store %struct.smpType_struct* %449, %struct.smpType_struct** %448, align 1
  %450 = getelementptr { %struct.smpType_struct*, i8* }* %447, i32 0, i32 1
  %451 = extractvalue { %struct.smpType_struct*, i8* } %446, 1
  store i8* %451, i8** %450, align 1
  %452 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_getclass, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0))
  %453 = bitcast %struct.obj_struct* %32 to { %struct.smpType_struct*, i8* }*
  %454 = getelementptr { %struct.smpType_struct*, i8* }* %453, i32 0, i32 0
  %455 = extractvalue { %struct.smpType_struct*, i8* } %452, 0
  store %struct.smpType_struct* %455, %struct.smpType_struct** %454, align 1
  %456 = getelementptr { %struct.smpType_struct*, i8* }* %453, i32 0, i32 1
  %457 = extractvalue { %struct.smpType_struct*, i8* } %452, 1
  store i8* %457, i8** %456, align 1
  %458 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %459 = getelementptr { %struct.smpType_struct*, i8* }* %458, i32 0, i32 0
  %460 = load %struct.smpType_struct** %459, align 1
  %461 = getelementptr { %struct.smpType_struct*, i8* }* %458, i32 0, i32 1
  %462 = load i8** %461, align 1
  %463 = bitcast %struct.obj_struct* %32 to { %struct.smpType_struct*, i8* }*
  %464 = getelementptr { %struct.smpType_struct*, i8* }* %463, i32 0, i32 0
  %465 = load %struct.smpType_struct** %464, align 1
  %466 = getelementptr { %struct.smpType_struct*, i8* }* %463, i32 0, i32 1
  %467 = load i8** %466, align 1
  %468 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %460, i8* %462, i32 0, i8* getelementptr inbounds ([9 x i8]* @.str55, i32 0, i32 0), %struct.smpType_struct* %465, i8* %467)
  %469 = bitcast %struct.obj_struct* %33 to { %struct.smpType_struct*, i8* }*
  %470 = getelementptr { %struct.smpType_struct*, i8* }* %469, i32 0, i32 0
  %471 = extractvalue { %struct.smpType_struct*, i8* } %468, 0
  store %struct.smpType_struct* %471, %struct.smpType_struct** %470, align 1
  %472 = getelementptr { %struct.smpType_struct*, i8* }* %469, i32 0, i32 1
  %473 = extractvalue { %struct.smpType_struct*, i8* } %468, 1
  store i8* %473, i8** %472, align 1
  %474 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_hash, i32 1, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %475 = bitcast %struct.obj_struct* %34 to { %struct.smpType_struct*, i8* }*
  %476 = getelementptr { %struct.smpType_struct*, i8* }* %475, i32 0, i32 0
  %477 = extractvalue { %struct.smpType_struct*, i8* } %474, 0
  store %struct.smpType_struct* %477, %struct.smpType_struct** %476, align 1
  %478 = getelementptr { %struct.smpType_struct*, i8* }* %475, i32 0, i32 1
  %479 = extractvalue { %struct.smpType_struct*, i8* } %474, 1
  store i8* %479, i8** %478, align 1
  %480 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %481 = getelementptr { %struct.smpType_struct*, i8* }* %480, i32 0, i32 0
  %482 = load %struct.smpType_struct** %481, align 1
  %483 = getelementptr { %struct.smpType_struct*, i8* }* %480, i32 0, i32 1
  %484 = load i8** %483, align 1
  %485 = bitcast %struct.obj_struct* %34 to { %struct.smpType_struct*, i8* }*
  %486 = getelementptr { %struct.smpType_struct*, i8* }* %485, i32 0, i32 0
  %487 = load %struct.smpType_struct** %486, align 1
  %488 = getelementptr { %struct.smpType_struct*, i8* }* %485, i32 0, i32 1
  %489 = load i8** %488, align 1
  %490 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %482, i8* %484, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str56, i32 0, i32 0), %struct.smpType_struct* %487, i8* %489)
  %491 = bitcast %struct.obj_struct* %35 to { %struct.smpType_struct*, i8* }*
  %492 = getelementptr { %struct.smpType_struct*, i8* }* %491, i32 0, i32 0
  %493 = extractvalue { %struct.smpType_struct*, i8* } %490, 0
  store %struct.smpType_struct* %493, %struct.smpType_struct** %492, align 1
  %494 = getelementptr { %struct.smpType_struct*, i8* }* %491, i32 0, i32 1
  %495 = extractvalue { %struct.smpType_struct*, i8* } %490, 1
  store i8* %495, i8** %494, align 1
  %496 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %497 = bitcast %struct.obj_struct* %36 to { %struct.smpType_struct*, i8* }*
  %498 = getelementptr { %struct.smpType_struct*, i8* }* %497, i32 0, i32 0
  %499 = extractvalue { %struct.smpType_struct*, i8* } %496, 0
  store %struct.smpType_struct* %499, %struct.smpType_struct** %498, align 1
  %500 = getelementptr { %struct.smpType_struct*, i8* }* %497, i32 0, i32 1
  %501 = extractvalue { %struct.smpType_struct*, i8* } %496, 1
  store i8* %501, i8** %500, align 1
  %502 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %503 = getelementptr { %struct.smpType_struct*, i8* }* %502, i32 0, i32 0
  %504 = load %struct.smpType_struct** %503, align 1
  %505 = getelementptr { %struct.smpType_struct*, i8* }* %502, i32 0, i32 1
  %506 = load i8** %505, align 1
  %507 = bitcast %struct.obj_struct* %36 to { %struct.smpType_struct*, i8* }*
  %508 = getelementptr { %struct.smpType_struct*, i8* }* %507, i32 0, i32 0
  %509 = load %struct.smpType_struct** %508, align 1
  %510 = getelementptr { %struct.smpType_struct*, i8* }* %507, i32 0, i32 1
  %511 = load i8** %510, align 1
  %512 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %504, i8* %506, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %509, i8* %511)
  %513 = bitcast %struct.obj_struct* %37 to { %struct.smpType_struct*, i8* }*
  %514 = getelementptr { %struct.smpType_struct*, i8* }* %513, i32 0, i32 0
  %515 = extractvalue { %struct.smpType_struct*, i8* } %512, 0
  store %struct.smpType_struct* %515, %struct.smpType_struct** %514, align 1
  %516 = getelementptr { %struct.smpType_struct*, i8* }* %513, i32 0, i32 1
  %517 = extractvalue { %struct.smpType_struct*, i8* } %512, 1
  store i8* %517, i8** %516, align 1
  %518 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_to_s_class, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %519 = bitcast %struct.obj_struct* %38 to { %struct.smpType_struct*, i8* }*
  %520 = getelementptr { %struct.smpType_struct*, i8* }* %519, i32 0, i32 0
  %521 = extractvalue { %struct.smpType_struct*, i8* } %518, 0
  store %struct.smpType_struct* %521, %struct.smpType_struct** %520, align 1
  %522 = getelementptr { %struct.smpType_struct*, i8* }* %519, i32 0, i32 1
  %523 = extractvalue { %struct.smpType_struct*, i8* } %518, 1
  store i8* %523, i8** %522, align 1
  %524 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %525 = getelementptr { %struct.smpType_struct*, i8* }* %524, i32 0, i32 0
  %526 = load %struct.smpType_struct** %525, align 1
  %527 = getelementptr { %struct.smpType_struct*, i8* }* %524, i32 0, i32 1
  %528 = load i8** %527, align 1
  %529 = bitcast %struct.obj_struct* %38 to { %struct.smpType_struct*, i8* }*
  %530 = getelementptr { %struct.smpType_struct*, i8* }* %529, i32 0, i32 0
  %531 = load %struct.smpType_struct** %530, align 1
  %532 = getelementptr { %struct.smpType_struct*, i8* }* %529, i32 0, i32 1
  %533 = load i8** %532, align 1
  %534 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %526, i8* %528, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %531, i8* %533)
  %535 = bitcast %struct.obj_struct* %39 to { %struct.smpType_struct*, i8* }*
  %536 = getelementptr { %struct.smpType_struct*, i8* }* %535, i32 0, i32 0
  %537 = extractvalue { %struct.smpType_struct*, i8* } %534, 0
  store %struct.smpType_struct* %537, %struct.smpType_struct** %536, align 1
  %538 = getelementptr { %struct.smpType_struct*, i8* }* %535, i32 0, i32 1
  %539 = extractvalue { %struct.smpType_struct*, i8* } %534, 1
  store i8* %539, i8** %538, align 1
  %540 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_type, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0))
  %541 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %542 = getelementptr { %struct.smpType_struct*, i8* }* %541, i32 0, i32 0
  %543 = extractvalue { %struct.smpType_struct*, i8* } %540, 0
  store %struct.smpType_struct* %543, %struct.smpType_struct** %542, align 1
  %544 = getelementptr { %struct.smpType_struct*, i8* }* %541, i32 0, i32 1
  %545 = extractvalue { %struct.smpType_struct*, i8* } %540, 1
  store i8* %545, i8** %544, align 1
  %546 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %547 = getelementptr { %struct.smpType_struct*, i8* }* %546, i32 0, i32 0
  %548 = load %struct.smpType_struct** %547, align 1
  %549 = getelementptr { %struct.smpType_struct*, i8* }* %546, i32 0, i32 1
  %550 = load i8** %549, align 1
  %551 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %552 = getelementptr { %struct.smpType_struct*, i8* }* %551, i32 0, i32 0
  %553 = load %struct.smpType_struct** %552, align 1
  %554 = getelementptr { %struct.smpType_struct*, i8* }* %551, i32 0, i32 1
  %555 = load i8** %554, align 1
  %556 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %548, i8* %550, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str58, i32 0, i32 0), %struct.smpType_struct* %553, i8* %555)
  %557 = bitcast %struct.obj_struct* %41 to { %struct.smpType_struct*, i8* }*
  %558 = getelementptr { %struct.smpType_struct*, i8* }* %557, i32 0, i32 0
  %559 = extractvalue { %struct.smpType_struct*, i8* } %556, 0
  store %struct.smpType_struct* %559, %struct.smpType_struct** %558, align 1
  %560 = getelementptr { %struct.smpType_struct*, i8* }* %557, i32 0, i32 1
  %561 = extractvalue { %struct.smpType_struct*, i8* } %556, 1
  store i8* %561, i8** %560, align 1
  %562 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_types_equalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %563 = bitcast %struct.obj_struct* %42 to { %struct.smpType_struct*, i8* }*
  %564 = getelementptr { %struct.smpType_struct*, i8* }* %563, i32 0, i32 0
  %565 = extractvalue { %struct.smpType_struct*, i8* } %562, 0
  store %struct.smpType_struct* %565, %struct.smpType_struct** %564, align 1
  %566 = getelementptr { %struct.smpType_struct*, i8* }* %563, i32 0, i32 1
  %567 = extractvalue { %struct.smpType_struct*, i8* } %562, 1
  store i8* %567, i8** %566, align 1
  %568 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %569 = getelementptr { %struct.smpType_struct*, i8* }* %568, i32 0, i32 0
  %570 = load %struct.smpType_struct** %569, align 1
  %571 = getelementptr { %struct.smpType_struct*, i8* }* %568, i32 0, i32 1
  %572 = load i8** %571, align 1
  %573 = bitcast %struct.obj_struct* %42 to { %struct.smpType_struct*, i8* }*
  %574 = getelementptr { %struct.smpType_struct*, i8* }* %573, i32 0, i32 0
  %575 = load %struct.smpType_struct** %574, align 1
  %576 = getelementptr { %struct.smpType_struct*, i8* }* %573, i32 0, i32 1
  %577 = load i8** %576, align 1
  %578 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %570, i8* %572, i32 0, i8* getelementptr inbounds ([13 x i8]* @.str59, i32 0, i32 0), %struct.smpType_struct* %575, i8* %577)
  %579 = bitcast %struct.obj_struct* %43 to { %struct.smpType_struct*, i8* }*
  %580 = getelementptr { %struct.smpType_struct*, i8* }* %579, i32 0, i32 0
  %581 = extractvalue { %struct.smpType_struct*, i8* } %578, 0
  store %struct.smpType_struct* %581, %struct.smpType_struct** %580, align 1
  %582 = getelementptr { %struct.smpType_struct*, i8* }* %579, i32 0, i32 1
  %583 = extractvalue { %struct.smpType_struct*, i8* } %578, 1
  store i8* %583, i8** %582, align 1
  %584 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_write, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %585 = bitcast %struct.obj_struct* %44 to { %struct.smpType_struct*, i8* }*
  %586 = getelementptr { %struct.smpType_struct*, i8* }* %585, i32 0, i32 0
  %587 = extractvalue { %struct.smpType_struct*, i8* } %584, 0
  store %struct.smpType_struct* %587, %struct.smpType_struct** %586, align 1
  %588 = getelementptr { %struct.smpType_struct*, i8* }* %585, i32 0, i32 1
  %589 = extractvalue { %struct.smpType_struct*, i8* } %584, 1
  store i8* %589, i8** %588, align 1
  %590 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %591 = getelementptr { %struct.smpType_struct*, i8* }* %590, i32 0, i32 0
  %592 = load %struct.smpType_struct** %591, align 1
  %593 = getelementptr { %struct.smpType_struct*, i8* }* %590, i32 0, i32 1
  %594 = load i8** %593, align 1
  %595 = bitcast %struct.obj_struct* %44 to { %struct.smpType_struct*, i8* }*
  %596 = getelementptr { %struct.smpType_struct*, i8* }* %595, i32 0, i32 0
  %597 = load %struct.smpType_struct** %596, align 1
  %598 = getelementptr { %struct.smpType_struct*, i8* }* %595, i32 0, i32 1
  %599 = load i8** %598, align 1
  %600 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %592, i8* %594, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), %struct.smpType_struct* %597, i8* %599)
  %601 = bitcast %struct.obj_struct* %45 to { %struct.smpType_struct*, i8* }*
  %602 = getelementptr { %struct.smpType_struct*, i8* }* %601, i32 0, i32 0
  %603 = extractvalue { %struct.smpType_struct*, i8* } %600, 0
  store %struct.smpType_struct* %603, %struct.smpType_struct** %602, align 1
  %604 = getelementptr { %struct.smpType_struct*, i8* }* %601, i32 0, i32 1
  %605 = extractvalue { %struct.smpType_struct*, i8* } %600, 1
  store i8* %605, i8** %604, align 1
  %606 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpObject_write_class, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %607 = bitcast %struct.obj_struct* %46 to { %struct.smpType_struct*, i8* }*
  %608 = getelementptr { %struct.smpType_struct*, i8* }* %607, i32 0, i32 0
  %609 = extractvalue { %struct.smpType_struct*, i8* } %606, 0
  store %struct.smpType_struct* %609, %struct.smpType_struct** %608, align 1
  %610 = getelementptr { %struct.smpType_struct*, i8* }* %607, i32 0, i32 1
  %611 = extractvalue { %struct.smpType_struct*, i8* } %606, 1
  store i8* %611, i8** %610, align 1
  %612 = bitcast %struct.obj_struct* %object to { %struct.smpType_struct*, i8* }*
  %613 = getelementptr { %struct.smpType_struct*, i8* }* %612, i32 0, i32 0
  %614 = load %struct.smpType_struct** %613, align 1
  %615 = getelementptr { %struct.smpType_struct*, i8* }* %612, i32 0, i32 1
  %616 = load i8** %615, align 1
  %617 = bitcast %struct.obj_struct* %46 to { %struct.smpType_struct*, i8* }*
  %618 = getelementptr { %struct.smpType_struct*, i8* }* %617, i32 0, i32 0
  %619 = load %struct.smpType_struct** %618, align 1
  %620 = getelementptr { %struct.smpType_struct*, i8* }* %617, i32 0, i32 1
  %621 = load i8** %620, align 1
  %622 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %614, i8* %616, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), %struct.smpType_struct* %619, i8* %621)
  %623 = bitcast %struct.obj_struct* %47 to { %struct.smpType_struct*, i8* }*
  %624 = getelementptr { %struct.smpType_struct*, i8* }* %623, i32 0, i32 0
  %625 = extractvalue { %struct.smpType_struct*, i8* } %622, 0
  store %struct.smpType_struct* %625, %struct.smpType_struct** %624, align 1
  %626 = getelementptr { %struct.smpType_struct*, i8* }* %623, i32 0, i32 1
  %627 = extractvalue { %struct.smpType_struct*, i8* } %622, 1
  store i8* %627, i8** %626, align 1
  %628 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([10 x i8]* @.str42, i32 0, i32 0))
  %629 = bitcast %struct.obj_struct* %48 to { %struct.smpType_struct*, i8* }*
  %630 = getelementptr { %struct.smpType_struct*, i8* }* %629, i32 0, i32 0
  %631 = extractvalue { %struct.smpType_struct*, i8* } %628, 0
  store %struct.smpType_struct* %631, %struct.smpType_struct** %630, align 1
  %632 = getelementptr { %struct.smpType_struct*, i8* }* %629, i32 0, i32 1
  %633 = extractvalue { %struct.smpType_struct*, i8* } %628, 1
  store i8* %633, i8** %632, align 1
  %634 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smptrue_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %635 = bitcast %struct.obj_struct* %49 to { %struct.smpType_struct*, i8* }*
  %636 = getelementptr { %struct.smpType_struct*, i8* }* %635, i32 0, i32 0
  %637 = extractvalue { %struct.smpType_struct*, i8* } %634, 0
  store %struct.smpType_struct* %637, %struct.smpType_struct** %636, align 1
  %638 = getelementptr { %struct.smpType_struct*, i8* }* %635, i32 0, i32 1
  %639 = extractvalue { %struct.smpType_struct*, i8* } %634, 1
  store i8* %639, i8** %638, align 1
  %640 = bitcast %struct.obj_struct* %48 to { %struct.smpType_struct*, i8* }*
  %641 = getelementptr { %struct.smpType_struct*, i8* }* %640, i32 0, i32 0
  %642 = load %struct.smpType_struct** %641, align 1
  %643 = getelementptr { %struct.smpType_struct*, i8* }* %640, i32 0, i32 1
  %644 = load i8** %643, align 1
  %645 = bitcast %struct.obj_struct* %49 to { %struct.smpType_struct*, i8* }*
  %646 = getelementptr { %struct.smpType_struct*, i8* }* %645, i32 0, i32 0
  %647 = load %struct.smpType_struct** %646, align 1
  %648 = getelementptr { %struct.smpType_struct*, i8* }* %645, i32 0, i32 1
  %649 = load i8** %648, align 1
  %650 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %642, i8* %644, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %647, i8* %649)
  %651 = bitcast %struct.obj_struct* %50 to { %struct.smpType_struct*, i8* }*
  %652 = getelementptr { %struct.smpType_struct*, i8* }* %651, i32 0, i32 0
  %653 = extractvalue { %struct.smpType_struct*, i8* } %650, 0
  store %struct.smpType_struct* %653, %struct.smpType_struct** %652, align 1
  %654 = getelementptr { %struct.smpType_struct*, i8* }* %651, i32 0, i32 1
  %655 = extractvalue { %struct.smpType_struct*, i8* } %650, 1
  store i8* %655, i8** %654, align 1
  %656 = call i32 @smpFunction_create_class()
  %657 = call i32 @smpCollection_create_class()
  %658 = call i32 @smpList_create_class()
  %659 = call i32 @smpNil_create_class()
  %660 = call i32 @smpPair_create_class()
  %661 = call i32 @smpThrown_create_class()
  %662 = call i32 @smpException_create_class()
  %663 = call i32 @smpstrcreate_class()
  ret i32 0
}

define i32 @smpGlobal_class(i8* %name, %struct.smpType_struct* %parent, i32 %flags) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca %struct.smpType_struct*, align 8
  %4 = alloca i32, align 4
  %parents = alloca %struct.smpType_struct**, align 8
  %parents_length = alloca i64, align 8
  store i8* %name, i8** %2, align 8
  store %struct.smpType_struct* %parent, %struct.smpType_struct** %3, align 8
  store i32 %flags, i32* %4, align 4
  %5 = load %struct.smpType_struct** %3, align 8
  %6 = icmp ne %struct.smpType_struct* %5, null
  br i1 %6, label %7, label %19

; <label>:7                                       ; preds = %0
  %8 = load %struct.smpType_struct** %3, align 8
  %9 = bitcast %struct.smpType_struct* %8 to i8*
  %10 = getelementptr i8* %9, i32 12
  %11 = bitcast i8* %10 to i32*
  %12 = load i32* %11, align 4
  %13 = lshr i32 %12, 4
  %14 = and i32 %13, 1
  %15 = shl i32 %14, 31
  %16 = ashr i32 %15, 31
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %19

; <label>:18                                      ; preds = %7
  store i32 1, i32* %1
  br label %34

; <label>:19                                      ; preds = %7, %0
  %20 = load %struct.smpType_struct** %3, align 8
  %21 = icmp eq %struct.smpType_struct* %20, null
  br i1 %21, label %22, label %23

; <label>:22                                      ; preds = %19
  store %struct.smpType_struct** null, %struct.smpType_struct*** %parents, align 8
  store i64 0, i64* %parents_length, align 8
  br label %28

; <label>:23                                      ; preds = %19
  %24 = call noalias i8* @GC_malloc(i64 8)
  %25 = bitcast i8* %24 to %struct.smpType_struct**
  store %struct.smpType_struct** %25, %struct.smpType_struct*** %parents, align 8
  %26 = load %struct.smpType_struct** %3, align 8
  %27 = load %struct.smpType_struct*** %parents, align 8
  store %struct.smpType_struct* %26, %struct.smpType_struct** %27, align 8
  store i64 1, i64* %parents_length, align 8
  br label %28

; <label>:28                                      ; preds = %23, %22
  %29 = load i8** %2, align 8
  %30 = load %struct.smpType_struct*** %parents, align 8
  %31 = load i64* %parents_length, align 8
  %32 = load i32* %4, align 4
  %33 = call i32 @smpGlobal_class_multiple(i8* %29, %struct.smpType_struct** %30, i64 %31, i32 %32)
  store i32 %33, i32* %1
  br label %34

; <label>:34                                      ; preds = %28, %18
  %35 = load i32* %1
  ret i32 %35
}

define i32 @smpGlobal_class_multiple(i8* %name, %struct.smpType_struct** %parents, i64 %parents_length, i32 %flags) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca %struct.smpType_struct**, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %new_type = alloca %struct.smpType_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.minihash_struct, align 8
  %8 = alloca %struct.minihash_struct, align 8
  %9 = alloca %struct.minihash_struct, align 8
  %10 = alloca %struct.minihash_struct, align 8
  store i8* %name, i8** %2, align 8
  store %struct.smpType_struct** %parents, %struct.smpType_struct*** %3, align 8
  store i64 %parents_length, i64* %4, align 8
  store i32 %flags, i32* %5, align 4
  %11 = load %struct.smpType_struct*** %3, align 8
  %12 = icmp ne %struct.smpType_struct** %11, null
  br i1 %12, label %13, label %32

; <label>:13                                      ; preds = %0
  %14 = load %struct.smpType_struct*** %3, align 8
  %15 = getelementptr inbounds %struct.smpType_struct** %14, i64 0
  %16 = load %struct.smpType_struct** %15, align 8
  %17 = icmp ne %struct.smpType_struct* %16, null
  br i1 %17, label %18, label %32

; <label>:18                                      ; preds = %13
  %19 = load %struct.smpType_struct*** %3, align 8
  %20 = getelementptr inbounds %struct.smpType_struct** %19, i64 0
  %21 = load %struct.smpType_struct** %20, align 8
  %22 = bitcast %struct.smpType_struct* %21 to i8*
  %23 = getelementptr i8* %22, i32 12
  %24 = bitcast i8* %23 to i32*
  %25 = load i32* %24, align 4
  %26 = lshr i32 %25, 4
  %27 = and i32 %26, 1
  %28 = shl i32 %27, 31
  %29 = ashr i32 %28, 31
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %32

; <label>:31                                      ; preds = %18
  store i32 1, i32* %1
  br label %179

; <label>:32                                      ; preds = %18, %13, %0
  %33 = load i8** %2, align 8
  %34 = call i64 @strlen(i8* %33)
  %35 = add i64 %34, 1
  %36 = mul i64 1, %35
  %37 = call noalias i8* @GC_malloc(i64 %36)
  %38 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 0
  store i8* %37, i8** %38, align 8
  %39 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 0
  %40 = load i8** %39, align 8
  %41 = call i64 @llvm.objectsize.i64(i8* %40, i1 false)
  %42 = icmp ne i64 %41, -1
  br i1 %42, label %43, label %51

; <label>:43                                      ; preds = %32
  %44 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 0
  %45 = load i8** %44, align 8
  %46 = load i8** %2, align 8
  %47 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 0
  %48 = load i8** %47, align 8
  %49 = call i64 @llvm.objectsize.i64(i8* %48, i1 false)
  %50 = call i8* @__strcpy_chk(i8* %45, i8* %46, i64 %49) nounwind
  br label %56

; <label>:51                                      ; preds = %32
  %52 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 0
  %53 = load i8** %52, align 8
  %54 = load i8** %2, align 8
  %55 = call i8* @__inline_strcpy_chk(i8* %53, i8* %54)
  br label %56

; <label>:56                                      ; preds = %51, %43
  %57 = phi i8* [ %50, %43 ], [ %55, %51 ]
  %58 = load i32* @smpType_next_id, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* @smpType_next_id, align 4
  %60 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 1
  store i32 %58, i32* %60, align 4
  %61 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 0
  %62 = load i8** %61, align 8
  %63 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 1
  %64 = load i32* %63, align 4
  %65 = call { %struct.smpType_struct*, i8* } @objid_init(i32 %64)
  %66 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = extractvalue { %struct.smpType_struct*, i8* } %65, 0
  store %struct.smpType_struct* %68, %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = extractvalue { %struct.smpType_struct*, i8* } %65, 1
  store i8* %70, i8** %69, align 1
  %71 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = load i8** %74, align 1
  %76 = call i32 @minihash_add(%struct.minihash_struct* @smpType_ids, i8* %62, %struct.smpType_struct* %73, i8* %75)
  %77 = load %struct.smpType_struct*** %3, align 8
  %78 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 3
  store %struct.smpType_struct** %77, %struct.smpType_struct*** %78, align 8
  %79 = load i64* %4, align 8
  %80 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 4
  store i64 %79, i64* %80, align 8
  %81 = load i32* %5, align 4
  %82 = and i32 %81, 1
  %83 = ashr i32 %82, 0
  %84 = and i32 %83, 1
  %85 = shl i32 %84, 31
  %86 = ashr i32 %85, 31
  %87 = bitcast %struct.smpType_struct* %new_type to i8*
  %88 = getelementptr i8* %87, i32 12
  %89 = bitcast i8* %88 to i32*
  %90 = and i32 %84, 1
  %91 = load i32* %89, align 4
  %92 = and i32 %91, -2
  %93 = or i32 %92, %90
  store i32 %93, i32* %89, align 4
  %94 = load i32* %5, align 4
  %95 = and i32 %94, 2
  %96 = ashr i32 %95, 1
  %97 = and i32 %96, 1
  %98 = shl i32 %97, 31
  %99 = ashr i32 %98, 31
  %100 = bitcast %struct.smpType_struct* %new_type to i8*
  %101 = getelementptr i8* %100, i32 12
  %102 = bitcast i8* %101 to i32*
  %103 = and i32 %97, 1
  %104 = shl i32 %103, 1
  %105 = load i32* %102, align 4
  %106 = and i32 %105, -3
  %107 = or i32 %106, %104
  store i32 %107, i32* %102, align 4
  %108 = load i32* %5, align 4
  %109 = and i32 %108, 48
  %110 = ashr i32 %109, 4
  %111 = and i32 %110, 3
  %112 = shl i32 %111, 30
  %113 = ashr i32 %112, 30
  %114 = bitcast %struct.smpType_struct* %new_type to i8*
  %115 = getelementptr i8* %114, i32 12
  %116 = bitcast i8* %115 to i32*
  %117 = and i32 %111, 3
  %118 = shl i32 %117, 2
  %119 = load i32* %116, align 4
  %120 = and i32 %119, -13
  %121 = or i32 %120, %118
  store i32 %121, i32* %116, align 4
  %122 = load i32* %5, align 4
  %123 = and i32 %122, 64
  %124 = ashr i32 %123, 6
  %125 = and i32 %124, 1
  %126 = shl i32 %125, 31
  %127 = ashr i32 %126, 31
  %128 = bitcast %struct.smpType_struct* %new_type to i8*
  %129 = getelementptr i8* %128, i32 12
  %130 = bitcast i8* %129 to i32*
  %131 = and i32 %125, 1
  %132 = shl i32 %131, 4
  %133 = load i32* %130, align 4
  %134 = and i32 %133, -17
  %135 = or i32 %134, %132
  store i32 %135, i32* %130, align 4
  %136 = load i32* %5, align 4
  %137 = and i32 %136, 128
  %138 = ashr i32 %137, 7
  %139 = and i32 %138, 1
  %140 = shl i32 %139, 31
  %141 = ashr i32 %140, 31
  %142 = bitcast %struct.smpType_struct* %new_type to i8*
  %143 = getelementptr i8* %142, i32 12
  %144 = bitcast i8* %143 to i32*
  %145 = and i32 %139, 1
  %146 = shl i32 %145, 5
  %147 = load i32* %144, align 4
  %148 = and i32 %147, -33
  %149 = or i32 %148, %146
  store i32 %149, i32* %144, align 4
  %150 = call noalias i8* @GC_malloc(i64 32)
  %151 = bitcast i8* %150 to %struct.minihash_struct*
  %152 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 5
  store %struct.minihash_struct* %151, %struct.minihash_struct** %152, align 8
  %153 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 5
  %154 = load %struct.minihash_struct** %153, align 8
  call void @minihash_init(%struct.minihash_struct* sret %7)
  %155 = bitcast %struct.minihash_struct* %154 to i8*
  %156 = bitcast %struct.minihash_struct* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %155, i8* %156, i64 32, i32 8, i1 false)
  %157 = call noalias i8* @GC_malloc(i64 32)
  %158 = bitcast i8* %157 to %struct.minihash_struct*
  %159 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 6
  store %struct.minihash_struct* %158, %struct.minihash_struct** %159, align 8
  %160 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 6
  %161 = load %struct.minihash_struct** %160, align 8
  call void @minihash_init(%struct.minihash_struct* sret %8)
  %162 = bitcast %struct.minihash_struct* %161 to i8*
  %163 = bitcast %struct.minihash_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %162, i8* %163, i64 32, i32 8, i1 false)
  %164 = call noalias i8* @GC_malloc(i64 32)
  %165 = bitcast i8* %164 to %struct.minihash_struct*
  %166 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 7
  store %struct.minihash_struct* %165, %struct.minihash_struct** %166, align 8
  %167 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 7
  %168 = load %struct.minihash_struct** %167, align 8
  call void @minihash_init(%struct.minihash_struct* sret %9)
  %169 = bitcast %struct.minihash_struct* %168 to i8*
  %170 = bitcast %struct.minihash_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %169, i8* %170, i64 32, i32 8, i1 false)
  %171 = call noalias i8* @GC_malloc(i64 32)
  %172 = bitcast i8* %171 to %struct.minihash_struct*
  %173 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 8
  store %struct.minihash_struct* %172, %struct.minihash_struct** %173, align 8
  %174 = getelementptr inbounds %struct.smpType_struct* %new_type, i32 0, i32 8
  %175 = load %struct.minihash_struct** %174, align 8
  call void @minihash_init(%struct.minihash_struct* sret %10)
  %176 = bitcast %struct.minihash_struct* %175 to i8*
  %177 = bitcast %struct.minihash_struct* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %176, i8* %177, i64 32, i32 8, i1 false)
  %178 = call i32 @smp_putclass(%struct.smpType_struct* byval align 8 %new_type)
  store i32 0, i32* %1
  br label %179

; <label>:179                                     ; preds = %56, %31
  %180 = load i32* %1
  ret i32 %180
}

define { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %type.coerce0, i8* %type.coerce1, i32 %flags, i8* %name, %struct.smpType_struct* %fun.coerce0, i8* %fun.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %type = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %fun = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %type.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %type.coerce1, i8** %6
  store i32 %flags, i32* %2, align 4
  store i8* %name, i8** %3, align 8
  %7 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %fun.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %fun.coerce1, i8** %9
  %10 = load i32* %2, align 4
  %11 = load i8** %3, align 8
  %12 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = load %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = load i8** %15, align 1
  %17 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 1
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 1
  %21 = load i8** %20, align 1
  %22 = call { %struct.smpType_struct*, i8* } @smpType_def_general(%struct.smpType_struct* %14, i8* %16, i32 %10, i8* %11, %struct.smpType_struct* %19, i8* %21)
  %23 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = extractvalue { %struct.smpType_struct*, i8* } %22, 0
  store %struct.smpType_struct* %25, %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = extractvalue { %struct.smpType_struct*, i8* } %22, 1
  store i8* %27, i8** %26, align 1
  %28 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %29 = load { %struct.smpType_struct*, i8* }* %28, align 1
  ret { %struct.smpType_struct*, i8* } %29
}

define { %struct.smpType_struct*, i8* } @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* %fun, i32 %argc, ...) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, align 8
  %3 = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %res = alloca %struct.obj_struct, align 8
  store { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* %fun, { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)** %2, align 8
  store i32 %argc, i32* %3, align 4
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %5 = bitcast %struct.__va_list_tag* %4 to i8*
  call void @llvm.va_start(i8* %5)
  %6 = load { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)** %2, align 8
  %7 = load i32* %3, align 4
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %9 = call { %struct.smpType_struct*, i8* } @smpFunction_init_v({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* %6, i32 %7, %struct.__va_list_tag* %8)
  %10 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %16 = bitcast %struct.__va_list_tag* %15 to i8*
  call void @llvm.va_end(i8* %16)
  %17 = bitcast %struct.obj_struct* %1 to i8*
  %18 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 16, i32 8, i1 false)
  %19 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %20 = load { %struct.smpType_struct*, i8* }* %19, align 1
  ret { %struct.smpType_struct*, i8* } %20
}

define { %struct.smpType_struct*, i8* } @smptrue_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([5 x i8]* @.str117, i32 0, i32 0))
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = extractvalue { %struct.smpType_struct*, i8* } %7, 0
  store %struct.smpType_struct* %10, %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = extractvalue { %struct.smpType_struct*, i8* } %7, 1
  store i8* %12, i8** %11, align 1
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = load { %struct.smpType_struct*, i8* }* %13, align 1
  ret { %struct.smpType_struct*, i8* } %14
}

define i32 @test_init() nounwind {
  store i32 0, i32* @smptest_print_successesp, align 4
  ret i32 0
}

define i32 @smp_assert_eq(%struct.smpType_struct* %expected.coerce0, i8* %expected.coerce1, %struct.smpType_struct* %found.coerce0, i8* %found.coerce1) nounwind {
  %expected = alloca %struct.obj_struct, align 8
  %found = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %equalp = alloca i32, align 4
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %expected to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %expected.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %expected.coerce1, i8** %7
  %8 = bitcast %struct.obj_struct* %found to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  store %struct.smpType_struct* %found.coerce0, %struct.smpType_struct** %9
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  store i8* %found.coerce1, i8** %10
  %11 = bitcast %struct.obj_struct* %expected to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = load i8** %14, align 1
  %16 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %13, i8* %15, i8* getelementptr inbounds ([7 x i8]* @.str22, i32 0, i32 0), i32 1, %struct.obj_struct* %found)
  %17 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 0
  %19 = extractvalue { %struct.smpType_struct*, i8* } %16, 0
  store %struct.smpType_struct* %19, %struct.smpType_struct** %18, align 1
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 1
  %21 = extractvalue { %struct.smpType_struct*, i8* } %16, 1
  store i8* %21, i8** %20, align 1
  %22 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = load i8** %25, align 1
  %27 = call i32 @smpBool_to_cint(%struct.smpType_struct* %24, i8* %26)
  store i32 %27, i32* %equalp, align 4
  %28 = load i32* %equalp, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %50

; <label>:30                                      ; preds = %0
  %31 = load i32* @smptest_print_successesp, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %50

; <label>:33                                      ; preds = %30
  %34 = bitcast %struct.obj_struct* %expected to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = load i8** %37, align 1
  %39 = bitcast %struct.obj_struct* %found to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = load %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = load i8** %42, align 1
  %44 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smp_printf(i8* getelementptr inbounds ([23 x i8]* @.str61, i32 0, i32 0), %struct.smpType_struct* %36, i8* %38, %struct.smpType_struct* %41, i8* %43)
  %45 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = extractvalue { %struct.smpType_struct*, i8* } %44, 0
  store %struct.smpType_struct* %47, %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = extractvalue { %struct.smpType_struct*, i8* } %44, 1
  store i8* %49, i8** %48, align 1
  br label %71

; <label>:50                                      ; preds = %30, %0
  %51 = load i32* %equalp, align 4
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %70

; <label>:53                                      ; preds = %50
  %54 = bitcast %struct.obj_struct* %expected to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = bitcast %struct.obj_struct* %found to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = load %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = load i8** %62, align 1
  %64 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smp_printf(i8* getelementptr inbounds ([33 x i8]* @.str62, i32 0, i32 0), %struct.smpType_struct* %56, i8* %58, %struct.smpType_struct* %61, i8* %63)
  %65 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = extractvalue { %struct.smpType_struct*, i8* } %64, 0
  store %struct.smpType_struct* %67, %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = extractvalue { %struct.smpType_struct*, i8* } %64, 1
  store i8* %69, i8** %68, align 1
  br label %70

; <label>:70                                      ; preds = %53, %50
  br label %71

; <label>:71                                      ; preds = %70, %33
  %72 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %expected)
  %73 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  %78 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %found)
  %79 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %79, i32 0, i32 0
  %81 = extractvalue { %struct.smpType_struct*, i8* } %78, 0
  store %struct.smpType_struct* %81, %struct.smpType_struct** %80, align 1
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %79, i32 0, i32 1
  %83 = extractvalue { %struct.smpType_struct*, i8* } %78, 1
  store i8* %83, i8** %82, align 1
  %84 = load i32* %equalp, align 4
  ret i32 %84
}

define i32 @smpBool_to_cint(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %obj = alloca %struct.obj_struct, align 8
  %1 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %2 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %2
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 1
  store i8* %obj.coerce1, i8** %3
  %4 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %5 = load i8** %4, align 8
  %6 = load i8** getelementptr inbounds (%struct.obj_struct* @smp_nil, i32 0, i32 1), align 8
  %7 = icmp ne i8* %5, %6
  %8 = zext i1 %7 to i32
  ret i32 %8
}

define { %struct.smpType_struct*, i8* } @smp_printf(i8* %format, ...) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %res = alloca %struct.obj_struct, align 8
  store i8* %format, i8** %2, align 8
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %4 = bitcast %struct.__va_list_tag* %3 to i8*
  call void @llvm.va_start(i8* %4)
  %5 = load i8** %2, align 8
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %7 = call { %struct.smpType_struct*, i8* } @smpGlobal_vsprintf(i8* %5, %struct.__va_list_tag* %6)
  %8 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = extractvalue { %struct.smpType_struct*, i8* } %7, 0
  store %struct.smpType_struct* %10, %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = extractvalue { %struct.smpType_struct*, i8* } %7, 1
  store i8* %12, i8** %11, align 1
  %13 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %14 = bitcast %struct.__va_list_tag* %13 to i8*
  call void @llvm.va_end(i8* %14)
  %15 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %17, i8* %19)
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %0
  %23 = bitcast %struct.obj_struct* %1 to i8*
  %24 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 16, i32 8, i1 false)
  br label %37

; <label>:25                                      ; preds = %0
  %26 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smp_print(%struct.smpType_struct* %28, i8* %30)
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  br label %37

; <label>:37                                      ; preds = %25, %22
  %38 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %39 = load { %struct.smpType_struct*, i8* }* %38, align 1
  ret { %struct.smpType_struct*, i8* } %39
}

define i32 @test_nums() nounwind {
  %x = alloca %struct.obj_struct, align 8
  %y = alloca %struct.obj_struct, align 8
  %successp = alloca i32, align 4
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = alloca %struct.obj_struct, align 8
  %16 = alloca %struct.obj_struct, align 8
  %17 = alloca %struct.obj_struct, align 8
  %18 = alloca %struct.obj_struct, align 8
  %19 = alloca %struct.obj_struct, align 8
  %20 = alloca %struct.obj_struct, align 8
  %21 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 4)
  %22 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = extractvalue { %struct.smpType_struct*, i8* } %21, 0
  store %struct.smpType_struct* %24, %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = extractvalue { %struct.smpType_struct*, i8* } %21, 1
  store i8* %26, i8** %25, align 1
  %27 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 7)
  %28 = bitcast %struct.obj_struct* %y to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = extractvalue { %struct.smpType_struct*, i8* } %27, 0
  store %struct.smpType_struct* %30, %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = extractvalue { %struct.smpType_struct*, i8* } %27, 1
  store i8* %32, i8** %31, align 1
  %33 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 0
  %35 = load %struct.smpType_struct** %34, align 1
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 1
  %37 = load i8** %36, align 1
  %38 = call i32 @scope_add(i8* getelementptr inbounds ([2 x i8]* @.str63, i32 0, i32 0), %struct.smpType_struct* %35, i8* %37)
  %39 = bitcast %struct.obj_struct* %y to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = load %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = load i8** %42, align 1
  %44 = call i32 @scope_add(i8* getelementptr inbounds ([2 x i8]* @.str64, i32 0, i32 0), %struct.smpType_struct* %41, i8* %43)
  store i32 1, i32* %successp, align 4
  %45 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 11)
  %46 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = extractvalue { %struct.smpType_struct*, i8* } %45, 0
  store %struct.smpType_struct* %48, %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = extractvalue { %struct.smpType_struct*, i8* } %45, 1
  store i8* %50, i8** %49, align 1
  %51 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = load %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = load i8** %54, align 1
  %56 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %53, i8* %55, i8* getelementptr inbounds ([2 x i8]* @.str65, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %57 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = extractvalue { %struct.smpType_struct*, i8* } %56, 0
  store %struct.smpType_struct* %59, %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = extractvalue { %struct.smpType_struct*, i8* } %56, 1
  store i8* %61, i8** %60, align 1
  %62 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = load %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = load i8** %65, align 1
  %67 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 1
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 1
  %71 = load i8** %70, align 1
  %72 = call i32 @smp_assert_eq(%struct.smpType_struct* %64, i8* %66, %struct.smpType_struct* %69, i8* %71)
  %73 = load i32* %successp, align 4
  %74 = and i32 %73, %72
  store i32 %74, i32* %successp, align 4
  %75 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 -3)
  %76 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 0
  %78 = extractvalue { %struct.smpType_struct*, i8* } %75, 0
  store %struct.smpType_struct* %78, %struct.smpType_struct** %77, align 1
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 1
  %80 = extractvalue { %struct.smpType_struct*, i8* } %75, 1
  store i8* %80, i8** %79, align 1
  %81 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = load %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = load i8** %84, align 1
  %86 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %83, i8* %85, i8* getelementptr inbounds ([2 x i8]* @.str66, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %87 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = extractvalue { %struct.smpType_struct*, i8* } %86, 0
  store %struct.smpType_struct* %89, %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = extractvalue { %struct.smpType_struct*, i8* } %86, 1
  store i8* %91, i8** %90, align 1
  %92 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 0
  %94 = load %struct.smpType_struct** %93, align 1
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 1
  %96 = load i8** %95, align 1
  %97 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 0
  %99 = load %struct.smpType_struct** %98, align 1
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 1
  %101 = load i8** %100, align 1
  %102 = call i32 @smp_assert_eq(%struct.smpType_struct* %94, i8* %96, %struct.smpType_struct* %99, i8* %101)
  %103 = load i32* %successp, align 4
  %104 = and i32 %103, %102
  store i32 %104, i32* %successp, align 4
  %105 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 28)
  %106 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 0
  %108 = extractvalue { %struct.smpType_struct*, i8* } %105, 0
  store %struct.smpType_struct* %108, %struct.smpType_struct** %107, align 1
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 1
  %110 = extractvalue { %struct.smpType_struct*, i8* } %105, 1
  store i8* %110, i8** %109, align 1
  %111 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %111, i32 0, i32 0
  %113 = load %struct.smpType_struct** %112, align 1
  %114 = getelementptr { %struct.smpType_struct*, i8* }* %111, i32 0, i32 1
  %115 = load i8** %114, align 1
  %116 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %113, i8* %115, i8* getelementptr inbounds ([2 x i8]* @.str67, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %117 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 0
  %119 = extractvalue { %struct.smpType_struct*, i8* } %116, 0
  store %struct.smpType_struct* %119, %struct.smpType_struct** %118, align 1
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 1
  %121 = extractvalue { %struct.smpType_struct*, i8* } %116, 1
  store i8* %121, i8** %120, align 1
  %122 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 0
  %124 = load %struct.smpType_struct** %123, align 1
  %125 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 1
  %126 = load i8** %125, align 1
  %127 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 0
  %129 = load %struct.smpType_struct** %128, align 1
  %130 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 1
  %131 = load i8** %130, align 1
  %132 = call i32 @smp_assert_eq(%struct.smpType_struct* %124, i8* %126, %struct.smpType_struct* %129, i8* %131)
  %133 = load i32* %successp, align 4
  %134 = and i32 %133, %132
  store i32 %134, i32* %successp, align 4
  %135 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 0)
  %136 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %137 = getelementptr { %struct.smpType_struct*, i8* }* %136, i32 0, i32 0
  %138 = extractvalue { %struct.smpType_struct*, i8* } %135, 0
  store %struct.smpType_struct* %138, %struct.smpType_struct** %137, align 1
  %139 = getelementptr { %struct.smpType_struct*, i8* }* %136, i32 0, i32 1
  %140 = extractvalue { %struct.smpType_struct*, i8* } %135, 1
  store i8* %140, i8** %139, align 1
  %141 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %142 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 0
  %143 = load %struct.smpType_struct** %142, align 1
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 1
  %145 = load i8** %144, align 1
  %146 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %143, i8* %145, i8* getelementptr inbounds ([2 x i8]* @.str68, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %147 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %148 = getelementptr { %struct.smpType_struct*, i8* }* %147, i32 0, i32 0
  %149 = extractvalue { %struct.smpType_struct*, i8* } %146, 0
  store %struct.smpType_struct* %149, %struct.smpType_struct** %148, align 1
  %150 = getelementptr { %struct.smpType_struct*, i8* }* %147, i32 0, i32 1
  %151 = extractvalue { %struct.smpType_struct*, i8* } %146, 1
  store i8* %151, i8** %150, align 1
  %152 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %153 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 0
  %154 = load %struct.smpType_struct** %153, align 1
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 1
  %156 = load i8** %155, align 1
  %157 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %158 = getelementptr { %struct.smpType_struct*, i8* }* %157, i32 0, i32 0
  %159 = load %struct.smpType_struct** %158, align 1
  %160 = getelementptr { %struct.smpType_struct*, i8* }* %157, i32 0, i32 1
  %161 = load i8** %160, align 1
  %162 = call i32 @smp_assert_eq(%struct.smpType_struct* %154, i8* %156, %struct.smpType_struct* %159, i8* %161)
  %163 = load i32* %successp, align 4
  %164 = and i32 %163, %162
  store i32 %164, i32* %successp, align 4
  %165 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 4)
  %166 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %167 = getelementptr { %struct.smpType_struct*, i8* }* %166, i32 0, i32 0
  %168 = extractvalue { %struct.smpType_struct*, i8* } %165, 0
  store %struct.smpType_struct* %168, %struct.smpType_struct** %167, align 1
  %169 = getelementptr { %struct.smpType_struct*, i8* }* %166, i32 0, i32 1
  %170 = extractvalue { %struct.smpType_struct*, i8* } %165, 1
  store i8* %170, i8** %169, align 1
  %171 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %172 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 0
  %173 = load %struct.smpType_struct** %172, align 1
  %174 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 1
  %175 = load i8** %174, align 1
  %176 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %173, i8* %175, i8* getelementptr inbounds ([2 x i8]* @.str69, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %177 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %178 = getelementptr { %struct.smpType_struct*, i8* }* %177, i32 0, i32 0
  %179 = extractvalue { %struct.smpType_struct*, i8* } %176, 0
  store %struct.smpType_struct* %179, %struct.smpType_struct** %178, align 1
  %180 = getelementptr { %struct.smpType_struct*, i8* }* %177, i32 0, i32 1
  %181 = extractvalue { %struct.smpType_struct*, i8* } %176, 1
  store i8* %181, i8** %180, align 1
  %182 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %183 = getelementptr { %struct.smpType_struct*, i8* }* %182, i32 0, i32 0
  %184 = load %struct.smpType_struct** %183, align 1
  %185 = getelementptr { %struct.smpType_struct*, i8* }* %182, i32 0, i32 1
  %186 = load i8** %185, align 1
  %187 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %188 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 0
  %189 = load %struct.smpType_struct** %188, align 1
  %190 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 1
  %191 = load i8** %190, align 1
  %192 = call i32 @smp_assert_eq(%struct.smpType_struct* %184, i8* %186, %struct.smpType_struct* %189, i8* %191)
  %193 = load i32* %successp, align 4
  %194 = and i32 %193, %192
  store i32 %194, i32* %successp, align 4
  %195 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 512)
  %196 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %197 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 0
  %198 = extractvalue { %struct.smpType_struct*, i8* } %195, 0
  store %struct.smpType_struct* %198, %struct.smpType_struct** %197, align 1
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 1
  %200 = extractvalue { %struct.smpType_struct*, i8* } %195, 1
  store i8* %200, i8** %199, align 1
  %201 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %202 = getelementptr { %struct.smpType_struct*, i8* }* %201, i32 0, i32 0
  %203 = load %struct.smpType_struct** %202, align 1
  %204 = getelementptr { %struct.smpType_struct*, i8* }* %201, i32 0, i32 1
  %205 = load i8** %204, align 1
  %206 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %203, i8* %205, i8* getelementptr inbounds ([3 x i8]* @.str70, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %207 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %208 = getelementptr { %struct.smpType_struct*, i8* }* %207, i32 0, i32 0
  %209 = extractvalue { %struct.smpType_struct*, i8* } %206, 0
  store %struct.smpType_struct* %209, %struct.smpType_struct** %208, align 1
  %210 = getelementptr { %struct.smpType_struct*, i8* }* %207, i32 0, i32 1
  %211 = extractvalue { %struct.smpType_struct*, i8* } %206, 1
  store i8* %211, i8** %210, align 1
  %212 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %213 = getelementptr { %struct.smpType_struct*, i8* }* %212, i32 0, i32 0
  %214 = load %struct.smpType_struct** %213, align 1
  %215 = getelementptr { %struct.smpType_struct*, i8* }* %212, i32 0, i32 1
  %216 = load i8** %215, align 1
  %217 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %218 = getelementptr { %struct.smpType_struct*, i8* }* %217, i32 0, i32 0
  %219 = load %struct.smpType_struct** %218, align 1
  %220 = getelementptr { %struct.smpType_struct*, i8* }* %217, i32 0, i32 1
  %221 = load i8** %220, align 1
  %222 = call i32 @smp_assert_eq(%struct.smpType_struct* %214, i8* %216, %struct.smpType_struct* %219, i8* %221)
  %223 = load i32* %successp, align 4
  %224 = and i32 %223, %222
  store i32 %224, i32* %successp, align 4
  %225 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 0)
  %226 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %227 = getelementptr { %struct.smpType_struct*, i8* }* %226, i32 0, i32 0
  %228 = extractvalue { %struct.smpType_struct*, i8* } %225, 0
  store %struct.smpType_struct* %228, %struct.smpType_struct** %227, align 1
  %229 = getelementptr { %struct.smpType_struct*, i8* }* %226, i32 0, i32 1
  %230 = extractvalue { %struct.smpType_struct*, i8* } %225, 1
  store i8* %230, i8** %229, align 1
  %231 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %232 = getelementptr { %struct.smpType_struct*, i8* }* %231, i32 0, i32 0
  %233 = load %struct.smpType_struct** %232, align 1
  %234 = getelementptr { %struct.smpType_struct*, i8* }* %231, i32 0, i32 1
  %235 = load i8** %234, align 1
  %236 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %233, i8* %235, i8* getelementptr inbounds ([3 x i8]* @.str71, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %237 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %238 = getelementptr { %struct.smpType_struct*, i8* }* %237, i32 0, i32 0
  %239 = extractvalue { %struct.smpType_struct*, i8* } %236, 0
  store %struct.smpType_struct* %239, %struct.smpType_struct** %238, align 1
  %240 = getelementptr { %struct.smpType_struct*, i8* }* %237, i32 0, i32 1
  %241 = extractvalue { %struct.smpType_struct*, i8* } %236, 1
  store i8* %241, i8** %240, align 1
  %242 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %243 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 0
  %244 = load %struct.smpType_struct** %243, align 1
  %245 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 1
  %246 = load i8** %245, align 1
  %247 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %248 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 0
  %249 = load %struct.smpType_struct** %248, align 1
  %250 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 1
  %251 = load i8** %250, align 1
  %252 = call i32 @smp_assert_eq(%struct.smpType_struct* %244, i8* %246, %struct.smpType_struct* %249, i8* %251)
  %253 = load i32* %successp, align 4
  %254 = and i32 %253, %252
  store i32 %254, i32* %successp, align 4
  %255 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 4)
  %256 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %257 = getelementptr { %struct.smpType_struct*, i8* }* %256, i32 0, i32 0
  %258 = extractvalue { %struct.smpType_struct*, i8* } %255, 0
  store %struct.smpType_struct* %258, %struct.smpType_struct** %257, align 1
  %259 = getelementptr { %struct.smpType_struct*, i8* }* %256, i32 0, i32 1
  %260 = extractvalue { %struct.smpType_struct*, i8* } %255, 1
  store i8* %260, i8** %259, align 1
  %261 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %262 = getelementptr { %struct.smpType_struct*, i8* }* %261, i32 0, i32 0
  %263 = load %struct.smpType_struct** %262, align 1
  %264 = getelementptr { %struct.smpType_struct*, i8* }* %261, i32 0, i32 1
  %265 = load i8** %264, align 1
  %266 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %263, i8* %265, i8* getelementptr inbounds ([2 x i8]* @.str72, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %267 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %268 = getelementptr { %struct.smpType_struct*, i8* }* %267, i32 0, i32 0
  %269 = extractvalue { %struct.smpType_struct*, i8* } %266, 0
  store %struct.smpType_struct* %269, %struct.smpType_struct** %268, align 1
  %270 = getelementptr { %struct.smpType_struct*, i8* }* %267, i32 0, i32 1
  %271 = extractvalue { %struct.smpType_struct*, i8* } %266, 1
  store i8* %271, i8** %270, align 1
  %272 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %273 = getelementptr { %struct.smpType_struct*, i8* }* %272, i32 0, i32 0
  %274 = load %struct.smpType_struct** %273, align 1
  %275 = getelementptr { %struct.smpType_struct*, i8* }* %272, i32 0, i32 1
  %276 = load i8** %275, align 1
  %277 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %278 = getelementptr { %struct.smpType_struct*, i8* }* %277, i32 0, i32 0
  %279 = load %struct.smpType_struct** %278, align 1
  %280 = getelementptr { %struct.smpType_struct*, i8* }* %277, i32 0, i32 1
  %281 = load i8** %280, align 1
  %282 = call i32 @smp_assert_eq(%struct.smpType_struct* %274, i8* %276, %struct.smpType_struct* %279, i8* %281)
  %283 = load i32* %successp, align 4
  %284 = and i32 %283, %282
  store i32 %284, i32* %successp, align 4
  %285 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 7)
  %286 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %287 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 0
  %288 = extractvalue { %struct.smpType_struct*, i8* } %285, 0
  store %struct.smpType_struct* %288, %struct.smpType_struct** %287, align 1
  %289 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 1
  %290 = extractvalue { %struct.smpType_struct*, i8* } %285, 1
  store i8* %290, i8** %289, align 1
  %291 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %292 = getelementptr { %struct.smpType_struct*, i8* }* %291, i32 0, i32 0
  %293 = load %struct.smpType_struct** %292, align 1
  %294 = getelementptr { %struct.smpType_struct*, i8* }* %291, i32 0, i32 1
  %295 = load i8** %294, align 1
  %296 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %293, i8* %295, i8* getelementptr inbounds ([2 x i8]* @.str73, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %297 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %298 = getelementptr { %struct.smpType_struct*, i8* }* %297, i32 0, i32 0
  %299 = extractvalue { %struct.smpType_struct*, i8* } %296, 0
  store %struct.smpType_struct* %299, %struct.smpType_struct** %298, align 1
  %300 = getelementptr { %struct.smpType_struct*, i8* }* %297, i32 0, i32 1
  %301 = extractvalue { %struct.smpType_struct*, i8* } %296, 1
  store i8* %301, i8** %300, align 1
  %302 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %303 = getelementptr { %struct.smpType_struct*, i8* }* %302, i32 0, i32 0
  %304 = load %struct.smpType_struct** %303, align 1
  %305 = getelementptr { %struct.smpType_struct*, i8* }* %302, i32 0, i32 1
  %306 = load i8** %305, align 1
  %307 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %308 = getelementptr { %struct.smpType_struct*, i8* }* %307, i32 0, i32 0
  %309 = load %struct.smpType_struct** %308, align 1
  %310 = getelementptr { %struct.smpType_struct*, i8* }* %307, i32 0, i32 1
  %311 = load i8** %310, align 1
  %312 = call i32 @smp_assert_eq(%struct.smpType_struct* %304, i8* %306, %struct.smpType_struct* %309, i8* %311)
  %313 = load i32* %successp, align 4
  %314 = and i32 %313, %312
  store i32 %314, i32* %successp, align 4
  %315 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 3)
  %316 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %317 = getelementptr { %struct.smpType_struct*, i8* }* %316, i32 0, i32 0
  %318 = extractvalue { %struct.smpType_struct*, i8* } %315, 0
  store %struct.smpType_struct* %318, %struct.smpType_struct** %317, align 1
  %319 = getelementptr { %struct.smpType_struct*, i8* }* %316, i32 0, i32 1
  %320 = extractvalue { %struct.smpType_struct*, i8* } %315, 1
  store i8* %320, i8** %319, align 1
  %321 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %322 = getelementptr { %struct.smpType_struct*, i8* }* %321, i32 0, i32 0
  %323 = load %struct.smpType_struct** %322, align 1
  %324 = getelementptr { %struct.smpType_struct*, i8* }* %321, i32 0, i32 1
  %325 = load i8** %324, align 1
  %326 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %323, i8* %325, i8* getelementptr inbounds ([2 x i8]* @.str74, i32 0, i32 0), i32 1, %struct.obj_struct* %y)
  %327 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %328 = getelementptr { %struct.smpType_struct*, i8* }* %327, i32 0, i32 0
  %329 = extractvalue { %struct.smpType_struct*, i8* } %326, 0
  store %struct.smpType_struct* %329, %struct.smpType_struct** %328, align 1
  %330 = getelementptr { %struct.smpType_struct*, i8* }* %327, i32 0, i32 1
  %331 = extractvalue { %struct.smpType_struct*, i8* } %326, 1
  store i8* %331, i8** %330, align 1
  %332 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %333 = getelementptr { %struct.smpType_struct*, i8* }* %332, i32 0, i32 0
  %334 = load %struct.smpType_struct** %333, align 1
  %335 = getelementptr { %struct.smpType_struct*, i8* }* %332, i32 0, i32 1
  %336 = load i8** %335, align 1
  %337 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %338 = getelementptr { %struct.smpType_struct*, i8* }* %337, i32 0, i32 0
  %339 = load %struct.smpType_struct** %338, align 1
  %340 = getelementptr { %struct.smpType_struct*, i8* }* %337, i32 0, i32 1
  %341 = load i8** %340, align 1
  %342 = call i32 @smp_assert_eq(%struct.smpType_struct* %334, i8* %336, %struct.smpType_struct* %339, i8* %341)
  %343 = load i32* %successp, align 4
  %344 = and i32 %343, %342
  store i32 %344, i32* %successp, align 4
  %345 = load i32* %successp, align 4
  ret i32 %345
}

define i32 @test_gc() nounwind {
  %1 = alloca i32, align 4
  %x = alloca %struct.obj_struct, align 8
  %i = alloca i32, align 4
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 4)
  %5 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  %7 = extractvalue { %struct.smpType_struct*, i8* } %4, 0
  store %struct.smpType_struct* %7, %struct.smpType_struct** %6, align 1
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  %9 = extractvalue { %struct.smpType_struct*, i8* } %4, 1
  store i8* %9, i8** %8, align 1
  %10 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = call i32 @scope_add(i8* getelementptr inbounds ([2 x i8]* @.str63, i32 0, i32 0), %struct.smpType_struct* %12, i8* %14)
  store i32 0, i32* %i, align 4
  br label %16

; <label>:16                                      ; preds = %39, %0
  %17 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 1
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 1
  %21 = load i8** %20, align 1
  %22 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %19, i8* %21, i8* getelementptr inbounds ([2 x i8]* @.str74, i32 0, i32 0), i32 1, %struct.obj_struct* @smp_nil)
  %23 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = extractvalue { %struct.smpType_struct*, i8* } %22, 0
  store %struct.smpType_struct* %25, %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = extractvalue { %struct.smpType_struct*, i8* } %22, 1
  store i8* %27, i8** %26, align 1
  %28 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = load %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = load i8** %31, align 1
  %33 = call { %struct.smpType_struct*, i8* } @smp_println(%struct.smpType_struct* %30, i8* %32)
  %34 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = extractvalue { %struct.smpType_struct*, i8* } %33, 0
  store %struct.smpType_struct* %36, %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = extractvalue { %struct.smpType_struct*, i8* } %33, 1
  store i8* %38, i8** %37, align 1
  br label %39

; <label>:39                                      ; preds = %16
  %40 = load i32* %i, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %i, align 4
  br label %16
                                                  ; No predecessors!
  %43 = load i32* %1
  ret i32 %43
}

define { %struct.smpType_struct*, i8* } @smp_println(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %2 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %obj.coerce1, i8** %4
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  %7 = load %struct.smpType_struct** %6, align 1
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  %9 = load i8** %8, align 1
  %10 = call { %struct.smpType_struct*, i8* } @smp_print(%struct.smpType_struct* %7, i8* %9)
  %11 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = extractvalue { %struct.smpType_struct*, i8* } %10, 0
  store %struct.smpType_struct* %13, %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = extractvalue { %struct.smpType_struct*, i8* } %10, 1
  store i8* %15, i8** %14, align 1
  %16 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = load i8** %19, align 1
  %21 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %18, i8* %20)
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %0
  %24 = bitcast %struct.obj_struct* %1 to i8*
  %25 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false)
  br label %31

; <label>:26                                      ; preds = %0
  %27 = load %struct.__sFILE** @smp_stdout, align 8
  %28 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %27, i8* getelementptr inbounds ([2 x i8]* @.str13, i32 0, i32 0))
  %29 = bitcast %struct.obj_struct* %1 to i8*
  %30 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 16, i32 8, i1 false)
  br label %31

; <label>:31                                      ; preds = %26, %23
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = load { %struct.smpType_struct*, i8* }* %32, align 1
  ret { %struct.smpType_struct*, i8* } %33
}

define i32 @test_strings() nounwind {
  %successp = alloca i32, align 4
  %world = alloca %struct.obj_struct, align 8
  %worlds = alloca [4 x %struct.obj_struct], align 16
  %str = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  store i32 1, i32* %successp, align 4
  %3 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([6 x i8]* @.str75, i32 0, i32 0))
  %4 = bitcast %struct.obj_struct* %world to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = getelementptr inbounds [4 x %struct.obj_struct]* %worlds, i64 0, i64 0
  %10 = bitcast %struct.obj_struct* %9 to i8*
  %11 = bitcast %struct.obj_struct* %world to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 16, i32 8, i1 false)
  %12 = getelementptr inbounds %struct.obj_struct* %9, i64 1
  %13 = bitcast %struct.obj_struct* %12 to i8*
  %14 = bitcast %struct.obj_struct* %world to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  %15 = getelementptr inbounds %struct.obj_struct* %12, i64 1
  %16 = bitcast %struct.obj_struct* %15 to i8*
  %17 = bitcast %struct.obj_struct* %world to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 16, i32 8, i1 false)
  %18 = getelementptr inbounds %struct.obj_struct* %15, i64 1
  %19 = bitcast %struct.obj_struct* %18 to i8*
  %20 = bitcast %struct.obj_struct* %world to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 16, i32 8, i1 false)
  %21 = getelementptr inbounds [4 x %struct.obj_struct]* %worlds, i32 0, i32 0
  %22 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpGlobal_sprintf(i8* getelementptr inbounds ([42 x i8]* @.str76, i32 0, i32 0), i32 4, %struct.obj_struct* %21)
  %23 = bitcast %struct.obj_struct* %str to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = extractvalue { %struct.smpType_struct*, i8* } %22, 0
  store %struct.smpType_struct* %25, %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = extractvalue { %struct.smpType_struct*, i8* } %22, 1
  store i8* %27, i8** %26, align 1
  %28 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([60 x i8]* @.str77, i32 0, i32 0))
  %29 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = extractvalue { %struct.smpType_struct*, i8* } %28, 0
  store %struct.smpType_struct* %31, %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = extractvalue { %struct.smpType_struct*, i8* } %28, 1
  store i8* %33, i8** %32, align 1
  %34 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = load i8** %37, align 1
  %39 = bitcast %struct.obj_struct* %str to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = load %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = load i8** %42, align 1
  %44 = call i32 @smp_assert_eq(%struct.smpType_struct* %36, i8* %38, %struct.smpType_struct* %41, i8* %43)
  %45 = load i32* %successp, align 4
  %46 = and i32 %45, %44
  store i32 %46, i32* %successp, align 4
  %47 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %world)
  %48 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = extractvalue { %struct.smpType_struct*, i8* } %47, 0
  store %struct.smpType_struct* %50, %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = extractvalue { %struct.smpType_struct*, i8* } %47, 1
  store i8* %52, i8** %51, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpGlobal_sprintf(i8* %format, ...) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %res = alloca %struct.obj_struct, align 8
  store i8* %format, i8** %2, align 8
  %3 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %4 = bitcast %struct.__va_list_tag* %3 to i8*
  call void @llvm.va_start(i8* %4)
  %5 = load i8** %2, align 8
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %7 = call { %struct.smpType_struct*, i8* } @smpGlobal_vsprintf(i8* %5, %struct.__va_list_tag* %6)
  %8 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = extractvalue { %struct.smpType_struct*, i8* } %7, 0
  store %struct.smpType_struct* %10, %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = extractvalue { %struct.smpType_struct*, i8* } %7, 1
  store i8* %12, i8** %11, align 1
  %13 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %14 = bitcast %struct.__va_list_tag* %13 to i8*
  call void @llvm.va_end(i8* %14)
  %15 = bitcast %struct.obj_struct* %1 to i8*
  %16 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 16, i32 8, i1 false)
  %17 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %18 = load { %struct.smpType_struct*, i8* }* %17, align 1
  ret { %struct.smpType_struct*, i8* } %18
}

define i32 @test_printf() nounwind {
  %arr = alloca [4 x %struct.obj_struct], align 16
  %1 = alloca %struct.obj_struct, align 8
  %2 = getelementptr inbounds [4 x %struct.obj_struct]* %arr, i64 0, i64 0
  %3 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 18)
  %4 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = getelementptr inbounds %struct.obj_struct* %2, i64 1
  %10 = call { %struct.smpType_struct*, i8* } @smpFloat_init_cdouble(double 2.140000e+01)
  %11 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = extractvalue { %struct.smpType_struct*, i8* } %10, 0
  store %struct.smpType_struct* %13, %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = extractvalue { %struct.smpType_struct*, i8* } %10, 1
  store i8* %15, i8** %14, align 1
  %16 = getelementptr inbounds %struct.obj_struct* %9, i64 1
  %17 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 16)
  %18 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = getelementptr inbounds %struct.obj_struct* %16, i64 1
  %24 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 16)
  %25 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = extractvalue { %struct.smpType_struct*, i8* } %24, 0
  store %struct.smpType_struct* %27, %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = extractvalue { %struct.smpType_struct*, i8* } %24, 1
  store i8* %29, i8** %28, align 1
  %30 = getelementptr inbounds [4 x %struct.obj_struct]* %arr, i32 0, i32 0
  %31 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpGlobal_sprintf(i8* getelementptr inbounds ([30 x i8]* @.str78, i32 0, i32 0), i32 4, %struct.obj_struct* %30)
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpFloat_init_cdouble(double %d) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca double, align 8
  %f = alloca [1 x %struct.__mpfr_struct]*, align 8
  %res = alloca %struct.obj_struct, align 8
  store double %d, double* %2, align 8
  %3 = call noalias i8* @GC_malloc(i64 32)
  %4 = bitcast i8* %3 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %4, [1 x %struct.__mpfr_struct]** %f, align 8
  %5 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %6 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %5, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %6)
  %7 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %8 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %7, i32 0, i32 0
  %9 = load double* %2, align 8
  %10 = load i32* @smp_mpfr_rnd, align 4
  %11 = call i32 @mpfr_set_d(%struct.__mpfr_struct* %8, double %9, i32 %10)
  %12 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %13 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %12)
  %14 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = extractvalue { %struct.smpType_struct*, i8* } %13, 0
  store %struct.smpType_struct* %16, %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = extractvalue { %struct.smpType_struct*, i8* } %13, 1
  store i8* %18, i8** %17, align 1
  %19 = bitcast %struct.obj_struct* %1 to i8*
  %20 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 16, i32 8, i1 false)
  %21 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %22 = load { %struct.smpType_struct*, i8* }* %21, align 1
  ret { %struct.smpType_struct*, i8* } %22
}

define i32 @test_lists() nounwind {
  %successp = alloca i32, align 4
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %x = alloca %struct.obj_struct, align 8
  %i = alloca i64, align 8
  %xs = alloca %struct.obj_struct, align 8
  %special = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  store i32 1, i32* %successp, align 4
  %7 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = extractvalue { %struct.smpType_struct*, i8* } %7, 0
  store %struct.smpType_struct* %10, %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = extractvalue { %struct.smpType_struct*, i8* } %7, 1
  store i8* %12, i8** %11, align 1
  %13 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @make_list, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %14 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = extractvalue { %struct.smpType_struct*, i8* } %13, 0
  store %struct.smpType_struct* %16, %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = extractvalue { %struct.smpType_struct*, i8* } %13, 1
  store i8* %18, i8** %17, align 1
  %19 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 0
  %21 = load %struct.smpType_struct** %20, align 1
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 1
  %23 = load i8** %22, align 1
  %24 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 0
  %26 = load %struct.smpType_struct** %25, align 1
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 1
  %28 = load i8** %27, align 1
  %29 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %21, i8* %23, i32 0, i8* getelementptr inbounds ([10 x i8]* @.str79, i32 0, i32 0), %struct.smpType_struct* %26, i8* %28)
  %30 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 0
  %32 = extractvalue { %struct.smpType_struct*, i8* } %29, 0
  store %struct.smpType_struct* %32, %struct.smpType_struct** %31, align 1
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 1
  %34 = extractvalue { %struct.smpType_struct*, i8* } %29, 1
  store i8* %34, i8** %33, align 1
  %35 = bitcast %struct.obj_struct* %xs to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %36 = bitcast %struct.obj_struct* %xs to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = load %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = load i8** %39, align 1
  %41 = call i32 @scope_add(i8* getelementptr inbounds ([3 x i8]* @.str80, i32 0, i32 0), %struct.smpType_struct* %38, i8* %40)
  %42 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 20)
  %43 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = extractvalue { %struct.smpType_struct*, i8* } %42, 0
  store %struct.smpType_struct* %45, %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = extractvalue { %struct.smpType_struct*, i8* } %42, 1
  store i8* %47, i8** %46, align 1
  %48 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = load %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = load i8** %51, align 1
  %53 = call { %struct.smpType_struct*, i8* } @make_list(%struct.smpType_struct* %50, i8* %52, i32 1, %struct.obj_struct* @smpInteger_zero)
  %54 = bitcast %struct.obj_struct* %special to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = extractvalue { %struct.smpType_struct*, i8* } %53, 0
  store %struct.smpType_struct* %56, %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = extractvalue { %struct.smpType_struct*, i8* } %53, 1
  store i8* %58, i8** %57, align 1
  store i64 19, i64* %i, align 8
  br label %59

; <label>:59                                      ; preds = %97, %0
  %60 = load i64* %i, align 8
  %61 = icmp sge i64 %60, 0
  br i1 %61, label %62, label %100

; <label>:62                                      ; preds = %59
  %63 = load i64* %i, align 8
  %64 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %63)
  %65 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = extractvalue { %struct.smpType_struct*, i8* } %64, 0
  store %struct.smpType_struct* %67, %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = extractvalue { %struct.smpType_struct*, i8* } %64, 1
  store i8* %69, i8** %68, align 1
  %70 = bitcast %struct.obj_struct* %x to i8*
  %71 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 16, i32 8, i1 false)
  %72 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 0
  %74 = load %struct.smpType_struct** %73, align 1
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 1
  %76 = load i8** %75, align 1
  %77 = call i32 @scope_add(i8* getelementptr inbounds ([2 x i8]* @.str63, i32 0, i32 0), %struct.smpType_struct* %74, i8* %76)
  %78 = bitcast %struct.obj_struct* %x to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = load %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = load i8** %81, align 1
  %83 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %80, i8* %82, i8* getelementptr inbounds ([5 x i8]* @.str51, i32 0, i32 0), i32 1, %struct.obj_struct* %xs)
  %84 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = extractvalue { %struct.smpType_struct*, i8* } %83, 0
  store %struct.smpType_struct* %86, %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = extractvalue { %struct.smpType_struct*, i8* } %83, 1
  store i8* %88, i8** %87, align 1
  %89 = bitcast %struct.obj_struct* %xs to i8*
  %90 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %89, i8* %90, i64 16, i32 8, i1 false)
  %91 = bitcast %struct.obj_struct* %xs to { %struct.smpType_struct*, i8* }*
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 0
  %93 = load %struct.smpType_struct** %92, align 1
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 1
  %95 = load i8** %94, align 1
  %96 = call i32 @scope_add(i8* getelementptr inbounds ([3 x i8]* @.str80, i32 0, i32 0), %struct.smpType_struct* %93, i8* %95)
  br label %97

; <label>:97                                      ; preds = %62
  %98 = load i64* %i, align 8
  %99 = add nsw i64 %98, -1
  store i64 %99, i64* %i, align 8
  br label %59

; <label>:100                                     ; preds = %59
  %101 = bitcast %struct.obj_struct* %xs to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = load %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = load i8** %104, align 1
  %106 = bitcast %struct.obj_struct* %special to { %struct.smpType_struct*, i8* }*
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 0
  %108 = load %struct.smpType_struct** %107, align 1
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 1
  %110 = load i8** %109, align 1
  %111 = call i32 @smp_assert_eq(%struct.smpType_struct* %103, i8* %105, %struct.smpType_struct* %108, i8* %110)
  %112 = load i32* %successp, align 4
  %113 = and i32 %112, %111
  store i32 %113, i32* %successp, align 4
  %114 = load i32* %successp, align 4
  ret i32 %114
}

define { %struct.smpType_struct*, i8* } @make_list(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %dec = alloca %struct.obj_struct, align 8
  %num = alloca %struct.obj_struct, align 8
  %car = alloca %struct.obj_struct, align 8
  %cdr = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = load %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = load i8** %11, align 1
  %13 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smpInteger_zero to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %14 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smpInteger_zero to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %15 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %10, i8* %12, %struct.smpType_struct* %13, i8* %14)
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %89

; <label>:17                                      ; preds = %0
  %18 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = call { %struct.smpType_struct*, i8* } @smpInteger_dec(%struct.smpType_struct* %20, i8* %22, i32 0, %struct.obj_struct* null)
  %24 = bitcast %struct.obj_struct* %dec to { %struct.smpType_struct*, i8* }*
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 0
  %26 = extractvalue { %struct.smpType_struct*, i8* } %23, 0
  store %struct.smpType_struct* %26, %struct.smpType_struct** %25, align 1
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 1
  %28 = extractvalue { %struct.smpType_struct*, i8* } %23, 1
  store i8* %28, i8** %27, align 1
  %29 = load %struct.obj_struct** %3, align 8
  %30 = getelementptr inbounds %struct.obj_struct* %29, i64 0
  %31 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = call { %struct.smpType_struct*, i8* } @smpInteger_inc(%struct.smpType_struct* %33, i8* %35, i32 0, %struct.obj_struct* null)
  %37 = bitcast %struct.obj_struct* %num to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = extractvalue { %struct.smpType_struct*, i8* } %36, 0
  store %struct.smpType_struct* %39, %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = extractvalue { %struct.smpType_struct*, i8* } %36, 1
  store i8* %41, i8** %40, align 1
  %42 = load %struct.obj_struct** %3, align 8
  %43 = getelementptr inbounds %struct.obj_struct* %42, i64 0
  %44 = bitcast %struct.obj_struct* %car to i8*
  %45 = bitcast %struct.obj_struct* %43 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %45, i64 16, i32 8, i1 false)
  %46 = bitcast %struct.obj_struct* %dec to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = load %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = load i8** %49, align 1
  %51 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %48, i8* %50, i8* getelementptr inbounds ([10 x i8]* @.str79, i32 0, i32 0), i32 1, %struct.obj_struct* %num)
  %52 = bitcast %struct.obj_struct* %cdr to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = extractvalue { %struct.smpType_struct*, i8* } %51, 0
  store %struct.smpType_struct* %54, %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = extractvalue { %struct.smpType_struct*, i8* } %51, 1
  store i8* %56, i8** %55, align 1
  %57 = bitcast %struct.obj_struct* %dec to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = load %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = load i8** %60, align 1
  %62 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %59, i8* %61, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %63 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 0
  %65 = extractvalue { %struct.smpType_struct*, i8* } %62, 0
  store %struct.smpType_struct* %65, %struct.smpType_struct** %64, align 1
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 1
  %67 = extractvalue { %struct.smpType_struct*, i8* } %62, 1
  store i8* %67, i8** %66, align 1
  %68 = getelementptr inbounds %struct.obj_struct* %cdr, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 8
  %70 = getelementptr inbounds %struct.smpType_struct* %69, i32 0, i32 0
  %71 = load i8** %70, align 8
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %77

; <label>:74                                      ; preds = %17
  %75 = bitcast %struct.obj_struct* %1 to i8*
  %76 = bitcast %struct.obj_struct* %cdr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %75, i8* %76, i64 16, i32 8, i1 false)
  br label %91

; <label>:77                                      ; preds = %17
  %78 = bitcast %struct.obj_struct* %car to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = load %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = load i8** %81, align 1
  %83 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %80, i8* %82, i32 1, %struct.obj_struct* %cdr)
  %84 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = extractvalue { %struct.smpType_struct*, i8* } %83, 0
  store %struct.smpType_struct* %86, %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = extractvalue { %struct.smpType_struct*, i8* } %83, 1
  store i8* %88, i8** %87, align 1
  br label %91

; <label>:89                                      ; preds = %0
  %90 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %90, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %91

; <label>:91                                      ; preds = %89, %77, %74
  %92 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %93 = load { %struct.smpType_struct*, i8* }* %92, align 1
  ret { %struct.smpType_struct*, i8* } %93
}

define { %struct.smpType_struct*, i8* } @smpInteger_dec(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpInteger_sub(%struct.smpType_struct* %9, i8* %11, i32 1, %struct.obj_struct* @smpInteger_one)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpInteger_inc(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpInteger_add(%struct.smpType_struct* %9, i8* %11, i32 1, %struct.obj_struct* @smpInteger_one)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define i32 @test_listbuf() nounwind {
  %listbuf = alloca %struct.obj_struct, align 8
  %true_val = alloca %struct.obj_struct, align 8
  %false_val = alloca %struct.obj_struct, align 8
  %fun_val = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %list = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = call { %struct.smpType_struct*, i8* } @smpListBuffer_init()
  %6 = bitcast %struct.obj_struct* %listbuf to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  %8 = extractvalue { %struct.smpType_struct*, i8* } %5, 0
  store %struct.smpType_struct* %8, %struct.smpType_struct** %7, align 1
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  %10 = extractvalue { %struct.smpType_struct*, i8* } %5, 1
  store i8* %10, i8** %9, align 1
  %11 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 1)
  %12 = bitcast %struct.obj_struct* %true_val to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 0)
  %18 = bitcast %struct.obj_struct* %false_val to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpListBuffer_to_list, i32 1, i8* getelementptr inbounds ([16 x i8]* @.str81, i32 0, i32 0))
  %24 = bitcast %struct.obj_struct* %fun_val to { %struct.smpType_struct*, i8* }*
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 0
  %26 = extractvalue { %struct.smpType_struct*, i8* } %23, 0
  store %struct.smpType_struct* %26, %struct.smpType_struct** %25, align 1
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 1
  %28 = extractvalue { %struct.smpType_struct*, i8* } %23, 1
  store i8* %28, i8** %27, align 1
  %29 = bitcast %struct.obj_struct* %listbuf to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = load i8** %32, align 1
  %34 = call { %struct.smpType_struct*, i8* } @smpListBuffer_add_now(%struct.smpType_struct* %31, i8* %33, i32 1, %struct.obj_struct* %true_val)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = bitcast %struct.obj_struct* %listbuf to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = load %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = load i8** %43, align 1
  %45 = call { %struct.smpType_struct*, i8* } @smpListBuffer_add_now(%struct.smpType_struct* %42, i8* %44, i32 1, %struct.obj_struct* %false_val)
  %46 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = extractvalue { %struct.smpType_struct*, i8* } %45, 0
  store %struct.smpType_struct* %48, %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = extractvalue { %struct.smpType_struct*, i8* } %45, 1
  store i8* %50, i8** %49, align 1
  %51 = bitcast %struct.obj_struct* %listbuf to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = load %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = load i8** %54, align 1
  %56 = call { %struct.smpType_struct*, i8* } @smpListBuffer_add_now(%struct.smpType_struct* %53, i8* %55, i32 1, %struct.obj_struct* %fun_val)
  %57 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = extractvalue { %struct.smpType_struct*, i8* } %56, 0
  store %struct.smpType_struct* %59, %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = extractvalue { %struct.smpType_struct*, i8* } %56, 1
  store i8* %61, i8** %60, align 1
  %62 = bitcast %struct.obj_struct* %listbuf to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = load %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = load i8** %65, align 1
  %67 = call { %struct.smpType_struct*, i8* } @smpListBuffer_to_list(%struct.smpType_struct* %64, i8* %66, i32 0, %struct.obj_struct* null)
  %68 = bitcast %struct.obj_struct* %list to { %struct.smpType_struct*, i8* }*
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 0
  %70 = extractvalue { %struct.smpType_struct*, i8* } %67, 0
  store %struct.smpType_struct* %70, %struct.smpType_struct** %69, align 1
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 1
  %72 = extractvalue { %struct.smpType_struct*, i8* } %67, 1
  store i8* %72, i8** %71, align 1
  %73 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %list)
  %74 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %74, i32 0, i32 0
  %76 = extractvalue { %struct.smpType_struct*, i8* } %73, 0
  store %struct.smpType_struct* %76, %struct.smpType_struct** %75, align 1
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %74, i32 0, i32 1
  %78 = extractvalue { %struct.smpType_struct*, i8* } %73, 1
  store i8* %78, i8** %77, align 1
  ret i32 1
}

define { %struct.smpType_struct*, i8* } @smpListBuffer_to_list(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.listbuf_struct*
  %10 = getelementptr inbounds %struct.listbuf_struct* %9, i32 0, i32 0
  %11 = bitcast %struct.obj_struct* %1 to i8*
  %12 = bitcast %struct.obj_struct* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 16, i32 8, i1 false)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = load { %struct.smpType_struct*, i8* }* %13, align 1
  ret { %struct.smpType_struct*, i8* } %14
}

define { %struct.smpType_struct*, i8* } @smpListBuffer_add_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %lb = alloca %struct.listbuf_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %10 = load i8** %9, align 8
  %11 = bitcast i8* %10 to %struct.listbuf_struct*
  store %struct.listbuf_struct* %11, %struct.listbuf_struct** %lb, align 8
  %12 = load %struct.listbuf_struct** %lb, align 8
  %13 = getelementptr inbounds %struct.listbuf_struct* %12, i32 0, i32 0
  %14 = getelementptr inbounds %struct.obj_struct* %13, i32 0, i32 0
  %15 = load %struct.smpType_struct** %14, align 8
  %16 = getelementptr inbounds %struct.smpType_struct* %15, i32 0, i32 1
  %17 = load i32* %16, align 4
  %18 = load i32* @smpType_id_nil, align 4
  %19 = icmp eq i32 %17, %18
  br i1 %19, label %20, label %44

; <label>:20                                      ; preds = %0
  %21 = load %struct.listbuf_struct** %lb, align 8
  %22 = getelementptr inbounds %struct.listbuf_struct* %21, i32 0, i32 0
  %23 = load %struct.obj_struct** %3, align 8
  %24 = getelementptr inbounds %struct.obj_struct* %23, i64 0
  %25 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = load %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = load i8** %28, align 1
  %30 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %27, i8* %29, i32 1, %struct.obj_struct* @smp_nil)
  %31 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = bitcast %struct.obj_struct* %22 to i8*
  %37 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 16, i32 8, i1 false)
  %38 = load %struct.listbuf_struct** %lb, align 8
  %39 = getelementptr inbounds %struct.listbuf_struct* %38, i32 0, i32 1
  %40 = load %struct.listbuf_struct** %lb, align 8
  %41 = getelementptr inbounds %struct.listbuf_struct* %40, i32 0, i32 0
  %42 = bitcast %struct.obj_struct* %39 to i8*
  %43 = bitcast %struct.obj_struct* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %43, i64 16, i32 8, i1 false)
  br label %86

; <label>:44                                      ; preds = %0
  %45 = call noalias i8* @GC_malloc(i64 16)
  %46 = bitcast i8* %45 to %struct.obj_struct*
  %47 = load %struct.listbuf_struct** %lb, align 8
  %48 = getelementptr inbounds %struct.listbuf_struct* %47, i32 0, i32 1
  %49 = getelementptr inbounds %struct.obj_struct* %48, i32 0, i32 1
  %50 = load i8** %49, align 8
  %51 = bitcast i8* %50 to %struct.smpPair_struct*
  %52 = getelementptr inbounds %struct.smpPair_struct* %51, i32 0, i32 1
  store %struct.obj_struct* %46, %struct.obj_struct** %52, align 8
  %53 = load %struct.listbuf_struct** %lb, align 8
  %54 = getelementptr inbounds %struct.listbuf_struct* %53, i32 0, i32 1
  %55 = getelementptr inbounds %struct.obj_struct* %54, i32 0, i32 1
  %56 = load i8** %55, align 8
  %57 = bitcast i8* %56 to %struct.smpPair_struct*
  %58 = getelementptr inbounds %struct.smpPair_struct* %57, i32 0, i32 1
  %59 = load %struct.obj_struct** %58, align 8
  %60 = load %struct.obj_struct** %3, align 8
  %61 = getelementptr inbounds %struct.obj_struct* %60, i64 0
  %62 = bitcast %struct.obj_struct* %61 to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = load %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = load i8** %65, align 1
  %67 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %64, i8* %66, i32 1, %struct.obj_struct* @smp_nil)
  %68 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 0
  %70 = extractvalue { %struct.smpType_struct*, i8* } %67, 0
  store %struct.smpType_struct* %70, %struct.smpType_struct** %69, align 1
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 1
  %72 = extractvalue { %struct.smpType_struct*, i8* } %67, 1
  store i8* %72, i8** %71, align 1
  %73 = bitcast %struct.obj_struct* %59 to i8*
  %74 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %73, i8* %74, i64 16, i32 8, i1 false)
  %75 = load %struct.listbuf_struct** %lb, align 8
  %76 = getelementptr inbounds %struct.listbuf_struct* %75, i32 0, i32 1
  %77 = load %struct.listbuf_struct** %lb, align 8
  %78 = getelementptr inbounds %struct.listbuf_struct* %77, i32 0, i32 1
  %79 = getelementptr inbounds %struct.obj_struct* %78, i32 0, i32 1
  %80 = load i8** %79, align 8
  %81 = bitcast i8* %80 to %struct.smpPair_struct*
  %82 = getelementptr inbounds %struct.smpPair_struct* %81, i32 0, i32 1
  %83 = load %struct.obj_struct** %82, align 8
  %84 = bitcast %struct.obj_struct* %76 to i8*
  %85 = bitcast %struct.obj_struct* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %85, i64 16, i32 8, i1 false)
  br label %86

; <label>:86                                      ; preds = %44, %20
  %87 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %87, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %88 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %89 = load { %struct.smpType_struct*, i8* }* %88, align 1
  ret { %struct.smpType_struct*, i8* } %89
}

define i32 @test_bool() nounwind {
  %successp = alloca i32, align 4
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  store i32 1, i32* %successp, align 4
  %15 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %16 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %17 = call { %struct.smpType_struct*, i8* } @smpBool_and(%struct.smpType_struct* %15, i8* %16, i32 1, %struct.obj_struct* @smp_true)
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = load i8** %26, align 1
  %28 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %29 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %30 = call i32 @smp_assert_eq(%struct.smpType_struct* %25, i8* %27, %struct.smpType_struct* %28, i8* %29)
  %31 = load i32* %successp, align 4
  %32 = and i32 %31, %30
  store i32 %32, i32* %successp, align 4
  %33 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %34 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %35 = call { %struct.smpType_struct*, i8* } @smpBool_and(%struct.smpType_struct* %33, i8* %34, i32 1, %struct.obj_struct* @smp_nil)
  %36 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  %41 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %47 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %48 = call i32 @smp_assert_eq(%struct.smpType_struct* %43, i8* %45, %struct.smpType_struct* %46, i8* %47)
  %49 = load i32* %successp, align 4
  %50 = and i32 %49, %48
  store i32 %50, i32* %successp, align 4
  %51 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %52 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %53 = call { %struct.smpType_struct*, i8* } @smpBool_and(%struct.smpType_struct* %51, i8* %52, i32 1, %struct.obj_struct* @smp_true)
  %54 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = extractvalue { %struct.smpType_struct*, i8* } %53, 0
  store %struct.smpType_struct* %56, %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = extractvalue { %struct.smpType_struct*, i8* } %53, 1
  store i8* %58, i8** %57, align 1
  %59 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = load %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = load i8** %62, align 1
  %64 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %65 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %66 = call i32 @smp_assert_eq(%struct.smpType_struct* %61, i8* %63, %struct.smpType_struct* %64, i8* %65)
  %67 = load i32* %successp, align 4
  %68 = and i32 %67, %66
  store i32 %68, i32* %successp, align 4
  %69 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %70 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %71 = call { %struct.smpType_struct*, i8* } @smpBool_and(%struct.smpType_struct* %69, i8* %70, i32 1, %struct.obj_struct* @smp_nil)
  %72 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 0
  %74 = extractvalue { %struct.smpType_struct*, i8* } %71, 0
  store %struct.smpType_struct* %74, %struct.smpType_struct** %73, align 1
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 1
  %76 = extractvalue { %struct.smpType_struct*, i8* } %71, 1
  store i8* %76, i8** %75, align 1
  %77 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 0
  %79 = load %struct.smpType_struct** %78, align 1
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 1
  %81 = load i8** %80, align 1
  %82 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %83 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %84 = call i32 @smp_assert_eq(%struct.smpType_struct* %79, i8* %81, %struct.smpType_struct* %82, i8* %83)
  %85 = load i32* %successp, align 4
  %86 = and i32 %85, %84
  store i32 %86, i32* %successp, align 4
  %87 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %88 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %89 = call { %struct.smpType_struct*, i8* } @smpBool_not(%struct.smpType_struct* %87, i8* %88, i32 0, %struct.obj_struct* null)
  %90 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = extractvalue { %struct.smpType_struct*, i8* } %89, 0
  store %struct.smpType_struct* %92, %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = extractvalue { %struct.smpType_struct*, i8* } %89, 1
  store i8* %94, i8** %93, align 1
  %95 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 0
  %97 = load %struct.smpType_struct** %96, align 1
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 1
  %99 = load i8** %98, align 1
  %100 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %101 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %102 = call i32 @smp_assert_eq(%struct.smpType_struct* %97, i8* %99, %struct.smpType_struct* %100, i8* %101)
  %103 = load i32* %successp, align 4
  %104 = and i32 %103, %102
  store i32 %104, i32* %successp, align 4
  %105 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %106 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %107 = call { %struct.smpType_struct*, i8* } @smpBool_not(%struct.smpType_struct* %105, i8* %106, i32 0, %struct.obj_struct* null)
  %108 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 0
  %110 = extractvalue { %struct.smpType_struct*, i8* } %107, 0
  store %struct.smpType_struct* %110, %struct.smpType_struct** %109, align 1
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 1
  %112 = extractvalue { %struct.smpType_struct*, i8* } %107, 1
  store i8* %112, i8** %111, align 1
  %113 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %114 = getelementptr { %struct.smpType_struct*, i8* }* %113, i32 0, i32 0
  %115 = load %struct.smpType_struct** %114, align 1
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %113, i32 0, i32 1
  %117 = load i8** %116, align 1
  %118 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %119 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %120 = call i32 @smp_assert_eq(%struct.smpType_struct* %115, i8* %117, %struct.smpType_struct* %118, i8* %119)
  %121 = load i32* %successp, align 4
  %122 = and i32 %121, %120
  store i32 %122, i32* %successp, align 4
  %123 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %124 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %125 = call { %struct.smpType_struct*, i8* } @smpBool_or(%struct.smpType_struct* %123, i8* %124, i32 1, %struct.obj_struct* @smp_true)
  %126 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %127 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 0
  %128 = extractvalue { %struct.smpType_struct*, i8* } %125, 0
  store %struct.smpType_struct* %128, %struct.smpType_struct** %127, align 1
  %129 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 1
  %130 = extractvalue { %struct.smpType_struct*, i8* } %125, 1
  store i8* %130, i8** %129, align 1
  %131 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %132 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 0
  %133 = load %struct.smpType_struct** %132, align 1
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 1
  %135 = load i8** %134, align 1
  %136 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %137 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %138 = call i32 @smp_assert_eq(%struct.smpType_struct* %133, i8* %135, %struct.smpType_struct* %136, i8* %137)
  %139 = load i32* %successp, align 4
  %140 = and i32 %139, %138
  store i32 %140, i32* %successp, align 4
  %141 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %142 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %143 = call { %struct.smpType_struct*, i8* } @smpBool_or(%struct.smpType_struct* %141, i8* %142, i32 1, %struct.obj_struct* @smp_nil)
  %144 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %145 = getelementptr { %struct.smpType_struct*, i8* }* %144, i32 0, i32 0
  %146 = extractvalue { %struct.smpType_struct*, i8* } %143, 0
  store %struct.smpType_struct* %146, %struct.smpType_struct** %145, align 1
  %147 = getelementptr { %struct.smpType_struct*, i8* }* %144, i32 0, i32 1
  %148 = extractvalue { %struct.smpType_struct*, i8* } %143, 1
  store i8* %148, i8** %147, align 1
  %149 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %150 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 0
  %151 = load %struct.smpType_struct** %150, align 1
  %152 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 1
  %153 = load i8** %152, align 1
  %154 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %155 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %156 = call i32 @smp_assert_eq(%struct.smpType_struct* %151, i8* %153, %struct.smpType_struct* %154, i8* %155)
  %157 = load i32* %successp, align 4
  %158 = and i32 %157, %156
  store i32 %158, i32* %successp, align 4
  %159 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %160 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %161 = call { %struct.smpType_struct*, i8* } @smpBool_or(%struct.smpType_struct* %159, i8* %160, i32 1, %struct.obj_struct* @smp_true)
  %162 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %163 = getelementptr { %struct.smpType_struct*, i8* }* %162, i32 0, i32 0
  %164 = extractvalue { %struct.smpType_struct*, i8* } %161, 0
  store %struct.smpType_struct* %164, %struct.smpType_struct** %163, align 1
  %165 = getelementptr { %struct.smpType_struct*, i8* }* %162, i32 0, i32 1
  %166 = extractvalue { %struct.smpType_struct*, i8* } %161, 1
  store i8* %166, i8** %165, align 1
  %167 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %168 = getelementptr { %struct.smpType_struct*, i8* }* %167, i32 0, i32 0
  %169 = load %struct.smpType_struct** %168, align 1
  %170 = getelementptr { %struct.smpType_struct*, i8* }* %167, i32 0, i32 1
  %171 = load i8** %170, align 1
  %172 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %173 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %174 = call i32 @smp_assert_eq(%struct.smpType_struct* %169, i8* %171, %struct.smpType_struct* %172, i8* %173)
  %175 = load i32* %successp, align 4
  %176 = and i32 %175, %174
  store i32 %176, i32* %successp, align 4
  %177 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %178 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %179 = call { %struct.smpType_struct*, i8* } @smpBool_or(%struct.smpType_struct* %177, i8* %178, i32 1, %struct.obj_struct* @smp_nil)
  %180 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %181 = getelementptr { %struct.smpType_struct*, i8* }* %180, i32 0, i32 0
  %182 = extractvalue { %struct.smpType_struct*, i8* } %179, 0
  store %struct.smpType_struct* %182, %struct.smpType_struct** %181, align 1
  %183 = getelementptr { %struct.smpType_struct*, i8* }* %180, i32 0, i32 1
  %184 = extractvalue { %struct.smpType_struct*, i8* } %179, 1
  store i8* %184, i8** %183, align 1
  %185 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %186 = getelementptr { %struct.smpType_struct*, i8* }* %185, i32 0, i32 0
  %187 = load %struct.smpType_struct** %186, align 1
  %188 = getelementptr { %struct.smpType_struct*, i8* }* %185, i32 0, i32 1
  %189 = load i8** %188, align 1
  %190 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %191 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %192 = call i32 @smp_assert_eq(%struct.smpType_struct* %187, i8* %189, %struct.smpType_struct* %190, i8* %191)
  %193 = load i32* %successp, align 4
  %194 = and i32 %193, %192
  store i32 %194, i32* %successp, align 4
  %195 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %196 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %197 = call { %struct.smpType_struct*, i8* } @smpBool_xor(%struct.smpType_struct* %195, i8* %196, i32 1, %struct.obj_struct* @smp_true)
  %198 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %198, i32 0, i32 0
  %200 = extractvalue { %struct.smpType_struct*, i8* } %197, 0
  store %struct.smpType_struct* %200, %struct.smpType_struct** %199, align 1
  %201 = getelementptr { %struct.smpType_struct*, i8* }* %198, i32 0, i32 1
  %202 = extractvalue { %struct.smpType_struct*, i8* } %197, 1
  store i8* %202, i8** %201, align 1
  %203 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %204 = getelementptr { %struct.smpType_struct*, i8* }* %203, i32 0, i32 0
  %205 = load %struct.smpType_struct** %204, align 1
  %206 = getelementptr { %struct.smpType_struct*, i8* }* %203, i32 0, i32 1
  %207 = load i8** %206, align 1
  %208 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %209 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %210 = call i32 @smp_assert_eq(%struct.smpType_struct* %205, i8* %207, %struct.smpType_struct* %208, i8* %209)
  %211 = load i32* %successp, align 4
  %212 = and i32 %211, %210
  store i32 %212, i32* %successp, align 4
  %213 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %214 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %215 = call { %struct.smpType_struct*, i8* } @smpBool_xor(%struct.smpType_struct* %213, i8* %214, i32 1, %struct.obj_struct* @smp_nil)
  %216 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %217 = getelementptr { %struct.smpType_struct*, i8* }* %216, i32 0, i32 0
  %218 = extractvalue { %struct.smpType_struct*, i8* } %215, 0
  store %struct.smpType_struct* %218, %struct.smpType_struct** %217, align 1
  %219 = getelementptr { %struct.smpType_struct*, i8* }* %216, i32 0, i32 1
  %220 = extractvalue { %struct.smpType_struct*, i8* } %215, 1
  store i8* %220, i8** %219, align 1
  %221 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %222 = getelementptr { %struct.smpType_struct*, i8* }* %221, i32 0, i32 0
  %223 = load %struct.smpType_struct** %222, align 1
  %224 = getelementptr { %struct.smpType_struct*, i8* }* %221, i32 0, i32 1
  %225 = load i8** %224, align 1
  %226 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %227 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %228 = call i32 @smp_assert_eq(%struct.smpType_struct* %223, i8* %225, %struct.smpType_struct* %226, i8* %227)
  %229 = load i32* %successp, align 4
  %230 = and i32 %229, %228
  store i32 %230, i32* %successp, align 4
  %231 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %232 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %233 = call { %struct.smpType_struct*, i8* } @smpBool_xor(%struct.smpType_struct* %231, i8* %232, i32 1, %struct.obj_struct* @smp_true)
  %234 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %235 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 0
  %236 = extractvalue { %struct.smpType_struct*, i8* } %233, 0
  store %struct.smpType_struct* %236, %struct.smpType_struct** %235, align 1
  %237 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 1
  %238 = extractvalue { %struct.smpType_struct*, i8* } %233, 1
  store i8* %238, i8** %237, align 1
  %239 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %240 = getelementptr { %struct.smpType_struct*, i8* }* %239, i32 0, i32 0
  %241 = load %struct.smpType_struct** %240, align 1
  %242 = getelementptr { %struct.smpType_struct*, i8* }* %239, i32 0, i32 1
  %243 = load i8** %242, align 1
  %244 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %245 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %246 = call i32 @smp_assert_eq(%struct.smpType_struct* %241, i8* %243, %struct.smpType_struct* %244, i8* %245)
  %247 = load i32* %successp, align 4
  %248 = and i32 %247, %246
  store i32 %248, i32* %successp, align 4
  %249 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %250 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %251 = call { %struct.smpType_struct*, i8* } @smpBool_xor(%struct.smpType_struct* %249, i8* %250, i32 1, %struct.obj_struct* @smp_nil)
  %252 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %253 = getelementptr { %struct.smpType_struct*, i8* }* %252, i32 0, i32 0
  %254 = extractvalue { %struct.smpType_struct*, i8* } %251, 0
  store %struct.smpType_struct* %254, %struct.smpType_struct** %253, align 1
  %255 = getelementptr { %struct.smpType_struct*, i8* }* %252, i32 0, i32 1
  %256 = extractvalue { %struct.smpType_struct*, i8* } %251, 1
  store i8* %256, i8** %255, align 1
  %257 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %258 = getelementptr { %struct.smpType_struct*, i8* }* %257, i32 0, i32 0
  %259 = load %struct.smpType_struct** %258, align 1
  %260 = getelementptr { %struct.smpType_struct*, i8* }* %257, i32 0, i32 1
  %261 = load i8** %260, align 1
  %262 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %263 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %264 = call i32 @smp_assert_eq(%struct.smpType_struct* %259, i8* %261, %struct.smpType_struct* %262, i8* %263)
  %265 = load i32* %successp, align 4
  %266 = and i32 %265, %264
  store i32 %266, i32* %successp, align 4
  %267 = load i32* %successp, align 4
  ret i32 %267
}

define { %struct.smpType_struct*, i8* } @smpBool_and(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call i32 @smpObject_truep_c(%struct.smpType_struct* %9, i8* %11)
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %24

; <label>:14                                      ; preds = %0
  %15 = load %struct.obj_struct** %3, align 8
  %16 = getelementptr inbounds %struct.obj_struct* %15, i64 0
  %17 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 1
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 1
  %21 = load i8** %20, align 1
  %22 = call i32 @smpObject_truep_c(%struct.smpType_struct* %19, i8* %21)
  %23 = icmp ne i32 %22, 0
  br label %24

; <label>:24                                      ; preds = %14, %0
  %25 = phi i1 [ false, %0 ], [ %23, %14 ]
  %26 = zext i1 %25 to i32
  %27 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %26)
  %28 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = extractvalue { %struct.smpType_struct*, i8* } %27, 0
  store %struct.smpType_struct* %30, %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = extractvalue { %struct.smpType_struct*, i8* } %27, 1
  store i8* %32, i8** %31, align 1
  %33 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %34 = load { %struct.smpType_struct*, i8* }* %33, align 1
  ret { %struct.smpType_struct*, i8* } %34
}

define { %struct.smpType_struct*, i8* } @smpBool_not(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call i32 @smpObject_truep_c(%struct.smpType_struct* %11, i8* %13)
  %15 = icmp ne i32 %14, 0
  %16 = xor i1 %15, true
  %17 = zext i1 %16 to i32
  %18 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %17)
  %19 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 0
  %21 = extractvalue { %struct.smpType_struct*, i8* } %18, 0
  store %struct.smpType_struct* %21, %struct.smpType_struct** %20, align 1
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 1
  %23 = extractvalue { %struct.smpType_struct*, i8* } %18, 1
  store i8* %23, i8** %22, align 1
  %24 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %25 = load { %struct.smpType_struct*, i8* }* %24, align 1
  ret { %struct.smpType_struct*, i8* } %25
}

define { %struct.smpType_struct*, i8* } @smpBool_or(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call i32 @smpObject_truep_c(%struct.smpType_struct* %9, i8* %11)
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %24, label %14

; <label>:14                                      ; preds = %0
  %15 = load %struct.obj_struct** %3, align 8
  %16 = getelementptr inbounds %struct.obj_struct* %15, i64 0
  %17 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 1
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 1
  %21 = load i8** %20, align 1
  %22 = call i32 @smpObject_truep_c(%struct.smpType_struct* %19, i8* %21)
  %23 = icmp ne i32 %22, 0
  br label %24

; <label>:24                                      ; preds = %14, %0
  %25 = phi i1 [ true, %0 ], [ %23, %14 ]
  %26 = zext i1 %25 to i32
  %27 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %26)
  %28 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = extractvalue { %struct.smpType_struct*, i8* } %27, 0
  store %struct.smpType_struct* %30, %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = extractvalue { %struct.smpType_struct*, i8* } %27, 1
  store i8* %32, i8** %31, align 1
  %33 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %34 = load { %struct.smpType_struct*, i8* }* %33, align 1
  ret { %struct.smpType_struct*, i8* } %34
}

define { %struct.smpType_struct*, i8* } @smpBool_xor(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call i32 @smpObject_truep_c(%struct.smpType_struct* %9, i8* %11)
  %13 = load %struct.obj_struct** %3, align 8
  %14 = getelementptr inbounds %struct.obj_struct* %13, i64 0
  %15 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpObject_truep_c(%struct.smpType_struct* %17, i8* %19)
  %21 = xor i32 %12, %20
  %22 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %21)
  %23 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = extractvalue { %struct.smpType_struct*, i8* } %22, 0
  store %struct.smpType_struct* %25, %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = extractvalue { %struct.smpType_struct*, i8* } %22, 1
  store i8* %27, i8** %26, align 1
  %28 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %29 = load { %struct.smpType_struct*, i8* }* %28, align 1
  ret { %struct.smpType_struct*, i8* } %29
}

define i32 @test_regex() nounwind {
  %pattern = alloca %struct.obj_struct, align 8
  %string = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([16 x i8]* @.str82, i32 0, i32 0))
  %4 = bitcast %struct.obj_struct* %pattern to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([9 x i8]* @.str83, i32 0, i32 0))
  %10 = bitcast %struct.obj_struct* %string to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %pattern to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call { %struct.smpType_struct*, i8* } @smpRegex_matchp(%struct.smpType_struct* %17, i8* %19, i32 1, %struct.obj_struct* %string)
  %21 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = extractvalue { %struct.smpType_struct*, i8* } %20, 0
  store %struct.smpType_struct* %23, %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = extractvalue { %struct.smpType_struct*, i8* } %20, 1
  store i8* %25, i8** %24, align 1
  %26 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smp_println(%struct.smpType_struct* %28, i8* %30)
  %32 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpRegex_matchp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %match = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load i32* %2, align 4
  %8 = load %struct.obj_struct** %3, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smpRegex_match(%struct.smpType_struct* %11, i8* %13, i32 %7, %struct.obj_struct* %8)
  %15 = bitcast %struct.obj_struct* %match to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %match to { %struct.smpType_struct*, i8* }*
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 1
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 1
  %24 = load i8** %23, align 1
  %25 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %22, i8* %24)
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %match to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %41

; <label>:30                                      ; preds = %0
  %31 = getelementptr inbounds %struct.obj_struct* %match, i32 0, i32 0
  %32 = load %struct.smpType_struct** %31, align 8
  %33 = getelementptr inbounds %struct.smpType_struct* %32, i32 0, i32 1
  %34 = load i32* %33, align 4
  %35 = load i32* @smpType_id_nil, align 4
  %36 = icmp eq i32 %34, %35
  br i1 %36, label %37, label %39

; <label>:37                                      ; preds = %30
  %38 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %41

; <label>:39                                      ; preds = %30
  %40 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* bitcast (%struct.obj_struct* @smp_true to i8*), i64 16, i32 8, i1 false)
  br label %41

; <label>:41                                      ; preds = %39, %37, %27
  %42 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %43 = load { %struct.smpType_struct*, i8* }* %42, align 1
  ret { %struct.smpType_struct*, i8* } %43
}

define i32 @test_arrays() nounwind {
  %array = alloca %struct.obj_struct, align 8
  %i = alloca i32, align 4
  %elem = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = call { %struct.smpType_struct*, i8* } @smpArray_init()
  %4 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call i32 @scope_add(i8* getelementptr inbounds ([6 x i8]* @.str84, i32 0, i32 0), %struct.smpType_struct* %11, i8* %13)
  store i32 0, i32* %i, align 4
  br label %15

; <label>:15                                      ; preds = %38, %0
  %16 = load i32* %i, align 4
  %17 = icmp slt i32 %16, 100
  br i1 %17, label %18, label %41

; <label>:18                                      ; preds = %15
  %19 = load i32* %i, align 4
  %20 = sext i32 %19 to i64
  %21 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %20)
  %22 = bitcast %struct.obj_struct* %elem to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = extractvalue { %struct.smpType_struct*, i8* } %21, 0
  store %struct.smpType_struct* %24, %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = extractvalue { %struct.smpType_struct*, i8* } %21, 1
  store i8* %26, i8** %25, align 1
  %27 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = load %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = load i8** %30, align 1
  %32 = call { %struct.smpType_struct*, i8* } @smpArray_add_now(%struct.smpType_struct* %29, i8* %31, i32 1, %struct.obj_struct* %elem)
  %33 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 0
  %35 = extractvalue { %struct.smpType_struct*, i8* } %32, 0
  store %struct.smpType_struct* %35, %struct.smpType_struct** %34, align 1
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 1
  %37 = extractvalue { %struct.smpType_struct*, i8* } %32, 1
  store i8* %37, i8** %36, align 1
  br label %38

; <label>:38                                      ; preds = %18
  %39 = load i32* %i, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %i, align 4
  br label %15

; <label>:41                                      ; preds = %15
  %42 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = load %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = load i8** %45, align 1
  %47 = call { %struct.smpType_struct*, i8* } @smp_println(%struct.smpType_struct* %44, i8* %46)
  %48 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = extractvalue { %struct.smpType_struct*, i8* } %47, 0
  store %struct.smpType_struct* %50, %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = extractvalue { %struct.smpType_struct*, i8* } %47, 1
  store i8* %52, i8** %51, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpArray_add_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %arr = alloca %struct.smpArray_struct*, align 8
  %i = alloca i64, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpArray_struct*
  store %struct.smpArray_struct* %9, %struct.smpArray_struct** %arr, align 8
  %10 = load %struct.smpArray_struct** %arr, align 8
  %11 = getelementptr inbounds %struct.smpArray_struct* %10, i32 0, i32 1
  %12 = load i64* %11, align 8
  store i64 %12, i64* %i, align 8
  %13 = load %struct.smpArray_struct** %arr, align 8
  %14 = getelementptr inbounds %struct.smpArray_struct* %13, i32 0, i32 1
  %15 = load i64* %14, align 8
  %16 = add i64 %15, 1
  store i64 %16, i64* %14, align 8
  %17 = load %struct.smpArray_struct** %arr, align 8
  %18 = load %struct.smpArray_struct** %arr, align 8
  %19 = getelementptr inbounds %struct.smpArray_struct* %18, i32 0, i32 1
  %20 = load i64* %19, align 8
  %21 = mul i64 16, %20
  %22 = call i32 @smpArray_resize(%struct.smpArray_struct* %17, i64 %21)
  %23 = load i64* %i, align 8
  %24 = load %struct.smpArray_struct** %arr, align 8
  %25 = getelementptr inbounds %struct.smpArray_struct* %24, i32 0, i32 0
  %26 = load %struct.obj_struct** %25, align 8
  %27 = getelementptr inbounds %struct.obj_struct* %26, i64 %23
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = bitcast %struct.obj_struct* %27 to i8*
  %31 = bitcast %struct.obj_struct* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false)
  %32 = bitcast %struct.obj_struct* %1 to i8*
  %33 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 16, i32 8, i1 false)
  %34 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %35 = load { %struct.smpType_struct*, i8* }* %34, align 1
  ret { %struct.smpType_struct*, i8* } %35
}

define i32 @test_array_sort() nounwind {
  %tv = alloca %struct.timeval, align 8
  %start = alloca double, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %max_cint = alloca i64, align 8
  %elem = alloca %struct.obj_struct, align 8
  %array = alloca %struct.obj_struct, align 8
  %max = alloca %struct.obj_struct, align 8
  %i1 = alloca i32, align 4
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %finish = alloca double, align 8
  %5 = call i32 @gettimeofday(%struct.timeval* %tv, i8* null)
  %6 = getelementptr inbounds %struct.timeval* %tv, i32 0, i32 0
  %7 = load i64* %6, align 8
  %8 = sitofp i64 %7 to double
  %9 = getelementptr inbounds %struct.timeval* %tv, i32 0, i32 1
  %10 = load i32* %9, align 4
  %11 = sitofp i32 %10 to double
  %12 = fdiv double %11, 1.000000e+06
  %13 = fadd double %8, %12
  store double %13, double* %start, align 8
  store i64 96, i64* %max_cint, align 8
  store i64 0, i64* %i, align 8
  br label %14

; <label>:14                                      ; preds = %107, %0
  %15 = load i64* %i, align 8
  %16 = icmp ult i64 %15, 512
  br i1 %16, label %17, label %110

; <label>:17                                      ; preds = %14
  %18 = load i64* %i, align 8
  %19 = icmp ugt i64 %18, 0
  br i1 %19, label %20, label %27

; <label>:20                                      ; preds = %17
  %21 = load i64* %i, align 8
  %22 = urem i64 %21, 64
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %20
  %25 = load i64* %max_cint, align 8
  %26 = mul nsw i64 %25, 2
  store i64 %26, i64* %max_cint, align 8
  br label %27

; <label>:27                                      ; preds = %24, %20, %17
  %28 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 0)
  %29 = bitcast %struct.obj_struct* %elem to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = extractvalue { %struct.smpType_struct*, i8* } %28, 0
  store %struct.smpType_struct* %31, %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = extractvalue { %struct.smpType_struct*, i8* } %28, 1
  store i8* %33, i8** %32, align 1
  %34 = call { %struct.smpType_struct*, i8* } @smpArray_init()
  %35 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = load i64* %max_cint, align 8
  %41 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %40)
  %42 = bitcast %struct.obj_struct* %max to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = extractvalue { %struct.smpType_struct*, i8* } %41, 0
  store %struct.smpType_struct* %44, %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = extractvalue { %struct.smpType_struct*, i8* } %41, 1
  store i8* %46, i8** %45, align 1
  store i32 0, i32* %i1, align 4
  br label %47

; <label>:47                                      ; preds = %92, %27
  %48 = load i32* %i1, align 4
  %49 = sext i32 %48 to i64
  %50 = load i64* %max_cint, align 8
  %51 = icmp slt i64 %49, %50
  br i1 %51, label %52, label %95

; <label>:52                                      ; preds = %47
  %53 = call double @genrand_real2()
  %54 = fcmp olt double %53, 9.000000e+00
  br i1 %54, label %55, label %69

; <label>:55                                      ; preds = %52
  %56 = bitcast %struct.obj_struct* %elem to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = load %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = load i8** %59, align 1
  %61 = call { %struct.smpType_struct*, i8* } @smpInteger_add(%struct.smpType_struct* %58, i8* %60, i32 1, %struct.obj_struct* @smpInteger_one)
  %62 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = extractvalue { %struct.smpType_struct*, i8* } %61, 0
  store %struct.smpType_struct* %64, %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = extractvalue { %struct.smpType_struct*, i8* } %61, 1
  store i8* %66, i8** %65, align 1
  %67 = bitcast %struct.obj_struct* %elem to i8*
  %68 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %67, i8* %68, i64 16, i32 8, i1 false)
  br label %80

; <label>:69                                      ; preds = %52
  %70 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %71 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %72 = call { %struct.smpType_struct*, i8* } @smpGlobal_rand(%struct.smpType_struct* %70, i8* %71, i32 1, %struct.obj_struct* %max)
  %73 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  %78 = bitcast %struct.obj_struct* %elem to i8*
  %79 = bitcast %struct.obj_struct* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %78, i8* %79, i64 16, i32 8, i1 false)
  br label %80

; <label>:80                                      ; preds = %69, %55
  %81 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = load %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = load i8** %84, align 1
  %86 = call { %struct.smpType_struct*, i8* } @smpArray_add_now(%struct.smpType_struct* %83, i8* %85, i32 1, %struct.obj_struct* %elem)
  %87 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = extractvalue { %struct.smpType_struct*, i8* } %86, 0
  store %struct.smpType_struct* %89, %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = extractvalue { %struct.smpType_struct*, i8* } %86, 1
  store i8* %91, i8** %90, align 1
  br label %92

; <label>:92                                      ; preds = %80
  %93 = load i32* %i1, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %i1, align 4
  br label %47

; <label>:95                                      ; preds = %47
  %96 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = load %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = load i8** %99, align 1
  %101 = call { %struct.smpType_struct*, i8* } @smpArray_sort_now(%struct.smpType_struct* %98, i8* %100, i32 0, %struct.obj_struct* null)
  %102 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 0
  %104 = extractvalue { %struct.smpType_struct*, i8* } %101, 0
  store %struct.smpType_struct* %104, %struct.smpType_struct** %103, align 1
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 1
  %106 = extractvalue { %struct.smpType_struct*, i8* } %101, 1
  store i8* %106, i8** %105, align 1
  br label %107

; <label>:107                                     ; preds = %95
  %108 = load i64* %i, align 8
  %109 = add i64 %108, 1
  store i64 %109, i64* %i, align 8
  br label %14

; <label>:110                                     ; preds = %14
  %111 = call i32 @gettimeofday(%struct.timeval* %tv, i8* null)
  %112 = getelementptr inbounds %struct.timeval* %tv, i32 0, i32 0
  %113 = load i64* %112, align 8
  %114 = sitofp i64 %113 to double
  %115 = getelementptr inbounds %struct.timeval* %tv, i32 0, i32 1
  %116 = load i32* %115, align 4
  %117 = sitofp i32 %116 to double
  %118 = fdiv double %117, 1.000000e+06
  %119 = fadd double %114, %118
  store double %119, double* %finish, align 8
  %120 = load double* %finish, align 8
  %121 = load double* %start, align 8
  %122 = fsub double %120, %121
  %123 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str85, i32 0, i32 0), double %122)
  ret i32 0
}

declare i32 @gettimeofday(%struct.timeval*, i8*)

define internal double @genrand_real2() nounwind inlinehint {
  %1 = call i32 @gen_rand32()
  %2 = call double @to_real2(i32 %1)
  ret double %2
}

define { %struct.smpType_struct*, i8* } @smpInteger_add(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %res = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_int, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %41

; <label>:17                                      ; preds = %0
  %18 = call noalias i8* @GC_malloc(i64 16)
  %19 = bitcast i8* %18 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %19, [1 x %struct.__mpz_struct]** %z, align 8
  %20 = load [1 x %struct.__mpz_struct]** %z, align 8
  %21 = getelementptr inbounds [1 x %struct.__mpz_struct]* %20, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %21)
  %22 = load [1 x %struct.__mpz_struct]** %z, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpz_struct]* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to [1 x %struct.__mpz_struct]*
  %27 = getelementptr inbounds [1 x %struct.__mpz_struct]* %26, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpz_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpz_struct]* %32, i32 0, i32 0
  call void @__gmpz_add(%struct.__mpz_struct* %23, %struct.__mpz_struct* %27, %struct.__mpz_struct* %33)
  %34 = load [1 x %struct.__mpz_struct]** %z, align 8
  %35 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %34)
  %36 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  br label %110

; <label>:41                                      ; preds = %0
  %42 = load %struct.obj_struct** %3, align 8
  %43 = getelementptr inbounds %struct.obj_struct* %42, i64 0
  %44 = getelementptr inbounds %struct.obj_struct* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 8
  %46 = getelementptr inbounds %struct.smpType_struct* %45, i32 0, i32 1
  %47 = load i32* %46, align 4
  %48 = load i32* @smpType_id_float, align 4
  %49 = icmp eq i32 %47, %48
  br i1 %49, label %50, label %76

; <label>:50                                      ; preds = %41
  %51 = call noalias i8* @GC_malloc(i64 32)
  %52 = bitcast i8* %51 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %52, [1 x %struct.__mpfr_struct]** %res, align 8
  %53 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %54 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %53, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %54)
  %55 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %56 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %55, i32 0, i32 0
  %57 = load %struct.obj_struct** %3, align 8
  %58 = getelementptr inbounds %struct.obj_struct* %57, i64 0
  %59 = getelementptr inbounds %struct.obj_struct* %58, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to [1 x %struct.__mpfr_struct]*
  %62 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %61, i32 0, i32 0
  %63 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %64 = load i8** %63, align 8
  %65 = bitcast i8* %64 to [1 x %struct.__mpz_struct]*
  %66 = getelementptr inbounds [1 x %struct.__mpz_struct]* %65, i32 0, i32 0
  %67 = load i32* @smp_mpfr_rnd, align 4
  %68 = call i32 @mpfr_add_z(%struct.__mpfr_struct* %56, %struct.__mpfr_struct* %62, %struct.__mpz_struct* %66, i32 %67)
  %69 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %70 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %69)
  %71 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = extractvalue { %struct.smpType_struct*, i8* } %70, 0
  store %struct.smpType_struct* %73, %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = extractvalue { %struct.smpType_struct*, i8* } %70, 1
  store i8* %75, i8** %74, align 1
  br label %110

; <label>:76                                      ; preds = %41
  %77 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %78 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %84 = load i8** %83, align 8
  %85 = bitcast i8* %84 to %struct.smpType_struct*
  %86 = load %struct.obj_struct** %3, align 8
  %87 = getelementptr inbounds %struct.obj_struct* %86, i64 0
  %88 = bitcast %struct.obj_struct* %87 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = load %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = load i8** %91, align 1
  %93 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %85, %struct.smpType_struct* %90, i8* %92)
  %94 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 0
  %96 = extractvalue { %struct.smpType_struct*, i8* } %93, 0
  store %struct.smpType_struct* %96, %struct.smpType_struct** %95, align 1
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 1
  %98 = extractvalue { %struct.smpType_struct*, i8* } %93, 1
  store i8* %98, i8** %97, align 1
  %99 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 0
  %101 = load %struct.smpType_struct** %100, align 1
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 1
  %103 = load i8** %102, align 1
  %104 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %101, i8* %103)
  %105 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 0
  %107 = extractvalue { %struct.smpType_struct*, i8* } %104, 0
  store %struct.smpType_struct* %107, %struct.smpType_struct** %106, align 1
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 1
  %109 = extractvalue { %struct.smpType_struct*, i8* } %104, 1
  store i8* %109, i8** %108, align 1
  br label %110

; <label>:110                                     ; preds = %76, %50, %17
  %111 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %112 = load { %struct.smpType_struct*, i8* }* %111, align 1
  ret { %struct.smpType_struct*, i8* } %112
}

define { %struct.smpType_struct*, i8* } @smpGlobal_rand(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %num = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load i32* %2, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %19

; <label>:11                                      ; preds = %0
  %12 = call double @genrand_real2()
  %13 = call { %struct.smpType_struct*, i8* } @smpFloat_init_cdouble(double %12)
  %14 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = extractvalue { %struct.smpType_struct*, i8* } %13, 0
  store %struct.smpType_struct* %16, %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = extractvalue { %struct.smpType_struct*, i8* } %13, 1
  store i8* %18, i8** %17, align 1
  br label %96

; <label>:19                                      ; preds = %0
  %20 = load %struct.obj_struct** %3, align 8
  %21 = getelementptr inbounds %struct.obj_struct* %20, i64 0
  %22 = getelementptr inbounds %struct.obj_struct* %21, i32 0, i32 0
  %23 = load %struct.smpType_struct** %22, align 8
  %24 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %23, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %74, label %26

; <label>:26                                      ; preds = %19
  %27 = load %struct.obj_struct** %3, align 8
  %28 = getelementptr inbounds %struct.obj_struct* %27, i64 0
  %29 = getelementptr inbounds %struct.obj_struct* %28, i32 0, i32 0
  %30 = load %struct.smpType_struct** %29, align 8
  %31 = getelementptr inbounds %struct.smpType_struct* %30, i32 0, i32 0
  %32 = load i8** %31, align 8
  %33 = call i32 @strcmp(i8* %32, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %40

; <label>:35                                      ; preds = %26
  %36 = load %struct.obj_struct** %3, align 8
  %37 = getelementptr inbounds %struct.obj_struct* %36, i64 0
  %38 = bitcast %struct.obj_struct* %1 to i8*
  %39 = bitcast %struct.obj_struct* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 16, i32 8, i1 false)
  br label %96

; <label>:40                                      ; preds = %26
  %41 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %42 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = extractvalue { %struct.smpType_struct*, i8* } %41, 0
  store %struct.smpType_struct* %44, %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = extractvalue { %struct.smpType_struct*, i8* } %41, 1
  store i8* %46, i8** %45, align 1
  %47 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %48 = load i8** %47, align 8
  %49 = bitcast i8* %48 to %struct.smpType_struct*
  %50 = load %struct.obj_struct** %3, align 8
  %51 = getelementptr inbounds %struct.obj_struct* %50, i64 0
  %52 = bitcast %struct.obj_struct* %51 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %49, %struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  %63 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 0
  %65 = load %struct.smpType_struct** %64, align 1
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 1
  %67 = load i8** %66, align 1
  %68 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %65, i8* %67)
  %69 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 0
  %71 = extractvalue { %struct.smpType_struct*, i8* } %68, 0
  store %struct.smpType_struct* %71, %struct.smpType_struct** %70, align 1
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 1
  %73 = extractvalue { %struct.smpType_struct*, i8* } %68, 1
  store i8* %73, i8** %72, align 1
  br label %96

; <label>:74                                      ; preds = %19
  %75 = call i32 @gen_rand32()
  %76 = zext i32 %75 to i64
  %77 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %76)
  %78 = bitcast %struct.obj_struct* %num to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = load %struct.obj_struct** %3, align 8
  %84 = getelementptr inbounds %struct.obj_struct* %83, i64 0
  %85 = bitcast %struct.obj_struct* %num to { %struct.smpType_struct*, i8* }*
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 0
  %87 = load %struct.smpType_struct** %86, align 1
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 1
  %89 = load i8** %88, align 1
  %90 = call { %struct.smpType_struct*, i8* } @smpInteger_mod(%struct.smpType_struct* %87, i8* %89, i32 1, %struct.obj_struct* %84)
  %91 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 0
  %93 = extractvalue { %struct.smpType_struct*, i8* } %90, 0
  store %struct.smpType_struct* %93, %struct.smpType_struct** %92, align 1
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 1
  %95 = extractvalue { %struct.smpType_struct*, i8* } %90, 1
  store i8* %95, i8** %94, align 1
  br label %96

; <label>:96                                      ; preds = %74, %40, %35, %11
  %97 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %98 = load { %struct.smpType_struct*, i8* }* %97, align 1
  ret { %struct.smpType_struct*, i8* } %98
}

define { %struct.smpType_struct*, i8* } @smpArray_sort_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %ret = alloca %struct.obj_struct, align 8
  %cmp_fun = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %merger_space = alloca %struct.obj_struct*, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %obj.coerce1, i8** %9
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %10 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %11 = bitcast %struct.obj_struct* %cmp_fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %12 = load i32* %2, align 4
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %66

; <label>:14                                      ; preds = %0
  %15 = load %struct.obj_struct** %3, align 8
  %16 = getelementptr inbounds %struct.obj_struct* %15, i64 0
  %17 = bitcast %struct.obj_struct* %cmp_fun to i8*
  %18 = bitcast %struct.obj_struct* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 16, i32 8, i1 false)
  %19 = getelementptr inbounds %struct.obj_struct* %cmp_fun, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 8
  %21 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %20, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %65, label %23

; <label>:23                                      ; preds = %14
  %24 = getelementptr inbounds %struct.obj_struct* %cmp_fun, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 8
  %26 = getelementptr inbounds %struct.smpType_struct* %25, i32 0, i32 0
  %27 = load i8** %26, align 8
  %28 = call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %33

; <label>:30                                      ; preds = %23
  %31 = bitcast %struct.obj_struct* %1 to i8*
  %32 = bitcast %struct.obj_struct* %cmp_fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 16, i32 8, i1 false)
  br label %110

; <label>:33                                      ; preds = %23
  %34 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %35 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %41 = load i8** %40, align 8
  %42 = bitcast i8* %41 to %struct.smpType_struct*
  %43 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = load i8** %46, align 1
  %48 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %42, %struct.smpType_struct* %45, i8* %47)
  %49 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = extractvalue { %struct.smpType_struct*, i8* } %48, 0
  store %struct.smpType_struct* %51, %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = extractvalue { %struct.smpType_struct*, i8* } %48, 1
  store i8* %53, i8** %52, align 1
  %54 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %56, i8* %58)
  %60 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  br label %110

; <label>:65                                      ; preds = %14
  br label %66

; <label>:66                                      ; preds = %65, %0
  %67 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %68 = load i8** %67, align 8
  %69 = bitcast i8* %68 to %struct.smpArray_struct*
  %70 = bitcast %struct.smpArray_struct* %core to i8*
  %71 = bitcast %struct.smpArray_struct* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* %71, i64 16, i32 8, i1 false)
  %72 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %73 = load i64* %72, align 8
  %74 = mul i64 16, %73
  %75 = call noalias i8* @GC_malloc(i64 %74)
  %76 = bitcast i8* %75 to %struct.obj_struct*
  store %struct.obj_struct* %76, %struct.obj_struct** %merger_space, align 8
  %77 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %78 = load %struct.obj_struct** %77, align 8
  %79 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %80 = load i64* %79, align 8
  %81 = load %struct.obj_struct** %merger_space, align 8
  %82 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 0
  %84 = load %struct.smpType_struct** %83, align 1
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 1
  %86 = load i8** %85, align 1
  %87 = call { %struct.smpType_struct*, i8* } @smpArray_sort_timmy(%struct.obj_struct* %78, i64 %80, %struct.obj_struct* %81, %struct.smpType_struct* %84, i8* %86)
  %88 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = extractvalue { %struct.smpType_struct*, i8* } %87, 0
  store %struct.smpType_struct* %90, %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = extractvalue { %struct.smpType_struct*, i8* } %87, 1
  store i8* %92, i8** %91, align 1
  %93 = bitcast %struct.obj_struct* %ret to i8*
  %94 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %93, i8* %94, i64 16, i32 8, i1 false)
  %95 = load %struct.obj_struct** %merger_space, align 8
  %96 = bitcast %struct.obj_struct* %95 to i8*
  call void @GC_free(i8* %96)
  %97 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 0
  %99 = load %struct.smpType_struct** %98, align 1
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 1
  %101 = load i8** %100, align 1
  %102 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %99, i8* %101)
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %104, label %107

; <label>:104                                     ; preds = %66
  %105 = bitcast %struct.obj_struct* %1 to i8*
  %106 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 16, i32 8, i1 false)
  br label %110

; <label>:107                                     ; preds = %66
  %108 = bitcast %struct.obj_struct* %1 to i8*
  %109 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %108, i8* %109, i64 16, i32 8, i1 false)
  br label %110

; <label>:110                                     ; preds = %107, %104, %33, %30
  %111 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %112 = load { %struct.smpType_struct*, i8* }* %111, align 1
  ret { %struct.smpType_struct*, i8* } %112
}

define i32 @list_clear_all(%struct.smpType_struct* %list.coerce0, i8* %list.coerce1) nounwind {
  %list = alloca %struct.obj_struct, align 8
  %core = alloca %struct.smpPair_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = bitcast %struct.obj_struct* %list to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %list.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %list.coerce1, i8** %5
  %6 = getelementptr inbounds %struct.obj_struct* %list, i32 0, i32 1
  %7 = load i8** %6, align 8
  %8 = bitcast i8* %7 to %struct.smpPair_struct*
  %9 = bitcast %struct.smpPair_struct* %core to i8*
  %10 = bitcast %struct.smpPair_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 24, i32 8, i1 false)
  %11 = getelementptr inbounds %struct.smpPair_struct* %core, i32 0, i32 0
  %12 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %11)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = getelementptr inbounds %struct.smpPair_struct* %core, i32 0, i32 1
  %19 = load %struct.obj_struct** %18, align 8
  %20 = icmp ne %struct.obj_struct* %19, null
  br i1 %20, label %21, label %30

; <label>:21                                      ; preds = %0
  %22 = getelementptr inbounds %struct.smpPair_struct* %core, i32 0, i32 1
  %23 = load %struct.obj_struct** %22, align 8
  %24 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 0
  %26 = load %struct.smpType_struct** %25, align 1
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 1
  %28 = load i8** %27, align 1
  %29 = call i32 @list_clear_all(%struct.smpType_struct* %26, i8* %28)
  br label %30

; <label>:30                                      ; preds = %21, %0
  %31 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %list)
  %32 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  ret i32 0
}

define i32 @test_list_sort() nounwind {
  %tv = alloca %struct.timeval, align 8
  %start = alloca double, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %max_cint = alloca i64, align 8
  %elem = alloca %struct.obj_struct, align 8
  %list = alloca %struct.obj_struct, align 8
  %max = alloca %struct.obj_struct, align 8
  %i1 = alloca i32, align 4
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %finish = alloca double, align 8
  %4 = call i32 @gettimeofday(%struct.timeval* %tv, i8* null)
  %5 = getelementptr inbounds %struct.timeval* %tv, i32 0, i32 0
  %6 = load i64* %5, align 8
  %7 = sitofp i64 %6 to double
  %8 = getelementptr inbounds %struct.timeval* %tv, i32 0, i32 1
  %9 = load i32* %8, align 4
  %10 = sitofp i32 %9 to double
  %11 = fdiv double %10, 1.000000e+06
  %12 = fadd double %7, %11
  store double %12, double* %start, align 8
  store i64 2, i64* %max_cint, align 8
  store i64 0, i64* %i, align 8
  br label %13

; <label>:13                                      ; preds = %93, %0
  %14 = load i64* %i, align 8
  %15 = icmp ult i64 %14, 512
  br i1 %15, label %16, label %96

; <label>:16                                      ; preds = %13
  %17 = load i64* %i, align 8
  %18 = icmp ugt i64 %17, 0
  br i1 %18, label %19, label %26

; <label>:19                                      ; preds = %16
  %20 = load i64* %i, align 8
  %21 = urem i64 %20, 64
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %19
  %24 = load i64* %max_cint, align 8
  %25 = mul nsw i64 %24, 2
  store i64 %25, i64* %max_cint, align 8
  br label %26

; <label>:26                                      ; preds = %23, %19, %16
  %27 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 0)
  %28 = bitcast %struct.obj_struct* %elem to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = extractvalue { %struct.smpType_struct*, i8* } %27, 0
  store %struct.smpType_struct* %30, %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = extractvalue { %struct.smpType_struct*, i8* } %27, 1
  store i8* %32, i8** %31, align 1
  %33 = bitcast %struct.obj_struct* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %34 = load i64* %max_cint, align 8
  %35 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %34)
  %36 = bitcast %struct.obj_struct* %max to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  store i32 0, i32* %i1, align 4
  br label %41

; <label>:41                                      ; preds = %70, %26
  %42 = load i32* %i1, align 4
  %43 = sext i32 %42 to i64
  %44 = load i64* %max_cint, align 8
  %45 = icmp slt i64 %43, %44
  br i1 %45, label %46, label %73

; <label>:46                                      ; preds = %41
  %47 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %48 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %49 = call { %struct.smpType_struct*, i8* } @smpGlobal_rand(%struct.smpType_struct* %47, i8* %48, i32 1, %struct.obj_struct* %max)
  %50 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = extractvalue { %struct.smpType_struct*, i8* } %49, 0
  store %struct.smpType_struct* %52, %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = extractvalue { %struct.smpType_struct*, i8* } %49, 1
  store i8* %54, i8** %53, align 1
  %55 = bitcast %struct.obj_struct* %elem to i8*
  %56 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %55, i8* %56, i64 16, i32 8, i1 false)
  %57 = bitcast %struct.obj_struct* %elem to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = load %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = load i8** %60, align 1
  %62 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %59, i8* %61, i32 1, %struct.obj_struct* %list)
  %63 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 0
  %65 = extractvalue { %struct.smpType_struct*, i8* } %62, 0
  store %struct.smpType_struct* %65, %struct.smpType_struct** %64, align 1
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 1
  %67 = extractvalue { %struct.smpType_struct*, i8* } %62, 1
  store i8* %67, i8** %66, align 1
  %68 = bitcast %struct.obj_struct* %list to i8*
  %69 = bitcast %struct.obj_struct* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %68, i8* %69, i64 16, i32 8, i1 false)
  br label %70

; <label>:70                                      ; preds = %46
  %71 = load i32* %i1, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %i1, align 4
  br label %41

; <label>:73                                      ; preds = %41
  %74 = bitcast %struct.obj_struct* %list to { %struct.smpType_struct*, i8* }*
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %74, i32 0, i32 0
  %76 = load %struct.smpType_struct** %75, align 1
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %74, i32 0, i32 1
  %78 = load i8** %77, align 1
  %79 = call { %struct.smpType_struct*, i8* } @smpList_nsort(%struct.smpType_struct* %76, i8* %78, i32 0, %struct.obj_struct* null)
  %80 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 0
  %82 = extractvalue { %struct.smpType_struct*, i8* } %79, 0
  store %struct.smpType_struct* %82, %struct.smpType_struct** %81, align 1
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 1
  %84 = extractvalue { %struct.smpType_struct*, i8* } %79, 1
  store i8* %84, i8** %83, align 1
  %85 = bitcast %struct.obj_struct* %list to i8*
  %86 = bitcast %struct.obj_struct* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %85, i8* %86, i64 16, i32 8, i1 false)
  %87 = bitcast %struct.obj_struct* %list to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = load %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = load i8** %90, align 1
  %92 = call i32 @list_clear_all(%struct.smpType_struct* %89, i8* %91)
  br label %93

; <label>:93                                      ; preds = %73
  %94 = load i64* %i, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %i, align 8
  br label %13

; <label>:96                                      ; preds = %13
  %97 = call i32 @gettimeofday(%struct.timeval* %tv, i8* null)
  %98 = getelementptr inbounds %struct.timeval* %tv, i32 0, i32 0
  %99 = load i64* %98, align 8
  %100 = sitofp i64 %99 to double
  %101 = getelementptr inbounds %struct.timeval* %tv, i32 0, i32 1
  %102 = load i32* %101, align 4
  %103 = sitofp i32 %102 to double
  %104 = fdiv double %103, 1.000000e+06
  %105 = fadd double %100, %104
  store double %105, double* %finish, align 8
  %106 = load double* %finish, align 8
  %107 = load double* %start, align 8
  %108 = fsub double %106, %107
  %109 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([28 x i8]* @.str85, i32 0, i32 0), double %108)
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpList_nsort(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %cmp_fun = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = bitcast %struct.obj_struct* %cmp_fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %10 = load i32* %2, align 4
  %11 = icmp sgt i32 %10, 0
  br i1 %11, label %12, label %64

; <label>:12                                      ; preds = %0
  %13 = load %struct.obj_struct** %3, align 8
  %14 = getelementptr inbounds %struct.obj_struct* %13, i64 0
  %15 = bitcast %struct.obj_struct* %cmp_fun to i8*
  %16 = bitcast %struct.obj_struct* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 16, i32 8, i1 false)
  %17 = getelementptr inbounds %struct.obj_struct* %cmp_fun, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 8
  %19 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %18, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %63, label %21

; <label>:21                                      ; preds = %12
  %22 = getelementptr inbounds %struct.obj_struct* %cmp_fun, i32 0, i32 0
  %23 = load %struct.smpType_struct** %22, align 8
  %24 = getelementptr inbounds %struct.smpType_struct* %23, i32 0, i32 0
  %25 = load i8** %24, align 8
  %26 = call i32 @strcmp(i8* %25, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %31

; <label>:28                                      ; preds = %21
  %29 = bitcast %struct.obj_struct* %1 to i8*
  %30 = bitcast %struct.obj_struct* %cmp_fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 16, i32 8, i1 false)
  br label %87

; <label>:31                                      ; preds = %21
  %32 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %33 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 0
  %35 = extractvalue { %struct.smpType_struct*, i8* } %32, 0
  store %struct.smpType_struct* %35, %struct.smpType_struct** %34, align 1
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 1
  %37 = extractvalue { %struct.smpType_struct*, i8* } %32, 1
  store i8* %37, i8** %36, align 1
  %38 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %39 = load i8** %38, align 8
  %40 = bitcast i8* %39 to %struct.smpType_struct*
  %41 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %40, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %87

; <label>:63                                      ; preds = %12
  br label %64

; <label>:64                                      ; preds = %63, %0
  %65 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = load %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = load i8** %68, align 1
  %70 = call i64 @smpList_length_clong(%struct.smpType_struct* %67, i8* %69)
  %71 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = load i8** %74, align 1
  %76 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 0
  %78 = load %struct.smpType_struct** %77, align 1
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 1
  %80 = load i8** %79, align 1
  %81 = call { %struct.smpType_struct*, i8* } @smpList_sort_rec(%struct.smpType_struct* %73, i8* %75, i64 %70, %struct.smpType_struct* %78, i8* %80)
  %82 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 0
  %84 = extractvalue { %struct.smpType_struct*, i8* } %81, 0
  store %struct.smpType_struct* %84, %struct.smpType_struct** %83, align 1
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 1
  %86 = extractvalue { %struct.smpType_struct*, i8* } %81, 1
  store i8* %86, i8** %85, align 1
  br label %87

; <label>:87                                      ; preds = %64, %31, %28
  %88 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %89 = load { %struct.smpType_struct*, i8* }* %88, align 1
  ret { %struct.smpType_struct*, i8* } %89
}

define i32 @test_hash() nounwind {
  %hash = alloca %struct.obj_struct, align 8
  %key = alloca %struct.obj_struct, align 8
  %key2 = alloca %struct.obj_struct, align 8
  %val = alloca %struct.obj_struct, align 8
  %pair = alloca %struct.obj_struct, align 8
  %pair2 = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %get = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = call { %struct.smpType_struct*, i8* } @smpHash_init()
  %6 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  %8 = extractvalue { %struct.smpType_struct*, i8* } %5, 0
  store %struct.smpType_struct* %8, %struct.smpType_struct** %7, align 1
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  %10 = extractvalue { %struct.smpType_struct*, i8* } %5, 1
  store i8* %10, i8** %9, align 1
  %11 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([12 x i8]* @.str86, i32 0, i32 0))
  %12 = bitcast %struct.obj_struct* %key to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([10 x i8]* @.str87, i32 0, i32 0))
  %18 = bitcast %struct.obj_struct* %key2 to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = call { %struct.smpType_struct*, i8* } @smpFloat_init_cdouble(double 3.141590e+00)
  %24 = bitcast %struct.obj_struct* %val to { %struct.smpType_struct*, i8* }*
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 0
  %26 = extractvalue { %struct.smpType_struct*, i8* } %23, 0
  store %struct.smpType_struct* %26, %struct.smpType_struct** %25, align 1
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 1
  %28 = extractvalue { %struct.smpType_struct*, i8* } %23, 1
  store i8* %28, i8** %27, align 1
  %29 = bitcast %struct.obj_struct* %key to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = load i8** %32, align 1
  %34 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %31, i8* %33, i32 1, %struct.obj_struct* %val)
  %35 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = bitcast %struct.obj_struct* %key2 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = load %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = load i8** %43, align 1
  %45 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %42, i8* %44, i32 1, %struct.obj_struct* %val)
  %46 = bitcast %struct.obj_struct* %pair2 to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = extractvalue { %struct.smpType_struct*, i8* } %45, 0
  store %struct.smpType_struct* %48, %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = extractvalue { %struct.smpType_struct*, i8* } %45, 1
  store i8* %50, i8** %49, align 1
  %51 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = load %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = load i8** %54, align 1
  %56 = call { %struct.smpType_struct*, i8* } @smpHash_add_now(%struct.smpType_struct* %53, i8* %55, i32 1, %struct.obj_struct* %pair)
  %57 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = extractvalue { %struct.smpType_struct*, i8* } %56, 0
  store %struct.smpType_struct* %59, %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = extractvalue { %struct.smpType_struct*, i8* } %56, 1
  store i8* %61, i8** %60, align 1
  %62 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = load %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = load i8** %65, align 1
  %67 = call { %struct.smpType_struct*, i8* } @smpHash_add_now(%struct.smpType_struct* %64, i8* %66, i32 1, %struct.obj_struct* %pair2)
  %68 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 0
  %70 = extractvalue { %struct.smpType_struct*, i8* } %67, 0
  store %struct.smpType_struct* %70, %struct.smpType_struct** %69, align 1
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 1
  %72 = extractvalue { %struct.smpType_struct*, i8* } %67, 1
  store i8* %72, i8** %71, align 1
  %73 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = load %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = load i8** %76, align 1
  %78 = call { %struct.smpType_struct*, i8* } @smp_println(%struct.smpType_struct* %75, i8* %77)
  %79 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %79, i32 0, i32 0
  %81 = extractvalue { %struct.smpType_struct*, i8* } %78, 0
  store %struct.smpType_struct* %81, %struct.smpType_struct** %80, align 1
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %79, i32 0, i32 1
  %83 = extractvalue { %struct.smpType_struct*, i8* } %78, 1
  store i8* %83, i8** %82, align 1
  %84 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = load %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = load i8** %87, align 1
  %89 = call { %struct.smpType_struct*, i8* } @smpHash_at(%struct.smpType_struct* %86, i8* %88, i32 1, %struct.obj_struct* %key)
  %90 = bitcast %struct.obj_struct* %get to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = extractvalue { %struct.smpType_struct*, i8* } %89, 0
  store %struct.smpType_struct* %92, %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = extractvalue { %struct.smpType_struct*, i8* } %89, 1
  store i8* %94, i8** %93, align 1
  %95 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smp_printf(i8* getelementptr inbounds ([8 x i8]* @.str88, i32 0, i32 0), i32 1, %struct.obj_struct* %get)
  %96 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpHash_add_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([5 x i8]* @.str40, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %63, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = getelementptr inbounds %struct.obj_struct* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %15
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %96

; <label>:29                                      ; preds = %15
  %30 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str40, i32 0, i32 0))
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %37 = load i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.smpType_struct*
  %39 = load %struct.obj_struct** %3, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 0
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %38, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %96

; <label>:63                                      ; preds = %0
  %64 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %65 = load i8** %64, align 8
  %66 = bitcast i8* %65 to %struct.smpHash_struct*
  %67 = load %struct.obj_struct** %3, align 8
  %68 = getelementptr inbounds %struct.obj_struct* %67, i64 0
  %69 = bitcast %struct.obj_struct* %68 to { %struct.smpType_struct*, i8* }*
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 0
  %71 = load %struct.smpType_struct** %70, align 1
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 1
  %73 = load i8** %72, align 1
  %74 = call i32 @smpHash_core_add_now(%struct.smpHash_struct* %66, %struct.smpType_struct* %71, i8* %73)
  %75 = load %struct.obj_struct** %3, align 8
  %76 = getelementptr inbounds %struct.obj_struct* %75, i64 0
  %77 = getelementptr inbounds %struct.obj_struct* %76, i32 0, i32 1
  %78 = load i8** %77, align 8
  %79 = bitcast i8* %78 to %struct.smpPair_struct*
  %80 = getelementptr inbounds %struct.smpPair_struct* %79, i32 0, i32 1
  %81 = load %struct.obj_struct** %80, align 8
  %82 = icmp ne %struct.obj_struct* %81, null
  br i1 %82, label %83, label %93

; <label>:83                                      ; preds = %63
  %84 = load %struct.obj_struct** %3, align 8
  %85 = getelementptr inbounds %struct.obj_struct* %84, i64 0
  %86 = getelementptr inbounds %struct.obj_struct* %85, i32 0, i32 1
  %87 = load i8** %86, align 8
  %88 = bitcast i8* %87 to %struct.smpPair_struct*
  %89 = getelementptr inbounds %struct.smpPair_struct* %88, i32 0, i32 1
  %90 = load %struct.obj_struct** %89, align 8
  %91 = bitcast %struct.obj_struct* %1 to i8*
  %92 = bitcast %struct.obj_struct* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %91, i8* %92, i64 16, i32 8, i1 false)
  br label %95

; <label>:93                                      ; preds = %63
  %94 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %94, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %95

; <label>:95                                      ; preds = %93, %83
  br label %96

; <label>:96                                      ; preds = %95, %29, %24
  %97 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %98 = load { %struct.smpType_struct*, i8* }* %97, align 1
  ret { %struct.smpType_struct*, i8* } %98
}

define { %struct.smpType_struct*, i8* } @smpHash_at(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %hash = alloca %struct.smpHash_struct, align 8
  %index = alloca i32, align 4
  %code = alloca i32, align 4
  %list = alloca %struct.obj_struct*, align 8
  %pair = alloca %struct.obj_struct, align 8
  %equal_test = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpHash_struct*
  %10 = bitcast %struct.smpHash_struct* %hash to i8*
  %11 = bitcast %struct.smpHash_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 48, i32 8, i1 false)
  store i32 0, i32* %index, align 4
  %12 = load %struct.obj_struct** %3, align 8
  %13 = getelementptr inbounds %struct.obj_struct* %12, i64 0
  %14 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = load %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = load i8** %17, align 1
  %19 = call i32 @obj_hash(i32* %index, %struct.smpType_struct* %16, i8* %18)
  store i32 %19, i32* %code, align 4
  %20 = load i32* %code, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %31

; <label>:22                                      ; preds = %0
  %23 = load i32* %code, align 4
  %24 = sext i32 %23 to i64
  %25 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %24)
  %26 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = extractvalue { %struct.smpType_struct*, i8* } %25, 0
  store %struct.smpType_struct* %28, %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = extractvalue { %struct.smpType_struct*, i8* } %25, 1
  store i8* %30, i8** %29, align 1
  br label %147

; <label>:31                                      ; preds = %0
  %32 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 2
  %33 = load i64* %32, align 8
  %34 = load i32* %index, align 4
  %35 = sext i32 %34 to i64
  %36 = urem i64 %35, %33
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %index, align 4
  %38 = load i32* %index, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %41 = load %struct.obj_struct** %40, align 8
  %42 = getelementptr inbounds %struct.obj_struct* %41, i64 %39
  %43 = getelementptr inbounds %struct.obj_struct* %42, i32 0, i32 1
  %44 = load i8** %43, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %60, label %46

; <label>:46                                      ; preds = %31
  %47 = load i32* %index, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %50 = load %struct.obj_struct** %49, align 8
  %51 = getelementptr inbounds %struct.obj_struct* %50, i64 %48
  %52 = getelementptr inbounds %struct.obj_struct* %51, i32 0, i32 0
  %53 = load %struct.smpType_struct** %52, align 8
  %54 = getelementptr inbounds %struct.smpType_struct* %53, i32 0, i32 1
  %55 = load i32* %54, align 4
  %56 = load i32* @smpType_id_list, align 4
  %57 = icmp eq i32 %55, %56
  %58 = zext i1 %57 to i32
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %62

; <label>:60                                      ; preds = %46, %31
  %61 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %147

; <label>:62                                      ; preds = %46
  %63 = load i32* %index, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %66 = load %struct.obj_struct** %65, align 8
  %67 = getelementptr inbounds %struct.obj_struct* %66, i64 %64
  store %struct.obj_struct* %67, %struct.obj_struct** %list, align 8
  br label %68

; <label>:68                                      ; preds = %133, %62
  %69 = load %struct.obj_struct** %list, align 8
  %70 = icmp ne %struct.obj_struct* %69, null
  br i1 %70, label %71, label %140

; <label>:71                                      ; preds = %68
  %72 = load %struct.obj_struct** %list, align 8
  %73 = getelementptr inbounds %struct.obj_struct* %72, i32 0, i32 1
  %74 = load i8** %73, align 8
  %75 = bitcast i8* %74 to %struct.smpPair_struct*
  %76 = getelementptr inbounds %struct.smpPair_struct* %75, i32 0, i32 0
  %77 = bitcast %struct.obj_struct* %pair to i8*
  %78 = bitcast %struct.obj_struct* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %77, i8* %78, i64 16, i32 8, i1 false)
  %79 = load %struct.obj_struct** %3, align 8
  %80 = getelementptr inbounds %struct.obj_struct* %79, i64 0
  %81 = getelementptr inbounds %struct.obj_struct* %pair, i32 0, i32 1
  %82 = load i8** %81, align 8
  %83 = bitcast i8* %82 to %struct.smpPair_struct*
  %84 = getelementptr inbounds %struct.smpPair_struct* %83, i32 0, i32 0
  %85 = bitcast %struct.obj_struct* %80 to { %struct.smpType_struct*, i8* }*
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 0
  %87 = load %struct.smpType_struct** %86, align 1
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 1
  %89 = load i8** %88, align 1
  %90 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %87, i8* %89, i8* getelementptr inbounds ([5 x i8]* @.str52, i32 0, i32 0), i32 1, %struct.obj_struct* %84)
  %91 = bitcast %struct.obj_struct* %equal_test to { %struct.smpType_struct*, i8* }*
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 0
  %93 = extractvalue { %struct.smpType_struct*, i8* } %90, 0
  store %struct.smpType_struct* %93, %struct.smpType_struct** %92, align 1
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 1
  %95 = extractvalue { %struct.smpType_struct*, i8* } %90, 1
  store i8* %95, i8** %94, align 1
  %96 = bitcast %struct.obj_struct* %equal_test to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = load %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = load i8** %99, align 1
  %101 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %98, i8* %100)
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %103, label %106

; <label>:103                                     ; preds = %71
  %104 = bitcast %struct.obj_struct* %1 to i8*
  %105 = bitcast %struct.obj_struct* %equal_test to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %104, i8* %105, i64 16, i32 8, i1 false)
  br label %147

; <label>:106                                     ; preds = %71
  %107 = getelementptr inbounds %struct.obj_struct* %pair, i32 0, i32 0
  %108 = load %struct.smpType_struct** %107, align 8
  %109 = getelementptr inbounds %struct.smpType_struct* %108, i32 0, i32 1
  %110 = load i32* %109, align 4
  %111 = load i32* @smpType_id_list, align 4
  %112 = icmp eq i32 %110, %111
  br i1 %112, label %113, label %133

; <label>:113                                     ; preds = %106
  %114 = bitcast %struct.obj_struct* %equal_test to { %struct.smpType_struct*, i8* }*
  %115 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 0
  %116 = load %struct.smpType_struct** %115, align 1
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 1
  %118 = load i8** %117, align 1
  %119 = call i32 @smpBool_to_cint(%struct.smpType_struct* %116, i8* %118)
  %120 = icmp ne i32 %119, 0
  br i1 %120, label %121, label %133

; <label>:121                                     ; preds = %113
  %122 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 0
  %124 = load %struct.smpType_struct** %123, align 1
  %125 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 1
  %126 = load i8** %125, align 1
  %127 = call { %struct.smpType_struct*, i8* } @smpList_cdr(%struct.smpType_struct* %124, i8* %126, i32 0, %struct.obj_struct* null)
  %128 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %129 = getelementptr { %struct.smpType_struct*, i8* }* %128, i32 0, i32 0
  %130 = extractvalue { %struct.smpType_struct*, i8* } %127, 0
  store %struct.smpType_struct* %130, %struct.smpType_struct** %129, align 1
  %131 = getelementptr { %struct.smpType_struct*, i8* }* %128, i32 0, i32 1
  %132 = extractvalue { %struct.smpType_struct*, i8* } %127, 1
  store i8* %132, i8** %131, align 1
  br label %147

; <label>:133                                     ; preds = %113, %106
  %134 = load %struct.obj_struct** %list, align 8
  %135 = getelementptr inbounds %struct.obj_struct* %134, i32 0, i32 1
  %136 = load i8** %135, align 8
  %137 = bitcast i8* %136 to %struct.smpPair_struct*
  %138 = getelementptr inbounds %struct.smpPair_struct* %137, i32 0, i32 1
  %139 = load %struct.obj_struct** %138, align 8
  store %struct.obj_struct* %139, %struct.obj_struct** %list, align 8
  br label %68

; <label>:140                                     ; preds = %68
  %141 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %142 = load i8** %141, align 8
  %143 = bitcast i8* %142 to %struct.smpHash_struct*
  %144 = getelementptr inbounds %struct.smpHash_struct* %143, i32 0, i32 1
  %145 = bitcast %struct.obj_struct* %1 to i8*
  %146 = bitcast %struct.obj_struct* %144 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %145, i8* %146, i64 16, i32 8, i1 false)
  br label %147

; <label>:147                                     ; preds = %140, %121, %103, %60, %22
  %148 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %149 = load { %struct.smpType_struct*, i8* }* %148, align 1
  ret { %struct.smpType_struct*, i8* } %149
}

define i32 @test_external_classes() nounwind {
  %1 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([5 x i8]* @.str89, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 0)
  ret i32 0
}

define i32 @test_object_speed() nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 20000)
  %4 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @speedtest_fun(%struct.smpType_struct* %11, i8* %13, i32 0, %struct.obj_struct* null)
  %15 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @speedtest_fun(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %num = alloca %struct.obj_struct, align 8
  %square = alloca %struct.obj_struct, align 8
  %err = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %max = alloca %struct.obj_struct, align 8
  %chain2 = alloca %struct.obj_struct, align 8
  %chain = alloca %struct.obj_struct, align 8
  %inc = alloca %struct.obj_struct, align 8
  %tmp = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load i32* %2, align 4
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %11, label %16

; <label>:11                                      ; preds = %0
  %12 = load %struct.obj_struct** %3, align 8
  %13 = getelementptr inbounds %struct.obj_struct* %12, i64 0
  %14 = bitcast %struct.obj_struct* %num to i8*
  %15 = bitcast %struct.obj_struct* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 16, i32 8, i1 false)
  br label %25

; <label>:16                                      ; preds = %0
  %17 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 0)
  %18 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = bitcast %struct.obj_struct* %num to i8*
  %24 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 16, i32 8, i1 false)
  br label %25

; <label>:25                                      ; preds = %16, %11
  %26 = bitcast %struct.obj_struct* %num to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smpInteger_mul(%struct.smpType_struct* %28, i8* %30, i32 1, %struct.obj_struct* %num)
  %32 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = bitcast %struct.obj_struct* %square to i8*
  %38 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 16, i32 8, i1 false)
  %39 = bitcast %struct.obj_struct* %max to i8*
  %40 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false)
  %41 = bitcast %struct.obj_struct* %num to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = bitcast %struct.obj_struct* %max to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = load %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = load i8** %49, align 1
  %51 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %43, i8* %45, %struct.smpType_struct* %48, i8* %50)
  %52 = icmp sge i32 %51, 0
  br i1 %52, label %53, label %55

; <label>:53                                      ; preds = %25
  %54 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %113

; <label>:55                                      ; preds = %25
  %56 = bitcast %struct.obj_struct* %num to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = load %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = load i8** %59, align 1
  %61 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %58, i8* %60, i32 1, %struct.obj_struct* @smp_nil)
  %62 = bitcast %struct.obj_struct* %chain2 to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = extractvalue { %struct.smpType_struct*, i8* } %61, 0
  store %struct.smpType_struct* %64, %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = extractvalue { %struct.smpType_struct*, i8* } %61, 1
  store i8* %66, i8** %65, align 1
  %67 = bitcast %struct.obj_struct* %square to { %struct.smpType_struct*, i8* }*
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 1
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 1
  %71 = load i8** %70, align 1
  %72 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %69, i8* %71, i32 1, %struct.obj_struct* %chain2)
  %73 = bitcast %struct.obj_struct* %chain to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  %78 = bitcast %struct.obj_struct* %num to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = load %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = load i8** %81, align 1
  %83 = call { %struct.smpType_struct*, i8* } @smpInteger_inc(%struct.smpType_struct* %80, i8* %82, i32 0, %struct.obj_struct* null)
  %84 = bitcast %struct.obj_struct* %inc to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = extractvalue { %struct.smpType_struct*, i8* } %83, 0
  store %struct.smpType_struct* %86, %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = extractvalue { %struct.smpType_struct*, i8* } %83, 1
  store i8* %88, i8** %87, align 1
  %89 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %89, i32 0, i32 0
  %91 = load %struct.smpType_struct** %90, align 1
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %89, i32 0, i32 1
  %93 = load i8** %92, align 1
  %94 = call { %struct.smpType_struct*, i8* } @speedtest_fun(%struct.smpType_struct* %91, i8* %93, i32 1, %struct.obj_struct* %inc)
  %95 = bitcast %struct.obj_struct* %tmp to { %struct.smpType_struct*, i8* }*
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 0
  %97 = extractvalue { %struct.smpType_struct*, i8* } %94, 0
  store %struct.smpType_struct* %97, %struct.smpType_struct** %96, align 1
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 1
  %99 = extractvalue { %struct.smpType_struct*, i8* } %94, 1
  store i8* %99, i8** %98, align 1
  %100 = bitcast %struct.obj_struct* %chain to { %struct.smpType_struct*, i8* }*
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 0
  %102 = load %struct.smpType_struct** %101, align 1
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 1
  %104 = load i8** %103, align 1
  %105 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %102, i8* %104, i32 1, %struct.obj_struct* %tmp)
  %106 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 0
  %108 = extractvalue { %struct.smpType_struct*, i8* } %105, 0
  store %struct.smpType_struct* %108, %struct.smpType_struct** %107, align 1
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 1
  %110 = extractvalue { %struct.smpType_struct*, i8* } %105, 1
  store i8* %110, i8** %109, align 1
  %111 = bitcast %struct.obj_struct* %1 to i8*
  %112 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %111, i8* %112, i64 16, i32 8, i1 false)
  br label %113

; <label>:113                                     ; preds = %55, %53
  %114 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %115 = load { %struct.smpType_struct*, i8* }* %114, align 1
  ret { %struct.smpType_struct*, i8* } %115
}

define { %struct.smpType_struct*, i8* } @smpInteger_mul(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %res = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_int, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %41

; <label>:17                                      ; preds = %0
  %18 = call noalias i8* @GC_malloc(i64 16)
  %19 = bitcast i8* %18 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %19, [1 x %struct.__mpz_struct]** %z, align 8
  %20 = load [1 x %struct.__mpz_struct]** %z, align 8
  %21 = getelementptr inbounds [1 x %struct.__mpz_struct]* %20, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %21)
  %22 = load [1 x %struct.__mpz_struct]** %z, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpz_struct]* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to [1 x %struct.__mpz_struct]*
  %27 = getelementptr inbounds [1 x %struct.__mpz_struct]* %26, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpz_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpz_struct]* %32, i32 0, i32 0
  call void @__gmpz_mul(%struct.__mpz_struct* %23, %struct.__mpz_struct* %27, %struct.__mpz_struct* %33)
  %34 = load [1 x %struct.__mpz_struct]** %z, align 8
  %35 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %34)
  %36 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  br label %110

; <label>:41                                      ; preds = %0
  %42 = load %struct.obj_struct** %3, align 8
  %43 = getelementptr inbounds %struct.obj_struct* %42, i64 0
  %44 = getelementptr inbounds %struct.obj_struct* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 8
  %46 = getelementptr inbounds %struct.smpType_struct* %45, i32 0, i32 1
  %47 = load i32* %46, align 4
  %48 = load i32* @smpType_id_float, align 4
  %49 = icmp eq i32 %47, %48
  br i1 %49, label %50, label %76

; <label>:50                                      ; preds = %41
  %51 = call noalias i8* @GC_malloc(i64 32)
  %52 = bitcast i8* %51 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %52, [1 x %struct.__mpfr_struct]** %res, align 8
  %53 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %54 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %53, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %54)
  %55 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %56 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %55, i32 0, i32 0
  %57 = load %struct.obj_struct** %3, align 8
  %58 = getelementptr inbounds %struct.obj_struct* %57, i64 0
  %59 = getelementptr inbounds %struct.obj_struct* %58, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to [1 x %struct.__mpfr_struct]*
  %62 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %61, i32 0, i32 0
  %63 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %64 = load i8** %63, align 8
  %65 = bitcast i8* %64 to [1 x %struct.__mpz_struct]*
  %66 = getelementptr inbounds [1 x %struct.__mpz_struct]* %65, i32 0, i32 0
  %67 = load i32* @smp_mpfr_rnd, align 4
  %68 = call i32 @mpfr_mul_z(%struct.__mpfr_struct* %56, %struct.__mpfr_struct* %62, %struct.__mpz_struct* %66, i32 %67)
  %69 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %70 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %69)
  %71 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = extractvalue { %struct.smpType_struct*, i8* } %70, 0
  store %struct.smpType_struct* %73, %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = extractvalue { %struct.smpType_struct*, i8* } %70, 1
  store i8* %75, i8** %74, align 1
  br label %110

; <label>:76                                      ; preds = %41
  %77 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %78 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %84 = load i8** %83, align 8
  %85 = bitcast i8* %84 to %struct.smpType_struct*
  %86 = load %struct.obj_struct** %3, align 8
  %87 = getelementptr inbounds %struct.obj_struct* %86, i64 0
  %88 = bitcast %struct.obj_struct* %87 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = load %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = load i8** %91, align 1
  %93 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %85, %struct.smpType_struct* %90, i8* %92)
  %94 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 0
  %96 = extractvalue { %struct.smpType_struct*, i8* } %93, 0
  store %struct.smpType_struct* %96, %struct.smpType_struct** %95, align 1
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 1
  %98 = extractvalue { %struct.smpType_struct*, i8* } %93, 1
  store i8* %98, i8** %97, align 1
  %99 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 0
  %101 = load %struct.smpType_struct** %100, align 1
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 1
  %103 = load i8** %102, align 1
  %104 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %101, i8* %103)
  %105 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 0
  %107 = extractvalue { %struct.smpType_struct*, i8* } %104, 0
  store %struct.smpType_struct* %107, %struct.smpType_struct** %106, align 1
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 1
  %109 = extractvalue { %struct.smpType_struct*, i8* } %104, 1
  store i8* %109, i8** %108, align 1
  br label %110

; <label>:110                                     ; preds = %76, %50, %17
  %111 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %112 = load { %struct.smpType_struct*, i8* }* %111, align 1
  ret { %struct.smpType_struct*, i8* } %112
}

define i32 @run_tests() nounwind {
  %successp = alloca i32, align 4
  store i32 1, i32* %successp, align 4
  %1 = call i32 @test_lists()
  %2 = load i32* %successp, align 4
  %3 = and i32 %2, %1
  store i32 %3, i32* %successp, align 4
  %4 = call i32 @test_listbuf()
  %5 = load i32* %successp, align 4
  %6 = and i32 %5, %4
  store i32 %6, i32* %successp, align 4
  %7 = call i32 @test_bool()
  %8 = load i32* %successp, align 4
  %9 = and i32 %8, %7
  store i32 %9, i32* %successp, align 4
  %10 = call i32 @test_nums()
  %11 = load i32* %successp, align 4
  %12 = and i32 %11, %10
  store i32 %12, i32* %successp, align 4
  %13 = load i32* %successp, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %0
  %16 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([21 x i8]* @.str90, i32 0, i32 0))
  br label %19

; <label>:17                                      ; preds = %0
  %18 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @.str91, i32 0, i32 0))
  br label %19

; <label>:19                                      ; preds = %17, %15
  %20 = load i32* %successp, align 4
  ret i32 %20
}

define i8* @smp_malloc_fun(i64 %bytes) nounwind {
  %1 = alloca i64, align 8
  store i64 %bytes, i64* %1, align 8
  %2 = load i64* %1, align 8
  %3 = call noalias i8* @GC_malloc(i64 %2)
  ret i8* %3
}

define i8* @smp_realloc_size(i8* %mem, i64 %old_bytes, i64 %new_bytes) nounwind {
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  store i8* %mem, i8** %1, align 8
  store i64 %old_bytes, i64* %2, align 8
  store i64 %new_bytes, i64* %3, align 8
  %4 = load i8** %1, align 8
  %5 = load i64* %3, align 8
  %6 = call i8* @GC_realloc(i8* %4, i64 %5)
  ret i8* %6
}

define void @smp_free_size(i8* %mem, i64 %bytes) nounwind {
  %1 = alloca i8*, align 8
  %2 = alloca i64, align 8
  store i8* %mem, i8** %1, align 8
  store i64 %bytes, i64* %2, align 8
  %3 = load i8** %1, align 8
  call void @GC_free(i8* %3)
  ret void
}

declare void @llvm.va_start(i8*) nounwind

declare i32 @fprintf(%struct.__sFILE*, i8*, ...)

declare i32 @vfprintf(%struct.__sFILE*, i8*, %struct.__va_list_tag*)

declare void @llvm.va_end(i8*) nounwind

define void @fatal_error(i8* %format, ...) nounwind {
  %1 = alloca i8*, align 8
  %args = alloca [1 x %struct.__va_list_tag], align 16
  %intentional_crash = alloca i32*, align 8
  store i8* %format, i8** %1, align 8
  %2 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %3 = bitcast %struct.__va_list_tag* %2 to i8*
  call void @llvm.va_start(i8* %3)
  %4 = load %struct.__sFILE** @__stderrp, align 8
  %5 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %4, i8* getelementptr inbounds ([14 x i8]* @.str93, i32 0, i32 0))
  %6 = load %struct.__sFILE** @__stderrp, align 8
  %7 = load i8** %1, align 8
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %9 = call i32 @vfprintf(%struct.__sFILE* %6, i8* %7, %struct.__va_list_tag* %8)
  %10 = load %struct.__sFILE** @__stderrp, align 8
  %11 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %10, i8* getelementptr inbounds ([2 x i8]* @.str13, i32 0, i32 0))
  %12 = getelementptr inbounds [1 x %struct.__va_list_tag]* %args, i32 0, i32 0
  %13 = bitcast %struct.__va_list_tag* %12 to i8*
  call void @llvm.va_end(i8* %13)
  store i32* null, i32** %intentional_crash, align 8
  %14 = load i32** %intentional_crash, align 8
  store i32 1, i32* %14, align 4
  ret void
}

define i32 @smpArray_create_class() nounwind {
  %array = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = alloca %struct.obj_struct, align 8
  %16 = alloca %struct.obj_struct, align 8
  %17 = alloca %struct.obj_struct, align 8
  %18 = alloca %struct.obj_struct, align 8
  %19 = alloca %struct.obj_struct, align 8
  %20 = alloca %struct.obj_struct, align 8
  %21 = alloca %struct.obj_struct, align 8
  %22 = alloca %struct.obj_struct, align 8
  %23 = alloca %struct.obj_struct, align 8
  %24 = alloca %struct.obj_struct, align 8
  %25 = alloca %struct.obj_struct, align 8
  %26 = alloca %struct.obj_struct, align 8
  %27 = alloca %struct.obj_struct, align 8
  %28 = alloca %struct.obj_struct, align 8
  %29 = alloca %struct.obj_struct, align 8
  %30 = alloca %struct.obj_struct, align 8
  %31 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 0)
  %32 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0))
  %33 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 0
  %35 = extractvalue { %struct.smpType_struct*, i8* } %32, 0
  store %struct.smpType_struct* %35, %struct.smpType_struct** %34, align 1
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 1
  %37 = extractvalue { %struct.smpType_struct*, i8* } %32, 1
  store i8* %37, i8** %36, align 1
  %38 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_add_now, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %39 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = extractvalue { %struct.smpType_struct*, i8* } %38, 0
  store %struct.smpType_struct* %41, %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = extractvalue { %struct.smpType_struct*, i8* } %38, 1
  store i8* %43, i8** %42, align 1
  %44 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 0
  %46 = load %struct.smpType_struct** %45, align 1
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 1
  %48 = load i8** %47, align 1
  %49 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = load %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = load i8** %52, align 1
  %54 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %46, i8* %48, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), %struct.smpType_struct* %51, i8* %53)
  %55 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 0
  %57 = extractvalue { %struct.smpType_struct*, i8* } %54, 0
  store %struct.smpType_struct* %57, %struct.smpType_struct** %56, align 1
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 1
  %59 = extractvalue { %struct.smpType_struct*, i8* } %54, 1
  store i8* %59, i8** %58, align 1
  %60 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_at, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %61 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 0
  %63 = extractvalue { %struct.smpType_struct*, i8* } %60, 0
  store %struct.smpType_struct* %63, %struct.smpType_struct** %62, align 1
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 1
  %65 = extractvalue { %struct.smpType_struct*, i8* } %60, 1
  store i8* %65, i8** %64, align 1
  %66 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = load %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = load i8** %69, align 1
  %71 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = load i8** %74, align 1
  %76 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %68, i8* %70, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str96, i32 0, i32 0), %struct.smpType_struct* %73, i8* %75)
  %77 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 0
  %79 = extractvalue { %struct.smpType_struct*, i8* } %76, 0
  store %struct.smpType_struct* %79, %struct.smpType_struct** %78, align 1
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 1
  %81 = extractvalue { %struct.smpType_struct*, i8* } %76, 1
  store i8* %81, i8** %80, align 1
  %82 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_at_assign, i32 3, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %83 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 0
  %85 = extractvalue { %struct.smpType_struct*, i8* } %82, 0
  store %struct.smpType_struct* %85, %struct.smpType_struct** %84, align 1
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 1
  %87 = extractvalue { %struct.smpType_struct*, i8* } %82, 1
  store i8* %87, i8** %86, align 1
  %88 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = load %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = load i8** %91, align 1
  %93 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %93, i32 0, i32 0
  %95 = load %struct.smpType_struct** %94, align 1
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %93, i32 0, i32 1
  %97 = load i8** %96, align 1
  %98 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %90, i8* %92, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str97, i32 0, i32 0), %struct.smpType_struct* %95, i8* %97)
  %99 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 0
  %101 = extractvalue { %struct.smpType_struct*, i8* } %98, 0
  store %struct.smpType_struct* %101, %struct.smpType_struct** %100, align 1
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 1
  %103 = extractvalue { %struct.smpType_struct*, i8* } %98, 1
  store i8* %103, i8** %102, align 1
  %104 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %105 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 0
  %107 = extractvalue { %struct.smpType_struct*, i8* } %104, 0
  store %struct.smpType_struct* %107, %struct.smpType_struct** %106, align 1
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 1
  %109 = extractvalue { %struct.smpType_struct*, i8* } %104, 1
  store i8* %109, i8** %108, align 1
  %110 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 0
  %112 = load %struct.smpType_struct** %111, align 1
  %113 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 1
  %114 = load i8** %113, align 1
  %115 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 0
  %117 = load %struct.smpType_struct** %116, align 1
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 1
  %119 = load i8** %118, align 1
  %120 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %112, i8* %114, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %117, i8* %119)
  %121 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %122 = getelementptr { %struct.smpType_struct*, i8* }* %121, i32 0, i32 0
  %123 = extractvalue { %struct.smpType_struct*, i8* } %120, 0
  store %struct.smpType_struct* %123, %struct.smpType_struct** %122, align 1
  %124 = getelementptr { %struct.smpType_struct*, i8* }* %121, i32 0, i32 1
  %125 = extractvalue { %struct.smpType_struct*, i8* } %120, 1
  store i8* %125, i8** %124, align 1
  %126 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_copy, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0))
  %127 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 0
  %129 = extractvalue { %struct.smpType_struct*, i8* } %126, 0
  store %struct.smpType_struct* %129, %struct.smpType_struct** %128, align 1
  %130 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 1
  %131 = extractvalue { %struct.smpType_struct*, i8* } %126, 1
  store i8* %131, i8** %130, align 1
  %132 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %133 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 0
  %134 = load %struct.smpType_struct** %133, align 1
  %135 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 1
  %136 = load i8** %135, align 1
  %137 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 0
  %139 = load %struct.smpType_struct** %138, align 1
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 1
  %141 = load i8** %140, align 1
  %142 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %134, i8* %136, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str98, i32 0, i32 0), %struct.smpType_struct* %139, i8* %141)
  %143 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %143, i32 0, i32 0
  %145 = extractvalue { %struct.smpType_struct*, i8* } %142, 0
  store %struct.smpType_struct* %145, %struct.smpType_struct** %144, align 1
  %146 = getelementptr { %struct.smpType_struct*, i8* }* %143, i32 0, i32 1
  %147 = extractvalue { %struct.smpType_struct*, i8* } %142, 1
  store i8* %147, i8** %146, align 1
  %148 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_map, i32 2, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %149 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %150 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 0
  %151 = extractvalue { %struct.smpType_struct*, i8* } %148, 0
  store %struct.smpType_struct* %151, %struct.smpType_struct** %150, align 1
  %152 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 1
  %153 = extractvalue { %struct.smpType_struct*, i8* } %148, 1
  store i8* %153, i8** %152, align 1
  %154 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 0
  %156 = load %struct.smpType_struct** %155, align 1
  %157 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 1
  %158 = load i8** %157, align 1
  %159 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %160 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 0
  %161 = load %struct.smpType_struct** %160, align 1
  %162 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 1
  %163 = load i8** %162, align 1
  %164 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %156, i8* %158, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str99, i32 0, i32 0), %struct.smpType_struct* %161, i8* %163)
  %165 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %166 = getelementptr { %struct.smpType_struct*, i8* }* %165, i32 0, i32 0
  %167 = extractvalue { %struct.smpType_struct*, i8* } %164, 0
  store %struct.smpType_struct* %167, %struct.smpType_struct** %166, align 1
  %168 = getelementptr { %struct.smpType_struct*, i8* }* %165, i32 0, i32 1
  %169 = extractvalue { %struct.smpType_struct*, i8* } %164, 1
  store i8* %169, i8** %168, align 1
  %170 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_reduce, i32 4, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %171 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %172 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 0
  %173 = extractvalue { %struct.smpType_struct*, i8* } %170, 0
  store %struct.smpType_struct* %173, %struct.smpType_struct** %172, align 1
  %174 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 1
  %175 = extractvalue { %struct.smpType_struct*, i8* } %170, 1
  store i8* %175, i8** %174, align 1
  %176 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %177 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 0
  %178 = load %struct.smpType_struct** %177, align 1
  %179 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 1
  %180 = load i8** %179, align 1
  %181 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %182 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 0
  %183 = load %struct.smpType_struct** %182, align 1
  %184 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 1
  %185 = load i8** %184, align 1
  %186 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %178, i8* %180, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str100, i32 0, i32 0), %struct.smpType_struct* %183, i8* %185)
  %187 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %188 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 0
  %189 = extractvalue { %struct.smpType_struct*, i8* } %186, 0
  store %struct.smpType_struct* %189, %struct.smpType_struct** %188, align 1
  %190 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 1
  %191 = extractvalue { %struct.smpType_struct*, i8* } %186, 1
  store i8* %191, i8** %190, align 1
  %192 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_reverse, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0))
  %193 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %194 = getelementptr { %struct.smpType_struct*, i8* }* %193, i32 0, i32 0
  %195 = extractvalue { %struct.smpType_struct*, i8* } %192, 0
  store %struct.smpType_struct* %195, %struct.smpType_struct** %194, align 1
  %196 = getelementptr { %struct.smpType_struct*, i8* }* %193, i32 0, i32 1
  %197 = extractvalue { %struct.smpType_struct*, i8* } %192, 1
  store i8* %197, i8** %196, align 1
  %198 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %198, i32 0, i32 0
  %200 = load %struct.smpType_struct** %199, align 1
  %201 = getelementptr { %struct.smpType_struct*, i8* }* %198, i32 0, i32 1
  %202 = load i8** %201, align 1
  %203 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %204 = getelementptr { %struct.smpType_struct*, i8* }* %203, i32 0, i32 0
  %205 = load %struct.smpType_struct** %204, align 1
  %206 = getelementptr { %struct.smpType_struct*, i8* }* %203, i32 0, i32 1
  %207 = load i8** %206, align 1
  %208 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %200, i8* %202, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str102, i32 0, i32 0), %struct.smpType_struct* %205, i8* %207)
  %209 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %210 = getelementptr { %struct.smpType_struct*, i8* }* %209, i32 0, i32 0
  %211 = extractvalue { %struct.smpType_struct*, i8* } %208, 0
  store %struct.smpType_struct* %211, %struct.smpType_struct** %210, align 1
  %212 = getelementptr { %struct.smpType_struct*, i8* }* %209, i32 0, i32 1
  %213 = extractvalue { %struct.smpType_struct*, i8* } %208, 1
  store i8* %213, i8** %212, align 1
  %214 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_reverse_now, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0))
  %215 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %216 = getelementptr { %struct.smpType_struct*, i8* }* %215, i32 0, i32 0
  %217 = extractvalue { %struct.smpType_struct*, i8* } %214, 0
  store %struct.smpType_struct* %217, %struct.smpType_struct** %216, align 1
  %218 = getelementptr { %struct.smpType_struct*, i8* }* %215, i32 0, i32 1
  %219 = extractvalue { %struct.smpType_struct*, i8* } %214, 1
  store i8* %219, i8** %218, align 1
  %220 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %221 = getelementptr { %struct.smpType_struct*, i8* }* %220, i32 0, i32 0
  %222 = load %struct.smpType_struct** %221, align 1
  %223 = getelementptr { %struct.smpType_struct*, i8* }* %220, i32 0, i32 1
  %224 = load i8** %223, align 1
  %225 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %226 = getelementptr { %struct.smpType_struct*, i8* }* %225, i32 0, i32 0
  %227 = load %struct.smpType_struct** %226, align 1
  %228 = getelementptr { %struct.smpType_struct*, i8* }* %225, i32 0, i32 1
  %229 = load i8** %228, align 1
  %230 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %222, i8* %224, i32 0, i8* getelementptr inbounds ([9 x i8]* @.str103, i32 0, i32 0), %struct.smpType_struct* %227, i8* %229)
  %231 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %232 = getelementptr { %struct.smpType_struct*, i8* }* %231, i32 0, i32 0
  %233 = extractvalue { %struct.smpType_struct*, i8* } %230, 0
  store %struct.smpType_struct* %233, %struct.smpType_struct** %232, align 1
  %234 = getelementptr { %struct.smpType_struct*, i8* }* %231, i32 0, i32 1
  %235 = extractvalue { %struct.smpType_struct*, i8* } %230, 1
  store i8* %235, i8** %234, align 1
  %236 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_sort, i32 3, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %237 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %238 = getelementptr { %struct.smpType_struct*, i8* }* %237, i32 0, i32 0
  %239 = extractvalue { %struct.smpType_struct*, i8* } %236, 0
  store %struct.smpType_struct* %239, %struct.smpType_struct** %238, align 1
  %240 = getelementptr { %struct.smpType_struct*, i8* }* %237, i32 0, i32 1
  %241 = extractvalue { %struct.smpType_struct*, i8* } %236, 1
  store i8* %241, i8** %240, align 1
  %242 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %243 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 0
  %244 = load %struct.smpType_struct** %243, align 1
  %245 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 1
  %246 = load i8** %245, align 1
  %247 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %248 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 0
  %249 = load %struct.smpType_struct** %248, align 1
  %250 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 1
  %251 = load i8** %250, align 1
  %252 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %244, i8* %246, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str104, i32 0, i32 0), %struct.smpType_struct* %249, i8* %251)
  %253 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %254 = getelementptr { %struct.smpType_struct*, i8* }* %253, i32 0, i32 0
  %255 = extractvalue { %struct.smpType_struct*, i8* } %252, 0
  store %struct.smpType_struct* %255, %struct.smpType_struct** %254, align 1
  %256 = getelementptr { %struct.smpType_struct*, i8* }* %253, i32 0, i32 1
  %257 = extractvalue { %struct.smpType_struct*, i8* } %252, 1
  store i8* %257, i8** %256, align 1
  %258 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_sort_now, i32 3, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %259 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %260 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 0
  %261 = extractvalue { %struct.smpType_struct*, i8* } %258, 0
  store %struct.smpType_struct* %261, %struct.smpType_struct** %260, align 1
  %262 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 1
  %263 = extractvalue { %struct.smpType_struct*, i8* } %258, 1
  store i8* %263, i8** %262, align 1
  %264 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %265 = getelementptr { %struct.smpType_struct*, i8* }* %264, i32 0, i32 0
  %266 = load %struct.smpType_struct** %265, align 1
  %267 = getelementptr { %struct.smpType_struct*, i8* }* %264, i32 0, i32 1
  %268 = load i8** %267, align 1
  %269 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %270 = getelementptr { %struct.smpType_struct*, i8* }* %269, i32 0, i32 0
  %271 = load %struct.smpType_struct** %270, align 1
  %272 = getelementptr { %struct.smpType_struct*, i8* }* %269, i32 0, i32 1
  %273 = load i8** %272, align 1
  %274 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %266, i8* %268, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str105, i32 0, i32 0), %struct.smpType_struct* %271, i8* %273)
  %275 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %276 = getelementptr { %struct.smpType_struct*, i8* }* %275, i32 0, i32 0
  %277 = extractvalue { %struct.smpType_struct*, i8* } %274, 0
  store %struct.smpType_struct* %277, %struct.smpType_struct** %276, align 1
  %278 = getelementptr { %struct.smpType_struct*, i8* }* %275, i32 0, i32 1
  %279 = extractvalue { %struct.smpType_struct*, i8* } %274, 1
  store i8* %279, i8** %278, align 1
  %280 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_to_a, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0))
  %281 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %282 = getelementptr { %struct.smpType_struct*, i8* }* %281, i32 0, i32 0
  %283 = extractvalue { %struct.smpType_struct*, i8* } %280, 0
  store %struct.smpType_struct* %283, %struct.smpType_struct** %282, align 1
  %284 = getelementptr { %struct.smpType_struct*, i8* }* %281, i32 0, i32 1
  %285 = extractvalue { %struct.smpType_struct*, i8* } %280, 1
  store i8* %285, i8** %284, align 1
  %286 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %287 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 0
  %288 = load %struct.smpType_struct** %287, align 1
  %289 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 1
  %290 = load i8** %289, align 1
  %291 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %292 = getelementptr { %struct.smpType_struct*, i8* }* %291, i32 0, i32 0
  %293 = load %struct.smpType_struct** %292, align 1
  %294 = getelementptr { %struct.smpType_struct*, i8* }* %291, i32 0, i32 1
  %295 = load i8** %294, align 1
  %296 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %288, i8* %290, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str106, i32 0, i32 0), %struct.smpType_struct* %293, i8* %295)
  %297 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %298 = getelementptr { %struct.smpType_struct*, i8* }* %297, i32 0, i32 0
  %299 = extractvalue { %struct.smpType_struct*, i8* } %296, 0
  store %struct.smpType_struct* %299, %struct.smpType_struct** %298, align 1
  %300 = getelementptr { %struct.smpType_struct*, i8* }* %297, i32 0, i32 1
  %301 = extractvalue { %struct.smpType_struct*, i8* } %296, 1
  store i8* %301, i8** %300, align 1
  %302 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_to_list, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %303 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %304 = getelementptr { %struct.smpType_struct*, i8* }* %303, i32 0, i32 0
  %305 = extractvalue { %struct.smpType_struct*, i8* } %302, 0
  store %struct.smpType_struct* %305, %struct.smpType_struct** %304, align 1
  %306 = getelementptr { %struct.smpType_struct*, i8* }* %303, i32 0, i32 1
  %307 = extractvalue { %struct.smpType_struct*, i8* } %302, 1
  store i8* %307, i8** %306, align 1
  %308 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %309 = getelementptr { %struct.smpType_struct*, i8* }* %308, i32 0, i32 0
  %310 = load %struct.smpType_struct** %309, align 1
  %311 = getelementptr { %struct.smpType_struct*, i8* }* %308, i32 0, i32 1
  %312 = load i8** %311, align 1
  %313 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %314 = getelementptr { %struct.smpType_struct*, i8* }* %313, i32 0, i32 0
  %315 = load %struct.smpType_struct** %314, align 1
  %316 = getelementptr { %struct.smpType_struct*, i8* }* %313, i32 0, i32 1
  %317 = load i8** %316, align 1
  %318 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %310, i8* %312, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str107, i32 0, i32 0), %struct.smpType_struct* %315, i8* %317)
  %319 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %320 = getelementptr { %struct.smpType_struct*, i8* }* %319, i32 0, i32 0
  %321 = extractvalue { %struct.smpType_struct*, i8* } %318, 0
  store %struct.smpType_struct* %321, %struct.smpType_struct** %320, align 1
  %322 = getelementptr { %struct.smpType_struct*, i8* }* %319, i32 0, i32 1
  %323 = extractvalue { %struct.smpType_struct*, i8* } %318, 1
  store i8* %323, i8** %322, align 1
  %324 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %325 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %326 = getelementptr { %struct.smpType_struct*, i8* }* %325, i32 0, i32 0
  %327 = extractvalue { %struct.smpType_struct*, i8* } %324, 0
  store %struct.smpType_struct* %327, %struct.smpType_struct** %326, align 1
  %328 = getelementptr { %struct.smpType_struct*, i8* }* %325, i32 0, i32 1
  %329 = extractvalue { %struct.smpType_struct*, i8* } %324, 1
  store i8* %329, i8** %328, align 1
  %330 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %331 = getelementptr { %struct.smpType_struct*, i8* }* %330, i32 0, i32 0
  %332 = load %struct.smpType_struct** %331, align 1
  %333 = getelementptr { %struct.smpType_struct*, i8* }* %330, i32 0, i32 1
  %334 = load i8** %333, align 1
  %335 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %336 = getelementptr { %struct.smpType_struct*, i8* }* %335, i32 0, i32 0
  %337 = load %struct.smpType_struct** %336, align 1
  %338 = getelementptr { %struct.smpType_struct*, i8* }* %335, i32 0, i32 1
  %339 = load i8** %338, align 1
  %340 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %332, i8* %334, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %337, i8* %339)
  %341 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %342 = getelementptr { %struct.smpType_struct*, i8* }* %341, i32 0, i32 0
  %343 = extractvalue { %struct.smpType_struct*, i8* } %340, 0
  store %struct.smpType_struct* %343, %struct.smpType_struct** %342, align 1
  %344 = getelementptr { %struct.smpType_struct*, i8* }* %341, i32 0, i32 1
  %345 = extractvalue { %struct.smpType_struct*, i8* } %340, 1
  store i8* %345, i8** %344, align 1
  %346 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpArray_write, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %347 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %348 = getelementptr { %struct.smpType_struct*, i8* }* %347, i32 0, i32 0
  %349 = extractvalue { %struct.smpType_struct*, i8* } %346, 0
  store %struct.smpType_struct* %349, %struct.smpType_struct** %348, align 1
  %350 = getelementptr { %struct.smpType_struct*, i8* }* %347, i32 0, i32 1
  %351 = extractvalue { %struct.smpType_struct*, i8* } %346, 1
  store i8* %351, i8** %350, align 1
  %352 = bitcast %struct.obj_struct* %array to { %struct.smpType_struct*, i8* }*
  %353 = getelementptr { %struct.smpType_struct*, i8* }* %352, i32 0, i32 0
  %354 = load %struct.smpType_struct** %353, align 1
  %355 = getelementptr { %struct.smpType_struct*, i8* }* %352, i32 0, i32 1
  %356 = load i8** %355, align 1
  %357 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %358 = getelementptr { %struct.smpType_struct*, i8* }* %357, i32 0, i32 0
  %359 = load %struct.smpType_struct** %358, align 1
  %360 = getelementptr { %struct.smpType_struct*, i8* }* %357, i32 0, i32 1
  %361 = load i8** %360, align 1
  %362 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %354, i8* %356, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), %struct.smpType_struct* %359, i8* %361)
  %363 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %364 = getelementptr { %struct.smpType_struct*, i8* }* %363, i32 0, i32 0
  %365 = extractvalue { %struct.smpType_struct*, i8* } %362, 0
  store %struct.smpType_struct* %365, %struct.smpType_struct** %364, align 1
  %366 = getelementptr { %struct.smpType_struct*, i8* }* %363, i32 0, i32 1
  %367 = extractvalue { %struct.smpType_struct*, i8* } %362, 1
  store i8* %367, i8** %366, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpArray_at(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %index = alloca i64, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %63, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = getelementptr inbounds %struct.obj_struct* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %15
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %96

; <label>:29                                      ; preds = %15
  %30 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %37 = load i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.smpType_struct*
  %39 = load %struct.obj_struct** %3, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 0
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %38, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %96

; <label>:63                                      ; preds = %0
  %64 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %65 = load %struct.obj_struct** %3, align 8
  %66 = getelementptr inbounds %struct.obj_struct* %65, i64 0
  %67 = bitcast %struct.obj_struct* %66 to { %struct.smpType_struct*, i8* }*
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 1
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 1
  %71 = load i8** %70, align 1
  %72 = call i64 @smpInteger_to_clong(%struct.obj_struct* %ret, %struct.smpType_struct* %69, i8* %71)
  store i64 %72, i64* %index, align 8
  %73 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = load %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = load i8** %76, align 1
  %78 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %75, i8* %77)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %83

; <label>:80                                      ; preds = %63
  %81 = bitcast %struct.obj_struct* %1 to i8*
  %82 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false)
  br label %96

; <label>:83                                      ; preds = %63
  %84 = load i64* %index, align 8
  %85 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 0
  %87 = load %struct.smpType_struct** %86, align 1
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 1
  %89 = load i8** %88, align 1
  %90 = call { %struct.smpType_struct*, i8* } @smpArray_at_c(%struct.smpType_struct* %87, i8* %89, i64 %84)
  %91 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 0
  %93 = extractvalue { %struct.smpType_struct*, i8* } %90, 0
  store %struct.smpType_struct* %93, %struct.smpType_struct** %92, align 1
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 1
  %95 = extractvalue { %struct.smpType_struct*, i8* } %90, 1
  store i8* %95, i8** %94, align 1
  br label %96

; <label>:96                                      ; preds = %83, %80, %29, %24
  %97 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %98 = load { %struct.smpType_struct*, i8* }* %97, align 1
  ret { %struct.smpType_struct*, i8* } %98
}

define { %struct.smpType_struct*, i8* } @smpArray_at_assign(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %index = alloca i64, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %63, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = getelementptr inbounds %struct.obj_struct* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %15
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %103

; <label>:29                                      ; preds = %15
  %30 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %37 = load i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.smpType_struct*
  %39 = load %struct.obj_struct** %3, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 0
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %38, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %103

; <label>:63                                      ; preds = %0
  %64 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %65 = load %struct.obj_struct** %3, align 8
  %66 = getelementptr inbounds %struct.obj_struct* %65, i64 0
  %67 = bitcast %struct.obj_struct* %66 to { %struct.smpType_struct*, i8* }*
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 1
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 1
  %71 = load i8** %70, align 1
  %72 = call i64 @smpInteger_to_clong(%struct.obj_struct* %ret, %struct.smpType_struct* %69, i8* %71)
  store i64 %72, i64* %index, align 8
  %73 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = load %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = load i8** %76, align 1
  %78 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %75, i8* %77)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %83

; <label>:80                                      ; preds = %63
  %81 = bitcast %struct.obj_struct* %1 to i8*
  %82 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false)
  br label %103

; <label>:83                                      ; preds = %63
  %84 = load i64* %index, align 8
  %85 = load %struct.obj_struct** %3, align 8
  %86 = getelementptr inbounds %struct.obj_struct* %85, i64 1
  %87 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = load %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = load i8** %90, align 1
  %92 = bitcast %struct.obj_struct* %86 to { %struct.smpType_struct*, i8* }*
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 0
  %94 = load %struct.smpType_struct** %93, align 1
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 1
  %96 = load i8** %95, align 1
  %97 = call { %struct.smpType_struct*, i8* } @smpArray_at_assign_c(%struct.smpType_struct* %89, i8* %91, i64 %84, %struct.smpType_struct* %94, i8* %96)
  %98 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 0
  %100 = extractvalue { %struct.smpType_struct*, i8* } %97, 0
  store %struct.smpType_struct* %100, %struct.smpType_struct** %99, align 1
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 1
  %102 = extractvalue { %struct.smpType_struct*, i8* } %97, 1
  store i8* %102, i8** %101, align 1
  br label %103

; <label>:103                                     ; preds = %83, %80, %29, %24
  %104 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %105 = load { %struct.smpType_struct*, i8* }* %104, align 1
  ret { %struct.smpType_struct*, i8* } %105
}

define { %struct.smpType_struct*, i8* } @smpArray_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpArray_struct*
  %10 = getelementptr inbounds %struct.smpArray_struct* %9, i32 0, i32 1
  store i64 0, i64* %10, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %12 = load i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.smpArray_struct*
  %14 = getelementptr inbounds %struct.smpArray_struct* %13, i32 0, i32 0
  %15 = load %struct.obj_struct** %14, align 8
  %16 = bitcast %struct.obj_struct* %15 to i8*
  call void @GC_free(i8* %16)
  %17 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpArray_copy(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %arr = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpArray_struct*
  %10 = bitcast %struct.smpArray_struct* %core to i8*
  %11 = bitcast %struct.smpArray_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 16, i32 8, i1 false)
  %12 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %13 = load i64* %12, align 8
  %14 = call i64 @next_power_of_2(i64 %13)
  %15 = mul i64 16, %14
  %16 = call noalias i8* @GC_malloc(i64 %15)
  %17 = bitcast i8* %16 to %struct.obj_struct*
  store %struct.obj_struct* %17, %struct.obj_struct** %arr, align 8
  %18 = load %struct.obj_struct** %arr, align 8
  %19 = bitcast %struct.obj_struct* %18 to i8*
  %20 = call i64 @llvm.objectsize.i64(i8* %19, i1 false)
  %21 = icmp ne i64 %20, -1
  br i1 %21, label %22, label %35

; <label>:22                                      ; preds = %0
  %23 = load %struct.obj_struct** %arr, align 8
  %24 = bitcast %struct.obj_struct* %23 to i8*
  %25 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %26 = load %struct.obj_struct** %25, align 8
  %27 = bitcast %struct.obj_struct* %26 to i8*
  %28 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %29 = load i64* %28, align 8
  %30 = mul i64 16, %29
  %31 = load %struct.obj_struct** %arr, align 8
  %32 = bitcast %struct.obj_struct* %31 to i8*
  %33 = call i64 @llvm.objectsize.i64(i8* %32, i1 false)
  %34 = call i8* @__memcpy_chk(i8* %24, i8* %27, i64 %30, i64 %33) nounwind
  br label %45

; <label>:35                                      ; preds = %0
  %36 = load %struct.obj_struct** %arr, align 8
  %37 = bitcast %struct.obj_struct* %36 to i8*
  %38 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %39 = load %struct.obj_struct** %38, align 8
  %40 = bitcast %struct.obj_struct* %39 to i8*
  %41 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %42 = load i64* %41, align 8
  %43 = mul i64 16, %42
  %44 = call i8* @__inline_memcpy_chk(i8* %37, i8* %40, i64 %43)
  br label %45

; <label>:45                                      ; preds = %35, %22
  %46 = phi i8* [ %34, %22 ], [ %44, %35 ]
  %47 = load %struct.obj_struct** %arr, align 8
  %48 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %49 = load i64* %48, align 8
  %50 = call { %struct.smpType_struct*, i8* } @smpArray_init_array(%struct.obj_struct* %47, i64 %49)
  %51 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = extractvalue { %struct.smpType_struct*, i8* } %50, 0
  store %struct.smpType_struct* %53, %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = extractvalue { %struct.smpType_struct*, i8* } %50, 1
  store i8* %55, i8** %54, align 1
  %56 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %57 = load { %struct.smpType_struct*, i8* }* %56, align 1
  ret { %struct.smpType_struct*, i8* } %57
}

define { %struct.smpType_struct*, i8* } @smpArray_map(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %a = alloca %struct.obj_struct*, align 8
  %i = alloca i64, align 8
  %length = alloca i64, align 8
  %res_arr = alloca %struct.obj_struct*, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %obj.coerce1, i8** %9
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %10 = load %struct.obj_struct** %3, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %10, i64 0
  %12 = getelementptr inbounds %struct.obj_struct* %11, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %13, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %64, label %16

; <label>:16                                      ; preds = %0
  %17 = load %struct.obj_struct** %3, align 8
  %18 = getelementptr inbounds %struct.obj_struct* %17, i64 0
  %19 = getelementptr inbounds %struct.obj_struct* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 8
  %21 = getelementptr inbounds %struct.smpType_struct* %20, i32 0, i32 0
  %22 = load i8** %21, align 8
  %23 = call i32 @strcmp(i8* %22, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %30

; <label>:25                                      ; preds = %16
  %26 = load %struct.obj_struct** %3, align 8
  %27 = getelementptr inbounds %struct.obj_struct* %26, i64 0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %138

; <label>:30                                      ; preds = %16
  %31 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %32 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %38 = load i8** %37, align 8
  %39 = bitcast i8* %38 to %struct.smpType_struct*
  %40 = load %struct.obj_struct** %3, align 8
  %41 = getelementptr inbounds %struct.obj_struct* %40, i64 0
  %42 = bitcast %struct.obj_struct* %41 to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = load %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = load i8** %45, align 1
  %47 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %39, %struct.smpType_struct* %44, i8* %46)
  %48 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = extractvalue { %struct.smpType_struct*, i8* } %47, 0
  store %struct.smpType_struct* %50, %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = extractvalue { %struct.smpType_struct*, i8* } %47, 1
  store i8* %52, i8** %51, align 1
  %53 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = load %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = load i8** %56, align 1
  %58 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %55, i8* %57)
  %59 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = extractvalue { %struct.smpType_struct*, i8* } %58, 0
  store %struct.smpType_struct* %61, %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = extractvalue { %struct.smpType_struct*, i8* } %58, 1
  store i8* %63, i8** %62, align 1
  br label %138

; <label>:64                                      ; preds = %0
  %65 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %66 = load i8** %65, align 8
  %67 = bitcast i8* %66 to %struct.smpArray_struct*
  %68 = getelementptr inbounds %struct.smpArray_struct* %67, i32 0, i32 0
  %69 = load %struct.obj_struct** %68, align 8
  store %struct.obj_struct* %69, %struct.obj_struct** %a, align 8
  %70 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %71 = load i8** %70, align 8
  %72 = bitcast i8* %71 to %struct.smpArray_struct*
  %73 = getelementptr inbounds %struct.smpArray_struct* %72, i32 0, i32 1
  %74 = load i64* %73, align 8
  store i64 %74, i64* %length, align 8
  %75 = load i64* %length, align 8
  %76 = mul i64 16, %75
  %77 = call noalias i8* @GC_malloc(i64 %76)
  %78 = bitcast i8* %77 to %struct.obj_struct*
  store %struct.obj_struct* %78, %struct.obj_struct** %res_arr, align 8
  store i64 0, i64* %i, align 8
  br label %79

; <label>:79                                      ; preds = %126, %64
  %80 = load i64* %i, align 8
  %81 = load i64* %length, align 8
  %82 = icmp ult i64 %80, %81
  br i1 %82, label %83, label %129

; <label>:83                                      ; preds = %79
  %84 = load i64* %i, align 8
  %85 = load %struct.obj_struct** %res_arr, align 8
  %86 = getelementptr inbounds %struct.obj_struct* %85, i64 %84
  %87 = load %struct.obj_struct** %3, align 8
  %88 = getelementptr inbounds %struct.obj_struct* %87, i64 0
  %89 = load i64* %i, align 8
  %90 = load %struct.obj_struct** %a, align 8
  %91 = getelementptr inbounds %struct.obj_struct* %90, i64 %89
  %92 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %93 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %94 = bitcast %struct.obj_struct* %88 to { %struct.smpType_struct*, i8* }*
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 0
  %96 = load %struct.smpType_struct** %95, align 1
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 1
  %98 = load i8** %97, align 1
  %99 = call { %struct.smpType_struct*, i8* } @smpFunction_call(%struct.smpType_struct* %92, i8* %93, %struct.smpType_struct* %96, i8* %98, i32 1, %struct.obj_struct* %91)
  %100 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 0
  %102 = extractvalue { %struct.smpType_struct*, i8* } %99, 0
  store %struct.smpType_struct* %102, %struct.smpType_struct** %101, align 1
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 1
  %104 = extractvalue { %struct.smpType_struct*, i8* } %99, 1
  store i8* %104, i8** %103, align 1
  %105 = bitcast %struct.obj_struct* %86 to i8*
  %106 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 16, i32 8, i1 false)
  %107 = load i64* %i, align 8
  %108 = load %struct.obj_struct** %res_arr, align 8
  %109 = getelementptr inbounds %struct.obj_struct* %108, i64 %107
  %110 = bitcast %struct.obj_struct* %109 to { %struct.smpType_struct*, i8* }*
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 0
  %112 = load %struct.smpType_struct** %111, align 1
  %113 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 1
  %114 = load i8** %113, align 1
  %115 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %112, i8* %114)
  %116 = icmp ne i32 %115, 0
  br i1 %116, label %117, label %125

; <label>:117                                     ; preds = %83
  %118 = load %struct.obj_struct** %res_arr, align 8
  %119 = bitcast %struct.obj_struct* %118 to i8*
  call void @GC_free(i8* %119)
  %120 = load i64* %i, align 8
  %121 = load %struct.obj_struct** %res_arr, align 8
  %122 = getelementptr inbounds %struct.obj_struct* %121, i64 %120
  %123 = bitcast %struct.obj_struct* %1 to i8*
  %124 = bitcast %struct.obj_struct* %122 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %123, i8* %124, i64 16, i32 8, i1 false)
  br label %138

; <label>:125                                     ; preds = %83
  br label %126

; <label>:126                                     ; preds = %125
  %127 = load i64* %i, align 8
  %128 = add i64 %127, 1
  store i64 %128, i64* %i, align 8
  br label %79

; <label>:129                                     ; preds = %79
  %130 = load %struct.obj_struct** %res_arr, align 8
  %131 = load i64* %length, align 8
  %132 = call { %struct.smpType_struct*, i8* } @smpArray_init_array(%struct.obj_struct* %130, i64 %131)
  %133 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 0
  %135 = extractvalue { %struct.smpType_struct*, i8* } %132, 0
  store %struct.smpType_struct* %135, %struct.smpType_struct** %134, align 1
  %136 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 1
  %137 = extractvalue { %struct.smpType_struct*, i8* } %132, 1
  store i8* %137, i8** %136, align 1
  br label %138

; <label>:138                                     ; preds = %129, %117, %30, %25
  %139 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %140 = load { %struct.smpType_struct*, i8* }* %139, align 1
  ret { %struct.smpType_struct*, i8* } %140
}

define { %struct.smpType_struct*, i8* } @smpArray_reduce(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %i = alloca i64, align 8
  %initial = alloca %struct.obj_struct, align 8
  %fun = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %pair = alloca [2 x %struct.obj_struct], align 16
  %6 = alloca %struct.obj_struct, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %obj.coerce1, i8** %9
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %11 = load i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.smpArray_struct*
  %13 = bitcast %struct.smpArray_struct* %core to i8*
  %14 = bitcast %struct.smpArray_struct* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  store i64 0, i64* %i, align 8
  %15 = bitcast %struct.obj_struct* %initial to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = bitcast %struct.obj_struct* %fun to i8*
  %19 = bitcast %struct.obj_struct* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 16, i32 8, i1 false)
  %20 = load i32* %2, align 4
  %21 = icmp sgt i32 %20, 1
  br i1 %21, label %22, label %27

; <label>:22                                      ; preds = %0
  %23 = load %struct.obj_struct** %3, align 8
  %24 = getelementptr inbounds %struct.obj_struct* %23, i64 1
  %25 = bitcast %struct.obj_struct* %initial to i8*
  %26 = bitcast %struct.obj_struct* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 16, i32 8, i1 false)
  br label %35

; <label>:27                                      ; preds = %0
  %28 = load i64* %i, align 8
  %29 = add i64 %28, 1
  store i64 %29, i64* %i, align 8
  %30 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %31 = load %struct.obj_struct** %30, align 8
  %32 = getelementptr inbounds %struct.obj_struct* %31, i64 %28
  %33 = bitcast %struct.obj_struct* %initial to i8*
  %34 = bitcast %struct.obj_struct* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 16, i32 8, i1 false)
  br label %35

; <label>:35                                      ; preds = %27, %22
  %36 = getelementptr inbounds %struct.obj_struct* %fun, i32 0, i32 0
  %37 = load %struct.smpType_struct** %36, align 8
  %38 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %37, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %82, label %40

; <label>:40                                      ; preds = %35
  %41 = getelementptr inbounds %struct.obj_struct* %fun, i32 0, i32 0
  %42 = load %struct.smpType_struct** %41, align 8
  %43 = getelementptr inbounds %struct.smpType_struct* %42, i32 0, i32 0
  %44 = load i8** %43, align 8
  %45 = call i32 @strcmp(i8* %44, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %50

; <label>:47                                      ; preds = %40
  %48 = bitcast %struct.obj_struct* %1 to i8*
  %49 = bitcast %struct.obj_struct* %fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 16, i32 8, i1 false)
  br label %136

; <label>:50                                      ; preds = %40
  %51 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %52 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = extractvalue { %struct.smpType_struct*, i8* } %51, 0
  store %struct.smpType_struct* %54, %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = extractvalue { %struct.smpType_struct*, i8* } %51, 1
  store i8* %56, i8** %55, align 1
  %57 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %58 = load i8** %57, align 8
  %59 = bitcast i8* %58 to %struct.smpType_struct*
  %60 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = load %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = load i8** %63, align 1
  %65 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %59, %struct.smpType_struct* %62, i8* %64)
  %66 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = extractvalue { %struct.smpType_struct*, i8* } %65, 0
  store %struct.smpType_struct* %68, %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = extractvalue { %struct.smpType_struct*, i8* } %65, 1
  store i8* %70, i8** %69, align 1
  %71 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = load i8** %74, align 1
  %76 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %73, i8* %75)
  %77 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 0
  %79 = extractvalue { %struct.smpType_struct*, i8* } %76, 0
  store %struct.smpType_struct* %79, %struct.smpType_struct** %78, align 1
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 1
  %81 = extractvalue { %struct.smpType_struct*, i8* } %76, 1
  store i8* %81, i8** %80, align 1
  br label %136

; <label>:82                                      ; preds = %35
  %83 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %84 = bitcast %struct.obj_struct* %83 to i8*
  %85 = bitcast %struct.obj_struct* %initial to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %85, i64 16, i32 8, i1 false)
  br label %86

; <label>:86                                      ; preds = %129, %82
  %87 = load i64* %i, align 8
  %88 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %89 = load i64* %88, align 8
  %90 = icmp ult i64 %87, %89
  br i1 %90, label %91, label %132

; <label>:91                                      ; preds = %86
  %92 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 1
  %93 = load i64* %i, align 8
  %94 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %95 = load %struct.obj_struct** %94, align 8
  %96 = getelementptr inbounds %struct.obj_struct* %95, i64 %93
  %97 = bitcast %struct.obj_struct* %92 to i8*
  %98 = bitcast %struct.obj_struct* %96 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 16, i32 8, i1 false)
  %99 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %100 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i32 0
  %101 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %102 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %103 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %103, i32 0, i32 0
  %105 = load %struct.smpType_struct** %104, align 1
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %103, i32 0, i32 1
  %107 = load i8** %106, align 1
  %108 = call { %struct.smpType_struct*, i8* } @smpFunction_call(%struct.smpType_struct* %101, i8* %102, %struct.smpType_struct* %105, i8* %107, i32 2, %struct.obj_struct* %100)
  %109 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 0
  %111 = extractvalue { %struct.smpType_struct*, i8* } %108, 0
  store %struct.smpType_struct* %111, %struct.smpType_struct** %110, align 1
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 1
  %113 = extractvalue { %struct.smpType_struct*, i8* } %108, 1
  store i8* %113, i8** %112, align 1
  %114 = bitcast %struct.obj_struct* %99 to i8*
  %115 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %114, i8* %115, i64 16, i32 8, i1 false)
  %116 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %117 = bitcast %struct.obj_struct* %116 to { %struct.smpType_struct*, i8* }*
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 0
  %119 = load %struct.smpType_struct** %118, align 1
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 1
  %121 = load i8** %120, align 1
  %122 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %119, i8* %121)
  %123 = icmp ne i32 %122, 0
  br i1 %123, label %124, label %128

; <label>:124                                     ; preds = %91
  %125 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %126 = bitcast %struct.obj_struct* %1 to i8*
  %127 = bitcast %struct.obj_struct* %125 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %126, i8* %127, i64 16, i32 8, i1 false)
  br label %136

; <label>:128                                     ; preds = %91
  br label %129

; <label>:129                                     ; preds = %128
  %130 = load i64* %i, align 8
  %131 = add i64 %130, 1
  store i64 %131, i64* %i, align 8
  br label %86

; <label>:132                                     ; preds = %86
  %133 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %134 = bitcast %struct.obj_struct* %1 to i8*
  %135 = bitcast %struct.obj_struct* %133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %134, i8* %135, i64 16, i32 8, i1 false)
  br label %136

; <label>:136                                     ; preds = %132, %124, %50, %47
  %137 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %138 = load { %struct.smpType_struct*, i8* }* %137, align 1
  ret { %struct.smpType_struct*, i8* } %138
}

define { %struct.smpType_struct*, i8* } @smpArray_reverse(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpArray_copy(%struct.smpType_struct* %9, i8* %11, i32 0, %struct.obj_struct* null)
  %13 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %20, i8* %22)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %0
  %26 = bitcast %struct.obj_struct* %1 to i8*
  %27 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  br label %42

; <label>:28                                      ; preds = %0
  %29 = load i32* %2, align 4
  %30 = load %struct.obj_struct** %3, align 8
  %31 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = call { %struct.smpType_struct*, i8* } @smpArray_reverse_now(%struct.smpType_struct* %33, i8* %35, i32 %29, %struct.obj_struct* %30)
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = extractvalue { %struct.smpType_struct*, i8* } %36, 0
  store %struct.smpType_struct* %39, %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = extractvalue { %struct.smpType_struct*, i8* } %36, 1
  store i8* %41, i8** %40, align 1
  br label %42

; <label>:42                                      ; preds = %28, %25
  %43 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %44 = load { %struct.smpType_struct*, i8* }* %43, align 1
  ret { %struct.smpType_struct*, i8* } %44
}

define { %struct.smpType_struct*, i8* } @smpArray_reverse_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %temp = alloca %struct.obj_struct, align 8
  %i = alloca i64, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpArray_struct*
  %10 = bitcast %struct.smpArray_struct* %core to i8*
  %11 = bitcast %struct.smpArray_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 16, i32 8, i1 false)
  store i64 0, i64* %i, align 8
  br label %12

; <label>:12                                      ; preds = %49, %0
  %13 = load i64* %i, align 8
  %14 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %15 = load i64* %14, align 8
  %16 = udiv i64 %15, 2
  %17 = icmp ult i64 %13, %16
  br i1 %17, label %18, label %52

; <label>:18                                      ; preds = %12
  %19 = load i64* %i, align 8
  %20 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %21 = load %struct.obj_struct** %20, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %21, i64 %19
  %23 = bitcast %struct.obj_struct* %temp to i8*
  %24 = bitcast %struct.obj_struct* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 16, i32 8, i1 false)
  %25 = load i64* %i, align 8
  %26 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %27 = load %struct.obj_struct** %26, align 8
  %28 = getelementptr inbounds %struct.obj_struct* %27, i64 %25
  %29 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %30 = load i64* %29, align 8
  %31 = load i64* %i, align 8
  %32 = sub i64 %30, %31
  %33 = sub i64 %32, 1
  %34 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %35 = load %struct.obj_struct** %34, align 8
  %36 = getelementptr inbounds %struct.obj_struct* %35, i64 %33
  %37 = bitcast %struct.obj_struct* %28 to i8*
  %38 = bitcast %struct.obj_struct* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 16, i32 8, i1 false)
  %39 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %40 = load i64* %39, align 8
  %41 = load i64* %i, align 8
  %42 = sub i64 %40, %41
  %43 = sub i64 %42, 1
  %44 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %45 = load %struct.obj_struct** %44, align 8
  %46 = getelementptr inbounds %struct.obj_struct* %45, i64 %43
  %47 = bitcast %struct.obj_struct* %46 to i8*
  %48 = bitcast %struct.obj_struct* %temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 16, i32 8, i1 false)
  br label %49

; <label>:49                                      ; preds = %18
  %50 = load i64* %i, align 8
  %51 = add i64 %50, 1
  store i64 %51, i64* %i, align 8
  br label %12

; <label>:52                                      ; preds = %12
  %53 = bitcast %struct.obj_struct* %1 to i8*
  %54 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 16, i32 8, i1 false)
  %55 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %56 = load { %struct.smpType_struct*, i8* }* %55, align 1
  ret { %struct.smpType_struct*, i8* } %56
}

define { %struct.smpType_struct*, i8* } @smpArray_sort(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpArray_copy(%struct.smpType_struct* %9, i8* %11, i32 0, %struct.obj_struct* null)
  %13 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %20, i8* %22)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %0
  %26 = bitcast %struct.obj_struct* %1 to i8*
  %27 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  br label %42

; <label>:28                                      ; preds = %0
  %29 = load i32* %2, align 4
  %30 = load %struct.obj_struct** %3, align 8
  %31 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = call { %struct.smpType_struct*, i8* } @smpArray_sort_now(%struct.smpType_struct* %33, i8* %35, i32 %29, %struct.obj_struct* %30)
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = extractvalue { %struct.smpType_struct*, i8* } %36, 0
  store %struct.smpType_struct* %39, %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = extractvalue { %struct.smpType_struct*, i8* } %36, 1
  store i8* %41, i8** %40, align 1
  br label %42

; <label>:42                                      ; preds = %28, %25
  %43 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %44 = load { %struct.smpType_struct*, i8* }* %43, align 1
  ret { %struct.smpType_struct*, i8* } %44
}

define { %struct.smpType_struct*, i8* } @smpArray_to_a(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  %8 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 16, i32 8, i1 false)
  %9 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %10 = load { %struct.smpType_struct*, i8* }* %9, align 1
  ret { %struct.smpType_struct*, i8* } %10
}

define { %struct.smpType_struct*, i8* } @smpArray_to_list(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %i = alloca i64, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %9 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %10 = load i8** %9, align 8
  %11 = bitcast i8* %10 to %struct.smpArray_struct*
  %12 = bitcast %struct.smpArray_struct* %core to i8*
  %13 = bitcast %struct.smpArray_struct* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 8, i1 false)
  %14 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %15 = load i64* %14, align 8
  %16 = sub i64 %15, 1
  store i64 %16, i64* %i, align 8
  br label %17

; <label>:17                                      ; preds = %54, %0
  %18 = load i64* %i, align 8
  %19 = icmp sge i64 %18, 0
  br i1 %19, label %20, label %57

; <label>:20                                      ; preds = %17
  %21 = load i64* %i, align 8
  %22 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %23 = load %struct.obj_struct** %22, align 8
  %24 = getelementptr inbounds %struct.obj_struct* %23, i64 %21
  %25 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = load %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = load i8** %28, align 1
  %30 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 0
  %32 = load %struct.smpType_struct** %31, align 1
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 1
  %34 = load i8** %33, align 1
  %35 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %27, i8* %29, %struct.smpType_struct* %32, i8* %34)
  %36 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  %41 = bitcast %struct.obj_struct* %res to i8*
  %42 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 16, i32 8, i1 false)
  %43 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = load i8** %46, align 1
  %48 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %45, i8* %47)
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %53

; <label>:50                                      ; preds = %20
  %51 = bitcast %struct.obj_struct* %1 to i8*
  %52 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %52, i64 16, i32 8, i1 false)
  br label %60

; <label>:53                                      ; preds = %20
  br label %54

; <label>:54                                      ; preds = %53
  %55 = load i64* %i, align 8
  %56 = add nsw i64 %55, -1
  store i64 %56, i64* %i, align 8
  br label %17

; <label>:57                                      ; preds = %17
  %58 = bitcast %struct.obj_struct* %1 to i8*
  %59 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %58, i8* %59, i64 16, i32 8, i1 false)
  br label %60

; <label>:60                                      ; preds = %57, %50
  %61 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %62 = load { %struct.smpType_struct*, i8* }* %61, align 1
  ret { %struct.smpType_struct*, i8* } %62
}

define { %struct.smpType_struct*, i8* } @smpArray_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %divider = alloca %struct.obj_struct, align 8
  %str2 = alloca %struct.obj_struct, align 8
  %a = alloca %struct.obj_struct*, align 8
  %i = alloca i64, align 8
  %length = alloca i64, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %bracket = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %9
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  store i8* %obj.coerce1, i8** %10
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %11 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str111, i32 0, i32 0))
  %12 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([3 x i8]* @.str112, i32 0, i32 0))
  %18 = bitcast %struct.obj_struct* %divider to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to %struct.smpArray_struct*
  %26 = getelementptr inbounds %struct.smpArray_struct* %25, i32 0, i32 0
  %27 = load %struct.obj_struct** %26, align 8
  store %struct.obj_struct* %27, %struct.obj_struct** %a, align 8
  %28 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %29 = load i8** %28, align 8
  %30 = bitcast i8* %29 to %struct.smpArray_struct*
  %31 = getelementptr inbounds %struct.smpArray_struct* %30, i32 0, i32 1
  %32 = load i64* %31, align 8
  store i64 %32, i64* %length, align 8
  store i64 0, i64* %i, align 8
  br label %33

; <label>:33                                      ; preds = %80, %0
  %34 = load i64* %i, align 8
  %35 = load i64* %length, align 8
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %37, label %83

; <label>:37                                      ; preds = %33
  %38 = load i64* %i, align 8
  %39 = load %struct.obj_struct** %a, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 %38
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %43, i8* %45, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %str2 to i8*
  %53 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* %53, i64 16, i32 8, i1 false)
  %54 = load i64* %i, align 8
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %68

; <label>:56                                      ; preds = %37
  %57 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = load %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = load i8** %60, align 1
  %62 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %59, i8* %61, i32 1, %struct.obj_struct* %divider)
  %63 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 0
  %65 = extractvalue { %struct.smpType_struct*, i8* } %62, 0
  store %struct.smpType_struct* %65, %struct.smpType_struct** %64, align 1
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 1
  %67 = extractvalue { %struct.smpType_struct*, i8* } %62, 1
  store i8* %67, i8** %66, align 1
  br label %68

; <label>:68                                      ; preds = %56, %37
  %69 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 0
  %71 = load %struct.smpType_struct** %70, align 1
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 1
  %73 = load i8** %72, align 1
  %74 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %71, i8* %73, i32 1, %struct.obj_struct* %str2)
  %75 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 0
  %77 = extractvalue { %struct.smpType_struct*, i8* } %74, 0
  store %struct.smpType_struct* %77, %struct.smpType_struct** %76, align 1
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 1
  %79 = extractvalue { %struct.smpType_struct*, i8* } %74, 1
  store i8* %79, i8** %78, align 1
  br label %80

; <label>:80                                      ; preds = %68
  %81 = load i64* %i, align 8
  %82 = add i64 %81, 1
  store i64 %82, i64* %i, align 8
  br label %33

; <label>:83                                      ; preds = %33
  %84 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str113, i32 0, i32 0))
  %85 = bitcast %struct.obj_struct* %bracket to { %struct.smpType_struct*, i8* }*
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 0
  %87 = extractvalue { %struct.smpType_struct*, i8* } %84, 0
  store %struct.smpType_struct* %87, %struct.smpType_struct** %86, align 1
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 1
  %89 = extractvalue { %struct.smpType_struct*, i8* } %84, 1
  store i8* %89, i8** %88, align 1
  %90 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = load %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = load i8** %93, align 1
  %95 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %92, i8* %94, i32 1, %struct.obj_struct* %bracket)
  %96 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  %101 = bitcast %struct.obj_struct* %1 to i8*
  %102 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %101, i8* %102, i64 16, i32 8, i1 false)
  %103 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %104 = load { %struct.smpType_struct*, i8* }* %103, align 1
  ret { %struct.smpType_struct*, i8* } %104
}

define { %struct.smpType_struct*, i8* } @smpArray_write(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %space = alloca %struct.obj_struct, align 8
  %str2 = alloca %struct.obj_struct, align 8
  %a = alloca %struct.obj_struct*, align 8
  %i = alloca i64, align 8
  %length = alloca i64, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %paren = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %9
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  store i8* %obj.coerce1, i8** %10
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %11 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([7 x i8]* @.str114, i32 0, i32 0))
  %12 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str115, i32 0, i32 0))
  %18 = bitcast %struct.obj_struct* %space to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to %struct.smpArray_struct*
  %26 = getelementptr inbounds %struct.smpArray_struct* %25, i32 0, i32 0
  %27 = load %struct.obj_struct** %26, align 8
  store %struct.obj_struct* %27, %struct.obj_struct** %a, align 8
  %28 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %29 = load i8** %28, align 8
  %30 = bitcast i8* %29 to %struct.smpArray_struct*
  %31 = getelementptr inbounds %struct.smpArray_struct* %30, i32 0, i32 1
  %32 = load i64* %31, align 8
  store i64 %32, i64* %length, align 8
  store i64 0, i64* %i, align 8
  br label %33

; <label>:33                                      ; preds = %76, %0
  %34 = load i64* %i, align 8
  %35 = load i64* %length, align 8
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %37, label %79

; <label>:37                                      ; preds = %33
  %38 = load i64* %i, align 8
  %39 = load %struct.obj_struct** %a, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 %38
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %43, i8* %45, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %str2 to i8*
  %53 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* %53, i64 16, i32 8, i1 false)
  %54 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %56, i8* %58, i32 1, %struct.obj_struct* %space)
  %60 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  %65 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = load %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = load i8** %68, align 1
  %70 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %67, i8* %69, i32 1, %struct.obj_struct* %str2)
  %71 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = extractvalue { %struct.smpType_struct*, i8* } %70, 0
  store %struct.smpType_struct* %73, %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = extractvalue { %struct.smpType_struct*, i8* } %70, 1
  store i8* %75, i8** %74, align 1
  br label %76

; <label>:76                                      ; preds = %37
  %77 = load i64* %i, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %i, align 8
  br label %33

; <label>:79                                      ; preds = %33
  %80 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str116, i32 0, i32 0))
  %81 = bitcast %struct.obj_struct* %paren to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = extractvalue { %struct.smpType_struct*, i8* } %80, 0
  store %struct.smpType_struct* %83, %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = extractvalue { %struct.smpType_struct*, i8* } %80, 1
  store i8* %85, i8** %84, align 1
  %86 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %86, i32 0, i32 0
  %88 = load %struct.smpType_struct** %87, align 1
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %86, i32 0, i32 1
  %90 = load i8** %89, align 1
  %91 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %88, i8* %90, i32 1, %struct.obj_struct* %paren)
  %92 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 0
  %94 = extractvalue { %struct.smpType_struct*, i8* } %91, 0
  store %struct.smpType_struct* %94, %struct.smpType_struct** %93, align 1
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 1
  %96 = extractvalue { %struct.smpType_struct*, i8* } %91, 1
  store i8* %96, i8** %95, align 1
  %97 = bitcast %struct.obj_struct* %1 to i8*
  %98 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 16, i32 8, i1 false)
  %99 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %100 = load { %struct.smpType_struct*, i8* }* %99, align 1
  ret { %struct.smpType_struct*, i8* } %100
}

define i32 @smpArray_resize(%struct.smpArray_struct* %arr, i64 %size) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.smpArray_struct*, align 8
  %3 = alloca i64, align 8
  store %struct.smpArray_struct* %arr, %struct.smpArray_struct** %2, align 8
  store i64 %size, i64* %3, align 8
  %4 = load i64* %3, align 8
  %5 = icmp ugt i64 %4, 4
  br i1 %5, label %6, label %21

; <label>:6                                       ; preds = %0
  %7 = load i64* %3, align 8
  %8 = call i32 @is_power_of_2(i64 %7)
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %21

; <label>:10                                      ; preds = %6
  %11 = load %struct.smpArray_struct** %2, align 8
  %12 = getelementptr inbounds %struct.smpArray_struct* %11, i32 0, i32 0
  %13 = load %struct.obj_struct** %12, align 8
  %14 = bitcast %struct.obj_struct* %13 to i8*
  %15 = load i64* %3, align 8
  %16 = call i64 @next_power_of_2(i64 %15)
  %17 = call i8* @GC_realloc(i8* %14, i64 %16)
  %18 = bitcast i8* %17 to %struct.obj_struct*
  %19 = load %struct.smpArray_struct** %2, align 8
  %20 = getelementptr inbounds %struct.smpArray_struct* %19, i32 0, i32 0
  store %struct.obj_struct* %18, %struct.obj_struct** %20, align 8
  store i32 1, i32* %1
  br label %22

; <label>:21                                      ; preds = %6, %0
  store i32 0, i32* %1
  br label %22

; <label>:22                                      ; preds = %21, %10
  %23 = load i32* %1
  ret i32 %23
}

define { %struct.smpType_struct*, i8* } @smpArray_at_c(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i64 %index) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i64, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i64 %index, i64* %2, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %9 = load i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.smpArray_struct*
  %11 = bitcast %struct.smpArray_struct* %core to i8*
  %12 = bitcast %struct.smpArray_struct* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 16, i32 8, i1 false)
  %13 = load i64* %2, align 8
  %14 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %15 = load i64* %14, align 8
  %16 = icmp uge i64 %13, %15
  br i1 %16, label %17, label %47

; <label>:17                                      ; preds = %0
  %18 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([26 x i8]* @.str108, i32 0, i32 0))
  %19 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 0
  %21 = extractvalue { %struct.smpType_struct*, i8* } %18, 0
  store %struct.smpType_struct* %21, %struct.smpType_struct** %20, align 1
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 1
  %23 = extractvalue { %struct.smpType_struct*, i8* } %18, 1
  store i8* %23, i8** %22, align 1
  %24 = load i64* %2, align 8
  %25 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = load %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = load i8** %28, align 1
  %30 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %27, i8* %29, i8* getelementptr inbounds ([4 x i8]* @.str109, i32 0, i32 0), i64 %24)
  %31 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = load %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = load i8** %39, align 1
  %41 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %38, i8* %40)
  %42 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = extractvalue { %struct.smpType_struct*, i8* } %41, 0
  store %struct.smpType_struct* %44, %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = extractvalue { %struct.smpType_struct*, i8* } %41, 1
  store i8* %46, i8** %45, align 1
  br label %54

; <label>:47                                      ; preds = %0
  %48 = load i64* %2, align 8
  %49 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %50 = load %struct.obj_struct** %49, align 8
  %51 = getelementptr inbounds %struct.obj_struct* %50, i64 %48
  %52 = bitcast %struct.obj_struct* %1 to i8*
  %53 = bitcast %struct.obj_struct* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* %53, i64 16, i32 8, i1 false)
  br label %54

; <label>:54                                      ; preds = %47, %17
  %55 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %56 = load { %struct.smpType_struct*, i8* }* %55, align 1
  ret { %struct.smpType_struct*, i8* } %56
}

define { %struct.smpType_struct*, i8* } @smpArray_at_assign_c(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i64 %index, %struct.smpType_struct* %val.coerce0, i8* %val.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i64, align 8
  %val = alloca %struct.obj_struct, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i64 %index, i64* %2, align 8
  %8 = bitcast %struct.obj_struct* %val to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  store %struct.smpType_struct* %val.coerce0, %struct.smpType_struct** %9
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  store i8* %val.coerce1, i8** %10
  %11 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %12 = load i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.smpArray_struct*
  %14 = bitcast %struct.smpArray_struct* %core to i8*
  %15 = bitcast %struct.smpArray_struct* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 16, i32 8, i1 false)
  %16 = load i64* %2, align 8
  %17 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %18 = load i64* %17, align 8
  %19 = icmp uge i64 %16, %18
  br i1 %19, label %20, label %50

; <label>:20                                      ; preds = %0
  %21 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([26 x i8]* @.str108, i32 0, i32 0))
  %22 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = extractvalue { %struct.smpType_struct*, i8* } %21, 0
  store %struct.smpType_struct* %24, %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = extractvalue { %struct.smpType_struct*, i8* } %21, 1
  store i8* %26, i8** %25, align 1
  %27 = load i64* %2, align 8
  %28 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = load %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = load i8** %31, align 1
  %33 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %30, i8* %32, i8* getelementptr inbounds ([4 x i8]* @.str109, i32 0, i32 0), i64 %27)
  %34 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = extractvalue { %struct.smpType_struct*, i8* } %33, 0
  store %struct.smpType_struct* %36, %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = extractvalue { %struct.smpType_struct*, i8* } %33, 1
  store i8* %38, i8** %37, align 1
  %39 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = load %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = load i8** %42, align 1
  %44 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %41, i8* %43)
  %45 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = extractvalue { %struct.smpType_struct*, i8* } %44, 0
  store %struct.smpType_struct* %47, %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = extractvalue { %struct.smpType_struct*, i8* } %44, 1
  store i8* %49, i8** %48, align 1
  br label %59

; <label>:50                                      ; preds = %0
  %51 = load i64* %2, align 8
  %52 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %53 = load %struct.obj_struct** %52, align 8
  %54 = getelementptr inbounds %struct.obj_struct* %53, i64 %51
  %55 = bitcast %struct.obj_struct* %54 to i8*
  %56 = bitcast %struct.obj_struct* %val to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %55, i8* %56, i64 16, i32 8, i1 false)
  %57 = bitcast %struct.obj_struct* %1 to i8*
  %58 = bitcast %struct.obj_struct* %val to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 16, i32 8, i1 false)
  br label %59

; <label>:59                                      ; preds = %50, %20
  %60 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %61 = load { %struct.smpType_struct*, i8* }* %60, align 1
  ret { %struct.smpType_struct*, i8* } %61
}

declare i8* @__memcpy_chk(i8*, i8*, i64, i64) nounwind

define internal i8* @__inline_memcpy_chk(i8* %__dest, i8* %__src, i64 %__len) nounwind inlinehint {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  store i8* %__dest, i8** %1, align 8
  store i8* %__src, i8** %2, align 8
  store i64 %__len, i64* %3, align 8
  %4 = load i8** %1, align 8
  %5 = load i8** %2, align 8
  %6 = load i64* %3, align 8
  %7 = load i8** %1, align 8
  %8 = call i64 @llvm.objectsize.i64(i8* %7, i1 false)
  %9 = call i8* @__memcpy_chk(i8* %4, i8* %5, i64 %6, i64 %8) nounwind
  ret i8* %9
}

define { %struct.smpType_struct*, i8* } @smpArray_init_array(%struct.obj_struct* %arr, i64 %length) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %3 = alloca i64, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %arr, %struct.obj_struct** %2, align 8
  store i64 %length, i64* %3, align 8
  %5 = load i64* %3, align 8
  %6 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  store i64 %5, i64* %6, align 8
  %7 = load %struct.obj_struct** %2, align 8
  %8 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  store %struct.obj_struct* %7, %struct.obj_struct** %8, align 8
  %9 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0))
  %10 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = getelementptr inbounds %struct.obj_struct* %4, i32 0, i32 1
  %16 = load i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.smpType_struct*
  %18 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %17)
  %19 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 0
  %21 = extractvalue { %struct.smpType_struct*, i8* } %18, 0
  store %struct.smpType_struct* %21, %struct.smpType_struct** %20, align 1
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 1
  %23 = extractvalue { %struct.smpType_struct*, i8* } %18, 1
  store i8* %23, i8** %22, align 1
  %24 = call noalias i8* @GC_malloc(i64 16)
  %25 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %24, i8** %25, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %27 = load i8** %26, align 8
  %28 = bitcast i8* %27 to %struct.smpArray_struct*
  %29 = bitcast %struct.smpArray_struct* %28 to i8*
  %30 = bitcast %struct.smpArray_struct* %core to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 16, i32 8, i1 false)
  %31 = bitcast %struct.obj_struct* %1 to i8*
  %32 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 16, i32 8, i1 false)
  %33 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %34 = load { %struct.smpType_struct*, i8* }* %33, align 1
  ret { %struct.smpType_struct*, i8* } %34
}

define { %struct.smpType_struct*, i8* } @smpArray_init() nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  store i64 0, i64* %3, align 8
  %4 = call i64 @next_power_of_2(i64 4)
  %5 = mul i64 16, %4
  %6 = call noalias i8* @GC_malloc(i64 %5)
  %7 = bitcast i8* %6 to %struct.obj_struct*
  %8 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  store %struct.obj_struct* %7, %struct.obj_struct** %8, align 8
  %9 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %10 = load %struct.obj_struct** %9, align 8
  %11 = bitcast %struct.obj_struct* %10 to i8*
  %12 = call i64 @llvm.objectsize.i64(i8* %11, i1 false)
  %13 = icmp ne i64 %12, -1
  br i1 %13, label %14, label %25

; <label>:14                                      ; preds = %0
  %15 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %16 = load %struct.obj_struct** %15, align 8
  %17 = bitcast %struct.obj_struct* %16 to i8*
  %18 = call i64 @next_power_of_2(i64 4)
  %19 = mul i64 16, %18
  %20 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %21 = load %struct.obj_struct** %20, align 8
  %22 = bitcast %struct.obj_struct* %21 to i8*
  %23 = call i64 @llvm.objectsize.i64(i8* %22, i1 false)
  %24 = call i8* @__memset_chk(i8* %17, i32 0, i64 %19, i64 %23) nounwind
  br label %32

; <label>:25                                      ; preds = %0
  %26 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %27 = load %struct.obj_struct** %26, align 8
  %28 = bitcast %struct.obj_struct* %27 to i8*
  %29 = call i64 @next_power_of_2(i64 4)
  %30 = mul i64 16, %29
  %31 = call i8* @__inline_memset_chk(i8* %28, i32 0, i64 %30)
  br label %32

; <label>:32                                      ; preds = %25, %14
  %33 = phi i8* [ %24, %14 ], [ %31, %25 ]
  %34 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0))
  %35 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = getelementptr inbounds %struct.obj_struct* %2, i32 0, i32 1
  %41 = load i8** %40, align 8
  %42 = bitcast i8* %41 to %struct.smpType_struct*
  %43 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %42)
  %44 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 0
  %46 = extractvalue { %struct.smpType_struct*, i8* } %43, 0
  store %struct.smpType_struct* %46, %struct.smpType_struct** %45, align 1
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 1
  %48 = extractvalue { %struct.smpType_struct*, i8* } %43, 1
  store i8* %48, i8** %47, align 1
  %49 = call noalias i8* @GC_malloc(i64 16)
  %50 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %49, i8** %50, align 8
  %51 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %52 = load i8** %51, align 8
  %53 = bitcast i8* %52 to %struct.smpArray_struct*
  %54 = bitcast %struct.smpArray_struct* %53 to i8*
  %55 = bitcast %struct.smpArray_struct* %core to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* %55, i64 16, i32 8, i1 false)
  %56 = bitcast %struct.obj_struct* %1 to i8*
  %57 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %57, i64 16, i32 8, i1 false)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = load { %struct.smpType_struct*, i8* }* %58, align 1
  ret { %struct.smpType_struct*, i8* } %59
}

define { %struct.smpType_struct*, i8* } @smpArray_get_c(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i64 %index) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i64, align 8
  %core = alloca %struct.smpArray_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i64 %index, i64* %2, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %9 = load i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.smpArray_struct*
  %11 = bitcast %struct.smpArray_struct* %core to i8*
  %12 = bitcast %struct.smpArray_struct* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 16, i32 8, i1 false)
  %13 = load i64* %2, align 8
  %14 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 1
  %15 = load i64* %14, align 8
  %16 = icmp ult i64 %13, %15
  br i1 %16, label %17, label %24

; <label>:17                                      ; preds = %0
  %18 = load i64* %2, align 8
  %19 = getelementptr inbounds %struct.smpArray_struct* %core, i32 0, i32 0
  %20 = load %struct.obj_struct** %19, align 8
  %21 = getelementptr inbounds %struct.obj_struct* %20, i64 %18
  %22 = bitcast %struct.obj_struct* %1 to i8*
  %23 = bitcast %struct.obj_struct* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 16, i32 8, i1 false)
  br label %54

; <label>:24                                      ; preds = %0
  %25 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([26 x i8]* @.str108, i32 0, i32 0))
  %26 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = extractvalue { %struct.smpType_struct*, i8* } %25, 0
  store %struct.smpType_struct* %28, %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = extractvalue { %struct.smpType_struct*, i8* } %25, 1
  store i8* %30, i8** %29, align 1
  %31 = load i64* %2, align 8
  %32 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = load %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = load i8** %35, align 1
  %37 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %34, i8* %36, i8* getelementptr inbounds ([28 x i8]* @.str110, i32 0, i32 0), i64 %31)
  %38 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = extractvalue { %struct.smpType_struct*, i8* } %37, 0
  store %struct.smpType_struct* %40, %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = extractvalue { %struct.smpType_struct*, i8* } %37, 1
  store i8* %42, i8** %41, align 1
  %43 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = load i8** %46, align 1
  %48 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %45, i8* %47)
  %49 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = extractvalue { %struct.smpType_struct*, i8* } %48, 0
  store %struct.smpType_struct* %51, %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = extractvalue { %struct.smpType_struct*, i8* } %48, 1
  store i8* %53, i8** %52, align 1
  br label %54

; <label>:54                                      ; preds = %24, %17
  %55 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %56 = load { %struct.smpType_struct*, i8* }* %55, align 1
  ret { %struct.smpType_struct*, i8* } %56
}

define { %struct.smpType_struct*, i8* } @smpArray_length(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpArray_struct*
  %10 = getelementptr inbounds %struct.smpArray_struct* %9, i32 0, i32 1
  %11 = load i64* %10, align 8
  %12 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %11)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpArray_sort_timmy(%struct.obj_struct* %a, i64 %length, %struct.obj_struct* %merger_space, %struct.smpType_struct* %cmp_fun.coerce0, i8* %cmp_fun.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.obj_struct*, align 8
  %cmp_fun = alloca %struct.obj_struct, align 8
  %runs = alloca [67 x %struct.smpArray_struct], align 16
  %run_i = alloca i64, align 8
  %index = alloca i64, align 8
  %ret = alloca %struct.obj_struct, align 8
  %cmp = alloca i32, align 4
  %5 = alloca %struct.smpArray_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %a, %struct.obj_struct** %2, align 8
  store i64 %length, i64* %3, align 8
  store %struct.obj_struct* %merger_space, %struct.obj_struct** %4, align 8
  %8 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  store %struct.smpType_struct* %cmp_fun.coerce0, %struct.smpType_struct** %9
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  store i8* %cmp_fun.coerce1, i8** %10
  %11 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i32 0
  %12 = bitcast %struct.smpArray_struct* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 1072, i32 1, i1 false)
  store i64 0, i64* %index, align 8
  %13 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  store i32 0, i32* %cmp, align 4
  store i64 0, i64* %run_i, align 8
  br label %14

; <label>:14                                      ; preds = %127, %0
  %15 = load i64* %index, align 8
  %16 = load i64* %3, align 8
  %17 = icmp ult i64 %15, %16
  br i1 %17, label %18, label %130

; <label>:18                                      ; preds = %14
  %19 = load i64* %run_i, align 8
  %20 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %19
  %21 = load %struct.obj_struct** %2, align 8
  %22 = load i64* %index, align 8
  %23 = getelementptr inbounds %struct.obj_struct* %21, i64 %22
  %24 = load i64* %3, align 8
  %25 = load i64* %index, align 8
  %26 = sub i64 %24, %25
  %27 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = load %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = load i8** %30, align 1
  %32 = call { %struct.obj_struct*, i64 } @timmy_get_run(%struct.obj_struct* %ret, %struct.obj_struct* %23, i64 %26, %struct.smpType_struct* %29, i8* %31)
  %33 = bitcast %struct.smpArray_struct* %5 to { %struct.obj_struct*, i64 }*
  %34 = getelementptr { %struct.obj_struct*, i64 }* %33, i32 0, i32 0
  %35 = extractvalue { %struct.obj_struct*, i64 } %32, 0
  store %struct.obj_struct* %35, %struct.obj_struct** %34, align 1
  %36 = getelementptr { %struct.obj_struct*, i64 }* %33, i32 0, i32 1
  %37 = extractvalue { %struct.obj_struct*, i64 } %32, 1
  store i64 %37, i64* %36, align 1
  %38 = bitcast %struct.smpArray_struct* %20 to i8*
  %39 = bitcast %struct.smpArray_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 16, i32 8, i1 false)
  %40 = load i64* %run_i, align 8
  %41 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %40
  %42 = getelementptr inbounds %struct.smpArray_struct* %41, i32 0, i32 1
  %43 = load i64* %42, align 8
  %44 = load i64* %index, align 8
  %45 = add i64 %44, %43
  store i64 %45, i64* %index, align 8
  %46 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = load %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = load i8** %49, align 1
  %51 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %48, i8* %50)
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %56

; <label>:53                                      ; preds = %18
  %54 = bitcast %struct.obj_struct* %1 to i8*
  %55 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* %55, i64 16, i32 8, i1 false)
  br label %191

; <label>:56                                      ; preds = %18
  br label %57

; <label>:57                                      ; preds = %123, %56
  %58 = load i64* %run_i, align 8
  %59 = icmp sgt i64 %58, 0
  br i1 %59, label %60, label %72

; <label>:60                                      ; preds = %57
  %61 = load i64* %run_i, align 8
  %62 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %61
  %63 = getelementptr inbounds %struct.smpArray_struct* %62, i32 0, i32 1
  %64 = load i64* %63, align 8
  %65 = mul i64 %64, 2
  %66 = load i64* %run_i, align 8
  %67 = sub nsw i64 %66, 1
  %68 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %67
  %69 = getelementptr inbounds %struct.smpArray_struct* %68, i32 0, i32 1
  %70 = load i64* %69, align 8
  %71 = icmp ugt i64 %65, %70
  br label %72

; <label>:72                                      ; preds = %60, %57
  %73 = phi i1 [ false, %57 ], [ %71, %60 ]
  br i1 %73, label %74, label %126

; <label>:74                                      ; preds = %72
  %75 = load i64* %run_i, align 8
  %76 = sub nsw i64 %75, 1
  %77 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %76
  %78 = getelementptr inbounds %struct.smpArray_struct* %77, i32 0, i32 0
  %79 = load %struct.obj_struct** %78, align 8
  %80 = load i64* %run_i, align 8
  %81 = sub nsw i64 %80, 1
  %82 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %81
  %83 = getelementptr inbounds %struct.smpArray_struct* %82, i32 0, i32 1
  %84 = load i64* %83, align 8
  %85 = load i64* %run_i, align 8
  %86 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %85
  %87 = getelementptr inbounds %struct.smpArray_struct* %86, i32 0, i32 0
  %88 = load %struct.obj_struct** %87, align 8
  %89 = load i64* %run_i, align 8
  %90 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %89
  %91 = getelementptr inbounds %struct.smpArray_struct* %90, i32 0, i32 1
  %92 = load i64* %91, align 8
  %93 = load %struct.obj_struct** %4, align 8
  %94 = call { %struct.smpType_struct*, i8* } @smp_merge_sorted_arrays(%struct.obj_struct* %79, i64 %84, %struct.obj_struct* %88, i64 %92, %struct.obj_struct* %93, %struct.obj_struct* byval align 8 %cmp_fun)
  %95 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 0
  %97 = extractvalue { %struct.smpType_struct*, i8* } %94, 0
  store %struct.smpType_struct* %97, %struct.smpType_struct** %96, align 1
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 1
  %99 = extractvalue { %struct.smpType_struct*, i8* } %94, 1
  store i8* %99, i8** %98, align 1
  %100 = bitcast %struct.obj_struct* %ret to i8*
  %101 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* %101, i64 16, i32 8, i1 false)
  %102 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 0
  %104 = load %struct.smpType_struct** %103, align 1
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 1
  %106 = load i8** %105, align 1
  %107 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %104, i8* %106)
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %109, label %112

; <label>:109                                     ; preds = %74
  %110 = bitcast %struct.obj_struct* %1 to i8*
  %111 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %110, i8* %111, i64 16, i32 8, i1 false)
  br label %191

; <label>:112                                     ; preds = %74
  %113 = load i64* %run_i, align 8
  %114 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %113
  %115 = getelementptr inbounds %struct.smpArray_struct* %114, i32 0, i32 1
  %116 = load i64* %115, align 8
  %117 = load i64* %run_i, align 8
  %118 = sub nsw i64 %117, 1
  %119 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %118
  %120 = getelementptr inbounds %struct.smpArray_struct* %119, i32 0, i32 1
  %121 = load i64* %120, align 8
  %122 = add i64 %121, %116
  store i64 %122, i64* %120, align 8
  br label %123

; <label>:123                                     ; preds = %112
  %124 = load i64* %run_i, align 8
  %125 = add nsw i64 %124, -1
  store i64 %125, i64* %run_i, align 8
  br label %57

; <label>:126                                     ; preds = %72
  br label %127

; <label>:127                                     ; preds = %126
  %128 = load i64* %run_i, align 8
  %129 = add nsw i64 %128, 1
  store i64 %129, i64* %run_i, align 8
  br label %14

; <label>:130                                     ; preds = %14
  %131 = load i64* %run_i, align 8
  %132 = add nsw i64 %131, -1
  store i64 %132, i64* %run_i, align 8
  br label %133

; <label>:133                                     ; preds = %185, %130
  %134 = load i64* %run_i, align 8
  %135 = icmp sgt i64 %134, 0
  br i1 %135, label %136, label %188

; <label>:136                                     ; preds = %133
  %137 = load i64* %run_i, align 8
  %138 = sub nsw i64 %137, 1
  %139 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %138
  %140 = getelementptr inbounds %struct.smpArray_struct* %139, i32 0, i32 0
  %141 = load %struct.obj_struct** %140, align 8
  %142 = load i64* %run_i, align 8
  %143 = sub nsw i64 %142, 1
  %144 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %143
  %145 = getelementptr inbounds %struct.smpArray_struct* %144, i32 0, i32 1
  %146 = load i64* %145, align 8
  %147 = load i64* %run_i, align 8
  %148 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %147
  %149 = getelementptr inbounds %struct.smpArray_struct* %148, i32 0, i32 0
  %150 = load %struct.obj_struct** %149, align 8
  %151 = load i64* %run_i, align 8
  %152 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %151
  %153 = getelementptr inbounds %struct.smpArray_struct* %152, i32 0, i32 1
  %154 = load i64* %153, align 8
  %155 = load %struct.obj_struct** %4, align 8
  %156 = call { %struct.smpType_struct*, i8* } @smp_merge_sorted_arrays(%struct.obj_struct* %141, i64 %146, %struct.obj_struct* %150, i64 %154, %struct.obj_struct* %155, %struct.obj_struct* byval align 8 %cmp_fun)
  %157 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %158 = getelementptr { %struct.smpType_struct*, i8* }* %157, i32 0, i32 0
  %159 = extractvalue { %struct.smpType_struct*, i8* } %156, 0
  store %struct.smpType_struct* %159, %struct.smpType_struct** %158, align 1
  %160 = getelementptr { %struct.smpType_struct*, i8* }* %157, i32 0, i32 1
  %161 = extractvalue { %struct.smpType_struct*, i8* } %156, 1
  store i8* %161, i8** %160, align 1
  %162 = bitcast %struct.obj_struct* %ret to i8*
  %163 = bitcast %struct.obj_struct* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %162, i8* %163, i64 16, i32 8, i1 false)
  %164 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %165 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 0
  %166 = load %struct.smpType_struct** %165, align 1
  %167 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 1
  %168 = load i8** %167, align 1
  %169 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %166, i8* %168)
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %171, label %174

; <label>:171                                     ; preds = %136
  %172 = bitcast %struct.obj_struct* %1 to i8*
  %173 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %172, i8* %173, i64 16, i32 8, i1 false)
  br label %191

; <label>:174                                     ; preds = %136
  %175 = load i64* %run_i, align 8
  %176 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %175
  %177 = getelementptr inbounds %struct.smpArray_struct* %176, i32 0, i32 1
  %178 = load i64* %177, align 8
  %179 = load i64* %run_i, align 8
  %180 = sub nsw i64 %179, 1
  %181 = getelementptr inbounds [67 x %struct.smpArray_struct]* %runs, i32 0, i64 %180
  %182 = getelementptr inbounds %struct.smpArray_struct* %181, i32 0, i32 1
  %183 = load i64* %182, align 8
  %184 = add i64 %183, %178
  store i64 %184, i64* %182, align 8
  br label %185

; <label>:185                                     ; preds = %174
  %186 = load i64* %run_i, align 8
  %187 = add nsw i64 %186, -1
  store i64 %187, i64* %run_i, align 8
  br label %133

; <label>:188                                     ; preds = %133
  %189 = bitcast %struct.obj_struct* %1 to i8*
  %190 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %189, i8* %190, i64 16, i32 8, i1 false)
  br label %191

; <label>:191                                     ; preds = %188, %171, %109, %53
  %192 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %193 = load { %struct.smpType_struct*, i8* }* %192, align 1
  ret { %struct.smpType_struct*, i8* } %193
}

define i32 @smp_cmp_helper(%struct.obj_struct* %ret, %struct.smpType_struct* %cmp_fun.coerce0, i8* %cmp_fun.coerce1, %struct.smpType_struct* %op1.coerce0, i8* %op1.coerce1, %struct.obj_struct* byval align 8 %op2) nounwind {
  %1 = alloca %struct.obj_struct*, align 8
  %cmp_fun = alloca %struct.obj_struct, align 8
  %op1 = alloca %struct.obj_struct, align 8
  %cmp = alloca i32, align 4
  %args = alloca [2 x %struct.obj_struct], align 16
  %2 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %ret, %struct.obj_struct** %1, align 8
  %3 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %cmp_fun.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %cmp_fun.coerce1, i8** %5
  %6 = bitcast %struct.obj_struct* %op1 to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %op1.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %op1.coerce1, i8** %8
  store i32 0, i32* %cmp, align 4
  %9 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call i32 @smpObject_truep_c(%struct.smpType_struct* %11, i8* %13)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %49

; <label>:16                                      ; preds = %0
  %17 = getelementptr inbounds [2 x %struct.obj_struct]* %args, i32 0, i64 0
  %18 = bitcast %struct.obj_struct* %17 to i8*
  %19 = bitcast %struct.obj_struct* %op1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 16, i32 8, i1 false)
  %20 = getelementptr inbounds [2 x %struct.obj_struct]* %args, i32 0, i64 1
  %21 = bitcast %struct.obj_struct* %20 to i8*
  %22 = bitcast %struct.obj_struct* %op2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 16, i32 8, i1 false)
  %23 = load %struct.obj_struct** %1, align 8
  %24 = getelementptr inbounds [2 x %struct.obj_struct]* %args, i32 0, i32 0
  %25 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %26 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %27 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = load %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = load i8** %30, align 1
  %32 = call { %struct.smpType_struct*, i8* } @smpFunction_call(%struct.smpType_struct* %25, i8* %26, %struct.smpType_struct* %29, i8* %31, i32 2, %struct.obj_struct* %24)
  %33 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 0
  %35 = extractvalue { %struct.smpType_struct*, i8* } %32, 0
  store %struct.smpType_struct* %35, %struct.smpType_struct** %34, align 1
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 1
  %37 = extractvalue { %struct.smpType_struct*, i8* } %32, 1
  store i8* %37, i8** %36, align 1
  %38 = bitcast %struct.obj_struct* %23 to i8*
  %39 = bitcast %struct.obj_struct* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 16, i32 8, i1 false)
  %40 = load %struct.obj_struct** %1, align 8
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call i32 @smpObject_truep_c(%struct.smpType_struct* %43, i8* %45)
  %47 = icmp ne i32 %46, 0
  %48 = select i1 %47, i32 -1, i32 1
  store i32 %48, i32* %cmp, align 4
  br label %62

; <label>:49                                      ; preds = %0
  %50 = load %struct.obj_struct** %1, align 8
  %51 = bitcast %struct.obj_struct* %op1 to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = load %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = load i8** %54, align 1
  %56 = bitcast %struct.obj_struct* %op2 to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = load %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = load i8** %59, align 1
  %61 = call i32 @smpObject_cmp_fast(%struct.obj_struct* %50, %struct.smpType_struct* %53, i8* %55, %struct.smpType_struct* %58, i8* %60)
  store i32 %61, i32* %cmp, align 4
  br label %62

; <label>:62                                      ; preds = %49, %16
  %63 = load i32* %cmp, align 4
  ret i32 %63
}

define i32 @smpObject_truep_c(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %obj = alloca %struct.obj_struct, align 8
  %1 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %2 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %2
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 1
  store i8* %obj.coerce1, i8** %3
  %4 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %5 = load %struct.smpType_struct** %4, align 8
  %6 = getelementptr inbounds %struct.smpType_struct* %5, i32 0, i32 1
  %7 = load i32* %6, align 4
  %8 = load i32* @smpType_id_nil, align 4
  %9 = icmp eq i32 %7, %8
  %10 = xor i1 %9, true
  %11 = zext i1 %10 to i32
  ret i32 %11
}

define { %struct.smpType_struct*, i8* } @smpArray_sort_merge(%struct.obj_struct* %a, i64 %length, %struct.obj_struct* %merger_space, %struct.smpType_struct* %cmp_fun.coerce0, i8* %cmp_fun.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.obj_struct*, align 8
  %cmp_fun = alloca %struct.obj_struct, align 8
  %cmp = alloca i32, align 4
  %temp = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %half = alloca i64, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %a, %struct.obj_struct** %2, align 8
  store i64 %length, i64* %3, align 8
  store %struct.obj_struct* %merger_space, %struct.obj_struct** %4, align 8
  %9 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  store %struct.smpType_struct* %cmp_fun.coerce0, %struct.smpType_struct** %10
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  store i8* %cmp_fun.coerce1, i8** %11
  store i32 0, i32* %cmp, align 4
  %12 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %13 = load i64* %3, align 8
  %14 = icmp ule i64 %13, 1
  br i1 %14, label %15, label %17

; <label>:15                                      ; preds = %0
  %16 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %139

; <label>:17                                      ; preds = %0
  %18 = load i64* %3, align 8
  %19 = icmp ult i64 %18, 16
  br i1 %19, label %20, label %47

; <label>:20                                      ; preds = %17
  %21 = load %struct.obj_struct** %2, align 8
  %22 = load i64* %3, align 8
  %23 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = load i8** %26, align 1
  %28 = call { %struct.smpType_struct*, i8* } @smpArray_sort_insertion(%struct.obj_struct* %21, i64 %22, %struct.smpType_struct* %25, i8* %27)
  %29 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = extractvalue { %struct.smpType_struct*, i8* } %28, 0
  store %struct.smpType_struct* %31, %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = extractvalue { %struct.smpType_struct*, i8* } %28, 1
  store i8* %33, i8** %32, align 1
  %34 = bitcast %struct.obj_struct* %ret to i8*
  %35 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* %35, i64 16, i32 8, i1 false)
  %36 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = load %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = load i8** %39, align 1
  %41 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %38, i8* %40)
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %46

; <label>:43                                      ; preds = %20
  %44 = bitcast %struct.obj_struct* %1 to i8*
  %45 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %45, i64 16, i32 8, i1 false)
  br label %139

; <label>:46                                      ; preds = %20
  br label %136

; <label>:47                                      ; preds = %17
  %48 = load i64* %3, align 8
  %49 = udiv i64 %48, 2
  store i64 %49, i64* %half, align 8
  %50 = load %struct.obj_struct** %2, align 8
  %51 = load i64* %half, align 8
  %52 = load %struct.obj_struct** %4, align 8
  %53 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = load %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = load i8** %56, align 1
  %58 = call { %struct.smpType_struct*, i8* } @smpArray_sort_merge(%struct.obj_struct* %50, i64 %51, %struct.obj_struct* %52, %struct.smpType_struct* %55, i8* %57)
  %59 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = extractvalue { %struct.smpType_struct*, i8* } %58, 0
  store %struct.smpType_struct* %61, %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = extractvalue { %struct.smpType_struct*, i8* } %58, 1
  store i8* %63, i8** %62, align 1
  %64 = bitcast %struct.obj_struct* %ret to i8*
  %65 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* %65, i64 16, i32 8, i1 false)
  %66 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = load %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = load i8** %69, align 1
  %71 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %68, i8* %70)
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %76

; <label>:73                                      ; preds = %47
  %74 = bitcast %struct.obj_struct* %1 to i8*
  %75 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %74, i8* %75, i64 16, i32 8, i1 false)
  br label %139

; <label>:76                                      ; preds = %47
  %77 = load %struct.obj_struct** %2, align 8
  %78 = load i64* %half, align 8
  %79 = getelementptr inbounds %struct.obj_struct* %77, i64 %78
  %80 = load i64* %3, align 8
  %81 = load i64* %half, align 8
  %82 = sub i64 %80, %81
  %83 = load %struct.obj_struct** %4, align 8
  %84 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = load %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = load i8** %87, align 1
  %89 = call { %struct.smpType_struct*, i8* } @smpArray_sort_merge(%struct.obj_struct* %79, i64 %82, %struct.obj_struct* %83, %struct.smpType_struct* %86, i8* %88)
  %90 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = extractvalue { %struct.smpType_struct*, i8* } %89, 0
  store %struct.smpType_struct* %92, %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = extractvalue { %struct.smpType_struct*, i8* } %89, 1
  store i8* %94, i8** %93, align 1
  %95 = bitcast %struct.obj_struct* %ret to i8*
  %96 = bitcast %struct.obj_struct* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %95, i8* %96, i64 16, i32 8, i1 false)
  %97 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 0
  %99 = load %struct.smpType_struct** %98, align 1
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 1
  %101 = load i8** %100, align 1
  %102 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %99, i8* %101)
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %104, label %107

; <label>:104                                     ; preds = %76
  %105 = bitcast %struct.obj_struct* %1 to i8*
  %106 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 16, i32 8, i1 false)
  br label %139

; <label>:107                                     ; preds = %76
  %108 = load %struct.obj_struct** %2, align 8
  %109 = load i64* %half, align 8
  %110 = load %struct.obj_struct** %2, align 8
  %111 = load i64* %half, align 8
  %112 = getelementptr inbounds %struct.obj_struct* %110, i64 %111
  %113 = load i64* %3, align 8
  %114 = load i64* %half, align 8
  %115 = sub i64 %113, %114
  %116 = load %struct.obj_struct** %4, align 8
  %117 = call { %struct.smpType_struct*, i8* } @smp_merge_sorted_arrays(%struct.obj_struct* %108, i64 %109, %struct.obj_struct* %112, i64 %115, %struct.obj_struct* %116, %struct.obj_struct* byval align 8 %cmp_fun)
  %118 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %119 = getelementptr { %struct.smpType_struct*, i8* }* %118, i32 0, i32 0
  %120 = extractvalue { %struct.smpType_struct*, i8* } %117, 0
  store %struct.smpType_struct* %120, %struct.smpType_struct** %119, align 1
  %121 = getelementptr { %struct.smpType_struct*, i8* }* %118, i32 0, i32 1
  %122 = extractvalue { %struct.smpType_struct*, i8* } %117, 1
  store i8* %122, i8** %121, align 1
  %123 = bitcast %struct.obj_struct* %ret to i8*
  %124 = bitcast %struct.obj_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %123, i8* %124, i64 16, i32 8, i1 false)
  %125 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 0
  %127 = load %struct.smpType_struct** %126, align 1
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 1
  %129 = load i8** %128, align 1
  %130 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %127, i8* %129)
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %132, label %135

; <label>:132                                     ; preds = %107
  %133 = bitcast %struct.obj_struct* %1 to i8*
  %134 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %133, i8* %134, i64 16, i32 8, i1 false)
  br label %139

; <label>:135                                     ; preds = %107
  br label %136

; <label>:136                                     ; preds = %135, %46
  br label %137

; <label>:137                                     ; preds = %136
  %138 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %138, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %139

; <label>:139                                     ; preds = %137, %132, %104, %73, %43, %15
  %140 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %141 = load { %struct.smpType_struct*, i8* }* %140, align 1
  ret { %struct.smpType_struct*, i8* } %141
}

define { %struct.smpType_struct*, i8* } @smpArray_sort_insertion(%struct.obj_struct* %a, i64 %length, %struct.smpType_struct* %cmp_fun.coerce0, i8* %cmp_fun.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %3 = alloca i64, align 8
  %cmp_fun = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %cmp = alloca i32, align 4
  %temp = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %a, %struct.obj_struct** %2, align 8
  store i64 %length, i64* %3, align 8
  %4 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %cmp_fun.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %cmp_fun.coerce1, i8** %6
  %7 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  store i64 0, i64* %i, align 8
  br label %8

; <label>:8                                       ; preds = %77, %0
  %9 = load i64* %i, align 8
  %10 = load i64* %3, align 8
  %11 = sub i64 %10, 1
  %12 = icmp ult i64 %9, %11
  br i1 %12, label %13, label %80

; <label>:13                                      ; preds = %8
  %14 = load i64* %i, align 8
  store i64 %14, i64* %j, align 8
  br label %15

; <label>:15                                      ; preds = %73, %13
  %16 = load i64* %j, align 8
  %17 = icmp sge i64 %16, 0
  br i1 %17, label %18, label %76

; <label>:18                                      ; preds = %15
  %19 = load i64* %j, align 8
  %20 = load %struct.obj_struct** %2, align 8
  %21 = getelementptr inbounds %struct.obj_struct* %20, i64 %19
  %22 = load i64* %j, align 8
  %23 = add nsw i64 %22, 1
  %24 = load %struct.obj_struct** %2, align 8
  %25 = getelementptr inbounds %struct.obj_struct* %24, i64 %23
  %26 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = call i32 @smp_cmp_helper(%struct.obj_struct* %ret, %struct.smpType_struct* %28, i8* %30, %struct.smpType_struct* %33, i8* %35, %struct.obj_struct* byval align 8 %25)
  store i32 %36, i32* %cmp, align 4
  %37 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = load %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = load i8** %40, align 1
  %42 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %39, i8* %41)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %47

; <label>:44                                      ; preds = %18
  %45 = bitcast %struct.obj_struct* %1 to i8*
  %46 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %46, i64 16, i32 8, i1 false)
  br label %83

; <label>:47                                      ; preds = %18
  %48 = load i32* %cmp, align 4
  %49 = icmp sgt i32 %48, 0
  br i1 %49, label %50, label %71

; <label>:50                                      ; preds = %47
  %51 = load i64* %j, align 8
  %52 = load %struct.obj_struct** %2, align 8
  %53 = getelementptr inbounds %struct.obj_struct* %52, i64 %51
  %54 = bitcast %struct.obj_struct* %temp to i8*
  %55 = bitcast %struct.obj_struct* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %54, i8* %55, i64 16, i32 8, i1 false)
  %56 = load i64* %j, align 8
  %57 = load %struct.obj_struct** %2, align 8
  %58 = getelementptr inbounds %struct.obj_struct* %57, i64 %56
  %59 = load i64* %j, align 8
  %60 = add nsw i64 %59, 1
  %61 = load %struct.obj_struct** %2, align 8
  %62 = getelementptr inbounds %struct.obj_struct* %61, i64 %60
  %63 = bitcast %struct.obj_struct* %58 to i8*
  %64 = bitcast %struct.obj_struct* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %64, i64 16, i32 8, i1 false)
  %65 = load i64* %j, align 8
  %66 = add nsw i64 %65, 1
  %67 = load %struct.obj_struct** %2, align 8
  %68 = getelementptr inbounds %struct.obj_struct* %67, i64 %66
  %69 = bitcast %struct.obj_struct* %68 to i8*
  %70 = bitcast %struct.obj_struct* %temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %69, i8* %70, i64 16, i32 8, i1 false)
  br label %72

; <label>:71                                      ; preds = %47
  br label %76

; <label>:72                                      ; preds = %50
  br label %73

; <label>:73                                      ; preds = %72
  %74 = load i64* %j, align 8
  %75 = add nsw i64 %74, -1
  store i64 %75, i64* %j, align 8
  br label %15

; <label>:76                                      ; preds = %71, %15
  br label %77

; <label>:77                                      ; preds = %76
  %78 = load i64* %i, align 8
  %79 = add nsw i64 %78, 1
  store i64 %79, i64* %i, align 8
  br label %8

; <label>:80                                      ; preds = %8
  %81 = bitcast %struct.obj_struct* %1 to i8*
  %82 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false)
  br label %83

; <label>:83                                      ; preds = %80, %44
  %84 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %85 = load { %struct.smpType_struct*, i8* }* %84, align 1
  ret { %struct.smpType_struct*, i8* } %85
}

define { %struct.smpType_struct*, i8* } @smp_merge_sorted_arrays(%struct.obj_struct* %arr1, i64 %length1, %struct.obj_struct* %arr2, i64 %length2, %struct.obj_struct* %merger_space, %struct.obj_struct* byval align 8 %cmp_fun) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.obj_struct*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.obj_struct*, align 8
  %ret = alloca %struct.obj_struct, align 8
  %cmp = alloca i32, align 4
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %k = alloca i64, align 8
  store %struct.obj_struct* %arr1, %struct.obj_struct** %2, align 8
  store i64 %length1, i64* %3, align 8
  store %struct.obj_struct* %arr2, %struct.obj_struct** %4, align 8
  store i64 %length2, i64* %5, align 8
  store %struct.obj_struct* %merger_space, %struct.obj_struct** %6, align 8
  %7 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  store i32 0, i32* %cmp, align 4
  %8 = load %struct.obj_struct** %6, align 8
  %9 = bitcast %struct.obj_struct* %8 to i8*
  %10 = call i64 @llvm.objectsize.i64(i8* %9, i1 false)
  %11 = icmp ne i64 %10, -1
  br i1 %11, label %12, label %23

; <label>:12                                      ; preds = %0
  %13 = load %struct.obj_struct** %6, align 8
  %14 = bitcast %struct.obj_struct* %13 to i8*
  %15 = load %struct.obj_struct** %2, align 8
  %16 = bitcast %struct.obj_struct* %15 to i8*
  %17 = load i64* %3, align 8
  %18 = mul i64 16, %17
  %19 = load %struct.obj_struct** %6, align 8
  %20 = bitcast %struct.obj_struct* %19 to i8*
  %21 = call i64 @llvm.objectsize.i64(i8* %20, i1 false)
  %22 = call i8* @__memcpy_chk(i8* %14, i8* %16, i64 %18, i64 %21) nounwind
  br label %31

; <label>:23                                      ; preds = %0
  %24 = load %struct.obj_struct** %6, align 8
  %25 = bitcast %struct.obj_struct* %24 to i8*
  %26 = load %struct.obj_struct** %2, align 8
  %27 = bitcast %struct.obj_struct* %26 to i8*
  %28 = load i64* %3, align 8
  %29 = mul i64 16, %28
  %30 = call i8* @__inline_memcpy_chk(i8* %25, i8* %27, i64 %29)
  br label %31

; <label>:31                                      ; preds = %23, %12
  %32 = phi i8* [ %22, %12 ], [ %30, %23 ]
  store i64 0, i64* %i, align 8
  store i64 0, i64* %j, align 8
  store i64 0, i64* %k, align 8
  br label %33

; <label>:33                                      ; preds = %111, %31
  %34 = load i64* %i, align 8
  %35 = load i64* %3, align 8
  %36 = icmp ult i64 %34, %35
  br i1 %36, label %37, label %41

; <label>:37                                      ; preds = %33
  %38 = load i64* %j, align 8
  %39 = load i64* %5, align 8
  %40 = icmp ult i64 %38, %39
  br label %41

; <label>:41                                      ; preds = %37, %33
  %42 = phi i1 [ false, %33 ], [ %40, %37 ]
  br i1 %42, label %43, label %114

; <label>:43                                      ; preds = %41
  %44 = load i64* %i, align 8
  %45 = load %struct.obj_struct** %6, align 8
  %46 = getelementptr inbounds %struct.obj_struct* %45, i64 %44
  %47 = load i64* %j, align 8
  %48 = load %struct.obj_struct** %4, align 8
  %49 = getelementptr inbounds %struct.obj_struct* %48, i64 %47
  %50 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = load %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = load i8** %53, align 1
  %55 = bitcast %struct.obj_struct* %46 to { %struct.smpType_struct*, i8* }*
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 0
  %57 = load %struct.smpType_struct** %56, align 1
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 1
  %59 = load i8** %58, align 1
  %60 = call i32 @smp_cmp_helper(%struct.obj_struct* %ret, %struct.smpType_struct* %52, i8* %54, %struct.smpType_struct* %57, i8* %59, %struct.obj_struct* byval align 8 %49)
  store i32 %60, i32* %cmp, align 4
  %61 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 0
  %63 = load %struct.smpType_struct** %62, align 1
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 1
  %65 = load i8** %64, align 1
  %66 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %63, i8* %65)
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %87

; <label>:68                                      ; preds = %43
  br label %69

; <label>:69                                      ; preds = %73, %68
  %70 = load i64* %i, align 8
  %71 = load i64* %3, align 8
  %72 = icmp ult i64 %70, %71
  br i1 %72, label %73, label %84

; <label>:73                                      ; preds = %69
  %74 = load i64* %k, align 8
  %75 = add i64 %74, 1
  store i64 %75, i64* %k, align 8
  %76 = load %struct.obj_struct** %2, align 8
  %77 = getelementptr inbounds %struct.obj_struct* %76, i64 %74
  %78 = load i64* %i, align 8
  %79 = add i64 %78, 1
  store i64 %79, i64* %i, align 8
  %80 = load %struct.obj_struct** %6, align 8
  %81 = getelementptr inbounds %struct.obj_struct* %80, i64 %78
  %82 = bitcast %struct.obj_struct* %77 to i8*
  %83 = bitcast %struct.obj_struct* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* %83, i64 16, i32 8, i1 false)
  br label %69

; <label>:84                                      ; preds = %69
  %85 = bitcast %struct.obj_struct* %1 to i8*
  %86 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %85, i8* %86, i64 16, i32 8, i1 false)
  br label %149

; <label>:87                                      ; preds = %43
  %88 = load i32* %cmp, align 4
  %89 = icmp sle i32 %88, 0
  br i1 %89, label %90, label %100

; <label>:90                                      ; preds = %87
  %91 = load i64* %k, align 8
  %92 = load %struct.obj_struct** %2, align 8
  %93 = getelementptr inbounds %struct.obj_struct* %92, i64 %91
  %94 = load i64* %i, align 8
  %95 = add i64 %94, 1
  store i64 %95, i64* %i, align 8
  %96 = load %struct.obj_struct** %6, align 8
  %97 = getelementptr inbounds %struct.obj_struct* %96, i64 %94
  %98 = bitcast %struct.obj_struct* %93 to i8*
  %99 = bitcast %struct.obj_struct* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %98, i8* %99, i64 16, i32 8, i1 false)
  br label %110

; <label>:100                                     ; preds = %87
  %101 = load i64* %k, align 8
  %102 = load %struct.obj_struct** %2, align 8
  %103 = getelementptr inbounds %struct.obj_struct* %102, i64 %101
  %104 = load i64* %j, align 8
  %105 = add i64 %104, 1
  store i64 %105, i64* %j, align 8
  %106 = load %struct.obj_struct** %4, align 8
  %107 = getelementptr inbounds %struct.obj_struct* %106, i64 %104
  %108 = bitcast %struct.obj_struct* %103 to i8*
  %109 = bitcast %struct.obj_struct* %107 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %108, i8* %109, i64 16, i32 8, i1 false)
  br label %110

; <label>:110                                     ; preds = %100, %90
  br label %111

; <label>:111                                     ; preds = %110
  %112 = load i64* %k, align 8
  %113 = add i64 %112, 1
  store i64 %113, i64* %k, align 8
  br label %33

; <label>:114                                     ; preds = %41
  br label %115

; <label>:115                                     ; preds = %119, %114
  %116 = load i64* %i, align 8
  %117 = load i64* %3, align 8
  %118 = icmp ult i64 %116, %117
  br i1 %118, label %119, label %130

; <label>:119                                     ; preds = %115
  %120 = load i64* %k, align 8
  %121 = add i64 %120, 1
  store i64 %121, i64* %k, align 8
  %122 = load %struct.obj_struct** %2, align 8
  %123 = getelementptr inbounds %struct.obj_struct* %122, i64 %120
  %124 = load i64* %i, align 8
  %125 = add i64 %124, 1
  store i64 %125, i64* %i, align 8
  %126 = load %struct.obj_struct** %6, align 8
  %127 = getelementptr inbounds %struct.obj_struct* %126, i64 %124
  %128 = bitcast %struct.obj_struct* %123 to i8*
  %129 = bitcast %struct.obj_struct* %127 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %128, i8* %129, i64 16, i32 8, i1 false)
  br label %115

; <label>:130                                     ; preds = %115
  br label %131

; <label>:131                                     ; preds = %135, %130
  %132 = load i64* %j, align 8
  %133 = load i64* %5, align 8
  %134 = icmp ult i64 %132, %133
  br i1 %134, label %135, label %146

; <label>:135                                     ; preds = %131
  %136 = load i64* %k, align 8
  %137 = add i64 %136, 1
  store i64 %137, i64* %k, align 8
  %138 = load %struct.obj_struct** %2, align 8
  %139 = getelementptr inbounds %struct.obj_struct* %138, i64 %136
  %140 = load i64* %j, align 8
  %141 = add i64 %140, 1
  store i64 %141, i64* %j, align 8
  %142 = load %struct.obj_struct** %4, align 8
  %143 = getelementptr inbounds %struct.obj_struct* %142, i64 %140
  %144 = bitcast %struct.obj_struct* %139 to i8*
  %145 = bitcast %struct.obj_struct* %143 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %144, i8* %145, i64 16, i32 8, i1 false)
  br label %131

; <label>:146                                     ; preds = %131
  %147 = bitcast %struct.obj_struct* %1 to i8*
  %148 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %147, i8* %148, i64 16, i32 8, i1 false)
  br label %149

; <label>:149                                     ; preds = %146, %84
  %150 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %151 = load { %struct.smpType_struct*, i8* }* %150, align 1
  ret { %struct.smpType_struct*, i8* } %151
}

define { %struct.smpType_struct*, i8* } @smpArray_sort_quick(%struct.obj_struct* %a, i64 %last, %struct.smpType_struct* %cmp_fun.coerce0, i8* %cmp_fun.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %3 = alloca i64, align 8
  %cmp_fun = alloca %struct.obj_struct, align 8
  %pivot = alloca %struct.obj_struct, align 8
  %temp = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %cmp = alloca i32, align 4
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %a, %struct.obj_struct** %2, align 8
  store i64 %last, i64* %3, align 8
  %6 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %cmp_fun.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %cmp_fun.coerce1, i8** %8
  %9 = load i64* %3, align 8
  %10 = icmp ule i64 %9, 16
  br i1 %10, label %11, label %26

; <label>:11                                      ; preds = %0
  %12 = load %struct.obj_struct** %2, align 8
  %13 = load i64* %3, align 8
  %14 = add i64 %13, 1
  %15 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call { %struct.smpType_struct*, i8* } @smpArray_sort_insertion(%struct.obj_struct* %12, i64 %14, %struct.smpType_struct* %17, i8* %19)
  %21 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = extractvalue { %struct.smpType_struct*, i8* } %20, 0
  store %struct.smpType_struct* %23, %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = extractvalue { %struct.smpType_struct*, i8* } %20, 1
  store i8* %25, i8** %24, align 1
  br label %202

; <label>:26                                      ; preds = %0
  %27 = load i64* %3, align 8
  %28 = udiv i64 %27, 2
  %29 = load %struct.obj_struct** %2, align 8
  %30 = getelementptr inbounds %struct.obj_struct* %29, i64 %28
  %31 = bitcast %struct.obj_struct* %pivot to i8*
  %32 = bitcast %struct.obj_struct* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %31, i8* %32, i64 16, i32 8, i1 false)
  %33 = bitcast %struct.obj_struct* %temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %34 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %34, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  store i32 0, i32* %cmp, align 4
  store i64 0, i64* %i, align 8
  %35 = load i64* %3, align 8
  store i64 %35, i64* %j, align 8
  br label %36

; <label>:36                                      ; preds = %133, %26
  %37 = load i64* %i, align 8
  %38 = load i64* %j, align 8
  %39 = icmp sle i64 %37, %38
  br i1 %39, label %40, label %134

; <label>:40                                      ; preds = %36
  br label %41

; <label>:41                                      ; preds = %40, %70
  %42 = load i64* %i, align 8
  %43 = load %struct.obj_struct** %2, align 8
  %44 = getelementptr inbounds %struct.obj_struct* %43, i64 %42
  %45 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = load i8** %48, align 1
  %50 = bitcast %struct.obj_struct* %pivot to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = load %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = load i8** %53, align 1
  %55 = call i32 @smp_cmp_helper(%struct.obj_struct* %ret, %struct.smpType_struct* %47, i8* %49, %struct.smpType_struct* %52, i8* %54, %struct.obj_struct* byval align 8 %44)
  store i32 %55, i32* %cmp, align 4
  %56 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = load %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = load i8** %59, align 1
  %61 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %58, i8* %60)
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %63, label %66

; <label>:63                                      ; preds = %41
  %64 = bitcast %struct.obj_struct* %1 to i8*
  %65 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* %65, i64 16, i32 8, i1 false)
  br label %202

; <label>:66                                      ; preds = %41
  %67 = load i32* %cmp, align 4
  %68 = icmp sle i32 %67, 0
  br i1 %68, label %69, label %70

; <label>:69                                      ; preds = %66
  br label %73

; <label>:70                                      ; preds = %66
  %71 = load i64* %i, align 8
  %72 = add nsw i64 %71, 1
  store i64 %72, i64* %i, align 8
  br label %41

; <label>:73                                      ; preds = %69
  br label %74

; <label>:74                                      ; preds = %73, %103
  %75 = load i64* %j, align 8
  %76 = load %struct.obj_struct** %2, align 8
  %77 = getelementptr inbounds %struct.obj_struct* %76, i64 %75
  %78 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = load %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = load i8** %81, align 1
  %83 = bitcast %struct.obj_struct* %77 to { %struct.smpType_struct*, i8* }*
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 0
  %85 = load %struct.smpType_struct** %84, align 1
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 1
  %87 = load i8** %86, align 1
  %88 = call i32 @smp_cmp_helper(%struct.obj_struct* %ret, %struct.smpType_struct* %80, i8* %82, %struct.smpType_struct* %85, i8* %87, %struct.obj_struct* byval align 8 %pivot)
  store i32 %88, i32* %cmp, align 4
  %89 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %89, i32 0, i32 0
  %91 = load %struct.smpType_struct** %90, align 1
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %89, i32 0, i32 1
  %93 = load i8** %92, align 1
  %94 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %91, i8* %93)
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %96, label %99

; <label>:96                                      ; preds = %74
  %97 = bitcast %struct.obj_struct* %1 to i8*
  %98 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %97, i8* %98, i64 16, i32 8, i1 false)
  br label %202

; <label>:99                                      ; preds = %74
  %100 = load i32* %cmp, align 4
  %101 = icmp sle i32 %100, 0
  br i1 %101, label %102, label %103

; <label>:102                                     ; preds = %99
  br label %106

; <label>:103                                     ; preds = %99
  %104 = load i64* %j, align 8
  %105 = add nsw i64 %104, -1
  store i64 %105, i64* %j, align 8
  br label %74

; <label>:106                                     ; preds = %102
  %107 = load i64* %i, align 8
  %108 = load i64* %j, align 8
  %109 = icmp sle i64 %107, %108
  br i1 %109, label %110, label %133

; <label>:110                                     ; preds = %106
  %111 = load i64* %i, align 8
  %112 = load %struct.obj_struct** %2, align 8
  %113 = getelementptr inbounds %struct.obj_struct* %112, i64 %111
  %114 = bitcast %struct.obj_struct* %temp to i8*
  %115 = bitcast %struct.obj_struct* %113 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %114, i8* %115, i64 16, i32 8, i1 false)
  %116 = load i64* %i, align 8
  %117 = load %struct.obj_struct** %2, align 8
  %118 = getelementptr inbounds %struct.obj_struct* %117, i64 %116
  %119 = load i64* %j, align 8
  %120 = load %struct.obj_struct** %2, align 8
  %121 = getelementptr inbounds %struct.obj_struct* %120, i64 %119
  %122 = bitcast %struct.obj_struct* %118 to i8*
  %123 = bitcast %struct.obj_struct* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %122, i8* %123, i64 16, i32 8, i1 false)
  %124 = load i64* %j, align 8
  %125 = load %struct.obj_struct** %2, align 8
  %126 = getelementptr inbounds %struct.obj_struct* %125, i64 %124
  %127 = bitcast %struct.obj_struct* %126 to i8*
  %128 = bitcast %struct.obj_struct* %temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %127, i8* %128, i64 16, i32 8, i1 false)
  %129 = load i64* %i, align 8
  %130 = add nsw i64 %129, 1
  store i64 %130, i64* %i, align 8
  %131 = load i64* %j, align 8
  %132 = add nsw i64 %131, -1
  store i64 %132, i64* %j, align 8
  br label %133

; <label>:133                                     ; preds = %110, %106
  br label %36

; <label>:134                                     ; preds = %36
  %135 = load i64* %j, align 8
  %136 = icmp slt i64 0, %135
  br i1 %136, label %137, label %164

; <label>:137                                     ; preds = %134
  %138 = load %struct.obj_struct** %2, align 8
  %139 = load i64* %j, align 8
  %140 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %141 = getelementptr { %struct.smpType_struct*, i8* }* %140, i32 0, i32 0
  %142 = load %struct.smpType_struct** %141, align 1
  %143 = getelementptr { %struct.smpType_struct*, i8* }* %140, i32 0, i32 1
  %144 = load i8** %143, align 1
  %145 = call { %struct.smpType_struct*, i8* } @smpArray_sort_quick(%struct.obj_struct* %138, i64 %139, %struct.smpType_struct* %142, i8* %144)
  %146 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %147 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 0
  %148 = extractvalue { %struct.smpType_struct*, i8* } %145, 0
  store %struct.smpType_struct* %148, %struct.smpType_struct** %147, align 1
  %149 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 1
  %150 = extractvalue { %struct.smpType_struct*, i8* } %145, 1
  store i8* %150, i8** %149, align 1
  %151 = bitcast %struct.obj_struct* %ret to i8*
  %152 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %151, i8* %152, i64 16, i32 8, i1 false)
  %153 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %154 = getelementptr { %struct.smpType_struct*, i8* }* %153, i32 0, i32 0
  %155 = load %struct.smpType_struct** %154, align 1
  %156 = getelementptr { %struct.smpType_struct*, i8* }* %153, i32 0, i32 1
  %157 = load i8** %156, align 1
  %158 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %155, i8* %157)
  %159 = icmp ne i32 %158, 0
  br i1 %159, label %160, label %163

; <label>:160                                     ; preds = %137
  %161 = bitcast %struct.obj_struct* %1 to i8*
  %162 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %161, i8* %162, i64 16, i32 8, i1 false)
  br label %202

; <label>:163                                     ; preds = %137
  br label %164

; <label>:164                                     ; preds = %163, %134
  %165 = load i64* %i, align 8
  %166 = load i64* %3, align 8
  %167 = icmp ult i64 %165, %166
  br i1 %167, label %168, label %199

; <label>:168                                     ; preds = %164
  %169 = load %struct.obj_struct** %2, align 8
  %170 = load i64* %i, align 8
  %171 = getelementptr inbounds %struct.obj_struct* %169, i64 %170
  %172 = load i64* %3, align 8
  %173 = load i64* %i, align 8
  %174 = sub i64 %172, %173
  %175 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %176 = getelementptr { %struct.smpType_struct*, i8* }* %175, i32 0, i32 0
  %177 = load %struct.smpType_struct** %176, align 1
  %178 = getelementptr { %struct.smpType_struct*, i8* }* %175, i32 0, i32 1
  %179 = load i8** %178, align 1
  %180 = call { %struct.smpType_struct*, i8* } @smpArray_sort_quick(%struct.obj_struct* %171, i64 %174, %struct.smpType_struct* %177, i8* %179)
  %181 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %182 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 0
  %183 = extractvalue { %struct.smpType_struct*, i8* } %180, 0
  store %struct.smpType_struct* %183, %struct.smpType_struct** %182, align 1
  %184 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 1
  %185 = extractvalue { %struct.smpType_struct*, i8* } %180, 1
  store i8* %185, i8** %184, align 1
  %186 = bitcast %struct.obj_struct* %ret to i8*
  %187 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %186, i8* %187, i64 16, i32 8, i1 false)
  %188 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %189 = getelementptr { %struct.smpType_struct*, i8* }* %188, i32 0, i32 0
  %190 = load %struct.smpType_struct** %189, align 1
  %191 = getelementptr { %struct.smpType_struct*, i8* }* %188, i32 0, i32 1
  %192 = load i8** %191, align 1
  %193 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %190, i8* %192)
  %194 = icmp ne i32 %193, 0
  br i1 %194, label %195, label %198

; <label>:195                                     ; preds = %168
  %196 = bitcast %struct.obj_struct* %1 to i8*
  %197 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %196, i8* %197, i64 16, i32 8, i1 false)
  br label %202

; <label>:198                                     ; preds = %168
  br label %199

; <label>:199                                     ; preds = %198, %164
  %200 = bitcast %struct.obj_struct* %1 to i8*
  %201 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %200, i8* %201, i64 16, i32 8, i1 false)
  br label %202

; <label>:202                                     ; preds = %199, %195, %160, %96, %63, %11
  %203 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %204 = load { %struct.smpType_struct*, i8* }* %203, align 1
  ret { %struct.smpType_struct*, i8* } %204
}

define { %struct.obj_struct*, i64 } @timmy_get_run(%struct.obj_struct* %ret, %struct.obj_struct* %a, i64 %length, %struct.smpType_struct* %cmp_fun.coerce0, i8* %cmp_fun.coerce1) nounwind {
  %1 = alloca %struct.smpArray_struct, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca i64, align 8
  %cmp_fun = alloca %struct.obj_struct, align 8
  %res_array = alloca %struct.smpArray_struct, align 8
  %i = alloca i64, align 8
  %cmp = alloca i32, align 4
  %j = alloca i64, align 8
  %temp = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  store %struct.obj_struct* %ret, %struct.obj_struct** %2, align 8
  store %struct.obj_struct* %a, %struct.obj_struct** %3, align 8
  store i64 %length, i64* %4, align 8
  %6 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %cmp_fun.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %cmp_fun.coerce1, i8** %8
  %9 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 0
  store %struct.obj_struct* null, %struct.obj_struct** %9, align 8
  %10 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  store i64 0, i64* %10, align 8
  %11 = load i64* %4, align 8
  %12 = icmp eq i64 %11, 1
  br i1 %12, label %13, label %19

; <label>:13                                      ; preds = %0
  %14 = load %struct.obj_struct** %3, align 8
  %15 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 0
  store %struct.obj_struct* %14, %struct.obj_struct** %15, align 8
  %16 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  store i64 1, i64* %16, align 8
  %17 = bitcast %struct.smpArray_struct* %1 to i8*
  %18 = bitcast %struct.smpArray_struct* %res_array to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 16, i32 8, i1 false)
  br label %240

; <label>:19                                      ; preds = %0
  store i64 0, i64* %i, align 8
  store i32 0, i32* %cmp, align 4
  %20 = load %struct.obj_struct** %2, align 8
  %21 = load i64* %i, align 8
  %22 = load %struct.obj_struct** %3, align 8
  %23 = getelementptr inbounds %struct.obj_struct* %22, i64 %21
  %24 = load i64* %i, align 8
  %25 = add i64 %24, 1
  %26 = load %struct.obj_struct** %3, align 8
  %27 = getelementptr inbounds %struct.obj_struct* %26, i64 %25
  %28 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = load %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = load i8** %31, align 1
  %33 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 0
  %35 = load %struct.smpType_struct** %34, align 1
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 1
  %37 = load i8** %36, align 1
  %38 = call i32 @smp_cmp_helper(%struct.obj_struct* %20, %struct.smpType_struct* %30, i8* %32, %struct.smpType_struct* %35, i8* %37, %struct.obj_struct* byval align 8 %27)
  store i32 %38, i32* %cmp, align 4
  %39 = load %struct.obj_struct** %2, align 8
  %40 = bitcast %struct.obj_struct* %39 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = load %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = load i8** %43, align 1
  %45 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %42, i8* %44)
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %50

; <label>:47                                      ; preds = %19
  %48 = bitcast %struct.smpArray_struct* %1 to i8*
  %49 = bitcast %struct.smpArray_struct* %res_array to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 16, i32 8, i1 false)
  br label %240

; <label>:50                                      ; preds = %19
  %51 = load i32* %cmp, align 4
  %52 = icmp sgt i32 %51, 0
  br i1 %52, label %53, label %147

; <label>:53                                      ; preds = %50
  %54 = load i64* %i, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %i, align 8
  br label %56

; <label>:56                                      ; preds = %97, %53
  %57 = load i64* %i, align 8
  %58 = add i64 %57, 1
  %59 = load i64* %4, align 8
  %60 = icmp ult i64 %58, %59
  br i1 %60, label %61, label %100

; <label>:61                                      ; preds = %56
  %62 = load %struct.obj_struct** %2, align 8
  %63 = load i64* %i, align 8
  %64 = load %struct.obj_struct** %3, align 8
  %65 = getelementptr inbounds %struct.obj_struct* %64, i64 %63
  %66 = load i64* %i, align 8
  %67 = add i64 %66, 1
  %68 = load %struct.obj_struct** %3, align 8
  %69 = getelementptr inbounds %struct.obj_struct* %68, i64 %67
  %70 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = load %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = load i8** %73, align 1
  %75 = bitcast %struct.obj_struct* %65 to { %struct.smpType_struct*, i8* }*
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 0
  %77 = load %struct.smpType_struct** %76, align 1
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 1
  %79 = load i8** %78, align 1
  %80 = call i32 @smp_cmp_helper(%struct.obj_struct* %62, %struct.smpType_struct* %72, i8* %74, %struct.smpType_struct* %77, i8* %79, %struct.obj_struct* byval align 8 %69)
  store i32 %80, i32* %cmp, align 4
  %81 = load %struct.obj_struct** %2, align 8
  %82 = bitcast %struct.obj_struct* %81 to { %struct.smpType_struct*, i8* }*
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 0
  %84 = load %struct.smpType_struct** %83, align 1
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 1
  %86 = load i8** %85, align 1
  %87 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %84, i8* %86)
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %92

; <label>:89                                      ; preds = %61
  %90 = bitcast %struct.smpArray_struct* %1 to i8*
  %91 = bitcast %struct.smpArray_struct* %res_array to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %90, i8* %91, i64 16, i32 8, i1 false)
  br label %240

; <label>:92                                      ; preds = %61
  %93 = load i32* %cmp, align 4
  %94 = icmp sle i32 %93, 0
  br i1 %94, label %95, label %96

; <label>:95                                      ; preds = %92
  br label %100

; <label>:96                                      ; preds = %92
  br label %97

; <label>:97                                      ; preds = %96
  %98 = load i64* %i, align 8
  %99 = add i64 %98, 1
  store i64 %99, i64* %i, align 8
  br label %56

; <label>:100                                     ; preds = %95, %56
  %101 = load %struct.obj_struct** %3, align 8
  %102 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 0
  store %struct.obj_struct* %101, %struct.obj_struct** %102, align 8
  %103 = load i64* %i, align 8
  %104 = add i64 %103, 1
  store i64 %104, i64* %i, align 8
  %105 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  store i64 %104, i64* %105, align 8
  store i64 0, i64* %j, align 8
  br label %106

; <label>:106                                     ; preds = %143, %100
  %107 = load i64* %j, align 8
  %108 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  %109 = load i64* %108, align 8
  %110 = udiv i64 %109, 2
  %111 = icmp ult i64 %107, %110
  br i1 %111, label %112, label %146

; <label>:112                                     ; preds = %106
  %113 = load i64* %j, align 8
  %114 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 0
  %115 = load %struct.obj_struct** %114, align 8
  %116 = getelementptr inbounds %struct.obj_struct* %115, i64 %113
  %117 = bitcast %struct.obj_struct* %temp to i8*
  %118 = bitcast %struct.obj_struct* %116 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %117, i8* %118, i64 16, i32 8, i1 false)
  %119 = load i64* %j, align 8
  %120 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 0
  %121 = load %struct.obj_struct** %120, align 8
  %122 = getelementptr inbounds %struct.obj_struct* %121, i64 %119
  %123 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  %124 = load i64* %123, align 8
  %125 = load i64* %j, align 8
  %126 = sub i64 %124, %125
  %127 = sub i64 %126, 1
  %128 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 0
  %129 = load %struct.obj_struct** %128, align 8
  %130 = getelementptr inbounds %struct.obj_struct* %129, i64 %127
  %131 = bitcast %struct.obj_struct* %122 to i8*
  %132 = bitcast %struct.obj_struct* %130 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %131, i8* %132, i64 16, i32 8, i1 false)
  %133 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  %134 = load i64* %133, align 8
  %135 = load i64* %j, align 8
  %136 = sub i64 %134, %135
  %137 = sub i64 %136, 1
  %138 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 0
  %139 = load %struct.obj_struct** %138, align 8
  %140 = getelementptr inbounds %struct.obj_struct* %139, i64 %137
  %141 = bitcast %struct.obj_struct* %140 to i8*
  %142 = bitcast %struct.obj_struct* %temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %141, i8* %142, i64 16, i32 8, i1 false)
  br label %143

; <label>:143                                     ; preds = %112
  %144 = load i64* %j, align 8
  %145 = add i64 %144, 1
  store i64 %145, i64* %j, align 8
  br label %106

; <label>:146                                     ; preds = %106
  br label %200

; <label>:147                                     ; preds = %50
  %148 = load i64* %i, align 8
  %149 = add i64 %148, 1
  store i64 %149, i64* %i, align 8
  br label %150

; <label>:150                                     ; preds = %191, %147
  %151 = load i64* %i, align 8
  %152 = add i64 %151, 1
  %153 = load i64* %4, align 8
  %154 = icmp ult i64 %152, %153
  br i1 %154, label %155, label %194

; <label>:155                                     ; preds = %150
  %156 = load %struct.obj_struct** %2, align 8
  %157 = load i64* %i, align 8
  %158 = load %struct.obj_struct** %3, align 8
  %159 = getelementptr inbounds %struct.obj_struct* %158, i64 %157
  %160 = load i64* %i, align 8
  %161 = add i64 %160, 1
  %162 = load %struct.obj_struct** %3, align 8
  %163 = getelementptr inbounds %struct.obj_struct* %162, i64 %161
  %164 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %165 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 0
  %166 = load %struct.smpType_struct** %165, align 1
  %167 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 1
  %168 = load i8** %167, align 1
  %169 = bitcast %struct.obj_struct* %159 to { %struct.smpType_struct*, i8* }*
  %170 = getelementptr { %struct.smpType_struct*, i8* }* %169, i32 0, i32 0
  %171 = load %struct.smpType_struct** %170, align 1
  %172 = getelementptr { %struct.smpType_struct*, i8* }* %169, i32 0, i32 1
  %173 = load i8** %172, align 1
  %174 = call i32 @smp_cmp_helper(%struct.obj_struct* %156, %struct.smpType_struct* %166, i8* %168, %struct.smpType_struct* %171, i8* %173, %struct.obj_struct* byval align 8 %163)
  store i32 %174, i32* %cmp, align 4
  %175 = load %struct.obj_struct** %2, align 8
  %176 = bitcast %struct.obj_struct* %175 to { %struct.smpType_struct*, i8* }*
  %177 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 0
  %178 = load %struct.smpType_struct** %177, align 1
  %179 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 1
  %180 = load i8** %179, align 1
  %181 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %178, i8* %180)
  %182 = icmp ne i32 %181, 0
  br i1 %182, label %183, label %186

; <label>:183                                     ; preds = %155
  %184 = bitcast %struct.smpArray_struct* %1 to i8*
  %185 = bitcast %struct.smpArray_struct* %res_array to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %184, i8* %185, i64 16, i32 8, i1 false)
  br label %240

; <label>:186                                     ; preds = %155
  %187 = load i32* %cmp, align 4
  %188 = icmp sgt i32 %187, 0
  br i1 %188, label %189, label %190

; <label>:189                                     ; preds = %186
  br label %194

; <label>:190                                     ; preds = %186
  br label %191

; <label>:191                                     ; preds = %190
  %192 = load i64* %i, align 8
  %193 = add i64 %192, 1
  store i64 %193, i64* %i, align 8
  br label %150

; <label>:194                                     ; preds = %189, %150
  %195 = load %struct.obj_struct** %3, align 8
  %196 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 0
  store %struct.obj_struct* %195, %struct.obj_struct** %196, align 8
  %197 = load i64* %i, align 8
  %198 = add i64 %197, 1
  store i64 %198, i64* %i, align 8
  %199 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  store i64 %198, i64* %199, align 8
  br label %200

; <label>:200                                     ; preds = %194, %146
  %201 = load i64* %i, align 8
  %202 = icmp eq i64 %201, 0
  br i1 %202, label %203, label %204

; <label>:203                                     ; preds = %200
  br label %237

; <label>:204                                     ; preds = %200
  %205 = load i64* %i, align 8
  %206 = icmp ult i64 %205, 16
  br i1 %206, label %207, label %236

; <label>:207                                     ; preds = %204
  %208 = load i64* %4, align 8
  %209 = icmp ult i64 %208, 16
  br i1 %209, label %210, label %212

; <label>:210                                     ; preds = %207
  %211 = load i64* %4, align 8
  br label %213

; <label>:212                                     ; preds = %207
  br label %213

; <label>:213                                     ; preds = %212, %210
  %214 = phi i64 [ %211, %210 ], [ 16, %212 ]
  %215 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  store i64 %214, i64* %215, align 8
  %216 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  %217 = load i64* %216, align 8
  store i64 %217, i64* %i, align 8
  %218 = load %struct.obj_struct** %2, align 8
  %219 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 0
  %220 = load %struct.obj_struct** %219, align 8
  %221 = getelementptr inbounds %struct.smpArray_struct* %res_array, i32 0, i32 1
  %222 = load i64* %221, align 8
  %223 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %224 = getelementptr { %struct.smpType_struct*, i8* }* %223, i32 0, i32 0
  %225 = load %struct.smpType_struct** %224, align 1
  %226 = getelementptr { %struct.smpType_struct*, i8* }* %223, i32 0, i32 1
  %227 = load i8** %226, align 1
  %228 = call { %struct.smpType_struct*, i8* } @smpArray_sort_insertion(%struct.obj_struct* %220, i64 %222, %struct.smpType_struct* %225, i8* %227)
  %229 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %230 = getelementptr { %struct.smpType_struct*, i8* }* %229, i32 0, i32 0
  %231 = extractvalue { %struct.smpType_struct*, i8* } %228, 0
  store %struct.smpType_struct* %231, %struct.smpType_struct** %230, align 1
  %232 = getelementptr { %struct.smpType_struct*, i8* }* %229, i32 0, i32 1
  %233 = extractvalue { %struct.smpType_struct*, i8* } %228, 1
  store i8* %233, i8** %232, align 1
  %234 = bitcast %struct.obj_struct* %218 to i8*
  %235 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %234, i8* %235, i64 16, i32 8, i1 false)
  br label %236

; <label>:236                                     ; preds = %213, %204
  br label %237

; <label>:237                                     ; preds = %236, %203
  %238 = bitcast %struct.smpArray_struct* %1 to i8*
  %239 = bitcast %struct.smpArray_struct* %res_array to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %238, i8* %239, i64 16, i32 8, i1 false)
  br label %240

; <label>:240                                     ; preds = %237, %183, %89, %47, %13
  %241 = bitcast %struct.smpArray_struct* %1 to { %struct.obj_struct*, i64 }*
  %242 = load { %struct.obj_struct*, i64 }* %241, align 1
  ret { %struct.obj_struct*, i64 } %242
}

define { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpstrstruct*, align 8
  %str2 = alloca %struct.smpstrstruct, align 8
  %length = alloca i64, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = call i32 @smpObject_instancep_c(%struct.smpType_struct* %11, %struct.smpType_struct* byval align 8 %13)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %93

; <label>:16                                      ; preds = %0
  %17 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %18 = load i8** %17, align 8
  %19 = bitcast i8* %18 to %struct.smpstrstruct*
  store %struct.smpstrstruct* %19, %struct.smpstrstruct** %core, align 8
  %20 = load %struct.obj_struct** %3, align 8
  %21 = getelementptr inbounds %struct.obj_struct* %20, i64 0
  %22 = getelementptr inbounds %struct.obj_struct* %21, i32 0, i32 1
  %23 = load i8** %22, align 8
  %24 = bitcast i8* %23 to %struct.smpstrstruct*
  %25 = bitcast %struct.smpstrstruct* %str2 to i8*
  %26 = bitcast %struct.smpstrstruct* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 16, i32 8, i1 false)
  %27 = load %struct.smpstrstruct** %core, align 8
  %28 = getelementptr inbounds %struct.smpstrstruct* %27, i32 0, i32 1
  %29 = load i64* %28, align 8
  %30 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 1
  %31 = load i64* %30, align 8
  %32 = add i64 %29, %31
  store i64 %32, i64* %length, align 8
  %33 = load %struct.smpstrstruct** %core, align 8
  %34 = getelementptr inbounds %struct.smpstrstruct* %33, i32 0, i32 0
  %35 = load i8** %34, align 8
  %36 = load i64* %length, align 8
  %37 = add i64 %36, 1
  %38 = call i8* @GC_realloc(i8* %35, i64 %37)
  %39 = load %struct.smpstrstruct** %core, align 8
  %40 = getelementptr inbounds %struct.smpstrstruct* %39, i32 0, i32 0
  store i8* %38, i8** %40, align 8
  %41 = load %struct.smpstrstruct** %core, align 8
  %42 = getelementptr inbounds %struct.smpstrstruct* %41, i32 0, i32 0
  %43 = load i8** %42, align 8
  %44 = load %struct.smpstrstruct** %core, align 8
  %45 = getelementptr inbounds %struct.smpstrstruct* %44, i32 0, i32 1
  %46 = load i64* %45, align 8
  %47 = getelementptr inbounds i8* %43, i64 %46
  %48 = call i64 @llvm.objectsize.i64(i8* %47, i1 false)
  %49 = icmp ne i64 %48, -1
  br i1 %49, label %50, label %72

; <label>:50                                      ; preds = %16
  %51 = load %struct.smpstrstruct** %core, align 8
  %52 = getelementptr inbounds %struct.smpstrstruct* %51, i32 0, i32 0
  %53 = load i8** %52, align 8
  %54 = load %struct.smpstrstruct** %core, align 8
  %55 = getelementptr inbounds %struct.smpstrstruct* %54, i32 0, i32 1
  %56 = load i64* %55, align 8
  %57 = getelementptr inbounds i8* %53, i64 %56
  %58 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 0
  %59 = load i8** %58, align 8
  %60 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 1
  %61 = load i64* %60, align 8
  %62 = mul i64 1, %61
  %63 = load %struct.smpstrstruct** %core, align 8
  %64 = getelementptr inbounds %struct.smpstrstruct* %63, i32 0, i32 0
  %65 = load i8** %64, align 8
  %66 = load %struct.smpstrstruct** %core, align 8
  %67 = getelementptr inbounds %struct.smpstrstruct* %66, i32 0, i32 1
  %68 = load i64* %67, align 8
  %69 = getelementptr inbounds i8* %65, i64 %68
  %70 = call i64 @llvm.objectsize.i64(i8* %69, i1 false)
  %71 = call i8* @__memcpy_chk(i8* %57, i8* %59, i64 %62, i64 %70) nounwind
  br label %86

; <label>:72                                      ; preds = %16
  %73 = load %struct.smpstrstruct** %core, align 8
  %74 = getelementptr inbounds %struct.smpstrstruct* %73, i32 0, i32 0
  %75 = load i8** %74, align 8
  %76 = load %struct.smpstrstruct** %core, align 8
  %77 = getelementptr inbounds %struct.smpstrstruct* %76, i32 0, i32 1
  %78 = load i64* %77, align 8
  %79 = getelementptr inbounds i8* %75, i64 %78
  %80 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 0
  %81 = load i8** %80, align 8
  %82 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 1
  %83 = load i64* %82, align 8
  %84 = mul i64 1, %83
  %85 = call i8* @__inline_memcpy_chk(i8* %79, i8* %81, i64 %84)
  br label %86

; <label>:86                                      ; preds = %72, %50
  %87 = phi i8* [ %71, %50 ], [ %85, %72 ]
  %88 = load i64* %length, align 8
  %89 = load %struct.smpstrstruct** %core, align 8
  %90 = getelementptr inbounds %struct.smpstrstruct* %89, i32 0, i32 1
  store i64 %88, i64* %90, align 8
  %91 = bitcast %struct.obj_struct* %1 to i8*
  %92 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %91, i8* %92, i64 16, i32 8, i1 false)
  br label %120

; <label>:93                                      ; preds = %0
  %94 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %95 = load %struct.smpType_struct** %94, align 8
  %96 = load %struct.obj_struct** %3, align 8
  %97 = getelementptr inbounds %struct.obj_struct* %96, i64 0
  %98 = bitcast %struct.obj_struct* %97 to { %struct.smpType_struct*, i8* }*
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 0
  %100 = load %struct.smpType_struct** %99, align 1
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 1
  %102 = load i8** %101, align 1
  %103 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %95, %struct.smpType_struct* %100, i8* %102)
  %104 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 0
  %106 = extractvalue { %struct.smpType_struct*, i8* } %103, 0
  store %struct.smpType_struct* %106, %struct.smpType_struct** %105, align 1
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 1
  %108 = extractvalue { %struct.smpType_struct*, i8* } %103, 1
  store i8* %108, i8** %107, align 1
  %109 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 0
  %111 = load %struct.smpType_struct** %110, align 1
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 1
  %113 = load i8** %112, align 1
  %114 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %111, i8* %113)
  %115 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 0
  %117 = extractvalue { %struct.smpType_struct*, i8* } %114, 0
  store %struct.smpType_struct* %117, %struct.smpType_struct** %116, align 1
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 1
  %119 = extractvalue { %struct.smpType_struct*, i8* } %114, 1
  store i8* %119, i8** %118, align 1
  br label %120

; <label>:120                                     ; preds = %93, %86
  %121 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %122 = load { %struct.smpType_struct*, i8* }* %121, align 1
  ret { %struct.smpType_struct*, i8* } %122
}

define { %struct.smpType_struct*, i8* } @smpObject_truep(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call i32 @smpObject_truep_c(%struct.smpType_struct* %9, i8* %11)
  %13 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %12)
  %14 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = extractvalue { %struct.smpType_struct*, i8* } %13, 0
  store %struct.smpType_struct* %16, %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = extractvalue { %struct.smpType_struct*, i8* } %13, 1
  store i8* %18, i8** %17, align 1
  %19 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %20 = load { %struct.smpType_struct*, i8* }* %19, align 1
  ret { %struct.smpType_struct*, i8* } %20
}

define i32 @smpCollection_create_class() nounwind {
  %collclass = alloca %struct.obj_struct, align 8
  %1 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([11 x i8]* @.str39, i32 0, i32 0))
  %2 = bitcast %struct.obj_struct* %collclass to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  %4 = extractvalue { %struct.smpType_struct*, i8* } %1, 0
  store %struct.smpType_struct* %4, %struct.smpType_struct** %3, align 1
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  %6 = extractvalue { %struct.smpType_struct*, i8* } %1, 1
  store i8* %6, i8** %5, align 1
  ret i32 0
}

define i32 @smpException_create_class() nounwind {
  %exc = alloca %struct.obj_struct, align 8
  %runtime_exception = alloca %struct.obj_struct, align 8
  %smpType_runtime = alloca %struct.smpType_struct*, align 8
  %type_exception = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([10 x i8]* @.str43, i32 0, i32 0))
  %10 = bitcast %struct.obj_struct* %exc to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([17 x i8]* @.str45, i32 0, i32 0))
  %16 = bitcast %struct.obj_struct* %runtime_exception to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = extractvalue { %struct.smpType_struct*, i8* } %15, 0
  store %struct.smpType_struct* %18, %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = extractvalue { %struct.smpType_struct*, i8* } %15, 1
  store i8* %20, i8** %19, align 1
  %21 = getelementptr inbounds %struct.obj_struct* %runtime_exception, i32 0, i32 1
  %22 = load i8** %21, align 8
  %23 = bitcast i8* %22 to %struct.smpType_struct*
  store %struct.smpType_struct* %23, %struct.smpType_struct** %smpType_runtime, align 8
  %24 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([10 x i8]* @.str48, i32 0, i32 0))
  %25 = bitcast %struct.obj_struct* %type_exception to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = extractvalue { %struct.smpType_struct*, i8* } %24, 0
  store %struct.smpType_struct* %27, %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = extractvalue { %struct.smpType_struct*, i8* } %24, 1
  store i8* %29, i8** %28, align 1
  %30 = load %struct.smpType_struct** %smpType_runtime, align 8
  %31 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([24 x i8]* @.str9, i32 0, i32 0), %struct.smpType_struct* %30, i32 0)
  %32 = load %struct.smpType_struct** %smpType_runtime, align 8
  %33 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([25 x i8]* @.str118, i32 0, i32 0), %struct.smpType_struct* %32, i32 0)
  %34 = load %struct.smpType_struct** %smpType_runtime, align 8
  %35 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([26 x i8]* @.str108, i32 0, i32 0), %struct.smpType_struct* %34, i32 0)
  %36 = load %struct.smpType_struct** %smpType_runtime, align 8
  %37 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0), %struct.smpType_struct* %36, i32 0)
  %38 = load %struct.smpType_struct** %smpType_runtime, align 8
  %39 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([18 x i8]* @.str119, i32 0, i32 0), %struct.smpType_struct* %38, i32 0)
  %40 = load %struct.smpType_struct** %smpType_runtime, align 8
  %41 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([22 x i8]* @.str120, i32 0, i32 0), %struct.smpType_struct* %40, i32 0)
  %42 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpException_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %43 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = extractvalue { %struct.smpType_struct*, i8* } %42, 0
  store %struct.smpType_struct* %45, %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = extractvalue { %struct.smpType_struct*, i8* } %42, 1
  store i8* %47, i8** %46, align 1
  %48 = bitcast %struct.obj_struct* %exc to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = load %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = load i8** %51, align 1
  %53 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = load %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = load i8** %56, align 1
  %58 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %50, i8* %52, i32 64, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %55, i8* %57)
  %59 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = extractvalue { %struct.smpType_struct*, i8* } %58, 0
  store %struct.smpType_struct* %61, %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = extractvalue { %struct.smpType_struct*, i8* } %58, 1
  store i8* %63, i8** %62, align 1
  %64 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpException_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %65 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = extractvalue { %struct.smpType_struct*, i8* } %64, 0
  store %struct.smpType_struct* %67, %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = extractvalue { %struct.smpType_struct*, i8* } %64, 1
  store i8* %69, i8** %68, align 1
  %70 = bitcast %struct.obj_struct* %exc to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = load %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = load i8** %73, align 1
  %75 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 0
  %77 = load %struct.smpType_struct** %76, align 1
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 1
  %79 = load i8** %78, align 1
  %80 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %72, i8* %74, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %77, i8* %79)
  %81 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = extractvalue { %struct.smpType_struct*, i8* } %80, 0
  store %struct.smpType_struct* %83, %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = extractvalue { %struct.smpType_struct*, i8* } %80, 1
  store i8* %85, i8** %84, align 1
  %86 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpTypeError_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %87 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = extractvalue { %struct.smpType_struct*, i8* } %86, 0
  store %struct.smpType_struct* %89, %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = extractvalue { %struct.smpType_struct*, i8* } %86, 1
  store i8* %91, i8** %90, align 1
  %92 = bitcast %struct.obj_struct* %type_exception to { %struct.smpType_struct*, i8* }*
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 0
  %94 = load %struct.smpType_struct** %93, align 1
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 1
  %96 = load i8** %95, align 1
  %97 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 0
  %99 = load %struct.smpType_struct** %98, align 1
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 1
  %101 = load i8** %100, align 1
  %102 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %94, i8* %96, i32 64, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %99, i8* %101)
  %103 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %103, i32 0, i32 0
  %105 = extractvalue { %struct.smpType_struct*, i8* } %102, 0
  store %struct.smpType_struct* %105, %struct.smpType_struct** %104, align 1
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %103, i32 0, i32 1
  %107 = extractvalue { %struct.smpType_struct*, i8* } %102, 1
  store i8* %107, i8** %106, align 1
  %108 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpTypeError_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %109 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 0
  %111 = extractvalue { %struct.smpType_struct*, i8* } %108, 0
  store %struct.smpType_struct* %111, %struct.smpType_struct** %110, align 1
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 1
  %113 = extractvalue { %struct.smpType_struct*, i8* } %108, 1
  store i8* %113, i8** %112, align 1
  %114 = bitcast %struct.obj_struct* %type_exception to { %struct.smpType_struct*, i8* }*
  %115 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 0
  %116 = load %struct.smpType_struct** %115, align 1
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 1
  %118 = load i8** %117, align 1
  %119 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %119, i32 0, i32 0
  %121 = load %struct.smpType_struct** %120, align 1
  %122 = getelementptr { %struct.smpType_struct*, i8* }* %119, i32 0, i32 1
  %123 = load i8** %122, align 1
  %124 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %116, i8* %118, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %121, i8* %123)
  %125 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 0
  %127 = extractvalue { %struct.smpType_struct*, i8* } %124, 0
  store %struct.smpType_struct* %127, %struct.smpType_struct** %126, align 1
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 1
  %129 = extractvalue { %struct.smpType_struct*, i8* } %124, 1
  store i8* %129, i8** %128, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpException_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpException_struct*
  %10 = getelementptr inbounds %struct.smpException_struct* %9, i32 0, i32 0
  %11 = load i8** %10, align 8
  call void @GC_free(i8* %11)
  %12 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = load { %struct.smpType_struct*, i8* }* %13, align 1
  ret { %struct.smpType_struct*, i8* } %14
}

define { %struct.smpType_struct*, i8* } @smpException_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpException_struct, align 8
  %bt = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %temp = alloca %struct.obj_struct, align 8
  %from = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %14
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  store i8* %obj.coerce1, i8** %15
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %16 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %17 = load i8** %16, align 8
  %18 = bitcast i8* %17 to %struct.smpException_struct*
  %19 = bitcast %struct.smpException_struct* %core to i8*
  %20 = bitcast %struct.smpException_struct* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 24, i32 8, i1 false)
  %21 = getelementptr inbounds %struct.smpException_struct* %core, i32 0, i32 1
  store %struct.obj_struct* %21, %struct.obj_struct** %bt, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %23 = load %struct.smpType_struct** %22, align 8
  %24 = getelementptr inbounds %struct.smpType_struct* %23, i32 0, i32 0
  %25 = load i8** %24, align 8
  %26 = getelementptr inbounds %struct.smpException_struct* %core, i32 0, i32 0
  %27 = load i8** %26, align 8
  %28 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpString_init_fmt(i8* getelementptr inbounds ([7 x i8]* @.str123, i32 0, i32 0), i8* %25, i8* %27)
  %29 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = extractvalue { %struct.smpType_struct*, i8* } %28, 0
  store %struct.smpType_struct* %31, %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = extractvalue { %struct.smpType_struct*, i8* } %28, 1
  store i8* %33, i8** %32, align 1
  %34 = load %struct.obj_struct** %bt, align 8
  %35 = getelementptr inbounds %struct.obj_struct* %34, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 8
  %37 = getelementptr inbounds %struct.smpType_struct* %36, i32 0, i32 1
  %38 = load i32* %37, align 4
  %39 = load i32* @smpType_id_nil, align 4
  %40 = icmp eq i32 %38, %39
  br i1 %40, label %41, label %44

; <label>:41                                      ; preds = %0
  %42 = bitcast %struct.obj_struct* %1 to i8*
  %43 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* %43, i64 16, i32 8, i1 false)
  br label %154

; <label>:44                                      ; preds = %0
  %45 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpString_init_fmt(i8* getelementptr inbounds ([8 x i8]* @.str124, i32 0, i32 0))
  %46 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = extractvalue { %struct.smpType_struct*, i8* } %45, 0
  store %struct.smpType_struct* %48, %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = extractvalue { %struct.smpType_struct*, i8* } %45, 1
  store i8* %50, i8** %49, align 1
  %51 = bitcast %struct.obj_struct* %from to i8*
  %52 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %52, i64 16, i32 8, i1 false)
  br label %53

; <label>:53                                      ; preds = %116, %44
  %54 = load %struct.obj_struct** %bt, align 8
  %55 = icmp ne %struct.obj_struct* %54, null
  br i1 %55, label %56, label %145

; <label>:56                                      ; preds = %53
  %57 = load %struct.obj_struct** %bt, align 8
  %58 = bitcast %struct.obj_struct* %57 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = load %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = load i8** %61, align 1
  %63 = call { %struct.smpType_struct*, i8* } @smp_println(%struct.smpType_struct* %60, i8* %62)
  %64 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 0
  %66 = extractvalue { %struct.smpType_struct*, i8* } %63, 0
  store %struct.smpType_struct* %66, %struct.smpType_struct** %65, align 1
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 1
  %68 = extractvalue { %struct.smpType_struct*, i8* } %63, 1
  store i8* %68, i8** %67, align 1
  %69 = load %struct.obj_struct** %bt, align 8
  %70 = bitcast %struct.obj_struct* %69 to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = load %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = load i8** %73, align 1
  %75 = call { %struct.smpType_struct*, i8* } @smpList_car(%struct.smpType_struct* %72, i8* %74, i32 0, %struct.obj_struct* null)
  %76 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 0
  %78 = extractvalue { %struct.smpType_struct*, i8* } %75, 0
  store %struct.smpType_struct* %78, %struct.smpType_struct** %77, align 1
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 1
  %80 = extractvalue { %struct.smpType_struct*, i8* } %75, 1
  store i8* %80, i8** %79, align 1
  %81 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = load %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = load i8** %84, align 1
  %86 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %83, i8* %85, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %87 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = extractvalue { %struct.smpType_struct*, i8* } %86, 0
  store %struct.smpType_struct* %89, %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = extractvalue { %struct.smpType_struct*, i8* } %86, 1
  store i8* %91, i8** %90, align 1
  %92 = bitcast %struct.obj_struct* %temp to i8*
  %93 = bitcast %struct.obj_struct* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %92, i8* %93, i64 16, i32 8, i1 false)
  %94 = bitcast %struct.obj_struct* %temp to { %struct.smpType_struct*, i8* }*
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 0
  %96 = load %struct.smpType_struct** %95, align 1
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 1
  %98 = load i8** %97, align 1
  %99 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %96, i8* %98)
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %116

; <label>:101                                     ; preds = %56
  %102 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %from)
  %103 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %103, i32 0, i32 0
  %105 = extractvalue { %struct.smpType_struct*, i8* } %102, 0
  store %struct.smpType_struct* %105, %struct.smpType_struct** %104, align 1
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %103, i32 0, i32 1
  %107 = extractvalue { %struct.smpType_struct*, i8* } %102, 1
  store i8* %107, i8** %106, align 1
  %108 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %res)
  %109 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 0
  %111 = extractvalue { %struct.smpType_struct*, i8* } %108, 0
  store %struct.smpType_struct* %111, %struct.smpType_struct** %110, align 1
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 1
  %113 = extractvalue { %struct.smpType_struct*, i8* } %108, 1
  store i8* %113, i8** %112, align 1
  %114 = bitcast %struct.obj_struct* %1 to i8*
  %115 = bitcast %struct.obj_struct* %temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %114, i8* %115, i64 16, i32 8, i1 false)
  br label %154

; <label>:116                                     ; preds = %56
  %117 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 0
  %119 = load %struct.smpType_struct** %118, align 1
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 1
  %121 = load i8** %120, align 1
  %122 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %119, i8* %121, i32 1, %struct.obj_struct* %from)
  %123 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %124 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 0
  %125 = extractvalue { %struct.smpType_struct*, i8* } %122, 0
  store %struct.smpType_struct* %125, %struct.smpType_struct** %124, align 1
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 1
  %127 = extractvalue { %struct.smpType_struct*, i8* } %122, 1
  store i8* %127, i8** %126, align 1
  %128 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %129 = getelementptr { %struct.smpType_struct*, i8* }* %128, i32 0, i32 0
  %130 = load %struct.smpType_struct** %129, align 1
  %131 = getelementptr { %struct.smpType_struct*, i8* }* %128, i32 0, i32 1
  %132 = load i8** %131, align 1
  %133 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %130, i8* %132, i32 1, %struct.obj_struct* %temp)
  %134 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %135 = getelementptr { %struct.smpType_struct*, i8* }* %134, i32 0, i32 0
  %136 = extractvalue { %struct.smpType_struct*, i8* } %133, 0
  store %struct.smpType_struct* %136, %struct.smpType_struct** %135, align 1
  %137 = getelementptr { %struct.smpType_struct*, i8* }* %134, i32 0, i32 1
  %138 = extractvalue { %struct.smpType_struct*, i8* } %133, 1
  store i8* %138, i8** %137, align 1
  %139 = load %struct.obj_struct** %bt, align 8
  %140 = getelementptr inbounds %struct.obj_struct* %139, i32 0, i32 1
  %141 = load i8** %140, align 8
  %142 = bitcast i8* %141 to %struct.smpPair_struct*
  %143 = getelementptr inbounds %struct.smpPair_struct* %142, i32 0, i32 1
  %144 = load %struct.obj_struct** %143, align 8
  store %struct.obj_struct* %144, %struct.obj_struct** %bt, align 8
  br label %53

; <label>:145                                     ; preds = %53
  %146 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %from)
  %147 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %148 = getelementptr { %struct.smpType_struct*, i8* }* %147, i32 0, i32 0
  %149 = extractvalue { %struct.smpType_struct*, i8* } %146, 0
  store %struct.smpType_struct* %149, %struct.smpType_struct** %148, align 1
  %150 = getelementptr { %struct.smpType_struct*, i8* }* %147, i32 0, i32 1
  %151 = extractvalue { %struct.smpType_struct*, i8* } %146, 1
  store i8* %151, i8** %150, align 1
  %152 = bitcast %struct.obj_struct* %1 to i8*
  %153 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %152, i8* %153, i64 16, i32 8, i1 false)
  br label %154

; <label>:154                                     ; preds = %145, %101, %41
  %155 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %156 = load { %struct.smpType_struct*, i8* }* %155, align 1
  ret { %struct.smpType_struct*, i8* } %156
}

define { %struct.smpType_struct*, i8* } @smpTypeError_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpTypeError_struct*
  %10 = getelementptr inbounds %struct.smpTypeError_struct* %9, i32 0, i32 0
  %11 = load i8** %10, align 8
  call void @GC_free(i8* %11)
  %12 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = load { %struct.smpType_struct*, i8* }* %13, align 1
  ret { %struct.smpType_struct*, i8* } %14
}

define { %struct.smpType_struct*, i8* } @smpTypeError_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpTypeError_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %newline = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %separator = alloca %struct.obj_struct, align 8
  %str = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %14
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  store i8* %obj.coerce1, i8** %15
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %16 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %17 = load i8** %16, align 8
  %18 = bitcast i8* %17 to %struct.smpTypeError_struct*
  %19 = bitcast %struct.smpTypeError_struct* %core to i8*
  %20 = bitcast %struct.smpTypeError_struct* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %20, i64 48, i32 8, i1 false)
  %21 = getelementptr inbounds %struct.smpTypeError_struct* %core, i32 0, i32 0
  %22 = load i8** %21, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %24, label %35

; <label>:24                                      ; preds = %0
  %25 = getelementptr inbounds %struct.smpTypeError_struct* %core, i32 0, i32 0
  %26 = load i8** %25, align 8
  %27 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %26)
  %28 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = extractvalue { %struct.smpType_struct*, i8* } %27, 0
  store %struct.smpType_struct* %30, %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = extractvalue { %struct.smpType_struct*, i8* } %27, 1
  store i8* %32, i8** %31, align 1
  %33 = bitcast %struct.obj_struct* %res to i8*
  %34 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 16, i32 8, i1 false)
  br label %110

; <label>:35                                      ; preds = %0
  %36 = getelementptr inbounds %struct.smpTypeError_struct* %core, i32 0, i32 2
  %37 = load %struct.smpType_struct** %36, align 8
  %38 = icmp ne %struct.smpType_struct* %37, null
  br i1 %38, label %39, label %79

; <label>:39                                      ; preds = %35
  %40 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %41 = load %struct.smpType_struct** %40, align 8
  %42 = getelementptr inbounds %struct.smpType_struct* %41, i32 0, i32 0
  %43 = load i8** %42, align 8
  %44 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %43)
  %45 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = extractvalue { %struct.smpType_struct*, i8* } %44, 0
  store %struct.smpType_struct* %47, %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = extractvalue { %struct.smpType_struct*, i8* } %44, 1
  store i8* %49, i8** %48, align 1
  %50 = getelementptr inbounds %struct.smpTypeError_struct* %core, i32 0, i32 2
  %51 = load %struct.smpType_struct** %50, align 8
  %52 = getelementptr inbounds %struct.smpType_struct* %51, i32 0, i32 0
  %53 = load i8** %52, align 8
  %54 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %53)
  %55 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 0
  %57 = extractvalue { %struct.smpType_struct*, i8* } %54, 0
  store %struct.smpType_struct* %57, %struct.smpType_struct** %56, align 1
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 1
  %59 = extractvalue { %struct.smpType_struct*, i8* } %54, 1
  store i8* %59, i8** %58, align 1
  %60 = getelementptr inbounds %struct.smpTypeError_struct* %core, i32 0, i32 3
  %61 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 0
  %63 = load %struct.smpType_struct** %62, align 1
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 1
  %65 = load i8** %64, align 1
  %66 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = load %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = load i8** %69, align 1
  %71 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpGlobal_sprintf(i8* getelementptr inbounds ([28 x i8]* @.str125, i32 0, i32 0), %struct.smpType_struct* %63, i8* %65, %struct.smpType_struct* %68, i8* %70, %struct.obj_struct* byval align 8 %60)
  %72 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 0
  %74 = extractvalue { %struct.smpType_struct*, i8* } %71, 0
  store %struct.smpType_struct* %74, %struct.smpType_struct** %73, align 1
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 1
  %76 = extractvalue { %struct.smpType_struct*, i8* } %71, 1
  store i8* %76, i8** %75, align 1
  %77 = bitcast %struct.obj_struct* %res to i8*
  %78 = bitcast %struct.obj_struct* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %77, i8* %78, i64 16, i32 8, i1 false)
  br label %109

; <label>:79                                      ; preds = %35
  %80 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %81 = load %struct.smpType_struct** %80, align 8
  %82 = getelementptr inbounds %struct.smpType_struct* %81, i32 0, i32 0
  %83 = load i8** %82, align 8
  %84 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %83)
  %85 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 0
  %87 = extractvalue { %struct.smpType_struct*, i8* } %84, 0
  store %struct.smpType_struct* %87, %struct.smpType_struct** %86, align 1
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 1
  %89 = extractvalue { %struct.smpType_struct*, i8* } %84, 1
  store i8* %89, i8** %88, align 1
  %90 = getelementptr inbounds %struct.smpTypeError_struct* %core, i32 0, i32 3
  %91 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 0
  %93 = load %struct.smpType_struct** %92, align 1
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 1
  %95 = load i8** %94, align 1
  %96 = bitcast %struct.obj_struct* %90 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = load %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = load i8** %99, align 1
  %101 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpGlobal_sprintf(i8* getelementptr inbounds ([20 x i8]* @.str126, i32 0, i32 0), %struct.smpType_struct* %93, i8* %95, %struct.smpType_struct* %98, i8* %100)
  %102 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 0
  %104 = extractvalue { %struct.smpType_struct*, i8* } %101, 0
  store %struct.smpType_struct* %104, %struct.smpType_struct** %103, align 1
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 1
  %106 = extractvalue { %struct.smpType_struct*, i8* } %101, 1
  store i8* %106, i8** %105, align 1
  %107 = bitcast %struct.obj_struct* %res to i8*
  %108 = bitcast %struct.obj_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %107, i8* %108, i64 16, i32 8, i1 false)
  br label %109

; <label>:109                                     ; preds = %79, %39
  br label %110

; <label>:110                                     ; preds = %109, %24
  %111 = getelementptr inbounds %struct.smpTypeError_struct* %core, i32 0, i32 1
  %112 = getelementptr inbounds %struct.obj_struct* %111, i32 0, i32 0
  %113 = load %struct.smpType_struct** %112, align 8
  %114 = getelementptr inbounds %struct.smpType_struct* %113, i32 0, i32 1
  %115 = load i32* %114, align 4
  %116 = load i32* @smpType_id_nil, align 4
  %117 = icmp eq i32 %115, %116
  br i1 %117, label %118, label %121

; <label>:118                                     ; preds = %110
  %119 = bitcast %struct.obj_struct* %1 to i8*
  %120 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %119, i8* %120, i64 16, i32 8, i1 false)
  br label %213

; <label>:121                                     ; preds = %110
  %122 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str13, i32 0, i32 0))
  %123 = bitcast %struct.obj_struct* %newline to { %struct.smpType_struct*, i8* }*
  %124 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 0
  %125 = extractvalue { %struct.smpType_struct*, i8* } %122, 0
  store %struct.smpType_struct* %125, %struct.smpType_struct** %124, align 1
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 1
  %127 = extractvalue { %struct.smpType_struct*, i8* } %122, 1
  store i8* %127, i8** %126, align 1
  %128 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %129 = getelementptr { %struct.smpType_struct*, i8* }* %128, i32 0, i32 0
  %130 = load %struct.smpType_struct** %129, align 1
  %131 = getelementptr { %struct.smpType_struct*, i8* }* %128, i32 0, i32 1
  %132 = load i8** %131, align 1
  %133 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %130, i8* %132, i32 1, %struct.obj_struct* %newline)
  %134 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %135 = getelementptr { %struct.smpType_struct*, i8* }* %134, i32 0, i32 0
  %136 = extractvalue { %struct.smpType_struct*, i8* } %133, 0
  store %struct.smpType_struct* %136, %struct.smpType_struct** %135, align 1
  %137 = getelementptr { %struct.smpType_struct*, i8* }* %134, i32 0, i32 1
  %138 = extractvalue { %struct.smpType_struct*, i8* } %133, 1
  store i8* %138, i8** %137, align 1
  %139 = bitcast %struct.obj_struct* %res to i8*
  %140 = bitcast %struct.obj_struct* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %139, i8* %140, i64 16, i32 8, i1 false)
  %141 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %142 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 0
  %143 = load %struct.smpType_struct** %142, align 1
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 1
  %145 = load i8** %144, align 1
  %146 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %143, i8* %145)
  %147 = icmp ne i32 %146, 0
  br i1 %147, label %148, label %151

; <label>:148                                     ; preds = %121
  %149 = bitcast %struct.obj_struct* %1 to i8*
  %150 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %149, i8* %150, i64 16, i32 8, i1 false)
  br label %213

; <label>:151                                     ; preds = %121
  %152 = call { %struct.smpType_struct*, i8* } @obj_clear(%struct.obj_struct* %newline)
  %153 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %154 = getelementptr { %struct.smpType_struct*, i8* }* %153, i32 0, i32 0
  %155 = extractvalue { %struct.smpType_struct*, i8* } %152, 0
  store %struct.smpType_struct* %155, %struct.smpType_struct** %154, align 1
  %156 = getelementptr { %struct.smpType_struct*, i8* }* %153, i32 0, i32 1
  %157 = extractvalue { %struct.smpType_struct*, i8* } %152, 1
  store i8* %157, i8** %156, align 1
  %158 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpString_init_fmt(i8* getelementptr inbounds ([8 x i8]* @.str124, i32 0, i32 0))
  %159 = bitcast %struct.obj_struct* %separator to { %struct.smpType_struct*, i8* }*
  %160 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 0
  %161 = extractvalue { %struct.smpType_struct*, i8* } %158, 0
  store %struct.smpType_struct* %161, %struct.smpType_struct** %160, align 1
  %162 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 1
  %163 = extractvalue { %struct.smpType_struct*, i8* } %158, 1
  store i8* %163, i8** %162, align 1
  %164 = getelementptr inbounds %struct.smpTypeError_struct* %core, i32 0, i32 1
  %165 = bitcast %struct.obj_struct* %164 to { %struct.smpType_struct*, i8* }*
  %166 = getelementptr { %struct.smpType_struct*, i8* }* %165, i32 0, i32 0
  %167 = load %struct.smpType_struct** %166, align 1
  %168 = getelementptr { %struct.smpType_struct*, i8* }* %165, i32 0, i32 1
  %169 = load i8** %168, align 1
  %170 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %167, i8* %169, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 1, %struct.obj_struct* %separator)
  %171 = bitcast %struct.obj_struct* %str to { %struct.smpType_struct*, i8* }*
  %172 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 0
  %173 = extractvalue { %struct.smpType_struct*, i8* } %170, 0
  store %struct.smpType_struct* %173, %struct.smpType_struct** %172, align 1
  %174 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 1
  %175 = extractvalue { %struct.smpType_struct*, i8* } %170, 1
  store i8* %175, i8** %174, align 1
  %176 = bitcast %struct.obj_struct* %str to { %struct.smpType_struct*, i8* }*
  %177 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 0
  %178 = load %struct.smpType_struct** %177, align 1
  %179 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 1
  %180 = load i8** %179, align 1
  %181 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %178, i8* %180)
  %182 = icmp ne i32 %181, 0
  br i1 %182, label %183, label %186

; <label>:183                                     ; preds = %151
  %184 = bitcast %struct.obj_struct* %1 to i8*
  %185 = bitcast %struct.obj_struct* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %184, i8* %185, i64 16, i32 8, i1 false)
  br label %213

; <label>:186                                     ; preds = %151
  %187 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %188 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 0
  %189 = load %struct.smpType_struct** %188, align 1
  %190 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 1
  %191 = load i8** %190, align 1
  %192 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %189, i8* %191, i32 1, %struct.obj_struct* %str)
  %193 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %194 = getelementptr { %struct.smpType_struct*, i8* }* %193, i32 0, i32 0
  %195 = extractvalue { %struct.smpType_struct*, i8* } %192, 0
  store %struct.smpType_struct* %195, %struct.smpType_struct** %194, align 1
  %196 = getelementptr { %struct.smpType_struct*, i8* }* %193, i32 0, i32 1
  %197 = extractvalue { %struct.smpType_struct*, i8* } %192, 1
  store i8* %197, i8** %196, align 1
  %198 = bitcast %struct.obj_struct* %res to i8*
  %199 = bitcast %struct.obj_struct* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %198, i8* %199, i64 16, i32 8, i1 false)
  %200 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %201 = getelementptr { %struct.smpType_struct*, i8* }* %200, i32 0, i32 0
  %202 = load %struct.smpType_struct** %201, align 1
  %203 = getelementptr { %struct.smpType_struct*, i8* }* %200, i32 0, i32 1
  %204 = load i8** %203, align 1
  %205 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %202, i8* %204)
  %206 = icmp ne i32 %205, 0
  br i1 %206, label %207, label %210

; <label>:207                                     ; preds = %186
  %208 = bitcast %struct.obj_struct* %1 to i8*
  %209 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %208, i8* %209, i64 16, i32 8, i1 false)
  br label %213

; <label>:210                                     ; preds = %186
  %211 = bitcast %struct.obj_struct* %1 to i8*
  %212 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %211, i8* %212, i64 16, i32 8, i1 false)
  br label %213

; <label>:213                                     ; preds = %210, %207, %183, %148, %118
  %214 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %215 = load { %struct.smpType_struct*, i8* }* %214, align 1
  ret { %struct.smpType_struct*, i8* } %215
}

define { %struct.smpType_struct*, i8* } @smpException_backtrace_add_now(%struct.smpType_struct* %exc.coerce0, i8* %exc.coerce1, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, %struct.smpType_struct* %fun.coerce0, i8* %fun.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %exc = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %fun = alloca %struct.obj_struct, align 8
  %pair = alloca %struct.obj_struct, align 8
  %bt = alloca %struct.obj_struct*, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = bitcast %struct.obj_struct* %exc to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %exc.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %exc.coerce1, i8** %5
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  %9 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  store %struct.smpType_struct* %fun.coerce0, %struct.smpType_struct** %10
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  store i8* %fun.coerce1, i8** %11
  %12 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = load %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = load i8** %15, align 1
  %17 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %14, i8* %16, i32 1, %struct.obj_struct* %fun)
  %18 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = getelementptr inbounds %struct.obj_struct* %exc, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 8
  %25 = getelementptr inbounds %struct.smpType_struct* %24, i32 0, i32 0
  %26 = load i8** %25, align 8
  %27 = call i32 @strcmp(i8* %26, i8* getelementptr inbounds ([10 x i8]* @.str48, i32 0, i32 0))
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %34

; <label>:29                                      ; preds = %0
  %30 = getelementptr inbounds %struct.obj_struct* %exc, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to %struct.smpTypeError_struct*
  %33 = getelementptr inbounds %struct.smpTypeError_struct* %32, i32 0, i32 1
  store %struct.obj_struct* %33, %struct.obj_struct** %bt, align 8
  br label %39

; <label>:34                                      ; preds = %0
  %35 = getelementptr inbounds %struct.obj_struct* %exc, i32 0, i32 1
  %36 = load i8** %35, align 8
  %37 = bitcast i8* %36 to %struct.smpException_struct*
  %38 = getelementptr inbounds %struct.smpException_struct* %37, i32 0, i32 1
  store %struct.obj_struct* %38, %struct.obj_struct** %bt, align 8
  br label %39

; <label>:39                                      ; preds = %34, %29
  %40 = load %struct.obj_struct** %bt, align 8
  %41 = load %struct.obj_struct** %bt, align 8
  %42 = bitcast %struct.obj_struct* %41 to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = load %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = load i8** %45, align 1
  %47 = call { %struct.smpType_struct*, i8* } @smpList_append_now(%struct.smpType_struct* %44, i8* %46, i32 1, %struct.obj_struct* %pair)
  %48 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = extractvalue { %struct.smpType_struct*, i8* } %47, 0
  store %struct.smpType_struct* %50, %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = extractvalue { %struct.smpType_struct*, i8* } %47, 1
  store i8* %52, i8** %51, align 1
  %53 = bitcast %struct.obj_struct* %40 to i8*
  %54 = bitcast %struct.obj_struct* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 16, i32 8, i1 false)
  %55 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %55, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %56 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %57 = load { %struct.smpType_struct*, i8* }* %56, align 1
  ret { %struct.smpType_struct*, i8* } %57
}

define { %struct.smpType_struct*, i8* } @smpList_append_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %list_core = alloca %struct.smpPair_struct*, align 8
  %cons_cell = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 8
  %10 = getelementptr inbounds %struct.smpType_struct* %9, i32 0, i32 1
  %11 = load i32* %10, align 4
  %12 = load i32* @smpType_id_nil, align 4
  %13 = icmp eq i32 %11, %12
  br i1 %13, label %14, label %30

; <label>:14                                      ; preds = %0
  %15 = load %struct.obj_struct** %3, align 8
  %16 = getelementptr inbounds %struct.obj_struct* %15, i64 0
  %17 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 1
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 1
  %21 = load i8** %20, align 1
  %22 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %23 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %24 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %19, i8* %21, %struct.smpType_struct* %22, i8* %23)
  %25 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = extractvalue { %struct.smpType_struct*, i8* } %24, 0
  store %struct.smpType_struct* %27, %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = extractvalue { %struct.smpType_struct*, i8* } %24, 1
  store i8* %29, i8** %28, align 1
  br label %80

; <label>:30                                      ; preds = %0
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  br label %31

; <label>:31                                      ; preds = %39, %30
  %32 = load %struct.obj_struct** %ptr, align 8
  %33 = getelementptr inbounds %struct.obj_struct* %32, i32 0, i32 1
  %34 = load i8** %33, align 8
  %35 = bitcast i8* %34 to %struct.smpPair_struct*
  %36 = getelementptr inbounds %struct.smpPair_struct* %35, i32 0, i32 1
  %37 = load %struct.obj_struct** %36, align 8
  %38 = icmp ne %struct.obj_struct* %37, null
  br i1 %38, label %39, label %46

; <label>:39                                      ; preds = %31
  %40 = load %struct.obj_struct** %ptr, align 8
  %41 = getelementptr inbounds %struct.obj_struct* %40, i32 0, i32 1
  %42 = load i8** %41, align 8
  %43 = bitcast i8* %42 to %struct.smpPair_struct*
  %44 = getelementptr inbounds %struct.smpPair_struct* %43, i32 0, i32 1
  %45 = load %struct.obj_struct** %44, align 8
  store %struct.obj_struct* %45, %struct.obj_struct** %ptr, align 8
  br label %31

; <label>:46                                      ; preds = %31
  %47 = load %struct.obj_struct** %ptr, align 8
  %48 = getelementptr inbounds %struct.obj_struct* %47, i32 0, i32 1
  %49 = load i8** %48, align 8
  %50 = bitcast i8* %49 to %struct.smpPair_struct*
  store %struct.smpPair_struct* %50, %struct.smpPair_struct** %list_core, align 8
  %51 = bitcast %struct.obj_struct* %cons_cell to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %52 = load %struct.obj_struct** %3, align 8
  %53 = getelementptr inbounds %struct.obj_struct* %52, i64 0
  %54 = bitcast %struct.obj_struct* %53 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %60 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %61 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %56, i8* %58, %struct.smpType_struct* %59, i8* %60)
  %62 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = extractvalue { %struct.smpType_struct*, i8* } %61, 0
  store %struct.smpType_struct* %64, %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = extractvalue { %struct.smpType_struct*, i8* } %61, 1
  store i8* %66, i8** %65, align 1
  %67 = bitcast %struct.obj_struct* %cons_cell to i8*
  %68 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %67, i8* %68, i64 16, i32 8, i1 false)
  %69 = call noalias i8* @GC_malloc(i64 16)
  %70 = bitcast i8* %69 to %struct.obj_struct*
  %71 = load %struct.smpPair_struct** %list_core, align 8
  %72 = getelementptr inbounds %struct.smpPair_struct* %71, i32 0, i32 1
  store %struct.obj_struct* %70, %struct.obj_struct** %72, align 8
  %73 = load %struct.smpPair_struct** %list_core, align 8
  %74 = getelementptr inbounds %struct.smpPair_struct* %73, i32 0, i32 1
  %75 = load %struct.obj_struct** %74, align 8
  %76 = bitcast %struct.obj_struct* %75 to i8*
  %77 = bitcast %struct.obj_struct* %cons_cell to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %77, i64 16, i32 8, i1 false)
  %78 = bitcast %struct.obj_struct* %1 to i8*
  %79 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %78, i8* %79, i64 16, i32 8, i1 false)
  br label %80

; <label>:80                                      ; preds = %46, %14
  %81 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %82 = load { %struct.smpType_struct*, i8* }* %81, align 1
  ret { %struct.smpType_struct*, i8* } %82
}

define { %struct.smpType_struct*, i8* } @smpException_init(%struct.smpType_struct* %type.coerce0, i8* %type.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %type = alloca %struct.obj_struct, align 8
  %res = alloca %struct.smpException_struct, align 8
  %wrapper = alloca %struct.obj_struct, align 8
  %2 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %type.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %type.coerce1, i8** %4
  %5 = getelementptr inbounds %struct.smpException_struct* %res, i32 0, i32 0
  store i8* null, i8** %5, align 8
  %6 = getelementptr inbounds %struct.smpException_struct* %res, i32 0, i32 1
  %7 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = getelementptr inbounds %struct.obj_struct* %type, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 8
  %10 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %9, i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0))
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %18, label %12

; <label>:12                                      ; preds = %0
  %13 = getelementptr inbounds %struct.obj_struct* %type, i32 0, i32 0
  %14 = load %struct.smpType_struct** %13, align 8
  %15 = getelementptr inbounds %struct.smpType_struct* %14, i32 0, i32 0
  %16 = load i8** %15, align 8
  call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([70 x i8]* @.str121, i32 0, i32 0), i8* %16)
  %17 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %37

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %struct.obj_struct* %type, i32 0, i32 1
  %20 = load i8** %19, align 8
  %21 = bitcast i8* %20 to %struct.smpType_struct*
  %22 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %21)
  %23 = bitcast %struct.obj_struct* %wrapper to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = extractvalue { %struct.smpType_struct*, i8* } %22, 0
  store %struct.smpType_struct* %25, %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = extractvalue { %struct.smpType_struct*, i8* } %22, 1
  store i8* %27, i8** %26, align 1
  %28 = call noalias i8* @GC_malloc(i64 24)
  %29 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  store i8* %28, i8** %29, align 8
  %30 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to %struct.smpException_struct*
  %33 = bitcast %struct.smpException_struct* %32 to i8*
  %34 = bitcast %struct.smpException_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 24, i32 8, i1 false)
  %35 = bitcast %struct.obj_struct* %1 to i8*
  %36 = bitcast %struct.obj_struct* %wrapper to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 16, i32 8, i1 false)
  br label %37

; <label>:37                                      ; preds = %18, %12
  %38 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %39 = load { %struct.smpType_struct*, i8* }* %38, align 1
  ret { %struct.smpType_struct*, i8* } %39
}

declare i32 @vasprintf(i8**, i8*, %struct.__va_list_tag*)

define { %struct.smpType_struct*, i8* } @smpException_print(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %obj.coerce1, i8** %4
  %5 = load %struct.__sFILE** @smp_stderr, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  %8 = load %struct.smpType_struct** %7, align 1
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  %10 = load i8** %9, align 1
  %11 = call { %struct.smpType_struct*, i8* } (%struct.__sFILE*, i8*, ...)* @smpGlobal_fprintf(%struct.__sFILE* %5, i8* getelementptr inbounds ([4 x i8]* @.str122, i32 0, i32 0), %struct.smpType_struct* %8, i8* %10)
  %12 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %18 = load { %struct.smpType_struct*, i8* }* %17, align 1
  ret { %struct.smpType_struct*, i8* } %18
}

define { %struct.smpType_struct*, i8* } @smpGlobal_fprintf(%struct.__sFILE* %fp, i8* %format, ...) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.__sFILE*, align 8
  %3 = alloca i8*, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %res = alloca %struct.obj_struct, align 8
  store %struct.__sFILE* %fp, %struct.__sFILE** %2, align 8
  store i8* %format, i8** %3, align 8
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %5 = bitcast %struct.__va_list_tag* %4 to i8*
  call void @llvm.va_start(i8* %5)
  %6 = load i8** %3, align 8
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %8 = call { %struct.smpType_struct*, i8* } @smpGlobal_vsprintf(i8* %6, %struct.__va_list_tag* %7)
  %9 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = extractvalue { %struct.smpType_struct*, i8* } %8, 0
  store %struct.smpType_struct* %11, %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = extractvalue { %struct.smpType_struct*, i8* } %8, 1
  store i8* %13, i8** %12, align 1
  %14 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %15 = bitcast %struct.__va_list_tag* %14 to i8*
  call void @llvm.va_end(i8* %15)
  %16 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = load i8** %19, align 1
  %21 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %18, i8* %20)
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %26

; <label>:23                                      ; preds = %0
  %24 = bitcast %struct.obj_struct* %1 to i8*
  %25 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false)
  br label %39

; <label>:26                                      ; preds = %0
  %27 = load %struct.__sFILE** %2, align 8
  %28 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = load %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = load i8** %31, align 1
  %33 = call { %struct.smpType_struct*, i8* } @smpGlobal_fprint(%struct.__sFILE* %27, %struct.smpType_struct* %30, i8* %32)
  %34 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = extractvalue { %struct.smpType_struct*, i8* } %33, 0
  store %struct.smpType_struct* %36, %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = extractvalue { %struct.smpType_struct*, i8* } %33, 1
  store i8* %38, i8** %37, align 1
  br label %39

; <label>:39                                      ; preds = %26, %23
  %40 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %41 = load { %struct.smpType_struct*, i8* }* %40, align 1
  ret { %struct.smpType_struct*, i8* } %41
}

define { %struct.smpType_struct*, i8* } @smpList_car(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpPair_struct*
  %10 = getelementptr inbounds %struct.smpPair_struct* %9, i32 0, i32 0
  %11 = bitcast %struct.obj_struct* %1 to i8*
  %12 = bitcast %struct.obj_struct* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 16, i32 8, i1 false)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = load { %struct.smpType_struct*, i8* }* %13, align 1
  ret { %struct.smpType_struct*, i8* } %14
}

define { %struct.smpType_struct*, i8* } @smpTypeError_init_detailed(%struct.smpType_struct* %expected, %struct.smpType_struct* %found.coerce0, i8* %found.coerce1, i8* %fmt, ...) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.smpType_struct*, align 8
  %found = alloca %struct.obj_struct, align 8
  %3 = alloca i8*, align 8
  %res = alloca %struct.smpTypeError_struct, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %wrapper = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  store %struct.smpType_struct* %expected, %struct.smpType_struct** %2, align 8
  %5 = bitcast %struct.obj_struct* %found to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %found.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %found.coerce1, i8** %7
  store i8* %fmt, i8** %3, align 8
  %8 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 0
  store i8* null, i8** %8, align 8
  %9 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 1
  %10 = bitcast %struct.obj_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %11 = load %struct.smpType_struct** %2, align 8
  %12 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 2
  store %struct.smpType_struct* %11, %struct.smpType_struct** %12, align 8
  %13 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 3
  %14 = bitcast %struct.obj_struct* %13 to i8*
  %15 = bitcast %struct.obj_struct* %found to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 16, i32 8, i1 false)
  %16 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %17 = bitcast %struct.__va_list_tag* %16 to i8*
  call void @llvm.va_start(i8* %17)
  %18 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 0
  %19 = load i8** %3, align 8
  %20 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %21 = call i32 @vasprintf(i8** %18, i8* %19, %struct.__va_list_tag* %20)
  %22 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %23 = bitcast %struct.__va_list_tag* %22 to i8*
  call void @llvm.va_end(i8* %23)
  %24 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([10 x i8]* @.str48, i32 0, i32 0))
  %25 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = extractvalue { %struct.smpType_struct*, i8* } %24, 0
  store %struct.smpType_struct* %27, %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = extractvalue { %struct.smpType_struct*, i8* } %24, 1
  store i8* %29, i8** %28, align 1
  %30 = getelementptr inbounds %struct.obj_struct* %4, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to %struct.smpType_struct*
  %33 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %32)
  %34 = bitcast %struct.obj_struct* %wrapper to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = extractvalue { %struct.smpType_struct*, i8* } %33, 0
  store %struct.smpType_struct* %36, %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = extractvalue { %struct.smpType_struct*, i8* } %33, 1
  store i8* %38, i8** %37, align 1
  %39 = call noalias i8* @GC_malloc(i64 48)
  %40 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  store i8* %39, i8** %40, align 8
  %41 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  %42 = load i8** %41, align 8
  %43 = bitcast i8* %42 to %struct.smpTypeError_struct*
  %44 = bitcast %struct.smpTypeError_struct* %43 to i8*
  %45 = bitcast %struct.smpTypeError_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %45, i64 48, i32 8, i1 false)
  %46 = bitcast %struct.obj_struct* %1 to i8*
  %47 = bitcast %struct.obj_struct* %wrapper to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %46, i8* %47, i64 16, i32 8, i1 false)
  %48 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %49 = load { %struct.smpType_struct*, i8* }* %48, align 1
  ret { %struct.smpType_struct*, i8* } %49
}

define { %struct.smpType_struct*, i8* } @smpTypeError_init_fmt(i8* %fmt, ...) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %res = alloca %struct.smpTypeError_struct, align 8
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %wrapper = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  store i8* %fmt, i8** %2, align 8
  %4 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %5 = bitcast %struct.__va_list_tag* %4 to i8*
  call void @llvm.va_start(i8* %5)
  %6 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 0
  %7 = load i8** %2, align 8
  %8 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %9 = call i32 @vasprintf(i8** %6, i8* %7, %struct.__va_list_tag* %8)
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %11 = bitcast %struct.__va_list_tag* %10 to i8*
  call void @llvm.va_end(i8* %11)
  %12 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 1
  %13 = bitcast %struct.obj_struct* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %14 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 2
  store %struct.smpType_struct* null, %struct.smpType_struct** %14, align 8
  %15 = getelementptr inbounds %struct.smpTypeError_struct* %res, i32 0, i32 3
  %16 = bitcast %struct.obj_struct* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %17 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([10 x i8]* @.str48, i32 0, i32 0))
  %18 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = getelementptr inbounds %struct.obj_struct* %3, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to %struct.smpType_struct*
  %26 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %25)
  %27 = bitcast %struct.obj_struct* %wrapper to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = extractvalue { %struct.smpType_struct*, i8* } %26, 0
  store %struct.smpType_struct* %29, %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = extractvalue { %struct.smpType_struct*, i8* } %26, 1
  store i8* %31, i8** %30, align 1
  %32 = call noalias i8* @GC_malloc(i64 48)
  %33 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  store i8* %32, i8** %33, align 8
  %34 = getelementptr inbounds %struct.obj_struct* %wrapper, i32 0, i32 1
  %35 = load i8** %34, align 8
  %36 = bitcast i8* %35 to %struct.smpTypeError_struct*
  %37 = bitcast %struct.smpTypeError_struct* %36 to i8*
  %38 = bitcast %struct.smpTypeError_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* %38, i64 48, i32 8, i1 false)
  %39 = bitcast %struct.obj_struct* %1 to i8*
  %40 = bitcast %struct.obj_struct* %wrapper to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false)
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define i32 @smpFloat_create_class() nounwind {
  %number = alloca %struct.obj_struct, align 8
  %floatclass = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = alloca %struct.obj_struct, align 8
  %16 = alloca %struct.obj_struct, align 8
  %17 = alloca %struct.obj_struct, align 8
  %18 = alloca %struct.obj_struct, align 8
  %19 = alloca %struct.obj_struct, align 8
  %20 = alloca %struct.obj_struct, align 8
  %21 = alloca %struct.obj_struct, align 8
  %22 = alloca %struct.obj_struct, align 8
  %23 = alloca %struct.obj_struct, align 8
  %24 = alloca %struct.obj_struct, align 8
  %25 = alloca %struct.obj_struct, align 8
  %26 = alloca %struct.obj_struct, align 8
  %27 = alloca %struct.obj_struct, align 8
  %28 = alloca %struct.obj_struct, align 8
  %29 = alloca %struct.obj_struct, align 8
  %30 = alloca %struct.obj_struct, align 8
  %31 = alloca %struct.obj_struct, align 8
  %32 = alloca %struct.obj_struct, align 8
  %33 = alloca %struct.obj_struct, align 8
  %pi = alloca [1 x %struct.__mpfr_struct]*, align 8
  %34 = alloca %struct.obj_struct, align 8
  %35 = alloca %struct.obj_struct, align 8
  %e = alloca [1 x %struct.__mpfr_struct]*, align 8
  %one = alloca [1 x %struct.__mpfr_struct], align 16
  %36 = alloca %struct.obj_struct, align 8
  %37 = alloca %struct.obj_struct, align 8
  store i32 1, i32* @smp_mpfr_rnd, align 4
  store i64 53, i64* @smp_mpfr_default_prec, align 8
  %38 = load i64* @smp_mpfr_default_prec, align 8
  call void @mpfr_set_default_prec(i64 %38)
  %39 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %40 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = extractvalue { %struct.smpType_struct*, i8* } %39, 0
  store %struct.smpType_struct* %42, %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = extractvalue { %struct.smpType_struct*, i8* } %39, 1
  store i8* %44, i8** %43, align 1
  %45 = getelementptr inbounds %struct.obj_struct* %number, i32 0, i32 1
  %46 = load i8** %45, align 8
  %47 = bitcast i8* %46 to %struct.smpType_struct*
  %48 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([6 x i8]* @.str128, i32 0, i32 0), %struct.smpType_struct* %47, i32 0)
  %49 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([6 x i8]* @.str128, i32 0, i32 0))
  %50 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = extractvalue { %struct.smpType_struct*, i8* } %49, 0
  store %struct.smpType_struct* %52, %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = extractvalue { %struct.smpType_struct*, i8* } %49, 1
  store i8* %54, i8** %53, align 1
  %55 = getelementptr inbounds %struct.obj_struct* %floatclass, i32 0, i32 1
  %56 = load i8** %55, align 8
  %57 = bitcast i8* %56 to %struct.smpType_struct*
  %58 = bitcast %struct.smpType_struct* %57 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_float to i8*), i8* %58, i64 64, i32 8, i1 false)
  %59 = call { %struct.smpType_struct*, i8* } @minihash_get(%struct.minihash_struct* @smpType_ids, i8* getelementptr inbounds ([6 x i8]* @.str128, i32 0, i32 0))
  %60 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  %65 = getelementptr inbounds %struct.obj_struct* %1, i32 0, i32 1
  %66 = load i8** %65, align 8
  %67 = ptrtoint i8* %66 to i64
  %68 = trunc i64 %67 to i32
  store i32 %68, i32* @smpType_id_float, align 4
  %69 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %70 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = extractvalue { %struct.smpType_struct*, i8* } %69, 0
  store %struct.smpType_struct* %72, %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = extractvalue { %struct.smpType_struct*, i8* } %69, 1
  store i8* %74, i8** %73, align 1
  %75 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 0
  %77 = load %struct.smpType_struct** %76, align 1
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 1
  %79 = load i8** %78, align 1
  %80 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 0
  %82 = load %struct.smpType_struct** %81, align 1
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 1
  %84 = load i8** %83, align 1
  %85 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %77, i8* %79, i32 64, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %82, i8* %84)
  %86 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %86, i32 0, i32 0
  %88 = extractvalue { %struct.smpType_struct*, i8* } %85, 0
  store %struct.smpType_struct* %88, %struct.smpType_struct** %87, align 1
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %86, i32 0, i32 1
  %90 = extractvalue { %struct.smpType_struct*, i8* } %85, 1
  store i8* %90, i8** %89, align 1
  %91 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_add, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %92 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 0
  %94 = extractvalue { %struct.smpType_struct*, i8* } %91, 0
  store %struct.smpType_struct* %94, %struct.smpType_struct** %93, align 1
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 1
  %96 = extractvalue { %struct.smpType_struct*, i8* } %91, 1
  store i8* %96, i8** %95, align 1
  %97 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 0
  %99 = load %struct.smpType_struct** %98, align 1
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 1
  %101 = load i8** %100, align 1
  %102 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 0
  %104 = load %struct.smpType_struct** %103, align 1
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 1
  %106 = load i8** %105, align 1
  %107 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %99, i8* %101, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str65, i32 0, i32 0), %struct.smpType_struct* %104, i8* %106)
  %108 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 0
  %110 = extractvalue { %struct.smpType_struct*, i8* } %107, 0
  store %struct.smpType_struct* %110, %struct.smpType_struct** %109, align 1
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 1
  %112 = extractvalue { %struct.smpType_struct*, i8* } %107, 1
  store i8* %112, i8** %111, align 1
  %113 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_sub, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %114 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %115 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 0
  %116 = extractvalue { %struct.smpType_struct*, i8* } %113, 0
  store %struct.smpType_struct* %116, %struct.smpType_struct** %115, align 1
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 1
  %118 = extractvalue { %struct.smpType_struct*, i8* } %113, 1
  store i8* %118, i8** %117, align 1
  %119 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %119, i32 0, i32 0
  %121 = load %struct.smpType_struct** %120, align 1
  %122 = getelementptr { %struct.smpType_struct*, i8* }* %119, i32 0, i32 1
  %123 = load i8** %122, align 1
  %124 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %125 = getelementptr { %struct.smpType_struct*, i8* }* %124, i32 0, i32 0
  %126 = load %struct.smpType_struct** %125, align 1
  %127 = getelementptr { %struct.smpType_struct*, i8* }* %124, i32 0, i32 1
  %128 = load i8** %127, align 1
  %129 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %121, i8* %123, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str66, i32 0, i32 0), %struct.smpType_struct* %126, i8* %128)
  %130 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %131 = getelementptr { %struct.smpType_struct*, i8* }* %130, i32 0, i32 0
  %132 = extractvalue { %struct.smpType_struct*, i8* } %129, 0
  store %struct.smpType_struct* %132, %struct.smpType_struct** %131, align 1
  %133 = getelementptr { %struct.smpType_struct*, i8* }* %130, i32 0, i32 1
  %134 = extractvalue { %struct.smpType_struct*, i8* } %129, 1
  store i8* %134, i8** %133, align 1
  %135 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_mul, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %136 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %137 = getelementptr { %struct.smpType_struct*, i8* }* %136, i32 0, i32 0
  %138 = extractvalue { %struct.smpType_struct*, i8* } %135, 0
  store %struct.smpType_struct* %138, %struct.smpType_struct** %137, align 1
  %139 = getelementptr { %struct.smpType_struct*, i8* }* %136, i32 0, i32 1
  %140 = extractvalue { %struct.smpType_struct*, i8* } %135, 1
  store i8* %140, i8** %139, align 1
  %141 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %142 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 0
  %143 = load %struct.smpType_struct** %142, align 1
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 1
  %145 = load i8** %144, align 1
  %146 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %147 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 0
  %148 = load %struct.smpType_struct** %147, align 1
  %149 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 1
  %150 = load i8** %149, align 1
  %151 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %143, i8* %145, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str67, i32 0, i32 0), %struct.smpType_struct* %148, i8* %150)
  %152 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %153 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 0
  %154 = extractvalue { %struct.smpType_struct*, i8* } %151, 0
  store %struct.smpType_struct* %154, %struct.smpType_struct** %153, align 1
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 1
  %156 = extractvalue { %struct.smpType_struct*, i8* } %151, 1
  store i8* %156, i8** %155, align 1
  %157 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_div, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %158 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %159 = getelementptr { %struct.smpType_struct*, i8* }* %158, i32 0, i32 0
  %160 = extractvalue { %struct.smpType_struct*, i8* } %157, 0
  store %struct.smpType_struct* %160, %struct.smpType_struct** %159, align 1
  %161 = getelementptr { %struct.smpType_struct*, i8* }* %158, i32 0, i32 1
  %162 = extractvalue { %struct.smpType_struct*, i8* } %157, 1
  store i8* %162, i8** %161, align 1
  %163 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %164 = getelementptr { %struct.smpType_struct*, i8* }* %163, i32 0, i32 0
  %165 = load %struct.smpType_struct** %164, align 1
  %166 = getelementptr { %struct.smpType_struct*, i8* }* %163, i32 0, i32 1
  %167 = load i8** %166, align 1
  %168 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %169 = getelementptr { %struct.smpType_struct*, i8* }* %168, i32 0, i32 0
  %170 = load %struct.smpType_struct** %169, align 1
  %171 = getelementptr { %struct.smpType_struct*, i8* }* %168, i32 0, i32 1
  %172 = load i8** %171, align 1
  %173 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %165, i8* %167, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str68, i32 0, i32 0), %struct.smpType_struct* %170, i8* %172)
  %174 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %175 = getelementptr { %struct.smpType_struct*, i8* }* %174, i32 0, i32 0
  %176 = extractvalue { %struct.smpType_struct*, i8* } %173, 0
  store %struct.smpType_struct* %176, %struct.smpType_struct** %175, align 1
  %177 = getelementptr { %struct.smpType_struct*, i8* }* %174, i32 0, i32 1
  %178 = extractvalue { %struct.smpType_struct*, i8* } %173, 1
  store i8* %178, i8** %177, align 1
  %179 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_pow, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %180 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %181 = getelementptr { %struct.smpType_struct*, i8* }* %180, i32 0, i32 0
  %182 = extractvalue { %struct.smpType_struct*, i8* } %179, 0
  store %struct.smpType_struct* %182, %struct.smpType_struct** %181, align 1
  %183 = getelementptr { %struct.smpType_struct*, i8* }* %180, i32 0, i32 1
  %184 = extractvalue { %struct.smpType_struct*, i8* } %179, 1
  store i8* %184, i8** %183, align 1
  %185 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %186 = getelementptr { %struct.smpType_struct*, i8* }* %185, i32 0, i32 0
  %187 = load %struct.smpType_struct** %186, align 1
  %188 = getelementptr { %struct.smpType_struct*, i8* }* %185, i32 0, i32 1
  %189 = load i8** %188, align 1
  %190 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %191 = getelementptr { %struct.smpType_struct*, i8* }* %190, i32 0, i32 0
  %192 = load %struct.smpType_struct** %191, align 1
  %193 = getelementptr { %struct.smpType_struct*, i8* }* %190, i32 0, i32 1
  %194 = load i8** %193, align 1
  %195 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %187, i8* %189, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str129, i32 0, i32 0), %struct.smpType_struct* %192, i8* %194)
  %196 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %197 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 0
  %198 = extractvalue { %struct.smpType_struct*, i8* } %195, 0
  store %struct.smpType_struct* %198, %struct.smpType_struct** %197, align 1
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 1
  %200 = extractvalue { %struct.smpType_struct*, i8* } %195, 1
  store i8* %200, i8** %199, align 1
  %201 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_cmp, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %202 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %203 = getelementptr { %struct.smpType_struct*, i8* }* %202, i32 0, i32 0
  %204 = extractvalue { %struct.smpType_struct*, i8* } %201, 0
  store %struct.smpType_struct* %204, %struct.smpType_struct** %203, align 1
  %205 = getelementptr { %struct.smpType_struct*, i8* }* %202, i32 0, i32 1
  %206 = extractvalue { %struct.smpType_struct*, i8* } %201, 1
  store i8* %206, i8** %205, align 1
  %207 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %208 = getelementptr { %struct.smpType_struct*, i8* }* %207, i32 0, i32 0
  %209 = load %struct.smpType_struct** %208, align 1
  %210 = getelementptr { %struct.smpType_struct*, i8* }* %207, i32 0, i32 1
  %211 = load i8** %210, align 1
  %212 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %213 = getelementptr { %struct.smpType_struct*, i8* }* %212, i32 0, i32 0
  %214 = load %struct.smpType_struct** %213, align 1
  %215 = getelementptr { %struct.smpType_struct*, i8* }* %212, i32 0, i32 1
  %216 = load i8** %215, align 1
  %217 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %209, i8* %211, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str19, i32 0, i32 0), %struct.smpType_struct* %214, i8* %216)
  %218 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %219 = getelementptr { %struct.smpType_struct*, i8* }* %218, i32 0, i32 0
  %220 = extractvalue { %struct.smpType_struct*, i8* } %217, 0
  store %struct.smpType_struct* %220, %struct.smpType_struct** %219, align 1
  %221 = getelementptr { %struct.smpType_struct*, i8* }* %218, i32 0, i32 1
  %222 = extractvalue { %struct.smpType_struct*, i8* } %217, 1
  store i8* %222, i8** %221, align 1
  %223 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_equalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %224 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %225 = getelementptr { %struct.smpType_struct*, i8* }* %224, i32 0, i32 0
  %226 = extractvalue { %struct.smpType_struct*, i8* } %223, 0
  store %struct.smpType_struct* %226, %struct.smpType_struct** %225, align 1
  %227 = getelementptr { %struct.smpType_struct*, i8* }* %224, i32 0, i32 1
  %228 = extractvalue { %struct.smpType_struct*, i8* } %223, 1
  store i8* %228, i8** %227, align 1
  %229 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %230 = getelementptr { %struct.smpType_struct*, i8* }* %229, i32 0, i32 0
  %231 = load %struct.smpType_struct** %230, align 1
  %232 = getelementptr { %struct.smpType_struct*, i8* }* %229, i32 0, i32 1
  %233 = load i8** %232, align 1
  %234 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %235 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 0
  %236 = load %struct.smpType_struct** %235, align 1
  %237 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 1
  %238 = load i8** %237, align 1
  %239 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %231, i8* %233, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str49, i32 0, i32 0), %struct.smpType_struct* %236, i8* %238)
  %240 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %241 = getelementptr { %struct.smpType_struct*, i8* }* %240, i32 0, i32 0
  %242 = extractvalue { %struct.smpType_struct*, i8* } %239, 0
  store %struct.smpType_struct* %242, %struct.smpType_struct** %241, align 1
  %243 = getelementptr { %struct.smpType_struct*, i8* }* %240, i32 0, i32 1
  %244 = extractvalue { %struct.smpType_struct*, i8* } %239, 1
  store i8* %244, i8** %243, align 1
  %245 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_nequalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %246 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %247 = getelementptr { %struct.smpType_struct*, i8* }* %246, i32 0, i32 0
  %248 = extractvalue { %struct.smpType_struct*, i8* } %245, 0
  store %struct.smpType_struct* %248, %struct.smpType_struct** %247, align 1
  %249 = getelementptr { %struct.smpType_struct*, i8* }* %246, i32 0, i32 1
  %250 = extractvalue { %struct.smpType_struct*, i8* } %245, 1
  store i8* %250, i8** %249, align 1
  %251 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %252 = getelementptr { %struct.smpType_struct*, i8* }* %251, i32 0, i32 0
  %253 = load %struct.smpType_struct** %252, align 1
  %254 = getelementptr { %struct.smpType_struct*, i8* }* %251, i32 0, i32 1
  %255 = load i8** %254, align 1
  %256 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %257 = getelementptr { %struct.smpType_struct*, i8* }* %256, i32 0, i32 0
  %258 = load %struct.smpType_struct** %257, align 1
  %259 = getelementptr { %struct.smpType_struct*, i8* }* %256, i32 0, i32 1
  %260 = load i8** %259, align 1
  %261 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %253, i8* %255, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str130, i32 0, i32 0), %struct.smpType_struct* %258, i8* %260)
  %262 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %263 = getelementptr { %struct.smpType_struct*, i8* }* %262, i32 0, i32 0
  %264 = extractvalue { %struct.smpType_struct*, i8* } %261, 0
  store %struct.smpType_struct* %264, %struct.smpType_struct** %263, align 1
  %265 = getelementptr { %struct.smpType_struct*, i8* }* %262, i32 0, i32 1
  %266 = extractvalue { %struct.smpType_struct*, i8* } %261, 1
  store i8* %266, i8** %265, align 1
  %267 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_lt, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %268 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %269 = getelementptr { %struct.smpType_struct*, i8* }* %268, i32 0, i32 0
  %270 = extractvalue { %struct.smpType_struct*, i8* } %267, 0
  store %struct.smpType_struct* %270, %struct.smpType_struct** %269, align 1
  %271 = getelementptr { %struct.smpType_struct*, i8* }* %268, i32 0, i32 1
  %272 = extractvalue { %struct.smpType_struct*, i8* } %267, 1
  store i8* %272, i8** %271, align 1
  %273 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %274 = getelementptr { %struct.smpType_struct*, i8* }* %273, i32 0, i32 0
  %275 = load %struct.smpType_struct** %274, align 1
  %276 = getelementptr { %struct.smpType_struct*, i8* }* %273, i32 0, i32 1
  %277 = load i8** %276, align 1
  %278 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %279 = getelementptr { %struct.smpType_struct*, i8* }* %278, i32 0, i32 0
  %280 = load %struct.smpType_struct** %279, align 1
  %281 = getelementptr { %struct.smpType_struct*, i8* }* %278, i32 0, i32 1
  %282 = load i8** %281, align 1
  %283 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %275, i8* %277, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str131, i32 0, i32 0), %struct.smpType_struct* %280, i8* %282)
  %284 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %285 = getelementptr { %struct.smpType_struct*, i8* }* %284, i32 0, i32 0
  %286 = extractvalue { %struct.smpType_struct*, i8* } %283, 0
  store %struct.smpType_struct* %286, %struct.smpType_struct** %285, align 1
  %287 = getelementptr { %struct.smpType_struct*, i8* }* %284, i32 0, i32 1
  %288 = extractvalue { %struct.smpType_struct*, i8* } %283, 1
  store i8* %288, i8** %287, align 1
  %289 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_le, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %290 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %291 = getelementptr { %struct.smpType_struct*, i8* }* %290, i32 0, i32 0
  %292 = extractvalue { %struct.smpType_struct*, i8* } %289, 0
  store %struct.smpType_struct* %292, %struct.smpType_struct** %291, align 1
  %293 = getelementptr { %struct.smpType_struct*, i8* }* %290, i32 0, i32 1
  %294 = extractvalue { %struct.smpType_struct*, i8* } %289, 1
  store i8* %294, i8** %293, align 1
  %295 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %296 = getelementptr { %struct.smpType_struct*, i8* }* %295, i32 0, i32 0
  %297 = load %struct.smpType_struct** %296, align 1
  %298 = getelementptr { %struct.smpType_struct*, i8* }* %295, i32 0, i32 1
  %299 = load i8** %298, align 1
  %300 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %301 = getelementptr { %struct.smpType_struct*, i8* }* %300, i32 0, i32 0
  %302 = load %struct.smpType_struct** %301, align 1
  %303 = getelementptr { %struct.smpType_struct*, i8* }* %300, i32 0, i32 1
  %304 = load i8** %303, align 1
  %305 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %297, i8* %299, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str132, i32 0, i32 0), %struct.smpType_struct* %302, i8* %304)
  %306 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %307 = getelementptr { %struct.smpType_struct*, i8* }* %306, i32 0, i32 0
  %308 = extractvalue { %struct.smpType_struct*, i8* } %305, 0
  store %struct.smpType_struct* %308, %struct.smpType_struct** %307, align 1
  %309 = getelementptr { %struct.smpType_struct*, i8* }* %306, i32 0, i32 1
  %310 = extractvalue { %struct.smpType_struct*, i8* } %305, 1
  store i8* %310, i8** %309, align 1
  %311 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_ge, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %312 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %313 = getelementptr { %struct.smpType_struct*, i8* }* %312, i32 0, i32 0
  %314 = extractvalue { %struct.smpType_struct*, i8* } %311, 0
  store %struct.smpType_struct* %314, %struct.smpType_struct** %313, align 1
  %315 = getelementptr { %struct.smpType_struct*, i8* }* %312, i32 0, i32 1
  %316 = extractvalue { %struct.smpType_struct*, i8* } %311, 1
  store i8* %316, i8** %315, align 1
  %317 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %318 = getelementptr { %struct.smpType_struct*, i8* }* %317, i32 0, i32 0
  %319 = load %struct.smpType_struct** %318, align 1
  %320 = getelementptr { %struct.smpType_struct*, i8* }* %317, i32 0, i32 1
  %321 = load i8** %320, align 1
  %322 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %323 = getelementptr { %struct.smpType_struct*, i8* }* %322, i32 0, i32 0
  %324 = load %struct.smpType_struct** %323, align 1
  %325 = getelementptr { %struct.smpType_struct*, i8* }* %322, i32 0, i32 1
  %326 = load i8** %325, align 1
  %327 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %319, i8* %321, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), %struct.smpType_struct* %324, i8* %326)
  %328 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %329 = getelementptr { %struct.smpType_struct*, i8* }* %328, i32 0, i32 0
  %330 = extractvalue { %struct.smpType_struct*, i8* } %327, 0
  store %struct.smpType_struct* %330, %struct.smpType_struct** %329, align 1
  %331 = getelementptr { %struct.smpType_struct*, i8* }* %328, i32 0, i32 1
  %332 = extractvalue { %struct.smpType_struct*, i8* } %327, 1
  store i8* %332, i8** %331, align 1
  %333 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_gt, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %334 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %335 = getelementptr { %struct.smpType_struct*, i8* }* %334, i32 0, i32 0
  %336 = extractvalue { %struct.smpType_struct*, i8* } %333, 0
  store %struct.smpType_struct* %336, %struct.smpType_struct** %335, align 1
  %337 = getelementptr { %struct.smpType_struct*, i8* }* %334, i32 0, i32 1
  %338 = extractvalue { %struct.smpType_struct*, i8* } %333, 1
  store i8* %338, i8** %337, align 1
  %339 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %340 = getelementptr { %struct.smpType_struct*, i8* }* %339, i32 0, i32 0
  %341 = load %struct.smpType_struct** %340, align 1
  %342 = getelementptr { %struct.smpType_struct*, i8* }* %339, i32 0, i32 1
  %343 = load i8** %342, align 1
  %344 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %345 = getelementptr { %struct.smpType_struct*, i8* }* %344, i32 0, i32 0
  %346 = load %struct.smpType_struct** %345, align 1
  %347 = getelementptr { %struct.smpType_struct*, i8* }* %344, i32 0, i32 1
  %348 = load i8** %347, align 1
  %349 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %341, i8* %343, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str134, i32 0, i32 0), %struct.smpType_struct* %346, i8* %348)
  %350 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %351 = getelementptr { %struct.smpType_struct*, i8* }* %350, i32 0, i32 0
  %352 = extractvalue { %struct.smpType_struct*, i8* } %349, 0
  store %struct.smpType_struct* %352, %struct.smpType_struct** %351, align 1
  %353 = getelementptr { %struct.smpType_struct*, i8* }* %350, i32 0, i32 1
  %354 = extractvalue { %struct.smpType_struct*, i8* } %349, 1
  store i8* %354, i8** %353, align 1
  %355 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_eq, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %356 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %357 = getelementptr { %struct.smpType_struct*, i8* }* %356, i32 0, i32 0
  %358 = extractvalue { %struct.smpType_struct*, i8* } %355, 0
  store %struct.smpType_struct* %358, %struct.smpType_struct** %357, align 1
  %359 = getelementptr { %struct.smpType_struct*, i8* }* %356, i32 0, i32 1
  %360 = extractvalue { %struct.smpType_struct*, i8* } %355, 1
  store i8* %360, i8** %359, align 1
  %361 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %362 = getelementptr { %struct.smpType_struct*, i8* }* %361, i32 0, i32 0
  %363 = load %struct.smpType_struct** %362, align 1
  %364 = getelementptr { %struct.smpType_struct*, i8* }* %361, i32 0, i32 1
  %365 = load i8** %364, align 1
  %366 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %367 = getelementptr { %struct.smpType_struct*, i8* }* %366, i32 0, i32 0
  %368 = load %struct.smpType_struct** %367, align 1
  %369 = getelementptr { %struct.smpType_struct*, i8* }* %366, i32 0, i32 1
  %370 = load i8** %369, align 1
  %371 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %363, i8* %365, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str23, i32 0, i32 0), %struct.smpType_struct* %368, i8* %370)
  %372 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %373 = getelementptr { %struct.smpType_struct*, i8* }* %372, i32 0, i32 0
  %374 = extractvalue { %struct.smpType_struct*, i8* } %371, 0
  store %struct.smpType_struct* %374, %struct.smpType_struct** %373, align 1
  %375 = getelementptr { %struct.smpType_struct*, i8* }* %372, i32 0, i32 1
  %376 = extractvalue { %struct.smpType_struct*, i8* } %371, 1
  store i8* %376, i8** %375, align 1
  %377 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_equalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %378 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %379 = getelementptr { %struct.smpType_struct*, i8* }* %378, i32 0, i32 0
  %380 = extractvalue { %struct.smpType_struct*, i8* } %377, 0
  store %struct.smpType_struct* %380, %struct.smpType_struct** %379, align 1
  %381 = getelementptr { %struct.smpType_struct*, i8* }* %378, i32 0, i32 1
  %382 = extractvalue { %struct.smpType_struct*, i8* } %377, 1
  store i8* %382, i8** %381, align 1
  %383 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %384 = getelementptr { %struct.smpType_struct*, i8* }* %383, i32 0, i32 0
  %385 = load %struct.smpType_struct** %384, align 1
  %386 = getelementptr { %struct.smpType_struct*, i8* }* %383, i32 0, i32 1
  %387 = load i8** %386, align 1
  %388 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %389 = getelementptr { %struct.smpType_struct*, i8* }* %388, i32 0, i32 0
  %390 = load %struct.smpType_struct** %389, align 1
  %391 = getelementptr { %struct.smpType_struct*, i8* }* %388, i32 0, i32 1
  %392 = load i8** %391, align 1
  %393 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %385, i8* %387, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str22, i32 0, i32 0), %struct.smpType_struct* %390, i8* %392)
  %394 = bitcast %struct.obj_struct* %31 to { %struct.smpType_struct*, i8* }*
  %395 = getelementptr { %struct.smpType_struct*, i8* }* %394, i32 0, i32 0
  %396 = extractvalue { %struct.smpType_struct*, i8* } %393, 0
  store %struct.smpType_struct* %396, %struct.smpType_struct** %395, align 1
  %397 = getelementptr { %struct.smpType_struct*, i8* }* %394, i32 0, i32 1
  %398 = extractvalue { %struct.smpType_struct*, i8* } %393, 1
  store i8* %398, i8** %397, align 1
  %399 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFloat_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %400 = bitcast %struct.obj_struct* %32 to { %struct.smpType_struct*, i8* }*
  %401 = getelementptr { %struct.smpType_struct*, i8* }* %400, i32 0, i32 0
  %402 = extractvalue { %struct.smpType_struct*, i8* } %399, 0
  store %struct.smpType_struct* %402, %struct.smpType_struct** %401, align 1
  %403 = getelementptr { %struct.smpType_struct*, i8* }* %400, i32 0, i32 1
  %404 = extractvalue { %struct.smpType_struct*, i8* } %399, 1
  store i8* %404, i8** %403, align 1
  %405 = bitcast %struct.obj_struct* %floatclass to { %struct.smpType_struct*, i8* }*
  %406 = getelementptr { %struct.smpType_struct*, i8* }* %405, i32 0, i32 0
  %407 = load %struct.smpType_struct** %406, align 1
  %408 = getelementptr { %struct.smpType_struct*, i8* }* %405, i32 0, i32 1
  %409 = load i8** %408, align 1
  %410 = bitcast %struct.obj_struct* %32 to { %struct.smpType_struct*, i8* }*
  %411 = getelementptr { %struct.smpType_struct*, i8* }* %410, i32 0, i32 0
  %412 = load %struct.smpType_struct** %411, align 1
  %413 = getelementptr { %struct.smpType_struct*, i8* }* %410, i32 0, i32 1
  %414 = load i8** %413, align 1
  %415 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %407, i8* %409, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %412, i8* %414)
  %416 = bitcast %struct.obj_struct* %33 to { %struct.smpType_struct*, i8* }*
  %417 = getelementptr { %struct.smpType_struct*, i8* }* %416, i32 0, i32 0
  %418 = extractvalue { %struct.smpType_struct*, i8* } %415, 0
  store %struct.smpType_struct* %418, %struct.smpType_struct** %417, align 1
  %419 = getelementptr { %struct.smpType_struct*, i8* }* %416, i32 0, i32 1
  %420 = extractvalue { %struct.smpType_struct*, i8* } %415, 1
  store i8* %420, i8** %419, align 1
  %421 = call noalias i8* @GC_malloc(i64 32)
  %422 = bitcast i8* %421 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %422, [1 x %struct.__mpfr_struct]** %pi, align 8
  %423 = load [1 x %struct.__mpfr_struct]** %pi, align 8
  %424 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %423, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %424)
  %425 = load [1 x %struct.__mpfr_struct]** %pi, align 8
  %426 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %425, i32 0, i32 0
  %427 = load i32* @smp_mpfr_rnd, align 4
  %428 = call i32 @mpfr_const_pi(%struct.__mpfr_struct* %426, i32 %427)
  %429 = load [1 x %struct.__mpfr_struct]** %pi, align 8
  %430 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %429)
  %431 = bitcast %struct.obj_struct* %34 to { %struct.smpType_struct*, i8* }*
  %432 = getelementptr { %struct.smpType_struct*, i8* }* %431, i32 0, i32 0
  %433 = extractvalue { %struct.smpType_struct*, i8* } %430, 0
  store %struct.smpType_struct* %433, %struct.smpType_struct** %432, align 1
  %434 = getelementptr { %struct.smpType_struct*, i8* }* %431, i32 0, i32 1
  %435 = extractvalue { %struct.smpType_struct*, i8* } %430, 1
  store i8* %435, i8** %434, align 1
  %436 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %437 = getelementptr { %struct.smpType_struct*, i8* }* %436, i32 0, i32 0
  %438 = load %struct.smpType_struct** %437, align 1
  %439 = getelementptr { %struct.smpType_struct*, i8* }* %436, i32 0, i32 1
  %440 = load i8** %439, align 1
  %441 = bitcast %struct.obj_struct* %34 to { %struct.smpType_struct*, i8* }*
  %442 = getelementptr { %struct.smpType_struct*, i8* }* %441, i32 0, i32 0
  %443 = load %struct.smpType_struct** %442, align 1
  %444 = getelementptr { %struct.smpType_struct*, i8* }* %441, i32 0, i32 1
  %445 = load i8** %444, align 1
  %446 = call { %struct.smpType_struct*, i8* } @smpType_defvar(%struct.smpType_struct* %438, i8* %440, i32 1, i8* getelementptr inbounds ([3 x i8]* @.str135, i32 0, i32 0), %struct.smpType_struct* %443, i8* %445)
  %447 = bitcast %struct.obj_struct* %35 to { %struct.smpType_struct*, i8* }*
  %448 = getelementptr { %struct.smpType_struct*, i8* }* %447, i32 0, i32 0
  %449 = extractvalue { %struct.smpType_struct*, i8* } %446, 0
  store %struct.smpType_struct* %449, %struct.smpType_struct** %448, align 1
  %450 = getelementptr { %struct.smpType_struct*, i8* }* %447, i32 0, i32 1
  %451 = extractvalue { %struct.smpType_struct*, i8* } %446, 1
  store i8* %451, i8** %450, align 1
  %452 = call noalias i8* @GC_malloc(i64 32)
  %453 = bitcast i8* %452 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %453, [1 x %struct.__mpfr_struct]** %e, align 8
  %454 = load [1 x %struct.__mpfr_struct]** %e, align 8
  %455 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %454, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %455)
  %456 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %one, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %456)
  %457 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %one, i32 0, i32 0
  %458 = load i32* @smp_mpfr_rnd, align 4
  %459 = call i32 @mpfr_set_ui_2exp(%struct.__mpfr_struct* %457, i64 1, i64 0, i32 %458)
  %460 = load [1 x %struct.__mpfr_struct]** %e, align 8
  %461 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %460, i32 0, i32 0
  %462 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %one, i32 0, i32 0
  %463 = load i32* @smp_mpfr_rnd, align 4
  %464 = call i32 @mpfr_exp(%struct.__mpfr_struct* %461, %struct.__mpfr_struct* %462, i32 %463)
  %465 = load [1 x %struct.__mpfr_struct]** %e, align 8
  %466 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %465)
  %467 = bitcast %struct.obj_struct* %36 to { %struct.smpType_struct*, i8* }*
  %468 = getelementptr { %struct.smpType_struct*, i8* }* %467, i32 0, i32 0
  %469 = extractvalue { %struct.smpType_struct*, i8* } %466, 0
  store %struct.smpType_struct* %469, %struct.smpType_struct** %468, align 1
  %470 = getelementptr { %struct.smpType_struct*, i8* }* %467, i32 0, i32 1
  %471 = extractvalue { %struct.smpType_struct*, i8* } %466, 1
  store i8* %471, i8** %470, align 1
  %472 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %473 = getelementptr { %struct.smpType_struct*, i8* }* %472, i32 0, i32 0
  %474 = load %struct.smpType_struct** %473, align 1
  %475 = getelementptr { %struct.smpType_struct*, i8* }* %472, i32 0, i32 1
  %476 = load i8** %475, align 1
  %477 = bitcast %struct.obj_struct* %36 to { %struct.smpType_struct*, i8* }*
  %478 = getelementptr { %struct.smpType_struct*, i8* }* %477, i32 0, i32 0
  %479 = load %struct.smpType_struct** %478, align 1
  %480 = getelementptr { %struct.smpType_struct*, i8* }* %477, i32 0, i32 1
  %481 = load i8** %480, align 1
  %482 = call { %struct.smpType_struct*, i8* } @smpType_defvar(%struct.smpType_struct* %474, i8* %476, i32 1, i8* getelementptr inbounds ([2 x i8]* @.str136, i32 0, i32 0), %struct.smpType_struct* %479, i8* %481)
  %483 = bitcast %struct.obj_struct* %37 to { %struct.smpType_struct*, i8* }*
  %484 = getelementptr { %struct.smpType_struct*, i8* }* %483, i32 0, i32 0
  %485 = extractvalue { %struct.smpType_struct*, i8* } %482, 0
  store %struct.smpType_struct* %485, %struct.smpType_struct** %484, align 1
  %486 = getelementptr { %struct.smpType_struct*, i8* }* %483, i32 0, i32 1
  %487 = extractvalue { %struct.smpType_struct*, i8* } %482, 1
  store i8* %487, i8** %486, align 1
  %488 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %one, i32 0, i32 0
  call void @mpfr_clear(%struct.__mpfr_struct* %488)
  ret i32 0
}

declare void @mpfr_set_default_prec(i64)

define { %struct.smpType_struct*, i8* } @smpFloat_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to [1 x %struct.__mpfr_struct]*
  %10 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %9, i32 0, i32 0
  call void @mpfr_clear(%struct.__mpfr_struct* %10)
  %11 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %12 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %13 = load { %struct.smpType_struct*, i8* }* %12, align 1
  ret { %struct.smpType_struct*, i8* } %13
}

define { %struct.smpType_struct*, i8* } @smpFloat_add(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %f = alloca [1 x %struct.__mpfr_struct]*, align 8
  %res = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_float, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %0
  %18 = call noalias i8* @GC_malloc(i64 32)
  %19 = bitcast i8* %18 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %19, [1 x %struct.__mpfr_struct]** %f, align 8
  %20 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %21 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %20, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %21)
  %22 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to [1 x %struct.__mpfr_struct]*
  %27 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %26, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpfr_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %32, i32 0, i32 0
  %34 = load i32* @smp_mpfr_rnd, align 4
  %35 = call i32 @mpfr_add(%struct.__mpfr_struct* %23, %struct.__mpfr_struct* %27, %struct.__mpfr_struct* %33, i32 %34)
  %36 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %37 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %36)
  %38 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = extractvalue { %struct.smpType_struct*, i8* } %37, 0
  store %struct.smpType_struct* %40, %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = extractvalue { %struct.smpType_struct*, i8* } %37, 1
  store i8* %42, i8** %41, align 1
  br label %112

; <label>:43                                      ; preds = %0
  %44 = load %struct.obj_struct** %3, align 8
  %45 = getelementptr inbounds %struct.obj_struct* %44, i64 0
  %46 = getelementptr inbounds %struct.obj_struct* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 8
  %48 = getelementptr inbounds %struct.smpType_struct* %47, i32 0, i32 1
  %49 = load i32* %48, align 4
  %50 = load i32* @smpType_id_int, align 4
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %52, label %78

; <label>:52                                      ; preds = %43
  %53 = call noalias i8* @GC_malloc(i64 32)
  %54 = bitcast i8* %53 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %54, [1 x %struct.__mpfr_struct]** %res, align 8
  %55 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %56 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %55, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %56)
  %57 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %58 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to [1 x %struct.__mpfr_struct]*
  %62 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %61, i32 0, i32 0
  %63 = load %struct.obj_struct** %3, align 8
  %64 = getelementptr inbounds %struct.obj_struct* %63, i64 0
  %65 = getelementptr inbounds %struct.obj_struct* %64, i32 0, i32 1
  %66 = load i8** %65, align 8
  %67 = bitcast i8* %66 to [1 x %struct.__mpz_struct]*
  %68 = getelementptr inbounds [1 x %struct.__mpz_struct]* %67, i32 0, i32 0
  %69 = load i32* @smp_mpfr_rnd, align 4
  %70 = call i32 @mpfr_add_z(%struct.__mpfr_struct* %58, %struct.__mpfr_struct* %62, %struct.__mpz_struct* %68, i32 %69)
  %71 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %72 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %71)
  %73 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  br label %112

; <label>:78                                      ; preds = %43
  %79 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %80 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 0
  %82 = extractvalue { %struct.smpType_struct*, i8* } %79, 0
  store %struct.smpType_struct* %82, %struct.smpType_struct** %81, align 1
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 1
  %84 = extractvalue { %struct.smpType_struct*, i8* } %79, 1
  store i8* %84, i8** %83, align 1
  %85 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %86 = load i8** %85, align 8
  %87 = bitcast i8* %86 to %struct.smpType_struct*
  %88 = load %struct.obj_struct** %3, align 8
  %89 = getelementptr inbounds %struct.obj_struct* %88, i64 0
  %90 = bitcast %struct.obj_struct* %89 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = load %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = load i8** %93, align 1
  %95 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %87, %struct.smpType_struct* %92, i8* %94)
  %96 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  %101 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = load %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = load i8** %104, align 1
  %106 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %103, i8* %105)
  %107 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 0
  %109 = extractvalue { %struct.smpType_struct*, i8* } %106, 0
  store %struct.smpType_struct* %109, %struct.smpType_struct** %108, align 1
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 1
  %111 = extractvalue { %struct.smpType_struct*, i8* } %106, 1
  store i8* %111, i8** %110, align 1
  br label %112

; <label>:112                                     ; preds = %78, %52, %17
  %113 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %114 = load { %struct.smpType_struct*, i8* }* %113, align 1
  ret { %struct.smpType_struct*, i8* } %114
}

define { %struct.smpType_struct*, i8* } @smpFloat_sub(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %f = alloca [1 x %struct.__mpfr_struct]*, align 8
  %res = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_float, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %0
  %18 = call noalias i8* @GC_malloc(i64 32)
  %19 = bitcast i8* %18 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %19, [1 x %struct.__mpfr_struct]** %f, align 8
  %20 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %21 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %20, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %21)
  %22 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to [1 x %struct.__mpfr_struct]*
  %27 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %26, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpfr_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %32, i32 0, i32 0
  %34 = load i32* @smp_mpfr_rnd, align 4
  %35 = call i32 @mpfr_sub(%struct.__mpfr_struct* %23, %struct.__mpfr_struct* %27, %struct.__mpfr_struct* %33, i32 %34)
  %36 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %37 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %36)
  %38 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = extractvalue { %struct.smpType_struct*, i8* } %37, 0
  store %struct.smpType_struct* %40, %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = extractvalue { %struct.smpType_struct*, i8* } %37, 1
  store i8* %42, i8** %41, align 1
  br label %112

; <label>:43                                      ; preds = %0
  %44 = load %struct.obj_struct** %3, align 8
  %45 = getelementptr inbounds %struct.obj_struct* %44, i64 0
  %46 = getelementptr inbounds %struct.obj_struct* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 8
  %48 = getelementptr inbounds %struct.smpType_struct* %47, i32 0, i32 1
  %49 = load i32* %48, align 4
  %50 = load i32* @smpType_id_int, align 4
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %52, label %78

; <label>:52                                      ; preds = %43
  %53 = call noalias i8* @GC_malloc(i64 32)
  %54 = bitcast i8* %53 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %54, [1 x %struct.__mpfr_struct]** %res, align 8
  %55 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %56 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %55, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %56)
  %57 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %58 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to [1 x %struct.__mpfr_struct]*
  %62 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %61, i32 0, i32 0
  %63 = load %struct.obj_struct** %3, align 8
  %64 = getelementptr inbounds %struct.obj_struct* %63, i64 0
  %65 = getelementptr inbounds %struct.obj_struct* %64, i32 0, i32 1
  %66 = load i8** %65, align 8
  %67 = bitcast i8* %66 to [1 x %struct.__mpz_struct]*
  %68 = getelementptr inbounds [1 x %struct.__mpz_struct]* %67, i32 0, i32 0
  %69 = load i32* @smp_mpfr_rnd, align 4
  %70 = call i32 @mpfr_sub_z(%struct.__mpfr_struct* %58, %struct.__mpfr_struct* %62, %struct.__mpz_struct* %68, i32 %69)
  %71 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %72 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %71)
  %73 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  br label %112

; <label>:78                                      ; preds = %43
  %79 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %80 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 0
  %82 = extractvalue { %struct.smpType_struct*, i8* } %79, 0
  store %struct.smpType_struct* %82, %struct.smpType_struct** %81, align 1
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 1
  %84 = extractvalue { %struct.smpType_struct*, i8* } %79, 1
  store i8* %84, i8** %83, align 1
  %85 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %86 = load i8** %85, align 8
  %87 = bitcast i8* %86 to %struct.smpType_struct*
  %88 = load %struct.obj_struct** %3, align 8
  %89 = getelementptr inbounds %struct.obj_struct* %88, i64 0
  %90 = bitcast %struct.obj_struct* %89 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = load %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = load i8** %93, align 1
  %95 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %87, %struct.smpType_struct* %92, i8* %94)
  %96 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  %101 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = load %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = load i8** %104, align 1
  %106 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %103, i8* %105)
  %107 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 0
  %109 = extractvalue { %struct.smpType_struct*, i8* } %106, 0
  store %struct.smpType_struct* %109, %struct.smpType_struct** %108, align 1
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 1
  %111 = extractvalue { %struct.smpType_struct*, i8* } %106, 1
  store i8* %111, i8** %110, align 1
  br label %112

; <label>:112                                     ; preds = %78, %52, %17
  %113 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %114 = load { %struct.smpType_struct*, i8* }* %113, align 1
  ret { %struct.smpType_struct*, i8* } %114
}

define { %struct.smpType_struct*, i8* } @smpFloat_mul(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %f = alloca [1 x %struct.__mpfr_struct]*, align 8
  %res = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_float, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %0
  %18 = call noalias i8* @GC_malloc(i64 32)
  %19 = bitcast i8* %18 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %19, [1 x %struct.__mpfr_struct]** %f, align 8
  %20 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %21 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %20, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %21)
  %22 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to [1 x %struct.__mpfr_struct]*
  %27 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %26, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpfr_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %32, i32 0, i32 0
  %34 = load i32* @smp_mpfr_rnd, align 4
  %35 = call i32 @mpfr_mul(%struct.__mpfr_struct* %23, %struct.__mpfr_struct* %27, %struct.__mpfr_struct* %33, i32 %34)
  %36 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %37 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %36)
  %38 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = extractvalue { %struct.smpType_struct*, i8* } %37, 0
  store %struct.smpType_struct* %40, %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = extractvalue { %struct.smpType_struct*, i8* } %37, 1
  store i8* %42, i8** %41, align 1
  br label %112

; <label>:43                                      ; preds = %0
  %44 = load %struct.obj_struct** %3, align 8
  %45 = getelementptr inbounds %struct.obj_struct* %44, i64 0
  %46 = getelementptr inbounds %struct.obj_struct* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 8
  %48 = getelementptr inbounds %struct.smpType_struct* %47, i32 0, i32 1
  %49 = load i32* %48, align 4
  %50 = load i32* @smpType_id_int, align 4
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %52, label %78

; <label>:52                                      ; preds = %43
  %53 = call noalias i8* @GC_malloc(i64 32)
  %54 = bitcast i8* %53 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %54, [1 x %struct.__mpfr_struct]** %res, align 8
  %55 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %56 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %55, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %56)
  %57 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %58 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to [1 x %struct.__mpfr_struct]*
  %62 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %61, i32 0, i32 0
  %63 = load %struct.obj_struct** %3, align 8
  %64 = getelementptr inbounds %struct.obj_struct* %63, i64 0
  %65 = getelementptr inbounds %struct.obj_struct* %64, i32 0, i32 1
  %66 = load i8** %65, align 8
  %67 = bitcast i8* %66 to [1 x %struct.__mpz_struct]*
  %68 = getelementptr inbounds [1 x %struct.__mpz_struct]* %67, i32 0, i32 0
  %69 = load i32* @smp_mpfr_rnd, align 4
  %70 = call i32 @mpfr_mul_z(%struct.__mpfr_struct* %58, %struct.__mpfr_struct* %62, %struct.__mpz_struct* %68, i32 %69)
  %71 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %72 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %71)
  %73 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  br label %112

; <label>:78                                      ; preds = %43
  %79 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %80 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 0
  %82 = extractvalue { %struct.smpType_struct*, i8* } %79, 0
  store %struct.smpType_struct* %82, %struct.smpType_struct** %81, align 1
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 1
  %84 = extractvalue { %struct.smpType_struct*, i8* } %79, 1
  store i8* %84, i8** %83, align 1
  %85 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %86 = load i8** %85, align 8
  %87 = bitcast i8* %86 to %struct.smpType_struct*
  %88 = load %struct.obj_struct** %3, align 8
  %89 = getelementptr inbounds %struct.obj_struct* %88, i64 0
  %90 = bitcast %struct.obj_struct* %89 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = load %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = load i8** %93, align 1
  %95 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %87, %struct.smpType_struct* %92, i8* %94)
  %96 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  %101 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = load %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = load i8** %104, align 1
  %106 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %103, i8* %105)
  %107 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 0
  %109 = extractvalue { %struct.smpType_struct*, i8* } %106, 0
  store %struct.smpType_struct* %109, %struct.smpType_struct** %108, align 1
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 1
  %111 = extractvalue { %struct.smpType_struct*, i8* } %106, 1
  store i8* %111, i8** %110, align 1
  br label %112

; <label>:112                                     ; preds = %78, %52, %17
  %113 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %114 = load { %struct.smpType_struct*, i8* }* %113, align 1
  ret { %struct.smpType_struct*, i8* } %114
}

define { %struct.smpType_struct*, i8* } @smpFloat_div(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %f = alloca [1 x %struct.__mpfr_struct]*, align 8
  %res = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_float, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %0
  %18 = call noalias i8* @GC_malloc(i64 32)
  %19 = bitcast i8* %18 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %19, [1 x %struct.__mpfr_struct]** %f, align 8
  %20 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %21 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %20, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %21)
  %22 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to [1 x %struct.__mpfr_struct]*
  %27 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %26, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpfr_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %32, i32 0, i32 0
  %34 = load i32* @smp_mpfr_rnd, align 4
  %35 = call i32 @mpfr_div(%struct.__mpfr_struct* %23, %struct.__mpfr_struct* %27, %struct.__mpfr_struct* %33, i32 %34)
  %36 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %37 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %36)
  %38 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = extractvalue { %struct.smpType_struct*, i8* } %37, 0
  store %struct.smpType_struct* %40, %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = extractvalue { %struct.smpType_struct*, i8* } %37, 1
  store i8* %42, i8** %41, align 1
  br label %112

; <label>:43                                      ; preds = %0
  %44 = load %struct.obj_struct** %3, align 8
  %45 = getelementptr inbounds %struct.obj_struct* %44, i64 0
  %46 = getelementptr inbounds %struct.obj_struct* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 8
  %48 = getelementptr inbounds %struct.smpType_struct* %47, i32 0, i32 1
  %49 = load i32* %48, align 4
  %50 = load i32* @smpType_id_int, align 4
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %52, label %78

; <label>:52                                      ; preds = %43
  %53 = call noalias i8* @GC_malloc(i64 32)
  %54 = bitcast i8* %53 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %54, [1 x %struct.__mpfr_struct]** %res, align 8
  %55 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %56 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %55, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %56)
  %57 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %58 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to [1 x %struct.__mpfr_struct]*
  %62 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %61, i32 0, i32 0
  %63 = load %struct.obj_struct** %3, align 8
  %64 = getelementptr inbounds %struct.obj_struct* %63, i64 0
  %65 = getelementptr inbounds %struct.obj_struct* %64, i32 0, i32 1
  %66 = load i8** %65, align 8
  %67 = bitcast i8* %66 to [1 x %struct.__mpz_struct]*
  %68 = getelementptr inbounds [1 x %struct.__mpz_struct]* %67, i32 0, i32 0
  %69 = load i32* @smp_mpfr_rnd, align 4
  %70 = call i32 @mpfr_div_z(%struct.__mpfr_struct* %58, %struct.__mpfr_struct* %62, %struct.__mpz_struct* %68, i32 %69)
  %71 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %72 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %71)
  %73 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  br label %112

; <label>:78                                      ; preds = %43
  %79 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %80 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 0
  %82 = extractvalue { %struct.smpType_struct*, i8* } %79, 0
  store %struct.smpType_struct* %82, %struct.smpType_struct** %81, align 1
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 1
  %84 = extractvalue { %struct.smpType_struct*, i8* } %79, 1
  store i8* %84, i8** %83, align 1
  %85 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %86 = load i8** %85, align 8
  %87 = bitcast i8* %86 to %struct.smpType_struct*
  %88 = load %struct.obj_struct** %3, align 8
  %89 = getelementptr inbounds %struct.obj_struct* %88, i64 0
  %90 = bitcast %struct.obj_struct* %89 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = load %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = load i8** %93, align 1
  %95 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %87, %struct.smpType_struct* %92, i8* %94)
  %96 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  %101 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = load %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = load i8** %104, align 1
  %106 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %103, i8* %105)
  %107 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 0
  %109 = extractvalue { %struct.smpType_struct*, i8* } %106, 0
  store %struct.smpType_struct* %109, %struct.smpType_struct** %108, align 1
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 1
  %111 = extractvalue { %struct.smpType_struct*, i8* } %106, 1
  store i8* %111, i8** %110, align 1
  br label %112

; <label>:112                                     ; preds = %78, %52, %17
  %113 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %114 = load { %struct.smpType_struct*, i8* }* %113, align 1
  ret { %struct.smpType_struct*, i8* } %114
}

define { %struct.smpType_struct*, i8* } @smpFloat_pow(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %f = alloca [1 x %struct.__mpfr_struct]*, align 8
  %res = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_float, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %43

; <label>:17                                      ; preds = %0
  %18 = call noalias i8* @GC_malloc(i64 32)
  %19 = bitcast i8* %18 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %19, [1 x %struct.__mpfr_struct]** %f, align 8
  %20 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %21 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %20, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %21)
  %22 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to [1 x %struct.__mpfr_struct]*
  %27 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %26, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpfr_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %32, i32 0, i32 0
  %34 = load i32* @smp_mpfr_rnd, align 4
  %35 = call i32 @mpfr_pow(%struct.__mpfr_struct* %23, %struct.__mpfr_struct* %27, %struct.__mpfr_struct* %33, i32 %34)
  %36 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %37 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %36)
  %38 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = extractvalue { %struct.smpType_struct*, i8* } %37, 0
  store %struct.smpType_struct* %40, %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = extractvalue { %struct.smpType_struct*, i8* } %37, 1
  store i8* %42, i8** %41, align 1
  br label %112

; <label>:43                                      ; preds = %0
  %44 = load %struct.obj_struct** %3, align 8
  %45 = getelementptr inbounds %struct.obj_struct* %44, i64 0
  %46 = getelementptr inbounds %struct.obj_struct* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 8
  %48 = getelementptr inbounds %struct.smpType_struct* %47, i32 0, i32 1
  %49 = load i32* %48, align 4
  %50 = load i32* @smpType_id_int, align 4
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %52, label %78

; <label>:52                                      ; preds = %43
  %53 = call noalias i8* @GC_malloc(i64 32)
  %54 = bitcast i8* %53 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %54, [1 x %struct.__mpfr_struct]** %res, align 8
  %55 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %56 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %55, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %56)
  %57 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %58 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to [1 x %struct.__mpfr_struct]*
  %62 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %61, i32 0, i32 0
  %63 = load %struct.obj_struct** %3, align 8
  %64 = getelementptr inbounds %struct.obj_struct* %63, i64 0
  %65 = getelementptr inbounds %struct.obj_struct* %64, i32 0, i32 1
  %66 = load i8** %65, align 8
  %67 = bitcast i8* %66 to [1 x %struct.__mpz_struct]*
  %68 = getelementptr inbounds [1 x %struct.__mpz_struct]* %67, i32 0, i32 0
  %69 = load i32* @smp_mpfr_rnd, align 4
  %70 = call i32 @mpfr_pow_z(%struct.__mpfr_struct* %58, %struct.__mpfr_struct* %62, %struct.__mpz_struct* %68, i32 %69)
  %71 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %72 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %71)
  %73 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  br label %112

; <label>:78                                      ; preds = %43
  %79 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %80 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 0
  %82 = extractvalue { %struct.smpType_struct*, i8* } %79, 0
  store %struct.smpType_struct* %82, %struct.smpType_struct** %81, align 1
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 1
  %84 = extractvalue { %struct.smpType_struct*, i8* } %79, 1
  store i8* %84, i8** %83, align 1
  %85 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %86 = load i8** %85, align 8
  %87 = bitcast i8* %86 to %struct.smpType_struct*
  %88 = load %struct.obj_struct** %3, align 8
  %89 = getelementptr inbounds %struct.obj_struct* %88, i64 0
  %90 = bitcast %struct.obj_struct* %89 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = load %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = load i8** %93, align 1
  %95 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %87, %struct.smpType_struct* %92, i8* %94)
  %96 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  %101 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = load %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = load i8** %104, align 1
  %106 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %103, i8* %105)
  %107 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 0
  %109 = extractvalue { %struct.smpType_struct*, i8* } %106, 0
  store %struct.smpType_struct* %109, %struct.smpType_struct** %108, align 1
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 1
  %111 = extractvalue { %struct.smpType_struct*, i8* } %106, 1
  store i8* %111, i8** %110, align 1
  br label %112

; <label>:112                                     ; preds = %78, %52, %17
  %113 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %114 = load { %struct.smpType_struct*, i8* }* %113, align 1
  ret { %struct.smpType_struct*, i8* } %114
}

define { %struct.smpType_struct*, i8* } @smpFloat_cmp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpFloat_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %39

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = sext i32 %31 to i64
  %33 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %32)
  %34 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = extractvalue { %struct.smpType_struct*, i8* } %33, 0
  store %struct.smpType_struct* %36, %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = extractvalue { %struct.smpType_struct*, i8* } %33, 1
  store i8* %38, i8** %37, align 1
  br label %39

; <label>:39                                      ; preds = %30, %27
  %40 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %41 = load { %struct.smpType_struct*, i8* }* %40, align 1
  ret { %struct.smpType_struct*, i8* } %41
}

define { %struct.smpType_struct*, i8* } @smpInteger_equalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp eq i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpInteger_nequalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp ne i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpFloat_lt(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpFloat_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp slt i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpFloat_le(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpFloat_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp sle i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpFloat_ge(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpFloat_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp sge i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpFloat_gt(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpFloat_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp sgt i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpFloat_eq(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load i32* %2, align 4
  %8 = load %struct.obj_struct** %3, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smpFloat_equalp(%struct.smpType_struct* %11, i8* %13, i32 %7, %struct.obj_struct* %8)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smpFloat_equalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpFloat_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp eq i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpFloat_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %fmt = alloca [100 x i8], align 16
  %digits = alloca i32, align 4
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %str = alloca i8*, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load i64* @smp_mpfr_default_prec, align 8
  %10 = sitofp i64 %9 to double
  %11 = call double @log10(double 2.000000e+00)
  %12 = fmul double %10, %11
  %13 = fptosi double %12 to i32
  store i32 %13, i32* %digits, align 4
  %14 = load i32* %2, align 4
  %15 = icmp sgt i32 %14, 0
  br i1 %15, label %16, label %90

; <label>:16                                      ; preds = %0
  %17 = load %struct.obj_struct** %3, align 8
  %18 = getelementptr inbounds %struct.obj_struct* %17, i64 0
  %19 = getelementptr inbounds %struct.obj_struct* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 8
  %21 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %20, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %71, label %23

; <label>:23                                      ; preds = %16
  %24 = load %struct.obj_struct** %3, align 8
  %25 = getelementptr inbounds %struct.obj_struct* %24, i64 0
  %26 = getelementptr inbounds %struct.obj_struct* %25, i32 0, i32 0
  %27 = load %struct.smpType_struct** %26, align 8
  %28 = getelementptr inbounds %struct.smpType_struct* %27, i32 0, i32 0
  %29 = load i8** %28, align 8
  %30 = call i32 @strcmp(i8* %29, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %37

; <label>:32                                      ; preds = %23
  %33 = load %struct.obj_struct** %3, align 8
  %34 = getelementptr inbounds %struct.obj_struct* %33, i64 0
  %35 = bitcast %struct.obj_struct* %1 to i8*
  %36 = bitcast %struct.obj_struct* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 16, i32 8, i1 false)
  br label %107

; <label>:37                                      ; preds = %23
  %38 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %39 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = extractvalue { %struct.smpType_struct*, i8* } %38, 0
  store %struct.smpType_struct* %41, %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = extractvalue { %struct.smpType_struct*, i8* } %38, 1
  store i8* %43, i8** %42, align 1
  %44 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %45 = load i8** %44, align 8
  %46 = bitcast i8* %45 to %struct.smpType_struct*
  %47 = load %struct.obj_struct** %3, align 8
  %48 = getelementptr inbounds %struct.obj_struct* %47, i64 0
  %49 = bitcast %struct.obj_struct* %48 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = load %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = load i8** %52, align 1
  %54 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %46, %struct.smpType_struct* %51, i8* %53)
  %55 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 0
  %57 = extractvalue { %struct.smpType_struct*, i8* } %54, 0
  store %struct.smpType_struct* %57, %struct.smpType_struct** %56, align 1
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 1
  %59 = extractvalue { %struct.smpType_struct*, i8* } %54, 1
  store i8* %59, i8** %58, align 1
  %60 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = load %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = load i8** %63, align 1
  %65 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %62, i8* %64)
  %66 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = extractvalue { %struct.smpType_struct*, i8* } %65, 0
  store %struct.smpType_struct* %68, %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = extractvalue { %struct.smpType_struct*, i8* } %65, 1
  store i8* %70, i8** %69, align 1
  br label %107

; <label>:71                                      ; preds = %16
  %72 = load %struct.obj_struct** %3, align 8
  %73 = getelementptr inbounds %struct.obj_struct* %72, i64 0
  %74 = getelementptr inbounds %struct.obj_struct* %73, i32 0, i32 1
  %75 = load i8** %74, align 8
  %76 = bitcast i8* %75 to [1 x %struct.__mpz_struct]*
  %77 = getelementptr inbounds [1 x %struct.__mpz_struct]* %76, i32 0, i32 0
  %78 = call i32 @__gmpz_fits_sint_p(%struct.__mpz_struct* %77) nounwind readonly
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %89

; <label>:80                                      ; preds = %71
  %81 = load %struct.obj_struct** %3, align 8
  %82 = getelementptr inbounds %struct.obj_struct* %81, i64 0
  %83 = getelementptr inbounds %struct.obj_struct* %82, i32 0, i32 1
  %84 = load i8** %83, align 8
  %85 = bitcast i8* %84 to [1 x %struct.__mpz_struct]*
  %86 = getelementptr inbounds [1 x %struct.__mpz_struct]* %85, i32 0, i32 0
  %87 = call i64 @__gmpz_get_si(%struct.__mpz_struct* %86) nounwind readonly
  %88 = trunc i64 %87 to i32
  store i32 %88, i32* %digits, align 4
  br label %89

; <label>:89                                      ; preds = %80, %71
  br label %90

; <label>:90                                      ; preds = %89, %0
  %91 = getelementptr inbounds [100 x i8]* %fmt, i32 0, i32 0
  %92 = load i32* %digits, align 4
  %93 = call i32 (i8*, i32, i64, i8*, ...)* @__sprintf_chk(i8* %91, i32 0, i64 100, i8* getelementptr inbounds ([9 x i8]* @.str137, i32 0, i32 0), i32 %92)
  %94 = getelementptr inbounds [100 x i8]* %fmt, i32 0, i32 0
  %95 = load i32* @smp_mpfr_rnd, align 4
  %96 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %97 = load i8** %96, align 8
  %98 = bitcast i8* %97 to [1 x %struct.__mpfr_struct]*
  %99 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %98, i32 0, i32 0
  %100 = call i32 (i8**, i8*, ...)* @mpfr_asprintf(i8** %str, i8* %94, i32 %95, %struct.__mpfr_struct* %99)
  %101 = call { %struct.smpType_struct*, i8* } @smpString_init_ref(i8** %str)
  %102 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 0
  %104 = extractvalue { %struct.smpType_struct*, i8* } %101, 0
  store %struct.smpType_struct* %104, %struct.smpType_struct** %103, align 1
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 1
  %106 = extractvalue { %struct.smpType_struct*, i8* } %101, 1
  store i8* %106, i8** %105, align 1
  br label %107

; <label>:107                                     ; preds = %90, %37, %32
  %108 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %109 = load { %struct.smpType_struct*, i8* }* %108, align 1
  ret { %struct.smpType_struct*, i8* } %109
}

declare void @mpfr_init(%struct.__mpfr_struct*)

declare i32 @mpfr_const_pi(%struct.__mpfr_struct*, i32)

define { %struct.smpType_struct*, i8* } @smpType_defvar(%struct.smpType_struct* %type.coerce0, i8* %type.coerce1, i32 %flags, i8* %name, %struct.smpType_struct* %var.coerce0, i8* %var.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %type = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %var = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %type.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %type.coerce1, i8** %6
  store i32 %flags, i32* %2, align 4
  store i8* %name, i8** %3, align 8
  %7 = bitcast %struct.obj_struct* %var to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %var.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %var.coerce1, i8** %9
  %10 = load i32* %2, align 4
  %11 = or i32 %10, 256
  %12 = load i8** %3, align 8
  %13 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = load %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = load i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %var to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = call { %struct.smpType_struct*, i8* } @smpType_def_general(%struct.smpType_struct* %15, i8* %17, i32 %11, i8* %12, %struct.smpType_struct* %20, i8* %22)
  %24 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 0
  %26 = extractvalue { %struct.smpType_struct*, i8* } %23, 0
  store %struct.smpType_struct* %26, %struct.smpType_struct** %25, align 1
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 1
  %28 = extractvalue { %struct.smpType_struct*, i8* } %23, 1
  store i8* %28, i8** %27, align 1
  %29 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %30 = load { %struct.smpType_struct*, i8* }* %29, align 1
  ret { %struct.smpType_struct*, i8* } %30
}

define { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %x) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca [1 x %struct.__mpfr_struct]*, align 8
  %res = alloca %struct.obj_struct, align 8
  store [1 x %struct.__mpfr_struct]* %x, [1 x %struct.__mpfr_struct]** %2, align 8
  %3 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_float)
  %4 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = load [1 x %struct.__mpfr_struct]** %2, align 8
  %10 = bitcast [1 x %struct.__mpfr_struct]* %9 to i8*
  %11 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %10, i8** %11, align 8
  %12 = bitcast %struct.obj_struct* %1 to i8*
  %13 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 8, i1 false)
  %14 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %15 = load { %struct.smpType_struct*, i8* }* %14, align 1
  ret { %struct.smpType_struct*, i8* } %15
}

declare i32 @mpfr_set_ui_2exp(%struct.__mpfr_struct*, i64, i64, i32)

declare i32 @mpfr_exp(%struct.__mpfr_struct*, %struct.__mpfr_struct*, i32)

declare void @mpfr_clear(%struct.__mpfr_struct*)

define { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr(%struct.__mpfr_struct* %x) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.__mpfr_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  store %struct.__mpfr_struct* %x, %struct.__mpfr_struct** %2, align 8
  %3 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_float)
  %4 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = call noalias i8* @GC_malloc(i64 32)
  %10 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %12 = load i8** %11, align 8
  %13 = bitcast i8* %12 to [1 x %struct.__mpfr_struct]*
  %14 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %13, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %14)
  %15 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %16 = load i8** %15, align 8
  %17 = bitcast i8* %16 to [1 x %struct.__mpfr_struct]*
  %18 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %17, i32 0, i32 0
  %19 = load %struct.__mpfr_struct** %2, align 8
  %20 = load i32* @smp_mpfr_rnd, align 4
  %21 = load %struct.__mpfr_struct** %2, align 8
  %22 = getelementptr inbounds %struct.__mpfr_struct* %21, i32 0, i32 1
  %23 = load i32* %22, align 4
  %24 = call i32 @mpfr_set4(%struct.__mpfr_struct* %18, %struct.__mpfr_struct* %19, i32 %20, i32 %23)
  %25 = bitcast %struct.obj_struct* %1 to i8*
  %26 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 16, i32 8, i1 false)
  %27 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %28 = load { %struct.smpType_struct*, i8* }* %27, align 1
  ret { %struct.smpType_struct*, i8* } %28
}

declare i32 @mpfr_set4(%struct.__mpfr_struct*, %struct.__mpfr_struct*, i32, i32)

declare i32 @mpfr_set_d(%struct.__mpfr_struct*, double, i32)

define { %struct.smpType_struct*, i8* } @smpFloat_init_str(i8* %str) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %f = alloca [1 x %struct.__mpfr_struct]*, align 8
  %res = alloca %struct.obj_struct, align 8
  store i8* %str, i8** %2, align 8
  %3 = call noalias i8* @GC_malloc(i64 32)
  %4 = bitcast i8* %3 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %4, [1 x %struct.__mpfr_struct]** %f, align 8
  %5 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %6 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %5, i32 0, i32 0
  %7 = load i8** %2, align 8
  %8 = load i32* @smp_mpfr_rnd, align 4
  %9 = call i32 @mpfr_init_set_str(%struct.__mpfr_struct* %6, i8* %7, i32 0, i32 %8)
  %10 = load [1 x %struct.__mpfr_struct]** %f, align 8
  %11 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %10)
  %12 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = bitcast %struct.obj_struct* %1 to i8*
  %18 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %17, i8* %18, i64 16, i32 8, i1 false)
  %19 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %20 = load { %struct.smpType_struct*, i8* }* %19, align 1
  ret { %struct.smpType_struct*, i8* } %20
}

declare i32 @mpfr_init_set_str(%struct.__mpfr_struct*, i8*, i32, i32)

declare i32 @mpfr_add(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpfr_struct*, i32)

declare i32 @mpfr_add_z(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpz_struct*, i32)

declare i32 @mpfr_sub(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpfr_struct*, i32)

declare i32 @mpfr_sub_z(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpz_struct*, i32)

declare i32 @mpfr_mul(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpfr_struct*, i32)

declare i32 @mpfr_mul_z(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpz_struct*, i32)

declare i32 @mpfr_div(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpfr_struct*, i32)

declare i32 @mpfr_div_z(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpz_struct*, i32)

declare i32 @mpfr_pow(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpfr_struct*, i32)

declare i32 @mpfr_pow_z(%struct.__mpfr_struct*, %struct.__mpfr_struct*, %struct.__mpz_struct*, i32)

declare i32 @mpfr_cmp_z(%struct.__mpfr_struct*, %struct.__mpz_struct*)

declare i32 @mpfr_cmp3(%struct.__mpfr_struct*, %struct.__mpfr_struct*, i32)

define { %struct.smpType_struct*, i8* } @smpFloat_nequalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpFloat_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp ne i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

declare double @log10(double)

declare i32 @__gmpz_fits_sint_p(%struct.__mpz_struct*) nounwind readonly

declare i64 @__gmpz_get_si(%struct.__mpz_struct*) nounwind readonly

declare i32 @__sprintf_chk(i8*, i32, i64, i8*, ...)

declare i32 @mpfr_asprintf(i8**, i8*, ...)

define { %struct.smpType_struct*, i8* } @smpString_init_ref(i8** %str) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8**, align 8
  %res = alloca %struct.obj_struct, align 8
  %core = alloca %struct.smpstrstruct, align 8
  store i8** %str, i8*** %2, align 8
  %3 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_string)
  %4 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = call noalias i8* @GC_malloc(i64 16)
  %10 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %9, i8** %10, align 8
  %11 = load i8*** %2, align 8
  %12 = load i8** %11, align 8
  %13 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  store i8* %12, i8** %13, align 8
  %14 = load i8*** %2, align 8
  %15 = load i8** %14, align 8
  %16 = call i64 @strlen(i8* %15)
  %17 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 1
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %19 = load i8** %18, align 8
  %20 = bitcast i8* %19 to %struct.smpstrstruct*
  %21 = bitcast %struct.smpstrstruct* %20 to i8*
  %22 = bitcast %struct.smpstrstruct* %core to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 16, i32 8, i1 false)
  %23 = bitcast %struct.obj_struct* %1 to i8*
  %24 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 16, i32 8, i1 false)
  %25 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %26 = load { %struct.smpType_struct*, i8* }* %25, align 1
  ret { %struct.smpType_struct*, i8* } %26
}

define i32 @smpFunction_create_class() nounwind {
  %function = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %6 = bitcast %struct.obj_struct* %function to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  %8 = extractvalue { %struct.smpType_struct*, i8* } %5, 0
  store %struct.smpType_struct* %8, %struct.smpType_struct** %7, align 1
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  %10 = extractvalue { %struct.smpType_struct*, i8* } %5, 1
  store i8* %10, i8** %9, align 1
  %11 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFunction_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %12 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = bitcast %struct.obj_struct* %function to { %struct.smpType_struct*, i8* }*
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 1
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 1
  %21 = load i8** %20, align 1
  %22 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = load i8** %25, align 1
  %27 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %19, i8* %21, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %24, i8* %26)
  %28 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = extractvalue { %struct.smpType_struct*, i8* } %27, 0
  store %struct.smpType_struct* %30, %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = extractvalue { %struct.smpType_struct*, i8* } %27, 1
  store i8* %32, i8** %31, align 1
  %33 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpFunction_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %34 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = extractvalue { %struct.smpType_struct*, i8* } %33, 0
  store %struct.smpType_struct* %36, %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = extractvalue { %struct.smpType_struct*, i8* } %33, 1
  store i8* %38, i8** %37, align 1
  %39 = bitcast %struct.obj_struct* %function to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = load %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = load i8** %42, align 1
  %44 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 0
  %46 = load %struct.smpType_struct** %45, align 1
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 1
  %48 = load i8** %47, align 1
  %49 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %41, i8* %43, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %46, i8* %48)
  %50 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = extractvalue { %struct.smpType_struct*, i8* } %49, 0
  store %struct.smpType_struct* %52, %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = extractvalue { %struct.smpType_struct*, i8* } %49, 1
  store i8* %54, i8** %53, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpFunction_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpFunction_struct, align 8
  %i = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpFunction_struct*
  %10 = bitcast %struct.smpFunction_struct* %core to i8*
  %11 = bitcast %struct.smpFunction_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 40, i32 8, i1 false)
  %12 = getelementptr inbounds %struct.smpFunction_struct* %core, i32 0, i32 1
  %13 = load i8** %12, align 8
  call void @GC_free(i8* %13)
  store i32 0, i32* %i, align 4
  br label %14

; <label>:14                                      ; preds = %25, %0
  %15 = load i32* %i, align 4
  %16 = bitcast %struct.smpFunction_struct* %core to i8*
  %17 = getelementptr i8* %16, i32 24
  %18 = bitcast i8* %17 to i32*
  %19 = load i32* %18, align 8
  %20 = and i32 %19, 65535
  %21 = shl i32 %20, 16
  %22 = ashr i32 %21, 16
  %23 = icmp slt i32 %15, %22
  br i1 %23, label %24, label %28

; <label>:24                                      ; preds = %14
  br label %25

; <label>:25                                      ; preds = %24
  %26 = load i32* %i, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %i, align 4
  br label %14

; <label>:28                                      ; preds = %14
  %29 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %30 = load i8** %29, align 8
  %31 = bitcast i8* %30 to %struct.smpFunction_struct*
  %32 = getelementptr inbounds %struct.smpFunction_struct* %31, i32 0, i32 2
  %33 = load %struct.argspec_struct** %32, align 8
  %34 = bitcast %struct.argspec_struct* %33 to i8*
  call void @GC_free(i8* %34)
  %35 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %36 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %37 = load { %struct.smpType_struct*, i8* }* %36, align 1
  ret { %struct.smpType_struct*, i8* } %37
}

define { %struct.smpType_struct*, i8* } @smpFunction_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpFunction_struct*
  %10 = getelementptr inbounds %struct.smpFunction_struct* %9, i32 0, i32 1
  %11 = load i8** %10, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %25

; <label>:13                                      ; preds = %0
  %14 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %15 = load i8** %14, align 8
  %16 = bitcast i8* %15 to %struct.smpFunction_struct*
  %17 = getelementptr inbounds %struct.smpFunction_struct* %16, i32 0, i32 1
  %18 = load i8** %17, align 8
  %19 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpString_init_fmt(i8* getelementptr inbounds ([5 x i8]* @.str143, i32 0, i32 0), i8* %18)
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 0
  %22 = extractvalue { %struct.smpType_struct*, i8* } %19, 0
  store %struct.smpType_struct* %22, %struct.smpType_struct** %21, align 1
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 1
  %24 = extractvalue { %struct.smpType_struct*, i8* } %19, 1
  store i8* %24, i8** %23, align 1
  br label %37

; <label>:25                                      ; preds = %0
  %26 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %27 = load i8** %26, align 8
  %28 = bitcast i8* %27 to %struct.smpFunction_struct*
  %29 = getelementptr inbounds %struct.smpFunction_struct* %28, i32 0, i32 4
  %30 = load { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)** %29, align 8
  %31 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpString_init_fmt(i8* getelementptr inbounds ([16 x i8]* @.str144, i32 0, i32 0), { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* %30)
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  br label %37

; <label>:37                                      ; preds = %25, %13
  %38 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %39 = load { %struct.smpType_struct*, i8* }* %38, align 1
  ret { %struct.smpType_struct*, i8* } %39
}

define { %struct.smpType_struct*, i8* } @smpFunction_init_v({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* %fun, i32 %argc, %struct.__va_list_tag* %ap) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.__va_list_tag*, align 8
  %res = alloca %struct.obj_struct, align 8
  %smp_fun = alloca %struct.smpFunction_struct, align 8
  %5 = alloca i8*
  %optionalp = alloca i32, align 4
  %arg = alloca i8*, align 8
  %i = alloca i32, align 4
  %length = alloca i32, align 4
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca i32
  store { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* %fun, { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)** %2, align 8
  store i32 %argc, i32* %3, align 4
  store %struct.__va_list_tag* %ap, %struct.__va_list_tag** %4, align 8
  %9 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_function)
  %10 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = getelementptr inbounds %struct.smpFunction_struct* %smp_fun, i32 0, i32 1
  store i8* null, i8** %15, align 8
  %16 = bitcast %struct.smpFunction_struct* %smp_fun to i32*
  %17 = load i32* %16, align 8
  %18 = and i32 %17, -256
  store i32 %18, i32* %16, align 8
  %19 = load { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)** %2, align 8
  %20 = getelementptr inbounds %struct.smpFunction_struct* %smp_fun, i32 0, i32 4
  store { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* %19, { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)** %20, align 8
  %21 = load i32* %3, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %25

; <label>:23                                      ; preds = %0
  %24 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %344

; <label>:25                                      ; preds = %0
  %26 = load i32* %3, align 4
  %27 = zext i32 %26 to i64
  %28 = call i8* @llvm.stacksave()
  store i8* %28, i8** %5
  %29 = alloca %struct.argspec_struct, i64 %27, align 16
  store i32 0, i32* %optionalp, align 4
  store i32 0, i32* %i, align 4
  store i32 0, i32* %length, align 4
  br label %30

; <label>:30                                      ; preds = %281, %25
  %31 = load i32* %i, align 4
  %32 = load i32* %3, align 4
  %33 = icmp slt i32 %31, %32
  br i1 %33, label %34, label %286

; <label>:34                                      ; preds = %30
  %35 = load i32* %length, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.argspec_struct* %29, i64 %36
  %38 = bitcast %struct.argspec_struct* %37 to i8*
  %39 = getelementptr i8* %38, i32 8
  %40 = bitcast i8* %39 to i32*
  %41 = load i32* %40, align 8
  %42 = and i32 %41, -2
  store i32 %42, i32* %40, align 8
  %43 = load i32* %optionalp, align 4
  %44 = load i32* %length, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds %struct.argspec_struct* %29, i64 %45
  %47 = and i32 %43, 1
  %48 = shl i32 %47, 31
  %49 = ashr i32 %48, 31
  %50 = bitcast %struct.argspec_struct* %46 to i8*
  %51 = getelementptr i8* %50, i32 8
  %52 = bitcast i8* %51 to i32*
  %53 = and i32 %47, 1
  %54 = shl i32 %53, 1
  %55 = load i32* %52, align 8
  %56 = and i32 %55, -3
  %57 = or i32 %56, %54
  store i32 %57, i32* %52, align 8
  %58 = load i32* %length, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %struct.argspec_struct* %29, i64 %59
  %61 = bitcast %struct.argspec_struct* %60 to i8*
  %62 = getelementptr i8* %61, i32 8
  %63 = bitcast i8* %62 to i32*
  %64 = load i32* %63, align 8
  %65 = and i32 %64, -5
  store i32 %65, i32* %63, align 8
  %66 = load i32* %length, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.argspec_struct* %29, i64 %67
  %69 = getelementptr inbounds %struct.argspec_struct* %68, i32 0, i32 2
  %70 = bitcast %struct.obj_struct* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %71 = load i32* %length, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds %struct.argspec_struct* %29, i64 %72
  %74 = bitcast %struct.argspec_struct* %73 to i8*
  %75 = getelementptr i8* %74, i32 32
  %76 = bitcast i8* %75 to i32*
  %77 = load i32* %76, align 8
  %78 = and i32 %77, -2
  store i32 %78, i32* %76, align 8
  %79 = load %struct.__va_list_tag** %4, align 8
  %80 = getelementptr inbounds %struct.__va_list_tag* %79, i32 0, i32 0
  %81 = load i32* %80
  %82 = icmp ule i32 %81, 40
  br i1 %82, label %83, label %89

; <label>:83                                      ; preds = %34
  %84 = getelementptr inbounds %struct.__va_list_tag* %79, i32 0, i32 3
  %85 = load i8** %84
  %86 = getelementptr i8* %85, i32 %81
  %87 = bitcast i8* %86 to i8**
  %88 = add i32 %81, 8
  store i32 %88, i32* %80
  br label %94

; <label>:89                                      ; preds = %34
  %90 = getelementptr inbounds %struct.__va_list_tag* %79, i32 0, i32 2
  %91 = load i8** %90
  %92 = bitcast i8* %91 to i8**
  %93 = getelementptr i8* %91, i32 8
  store i8* %93, i8** %90
  br label %94

; <label>:94                                      ; preds = %89, %83
  %95 = phi i8** [ %87, %83 ], [ %92, %89 ]
  %96 = load i8** %95
  store i8* %96, i8** %arg, align 8
  %97 = load i32* %length, align 4
  %98 = icmp sgt i32 %97, 0
  br i1 %98, label %99, label %142

; <label>:99                                      ; preds = %94
  %100 = load i32* %length, align 4
  %101 = sub nsw i32 %100, 1
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds %struct.argspec_struct* %29, i64 %102
  %104 = bitcast %struct.argspec_struct* %103 to i8*
  %105 = getelementptr i8* %104, i32 32
  %106 = bitcast i8* %105 to i32*
  %107 = load i32* %106, align 8
  %108 = and i32 %107, 1
  %109 = shl i32 %108, 31
  %110 = ashr i32 %109, 31
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %142

; <label>:112                                     ; preds = %99
  %113 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([14 x i8]* @.str46, i32 0, i32 0))
  %114 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %115 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 0
  %116 = extractvalue { %struct.smpType_struct*, i8* } %113, 0
  store %struct.smpType_struct* %116, %struct.smpType_struct** %115, align 1
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 1
  %118 = extractvalue { %struct.smpType_struct*, i8* } %113, 1
  store i8* %118, i8** %117, align 1
  %119 = load i8** %arg, align 8
  %120 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %121 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 0
  %122 = load %struct.smpType_struct** %121, align 1
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 1
  %124 = load i8** %123, align 1
  %125 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %122, i8* %124, i8* getelementptr inbounds ([42 x i8]* @.str139, i32 0, i32 0), i8* %119)
  %126 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %127 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 0
  %128 = extractvalue { %struct.smpType_struct*, i8* } %125, 0
  store %struct.smpType_struct* %128, %struct.smpType_struct** %127, align 1
  %129 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 1
  %130 = extractvalue { %struct.smpType_struct*, i8* } %125, 1
  store i8* %130, i8** %129, align 1
  %131 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %132 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 0
  %133 = load %struct.smpType_struct** %132, align 1
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 1
  %135 = load i8** %134, align 1
  %136 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %133, i8* %135)
  %137 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 0
  %139 = extractvalue { %struct.smpType_struct*, i8* } %136, 0
  store %struct.smpType_struct* %139, %struct.smpType_struct** %138, align 1
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 1
  %141 = extractvalue { %struct.smpType_struct*, i8* } %136, 1
  store i8* %141, i8** %140, align 1
  store i32 1, i32* %8
  br label %342

; <label>:142                                     ; preds = %99, %94
  br label %143

; <label>:143                                     ; preds = %272, %142
  %144 = load i32* %i, align 4
  %145 = load i32* %3, align 4
  %146 = icmp slt i32 %144, %145
  br i1 %146, label %147, label %275

; <label>:147                                     ; preds = %143
  %148 = load i8** %arg, align 8
  %149 = call i32 @strcmp(i8* %148, i8* getelementptr inbounds ([9 x i8]* @.str140, i32 0, i32 0))
  %150 = icmp eq i32 %149, 0
  br i1 %150, label %151, label %195

; <label>:151                                     ; preds = %147
  %152 = load i32* %length, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds %struct.argspec_struct* %29, i64 %153
  %155 = bitcast %struct.argspec_struct* %154 to i8*
  %156 = getelementptr i8* %155, i32 8
  %157 = bitcast i8* %156 to i32*
  %158 = load i32* %157, align 8
  %159 = and i32 %158, -3
  %160 = or i32 %159, 2
  store i32 %160, i32* %157, align 8
  %161 = load i32* %length, align 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds %struct.argspec_struct* %29, i64 %162
  %164 = bitcast %struct.argspec_struct* %163 to i8*
  %165 = getelementptr i8* %164, i32 8
  %166 = bitcast i8* %165 to i32*
  %167 = load i32* %166, align 8
  %168 = and i32 %167, -5
  %169 = or i32 %168, 4
  store i32 %169, i32* %166, align 8
  %170 = load i32* %length, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds %struct.argspec_struct* %29, i64 %171
  %173 = getelementptr inbounds %struct.argspec_struct* %172, i32 0, i32 2
  %174 = load %struct.__va_list_tag** %4, align 8
  %175 = getelementptr inbounds %struct.__va_list_tag* %174, i32 0, i32 0
  %176 = load i32* %175
  %177 = icmp ule i32 %176, 32
  br i1 %177, label %178, label %184

; <label>:178                                     ; preds = %151
  %179 = getelementptr inbounds %struct.__va_list_tag* %174, i32 0, i32 3
  %180 = load i8** %179
  %181 = getelementptr i8* %180, i32 %176
  %182 = bitcast i8* %181 to %struct.obj_struct*
  %183 = add i32 %176, 16
  store i32 %183, i32* %175
  br label %189

; <label>:184                                     ; preds = %151
  %185 = getelementptr inbounds %struct.__va_list_tag* %174, i32 0, i32 2
  %186 = load i8** %185
  %187 = bitcast i8* %186 to %struct.obj_struct*
  %188 = getelementptr i8* %186, i32 16
  store i8* %188, i8** %185
  br label %189

; <label>:189                                     ; preds = %184, %178
  %190 = phi %struct.obj_struct* [ %182, %178 ], [ %187, %184 ]
  %191 = bitcast %struct.obj_struct* %173 to i8*
  %192 = bitcast %struct.obj_struct* %190 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %191, i8* %192, i64 16, i32 8, i1 false)
  %193 = load i32* %i, align 4
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %i, align 4
  br label %247

; <label>:195                                     ; preds = %147
  %196 = load i8** %arg, align 8
  %197 = call i32 @strcmp(i8* %196, i8* getelementptr inbounds ([7 x i8]* @.str141, i32 0, i32 0))
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %209

; <label>:199                                     ; preds = %195
  %200 = load i32* %length, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds %struct.argspec_struct* %29, i64 %201
  %203 = bitcast %struct.argspec_struct* %202 to i8*
  %204 = getelementptr i8* %203, i32 8
  %205 = bitcast i8* %204 to i32*
  %206 = load i32* %205, align 8
  %207 = and i32 %206, -2
  %208 = or i32 %207, 1
  store i32 %208, i32* %205, align 8
  br label %246

; <label>:209                                     ; preds = %195
  %210 = load i8** %arg, align 8
  %211 = call i32 @strcmp(i8* %210, i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0))
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %213, label %223

; <label>:213                                     ; preds = %209
  store i32 1, i32* %optionalp, align 4
  %214 = load i32* %length, align 4
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds %struct.argspec_struct* %29, i64 %215
  %217 = bitcast %struct.argspec_struct* %216 to i8*
  %218 = getelementptr i8* %217, i32 8
  %219 = bitcast i8* %218 to i32*
  %220 = load i32* %219, align 8
  %221 = and i32 %220, -3
  %222 = or i32 %221, 2
  store i32 %222, i32* %219, align 8
  br label %245

; <label>:223                                     ; preds = %209
  %224 = load i8** %arg, align 8
  %225 = call i32 @strcmp(i8* %224, i8* getelementptr inbounds ([6 x i8]* @.str54, i32 0, i32 0))
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %237

; <label>:227                                     ; preds = %223
  %228 = load i32* %length, align 4
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds %struct.argspec_struct* %29, i64 %229
  %231 = bitcast %struct.argspec_struct* %230 to i8*
  %232 = getelementptr i8* %231, i32 32
  %233 = bitcast i8* %232 to i32*
  %234 = load i32* %233, align 8
  %235 = and i32 %234, -2
  %236 = or i32 %235, 1
  store i32 %236, i32* %233, align 8
  br label %244

; <label>:237                                     ; preds = %223
  %238 = load i8** %arg, align 8
  %239 = call i32 @strcmp(i8* %238, i8* getelementptr inbounds ([9 x i8]* @.str142, i32 0, i32 0))
  %240 = icmp eq i32 %239, 0
  br i1 %240, label %241, label %242

; <label>:241                                     ; preds = %237
  br label %243

; <label>:242                                     ; preds = %237
  br label %275

; <label>:243                                     ; preds = %241
  br label %244

; <label>:244                                     ; preds = %243, %227
  br label %245

; <label>:245                                     ; preds = %244, %213
  br label %246

; <label>:246                                     ; preds = %245, %199
  br label %247

; <label>:247                                     ; preds = %246, %189
  br label %248

; <label>:248                                     ; preds = %247
  %249 = load %struct.__va_list_tag** %4, align 8
  %250 = getelementptr inbounds %struct.__va_list_tag* %249, i32 0, i32 0
  %251 = load i32* %250
  %252 = icmp ule i32 %251, 40
  br i1 %252, label %253, label %259

; <label>:253                                     ; preds = %248
  %254 = getelementptr inbounds %struct.__va_list_tag* %249, i32 0, i32 3
  %255 = load i8** %254
  %256 = getelementptr i8* %255, i32 %251
  %257 = bitcast i8* %256 to i8**
  %258 = add i32 %251, 8
  store i32 %258, i32* %250
  br label %264

; <label>:259                                     ; preds = %248
  %260 = getelementptr inbounds %struct.__va_list_tag* %249, i32 0, i32 2
  %261 = load i8** %260
  %262 = bitcast i8* %261 to i8**
  %263 = getelementptr i8* %261, i32 8
  store i8* %263, i8** %260
  br label %264

; <label>:264                                     ; preds = %259, %253
  %265 = phi i8** [ %257, %253 ], [ %262, %259 ]
  %266 = load i8** %265
  store i8* %266, i8** %arg, align 8
  %267 = icmp ne i8* %266, null
  br i1 %267, label %268, label %272

; <label>:268                                     ; preds = %264
  %269 = load i32* %i, align 4
  %270 = add nsw i32 %269, 1
  store i32 %270, i32* %i, align 4
  %271 = icmp ne i32 %270, 0
  br label %272

; <label>:272                                     ; preds = %268, %264
  %273 = phi i1 [ false, %264 ], [ %271, %268 ]
  %274 = zext i1 %273 to i32
  br label %143

; <label>:275                                     ; preds = %242, %143
  %276 = load i8** %arg, align 8
  %277 = load i32* %length, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds %struct.argspec_struct* %29, i64 %278
  %280 = getelementptr inbounds %struct.argspec_struct* %279, i32 0, i32 0
  store i8* %276, i8** %280, align 8
  br label %281

; <label>:281                                     ; preds = %275
  %282 = load i32* %i, align 4
  %283 = add nsw i32 %282, 1
  store i32 %283, i32* %i, align 4
  %284 = load i32* %length, align 4
  %285 = add nsw i32 %284, 1
  store i32 %285, i32* %length, align 4
  br label %30

; <label>:286                                     ; preds = %30
  %287 = load i32* %length, align 4
  %288 = and i32 %287, 65535
  %289 = shl i32 %288, 16
  %290 = ashr i32 %289, 16
  %291 = bitcast %struct.smpFunction_struct* %smp_fun to i8*
  %292 = getelementptr i8* %291, i32 24
  %293 = bitcast i8* %292 to i32*
  %294 = and i32 %288, 65535
  %295 = load i32* %293, align 8
  %296 = and i32 %295, -65536
  %297 = or i32 %296, %294
  store i32 %297, i32* %293, align 8
  %298 = load i32* %length, align 4
  %299 = sext i32 %298 to i64
  %300 = mul i64 40, %299
  %301 = call noalias i8* @GC_malloc(i64 %300)
  %302 = bitcast i8* %301 to %struct.argspec_struct*
  %303 = getelementptr inbounds %struct.smpFunction_struct* %smp_fun, i32 0, i32 2
  store %struct.argspec_struct* %302, %struct.argspec_struct** %303, align 8
  %304 = getelementptr inbounds %struct.smpFunction_struct* %smp_fun, i32 0, i32 2
  %305 = load %struct.argspec_struct** %304, align 8
  %306 = bitcast %struct.argspec_struct* %305 to i8*
  %307 = call i64 @llvm.objectsize.i64(i8* %306, i1 false)
  %308 = icmp ne i64 %307, -1
  br i1 %308, label %309, label %322

; <label>:309                                     ; preds = %286
  %310 = getelementptr inbounds %struct.smpFunction_struct* %smp_fun, i32 0, i32 2
  %311 = load %struct.argspec_struct** %310, align 8
  %312 = bitcast %struct.argspec_struct* %311 to i8*
  %313 = bitcast %struct.argspec_struct* %29 to i8*
  %314 = load i32* %length, align 4
  %315 = sext i32 %314 to i64
  %316 = mul i64 40, %315
  %317 = getelementptr inbounds %struct.smpFunction_struct* %smp_fun, i32 0, i32 2
  %318 = load %struct.argspec_struct** %317, align 8
  %319 = bitcast %struct.argspec_struct* %318 to i8*
  %320 = call i64 @llvm.objectsize.i64(i8* %319, i1 false)
  %321 = call i8* @__memcpy_chk(i8* %312, i8* %313, i64 %316, i64 %320) nounwind
  br label %331

; <label>:322                                     ; preds = %286
  %323 = getelementptr inbounds %struct.smpFunction_struct* %smp_fun, i32 0, i32 2
  %324 = load %struct.argspec_struct** %323, align 8
  %325 = bitcast %struct.argspec_struct* %324 to i8*
  %326 = bitcast %struct.argspec_struct* %29 to i8*
  %327 = load i32* %length, align 4
  %328 = sext i32 %327 to i64
  %329 = mul i64 40, %328
  %330 = call i8* @__inline_memcpy_chk(i8* %325, i8* %326, i64 %329)
  br label %331

; <label>:331                                     ; preds = %322, %309
  %332 = phi i8* [ %321, %309 ], [ %330, %322 ]
  %333 = call noalias i8* @GC_malloc(i64 40)
  %334 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %333, i8** %334, align 8
  %335 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %336 = load i8** %335, align 8
  %337 = bitcast i8* %336 to %struct.smpFunction_struct*
  %338 = bitcast %struct.smpFunction_struct* %337 to i8*
  %339 = bitcast %struct.smpFunction_struct* %smp_fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %338, i8* %339, i64 40, i32 8, i1 false)
  %340 = bitcast %struct.obj_struct* %1 to i8*
  %341 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %340, i8* %341, i64 16, i32 8, i1 false)
  store i32 1, i32* %8
  br label %342

; <label>:342                                     ; preds = %331, %112
  %343 = load i8** %5
  call void @llvm.stackrestore(i8* %343)
  br label %344

; <label>:344                                     ; preds = %342, %23
  %345 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %346 = load { %struct.smpType_struct*, i8* }* %345, align 1
  ret { %struct.smpType_struct*, i8* } %346
}

define i32 @smpGlobal_create_class() nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = alloca %struct.obj_struct, align 8
  %16 = alloca %struct.obj_struct, align 8
  %17 = alloca %struct.obj_struct, align 8
  %18 = alloca %struct.obj_struct, align 8
  %19 = alloca %struct.obj_struct, align 8
  %20 = alloca %struct.obj_struct, align 8
  %21 = alloca %struct.obj_struct, align 8
  %22 = alloca %struct.obj_struct, align 8
  %23 = alloca %struct.obj_struct, align 8
  %24 = alloca %struct.obj_struct, align 8
  %25 = alloca %struct.obj_struct, align 8
  %26 = alloca %struct.obj_struct, align 8
  %27 = alloca %struct.obj_struct, align 8
  %28 = alloca %struct.obj_struct, align 8
  %29 = alloca %struct.obj_struct, align 8
  %30 = load %struct.__sFILE** @__stdinp, align 8
  store %struct.__sFILE* %30, %struct.__sFILE** @smp_stdin, align 8
  %31 = load %struct.__sFILE** @__stdoutp, align 8
  store %struct.__sFILE* %31, %struct.__sFILE** @smp_stdout, align 8
  %32 = load %struct.__sFILE** @__stderrp, align 8
  store %struct.__sFILE* %32, %struct.__sFILE** @smp_stderr, align 8
  %33 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([7 x i8]* @.str145, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 96)
  %34 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str145, i32 0, i32 0))
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.obj_struct* @smp_global to i8*), i8* %40, i64 16, i32 8, i1 false)
  %41 = load i8** getelementptr inbounds (%struct.obj_struct* @smp_global, i32 0, i32 1), align 8
  %42 = bitcast i8* %41 to %struct.smpType_struct*
  %43 = bitcast %struct.smpType_struct* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_global to i8*), i8* %43, i64 64, i32 8, i1 false)
  %44 = call i64 @time(i64* null)
  %45 = trunc i64 %44 to i32
  call void @init_gen_rand(i32 %45)
  %46 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %47 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %48 = call i32 @scope_add(i8* getelementptr inbounds ([5 x i8]* @.str34, i32 0, i32 0), %struct.smpType_struct* %46, i8* %47)
  %49 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpBool_not, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %50 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = extractvalue { %struct.smpType_struct*, i8* } %49, 0
  store %struct.smpType_struct* %52, %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = extractvalue { %struct.smpType_struct*, i8* } %49, 1
  store i8* %54, i8** %53, align 1
  %55 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %56 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %57 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = load %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = load i8** %60, align 1
  %62 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %55, i8* %56, i32 1, i8* getelementptr inbounds ([2 x i8]* @.str146, i32 0, i32 0), %struct.smpType_struct* %59, i8* %61)
  %63 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 0
  %65 = extractvalue { %struct.smpType_struct*, i8* } %62, 0
  store %struct.smpType_struct* %65, %struct.smpType_struct** %64, align 1
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 1
  %67 = extractvalue { %struct.smpType_struct*, i8* } %62, 1
  store i8* %67, i8** %66, align 1
  %68 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_not, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %69 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 0
  %71 = extractvalue { %struct.smpType_struct*, i8* } %68, 0
  store %struct.smpType_struct* %71, %struct.smpType_struct** %70, align 1
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 1
  %73 = extractvalue { %struct.smpType_struct*, i8* } %68, 1
  store i8* %73, i8** %72, align 1
  %74 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %75 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %76 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 0
  %78 = load %struct.smpType_struct** %77, align 1
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 1
  %80 = load i8** %79, align 1
  %81 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %74, i8* %75, i32 1, i8* getelementptr inbounds ([2 x i8]* @.str147, i32 0, i32 0), %struct.smpType_struct* %78, i8* %80)
  %82 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 0
  %84 = extractvalue { %struct.smpType_struct*, i8* } %81, 0
  store %struct.smpType_struct* %84, %struct.smpType_struct** %83, align 1
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 1
  %86 = extractvalue { %struct.smpType_struct*, i8* } %81, 1
  store i8* %86, i8** %85, align 1
  %87 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_array, i32 3, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %88 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = extractvalue { %struct.smpType_struct*, i8* } %87, 0
  store %struct.smpType_struct* %90, %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = extractvalue { %struct.smpType_struct*, i8* } %87, 1
  store i8* %92, i8** %91, align 1
  %93 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %94 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %95 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 0
  %97 = load %struct.smpType_struct** %96, align 1
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 1
  %99 = load i8** %98, align 1
  %100 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %93, i8* %94, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str84, i32 0, i32 0), %struct.smpType_struct* %97, i8* %99)
  %101 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = extractvalue { %struct.smpType_struct*, i8* } %100, 0
  store %struct.smpType_struct* %103, %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = extractvalue { %struct.smpType_struct*, i8* } %100, 1
  store i8* %105, i8** %104, align 1
  %106 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_catch_arg, i32 2, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str43, i32 0, i32 0))
  %107 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 0
  %109 = extractvalue { %struct.smpType_struct*, i8* } %106, 0
  store %struct.smpType_struct* %109, %struct.smpType_struct** %108, align 1
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 1
  %111 = extractvalue { %struct.smpType_struct*, i8* } %106, 1
  store i8* %111, i8** %110, align 1
  %112 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %113 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %114 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %115 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 0
  %116 = load %struct.smpType_struct** %115, align 1
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 1
  %118 = load i8** %117, align 1
  %119 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %112, i8* %113, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str148, i32 0, i32 0), %struct.smpType_struct* %116, i8* %118)
  %120 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %121 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 0
  %122 = extractvalue { %struct.smpType_struct*, i8* } %119, 0
  store %struct.smpType_struct* %122, %struct.smpType_struct** %121, align 1
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 1
  %124 = extractvalue { %struct.smpType_struct*, i8* } %119, 1
  store i8* %124, i8** %123, align 1
  %125 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_hash, i32 3, i8* getelementptr inbounds ([5 x i8]* @.str149, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str40, i32 0, i32 0))
  %126 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %127 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 0
  %128 = extractvalue { %struct.smpType_struct*, i8* } %125, 0
  store %struct.smpType_struct* %128, %struct.smpType_struct** %127, align 1
  %129 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 1
  %130 = extractvalue { %struct.smpType_struct*, i8* } %125, 1
  store i8* %130, i8** %129, align 1
  %131 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %132 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %133 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 0
  %135 = load %struct.smpType_struct** %134, align 1
  %136 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 1
  %137 = load i8** %136, align 1
  %138 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %131, i8* %132, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str56, i32 0, i32 0), %struct.smpType_struct* %135, i8* %137)
  %139 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %139, i32 0, i32 0
  %141 = extractvalue { %struct.smpType_struct*, i8* } %138, 0
  store %struct.smpType_struct* %141, %struct.smpType_struct** %140, align 1
  %142 = getelementptr { %struct.smpType_struct*, i8* }* %139, i32 0, i32 1
  %143 = extractvalue { %struct.smpType_struct*, i8* } %138, 1
  store i8* %143, i8** %142, align 1
  %144 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_list, i32 3, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %145 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %146 = getelementptr { %struct.smpType_struct*, i8* }* %145, i32 0, i32 0
  %147 = extractvalue { %struct.smpType_struct*, i8* } %144, 0
  store %struct.smpType_struct* %147, %struct.smpType_struct** %146, align 1
  %148 = getelementptr { %struct.smpType_struct*, i8* }* %145, i32 0, i32 1
  %149 = extractvalue { %struct.smpType_struct*, i8* } %144, 1
  store i8* %149, i8** %148, align 1
  %150 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %151 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %152 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %153 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 0
  %154 = load %struct.smpType_struct** %153, align 1
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 1
  %156 = load i8** %155, align 1
  %157 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %150, i8* %151, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str150, i32 0, i32 0), %struct.smpType_struct* %154, i8* %156)
  %158 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %159 = getelementptr { %struct.smpType_struct*, i8* }* %158, i32 0, i32 0
  %160 = extractvalue { %struct.smpType_struct*, i8* } %157, 0
  store %struct.smpType_struct* %160, %struct.smpType_struct** %159, align 1
  %161 = getelementptr { %struct.smpType_struct*, i8* }* %158, i32 0, i32 1
  %162 = extractvalue { %struct.smpType_struct*, i8* } %157, 1
  store i8* %162, i8** %161, align 1
  %163 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_print_arg, i32 2, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %164 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %165 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 0
  %166 = extractvalue { %struct.smpType_struct*, i8* } %163, 0
  store %struct.smpType_struct* %166, %struct.smpType_struct** %165, align 1
  %167 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 1
  %168 = extractvalue { %struct.smpType_struct*, i8* } %163, 1
  store i8* %168, i8** %167, align 1
  %169 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %170 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %171 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %172 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 0
  %173 = load %struct.smpType_struct** %172, align 1
  %174 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 1
  %175 = load i8** %174, align 1
  %176 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %169, i8* %170, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str151, i32 0, i32 0), %struct.smpType_struct* %173, i8* %175)
  %177 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %178 = getelementptr { %struct.smpType_struct*, i8* }* %177, i32 0, i32 0
  %179 = extractvalue { %struct.smpType_struct*, i8* } %176, 0
  store %struct.smpType_struct* %179, %struct.smpType_struct** %178, align 1
  %180 = getelementptr { %struct.smpType_struct*, i8* }* %177, i32 0, i32 1
  %181 = extractvalue { %struct.smpType_struct*, i8* } %176, 1
  store i8* %181, i8** %180, align 1
  %182 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smp_printf_arg, i32 4, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %183 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %184 = getelementptr { %struct.smpType_struct*, i8* }* %183, i32 0, i32 0
  %185 = extractvalue { %struct.smpType_struct*, i8* } %182, 0
  store %struct.smpType_struct* %185, %struct.smpType_struct** %184, align 1
  %186 = getelementptr { %struct.smpType_struct*, i8* }* %183, i32 0, i32 1
  %187 = extractvalue { %struct.smpType_struct*, i8* } %182, 1
  store i8* %187, i8** %186, align 1
  %188 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %189 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %190 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %191 = getelementptr { %struct.smpType_struct*, i8* }* %190, i32 0, i32 0
  %192 = load %struct.smpType_struct** %191, align 1
  %193 = getelementptr { %struct.smpType_struct*, i8* }* %190, i32 0, i32 1
  %194 = load i8** %193, align 1
  %195 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %188, i8* %189, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str152, i32 0, i32 0), %struct.smpType_struct* %192, i8* %194)
  %196 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %197 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 0
  %198 = extractvalue { %struct.smpType_struct*, i8* } %195, 0
  store %struct.smpType_struct* %198, %struct.smpType_struct** %197, align 1
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 1
  %200 = extractvalue { %struct.smpType_struct*, i8* } %195, 1
  store i8* %200, i8** %199, align 1
  %201 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_println_arg, i32 2, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %202 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %203 = getelementptr { %struct.smpType_struct*, i8* }* %202, i32 0, i32 0
  %204 = extractvalue { %struct.smpType_struct*, i8* } %201, 0
  store %struct.smpType_struct* %204, %struct.smpType_struct** %203, align 1
  %205 = getelementptr { %struct.smpType_struct*, i8* }* %202, i32 0, i32 1
  %206 = extractvalue { %struct.smpType_struct*, i8* } %201, 1
  store i8* %206, i8** %205, align 1
  %207 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %208 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %209 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %210 = getelementptr { %struct.smpType_struct*, i8* }* %209, i32 0, i32 0
  %211 = load %struct.smpType_struct** %210, align 1
  %212 = getelementptr { %struct.smpType_struct*, i8* }* %209, i32 0, i32 1
  %213 = load i8** %212, align 1
  %214 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %207, i8* %208, i32 1, i8* getelementptr inbounds ([8 x i8]* @.str153, i32 0, i32 0), %struct.smpType_struct* %211, i8* %213)
  %215 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %216 = getelementptr { %struct.smpType_struct*, i8* }* %215, i32 0, i32 0
  %217 = extractvalue { %struct.smpType_struct*, i8* } %214, 0
  store %struct.smpType_struct* %217, %struct.smpType_struct** %216, align 1
  %218 = getelementptr { %struct.smpType_struct*, i8* }* %215, i32 0, i32 1
  %219 = extractvalue { %struct.smpType_struct*, i8* } %214, 1
  store i8* %219, i8** %218, align 1
  %220 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_rand, i32 3, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %221 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %222 = getelementptr { %struct.smpType_struct*, i8* }* %221, i32 0, i32 0
  %223 = extractvalue { %struct.smpType_struct*, i8* } %220, 0
  store %struct.smpType_struct* %223, %struct.smpType_struct** %222, align 1
  %224 = getelementptr { %struct.smpType_struct*, i8* }* %221, i32 0, i32 1
  %225 = extractvalue { %struct.smpType_struct*, i8* } %220, 1
  store i8* %225, i8** %224, align 1
  %226 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %227 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %228 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %229 = getelementptr { %struct.smpType_struct*, i8* }* %228, i32 0, i32 0
  %230 = load %struct.smpType_struct** %229, align 1
  %231 = getelementptr { %struct.smpType_struct*, i8* }* %228, i32 0, i32 1
  %232 = load i8** %231, align 1
  %233 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %226, i8* %227, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str154, i32 0, i32 0), %struct.smpType_struct* %230, i8* %232)
  %234 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %235 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 0
  %236 = extractvalue { %struct.smpType_struct*, i8* } %233, 0
  store %struct.smpType_struct* %236, %struct.smpType_struct** %235, align 1
  %237 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 1
  %238 = extractvalue { %struct.smpType_struct*, i8* } %233, 1
  store i8* %238, i8** %237, align 1
  %239 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_set_seed, i32 2, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %240 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %241 = getelementptr { %struct.smpType_struct*, i8* }* %240, i32 0, i32 0
  %242 = extractvalue { %struct.smpType_struct*, i8* } %239, 0
  store %struct.smpType_struct* %242, %struct.smpType_struct** %241, align 1
  %243 = getelementptr { %struct.smpType_struct*, i8* }* %240, i32 0, i32 1
  %244 = extractvalue { %struct.smpType_struct*, i8* } %239, 1
  store i8* %244, i8** %243, align 1
  %245 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %246 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %247 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %248 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 0
  %249 = load %struct.smpType_struct** %248, align 1
  %250 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 1
  %251 = load i8** %250, align 1
  %252 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %245, i8* %246, i32 1, i8* getelementptr inbounds ([9 x i8]* @.str155, i32 0, i32 0), %struct.smpType_struct* %249, i8* %251)
  %253 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %254 = getelementptr { %struct.smpType_struct*, i8* }* %253, i32 0, i32 0
  %255 = extractvalue { %struct.smpType_struct*, i8* } %252, 0
  store %struct.smpType_struct* %255, %struct.smpType_struct** %254, align 1
  %256 = getelementptr { %struct.smpType_struct*, i8* }* %253, i32 0, i32 1
  %257 = extractvalue { %struct.smpType_struct*, i8* } %252, 1
  store i8* %257, i8** %256, align 1
  %258 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_sprintf_arg, i32 4, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8]* @.str54, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %259 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %260 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 0
  %261 = extractvalue { %struct.smpType_struct*, i8* } %258, 0
  store %struct.smpType_struct* %261, %struct.smpType_struct** %260, align 1
  %262 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 1
  %263 = extractvalue { %struct.smpType_struct*, i8* } %258, 1
  store i8* %263, i8** %262, align 1
  %264 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %265 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %266 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %267 = getelementptr { %struct.smpType_struct*, i8* }* %266, i32 0, i32 0
  %268 = load %struct.smpType_struct** %267, align 1
  %269 = getelementptr { %struct.smpType_struct*, i8* }* %266, i32 0, i32 1
  %270 = load i8** %269, align 1
  %271 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %264, i8* %265, i32 1, i8* getelementptr inbounds ([8 x i8]* @.str156, i32 0, i32 0), %struct.smpType_struct* %268, i8* %270)
  %272 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %273 = getelementptr { %struct.smpType_struct*, i8* }* %272, i32 0, i32 0
  %274 = extractvalue { %struct.smpType_struct*, i8* } %271, 0
  store %struct.smpType_struct* %274, %struct.smpType_struct** %273, align 1
  %275 = getelementptr { %struct.smpType_struct*, i8* }* %272, i32 0, i32 1
  %276 = extractvalue { %struct.smpType_struct*, i8* } %271, 1
  store i8* %276, i8** %275, align 1
  %277 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpGlobal_throw_arg, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %278 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %279 = getelementptr { %struct.smpType_struct*, i8* }* %278, i32 0, i32 0
  %280 = extractvalue { %struct.smpType_struct*, i8* } %277, 0
  store %struct.smpType_struct* %280, %struct.smpType_struct** %279, align 1
  %281 = getelementptr { %struct.smpType_struct*, i8* }* %278, i32 0, i32 1
  %282 = extractvalue { %struct.smpType_struct*, i8* } %277, 1
  store i8* %282, i8** %281, align 1
  %283 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %284 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %285 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %286 = getelementptr { %struct.smpType_struct*, i8* }* %285, i32 0, i32 0
  %287 = load %struct.smpType_struct** %286, align 1
  %288 = getelementptr { %struct.smpType_struct*, i8* }* %285, i32 0, i32 1
  %289 = load i8** %288, align 1
  %290 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %283, i8* %284, i32 1, i8* getelementptr inbounds ([6 x i8]* @.str157, i32 0, i32 0), %struct.smpType_struct* %287, i8* %289)
  %291 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %292 = getelementptr { %struct.smpType_struct*, i8* }* %291, i32 0, i32 0
  %293 = extractvalue { %struct.smpType_struct*, i8* } %290, 0
  store %struct.smpType_struct* %293, %struct.smpType_struct** %292, align 1
  %294 = getelementptr { %struct.smpType_struct*, i8* }* %291, i32 0, i32 1
  %295 = extractvalue { %struct.smpType_struct*, i8* } %290, 1
  store i8* %295, i8** %294, align 1
  %296 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %297 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %298 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %299 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %300 = call { %struct.smpType_struct*, i8* } @smpType_defvar(%struct.smpType_struct* %296, i8* %297, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str158, i32 0, i32 0), %struct.smpType_struct* %298, i8* %299)
  %301 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %302 = getelementptr { %struct.smpType_struct*, i8* }* %301, i32 0, i32 0
  %303 = extractvalue { %struct.smpType_struct*, i8* } %300, 0
  store %struct.smpType_struct* %303, %struct.smpType_struct** %302, align 1
  %304 = getelementptr { %struct.smpType_struct*, i8* }* %301, i32 0, i32 1
  %305 = extractvalue { %struct.smpType_struct*, i8* } %300, 1
  store i8* %305, i8** %304, align 1
  %306 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %307 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %308 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %309 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_true to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %310 = call { %struct.smpType_struct*, i8* } @smpType_defvar(%struct.smpType_struct* %306, i8* %307, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str117, i32 0, i32 0), %struct.smpType_struct* %308, i8* %309)
  %311 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %312 = getelementptr { %struct.smpType_struct*, i8* }* %311, i32 0, i32 0
  %313 = extractvalue { %struct.smpType_struct*, i8* } %310, 0
  store %struct.smpType_struct* %313, %struct.smpType_struct** %312, align 1
  %314 = getelementptr { %struct.smpType_struct*, i8* }* %311, i32 0, i32 1
  %315 = extractvalue { %struct.smpType_struct*, i8* } %310, 1
  store i8* %315, i8** %314, align 1
  ret i32 0
}

declare i64 @time(i64*)

define { %struct.smpType_struct*, i8* } @smpInteger_not(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = load i32* @smpType_id_int, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %36

; <label>:16                                      ; preds = %0
  %17 = call noalias i8* @GC_malloc(i64 16)
  %18 = bitcast i8* %17 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %18, [1 x %struct.__mpz_struct]** %z, align 8
  %19 = load [1 x %struct.__mpz_struct]** %z, align 8
  %20 = getelementptr inbounds [1 x %struct.__mpz_struct]* %19, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %20)
  %21 = load [1 x %struct.__mpz_struct]** %z, align 8
  %22 = getelementptr inbounds [1 x %struct.__mpz_struct]* %21, i32 0, i32 0
  %23 = load %struct.obj_struct** %3, align 8
  %24 = getelementptr inbounds %struct.obj_struct* %23, i64 0
  %25 = getelementptr inbounds %struct.obj_struct* %24, i32 0, i32 1
  %26 = load i8** %25, align 8
  %27 = bitcast i8* %26 to [1 x %struct.__mpz_struct]*
  %28 = getelementptr inbounds [1 x %struct.__mpz_struct]* %27, i32 0, i32 0
  call void @__gmpz_com(%struct.__mpz_struct* %22, %struct.__mpz_struct* %28)
  %29 = load [1 x %struct.__mpz_struct]** %z, align 8
  %30 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %29)
  %31 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  br label %61

; <label>:36                                      ; preds = %0
  %37 = load %struct.obj_struct** %3, align 8
  %38 = getelementptr inbounds %struct.obj_struct* %37, i64 0
  %39 = bitcast %struct.obj_struct* %38 to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = load %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = load i8** %42, align 1
  %44 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_int, %struct.smpType_struct* %41, i8* %43)
  %45 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = extractvalue { %struct.smpType_struct*, i8* } %44, 0
  store %struct.smpType_struct* %47, %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = extractvalue { %struct.smpType_struct*, i8* } %44, 1
  store i8* %49, i8** %48, align 1
  %50 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = load %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = load i8** %53, align 1
  %55 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %52, i8* %54)
  %56 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = extractvalue { %struct.smpType_struct*, i8* } %55, 0
  store %struct.smpType_struct* %58, %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = extractvalue { %struct.smpType_struct*, i8* } %55, 1
  store i8* %60, i8** %59, align 1
  br label %61

; <label>:61                                      ; preds = %36, %16
  %62 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %63 = load { %struct.smpType_struct*, i8* }* %62, align 1
  ret { %struct.smpType_struct*, i8* } %63
}

define { %struct.smpType_struct*, i8* } @smpGlobal_array(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smpList_to_a(%struct.smpType_struct* %11, i8* %13, i32 0, %struct.obj_struct* null)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smpGlobal_catch_arg(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str9, i32 0, i32 0))
  %10 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %17, i8* %19, i8* getelementptr inbounds ([25 x i8]* @.str159, i32 0, i32 0))
  %21 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = extractvalue { %struct.smpType_struct*, i8* } %20, 0
  store %struct.smpType_struct* %23, %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = extractvalue { %struct.smpType_struct*, i8* } %20, 1
  store i8* %25, i8** %24, align 1
  %26 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %28, i8* %30)
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = load { %struct.smpType_struct*, i8* }* %37, align 1
  ret { %struct.smpType_struct*, i8* } %38
}

define { %struct.smpType_struct*, i8* } @smpGlobal_hash(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %pair = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %obj.coerce1, i8** %9
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %10 = load %struct.obj_struct** %3, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %10, i64 0
  %12 = getelementptr inbounds %struct.obj_struct* %11, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %13, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %64, label %16

; <label>:16                                      ; preds = %0
  %17 = load %struct.obj_struct** %3, align 8
  %18 = getelementptr inbounds %struct.obj_struct* %17, i64 0
  %19 = getelementptr inbounds %struct.obj_struct* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 8
  %21 = getelementptr inbounds %struct.smpType_struct* %20, i32 0, i32 0
  %22 = load i8** %21, align 8
  %23 = call i32 @strcmp(i8* %22, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %30

; <label>:25                                      ; preds = %16
  %26 = load %struct.obj_struct** %3, align 8
  %27 = getelementptr inbounds %struct.obj_struct* %26, i64 0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %150

; <label>:30                                      ; preds = %16
  %31 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %32 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %38 = load i8** %37, align 8
  %39 = bitcast i8* %38 to %struct.smpType_struct*
  %40 = load %struct.obj_struct** %3, align 8
  %41 = getelementptr inbounds %struct.obj_struct* %40, i64 0
  %42 = bitcast %struct.obj_struct* %41 to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = load %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = load i8** %45, align 1
  %47 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %39, %struct.smpType_struct* %44, i8* %46)
  %48 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = extractvalue { %struct.smpType_struct*, i8* } %47, 0
  store %struct.smpType_struct* %50, %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = extractvalue { %struct.smpType_struct*, i8* } %47, 1
  store i8* %52, i8** %51, align 1
  %53 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = load %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = load i8** %56, align 1
  %58 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %55, i8* %57)
  %59 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = extractvalue { %struct.smpType_struct*, i8* } %58, 0
  store %struct.smpType_struct* %61, %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = extractvalue { %struct.smpType_struct*, i8* } %58, 1
  store i8* %63, i8** %62, align 1
  br label %150

; <label>:64                                      ; preds = %0
  %65 = load %struct.obj_struct** %3, align 8
  %66 = getelementptr inbounds %struct.obj_struct* %65, i64 0
  store %struct.obj_struct* %66, %struct.obj_struct** %ptr, align 8
  %67 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %67, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %68 = load %struct.obj_struct** %3, align 8
  %69 = getelementptr inbounds %struct.obj_struct* %68, i64 0
  %70 = bitcast %struct.obj_struct* %69 to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = load %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = load i8** %73, align 1
  %75 = call i64 @smpList_length_clong(%struct.smpType_struct* %72, i8* %74)
  %76 = add nsw i64 10, %75
  %77 = call { %struct.smpType_struct*, i8* } @smpHash_init_capacity(i64 %76)
  %78 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 0
  %85 = load %struct.smpType_struct** %84, align 1
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 1
  %87 = load i8** %86, align 1
  %88 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %85, i8* %87)
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %90, label %93

; <label>:90                                      ; preds = %64
  %91 = bitcast %struct.obj_struct* %1 to i8*
  %92 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %91, i8* %92, i64 16, i32 8, i1 false)
  br label %150

; <label>:93                                      ; preds = %64
  %94 = load %struct.obj_struct** %3, align 8
  %95 = getelementptr inbounds %struct.obj_struct* %94, i64 0
  %96 = getelementptr inbounds %struct.obj_struct* %95, i32 0, i32 0
  %97 = load %struct.smpType_struct** %96, align 8
  %98 = getelementptr inbounds %struct.smpType_struct* %97, i32 0, i32 1
  %99 = load i32* %98, align 4
  %100 = load i32* @smpType_id_nil, align 4
  %101 = icmp eq i32 %99, %100
  br i1 %101, label %102, label %105

; <label>:102                                     ; preds = %93
  %103 = bitcast %struct.obj_struct* %1 to i8*
  %104 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %103, i8* %104, i64 16, i32 8, i1 false)
  br label %150

; <label>:105                                     ; preds = %93
  br label %106

; <label>:106                                     ; preds = %140, %105
  %107 = load %struct.obj_struct** %ptr, align 8
  %108 = icmp ne %struct.obj_struct* %107, null
  br i1 %108, label %109, label %147

; <label>:109                                     ; preds = %106
  %110 = load %struct.obj_struct** %ptr, align 8
  %111 = getelementptr inbounds %struct.obj_struct* %110, i32 0, i32 1
  %112 = load i8** %111, align 8
  %113 = bitcast i8* %112 to %struct.smpPair_struct*
  %114 = getelementptr inbounds %struct.smpPair_struct* %113, i32 0, i32 0
  %115 = bitcast %struct.obj_struct* %pair to i8*
  %116 = bitcast %struct.obj_struct* %114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %115, i8* %116, i64 16, i32 8, i1 false)
  %117 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 0
  %119 = load %struct.smpType_struct** %118, align 1
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 1
  %121 = load i8** %120, align 1
  %122 = call { %struct.smpType_struct*, i8* } @smpHash_add_now(%struct.smpType_struct* %119, i8* %121, i32 1, %struct.obj_struct* %pair)
  %123 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %124 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 0
  %125 = extractvalue { %struct.smpType_struct*, i8* } %122, 0
  store %struct.smpType_struct* %125, %struct.smpType_struct** %124, align 1
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 1
  %127 = extractvalue { %struct.smpType_struct*, i8* } %122, 1
  store i8* %127, i8** %126, align 1
  %128 = bitcast %struct.obj_struct* %ret to i8*
  %129 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %128, i8* %129, i64 16, i32 8, i1 false)
  %130 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %131 = getelementptr { %struct.smpType_struct*, i8* }* %130, i32 0, i32 0
  %132 = load %struct.smpType_struct** %131, align 1
  %133 = getelementptr { %struct.smpType_struct*, i8* }* %130, i32 0, i32 1
  %134 = load i8** %133, align 1
  %135 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %132, i8* %134)
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %137, label %140

; <label>:137                                     ; preds = %109
  %138 = bitcast %struct.obj_struct* %1 to i8*
  %139 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %138, i8* %139, i64 16, i32 8, i1 false)
  br label %150

; <label>:140                                     ; preds = %109
  %141 = load %struct.obj_struct** %ptr, align 8
  %142 = getelementptr inbounds %struct.obj_struct* %141, i32 0, i32 1
  %143 = load i8** %142, align 8
  %144 = bitcast i8* %143 to %struct.smpPair_struct*
  %145 = getelementptr inbounds %struct.smpPair_struct* %144, i32 0, i32 1
  %146 = load %struct.obj_struct** %145, align 8
  store %struct.obj_struct* %146, %struct.obj_struct** %ptr, align 8
  br label %106

; <label>:147                                     ; preds = %106
  %148 = bitcast %struct.obj_struct* %1 to i8*
  %149 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %148, i8* %149, i64 16, i32 8, i1 false)
  br label %150

; <label>:150                                     ; preds = %147, %137, %102, %90, %30, %25
  %151 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %152 = load { %struct.smpType_struct*, i8* }* %151, align 1
  ret { %struct.smpType_struct*, i8* } %152
}

define { %struct.smpType_struct*, i8* } @smpGlobal_list(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = bitcast %struct.obj_struct* %1 to i8*
  %10 = bitcast %struct.obj_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 16, i32 8, i1 false)
  %11 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %12 = load { %struct.smpType_struct*, i8* }* %11, align 1
  ret { %struct.smpType_struct*, i8* } %12
}

define { %struct.smpType_struct*, i8* } @smpGlobal_print_arg(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smp_print(%struct.smpType_struct* %11, i8* %13)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smp_printf_arg(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load i32* %2, align 4
  %8 = load %struct.obj_struct** %3, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smpGlobal_sprintf_arg(%struct.smpType_struct* %11, i8* %13, i32 %7, %struct.obj_struct* %8)
  %15 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 1
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 1
  %24 = load i8** %23, align 1
  %25 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %22, i8* %24)
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %42

; <label>:30                                      ; preds = %0
  %31 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = call { %struct.smpType_struct*, i8* } @smp_print(%struct.smpType_struct* %33, i8* %35)
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = extractvalue { %struct.smpType_struct*, i8* } %36, 0
  store %struct.smpType_struct* %39, %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = extractvalue { %struct.smpType_struct*, i8* } %36, 1
  store i8* %41, i8** %40, align 1
  br label %42

; <label>:42                                      ; preds = %30, %27
  %43 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %44 = load { %struct.smpType_struct*, i8* }* %43, align 1
  ret { %struct.smpType_struct*, i8* } %44
}

define { %struct.smpType_struct*, i8* } @smpGlobal_println_arg(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smp_println(%struct.smpType_struct* %11, i8* %13)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smpGlobal_set_seed(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %num = alloca i64, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %63, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = getelementptr inbounds %struct.obj_struct* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %15
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %87

; <label>:29                                      ; preds = %15
  %30 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %37 = load i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.smpType_struct*
  %39 = load %struct.obj_struct** %3, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 0
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %38, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %87

; <label>:63                                      ; preds = %0
  %64 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %65 = load %struct.obj_struct** %3, align 8
  %66 = getelementptr inbounds %struct.obj_struct* %65, i64 0
  %67 = bitcast %struct.obj_struct* %66 to { %struct.smpType_struct*, i8* }*
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 1
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 1
  %71 = load i8** %70, align 1
  %72 = call i64 @smpInteger_to_clong(%struct.obj_struct* %ret, %struct.smpType_struct* %69, i8* %71)
  store i64 %72, i64* %num, align 8
  %73 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = load %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = load i8** %76, align 1
  %78 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %75, i8* %77)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %83

; <label>:80                                      ; preds = %63
  %81 = bitcast %struct.obj_struct* %1 to i8*
  %82 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false)
  br label %87

; <label>:83                                      ; preds = %63
  %84 = load i64* %num, align 8
  %85 = trunc i64 %84 to i32
  call void @init_gen_rand(i32 %85)
  %86 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %87

; <label>:87                                      ; preds = %83, %80, %29, %24
  %88 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %89 = load { %struct.smpType_struct*, i8* }* %88, align 1
  ret { %struct.smpType_struct*, i8* } %89
}

define { %struct.smpType_struct*, i8* } @smpGlobal_sprintf_arg(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %listtype = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %format = alloca i8*, align 8
  %list = alloca %struct.obj_struct, align 8
  %str_len = alloca i64, align 8
  %str = alloca i8*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %arglen = alloca i64, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %fmt_end = alloca i8*, align 8
  %fmt_res = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %11 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %12
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  store i8* %obj.coerce1, i8** %13
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %14 = load %struct.obj_struct** %3, align 8
  %15 = getelementptr inbounds %struct.obj_struct* %14, i64 0
  %16 = getelementptr inbounds %struct.obj_struct* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 8
  %18 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %17, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %68, label %20

; <label>:20                                      ; preds = %0
  %21 = load %struct.obj_struct** %3, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %21, i64 0
  %23 = getelementptr inbounds %struct.obj_struct* %22, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 8
  %25 = getelementptr inbounds %struct.smpType_struct* %24, i32 0, i32 0
  %26 = load i8** %25, align 8
  %27 = call i32 @strcmp(i8* %26, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %34

; <label>:29                                      ; preds = %20
  %30 = load %struct.obj_struct** %3, align 8
  %31 = getelementptr inbounds %struct.obj_struct* %30, i64 0
  %32 = bitcast %struct.obj_struct* %1 to i8*
  %33 = bitcast %struct.obj_struct* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 16, i32 8, i1 false)
  br label %362

; <label>:34                                      ; preds = %20
  %35 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %36 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  %41 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %42 = load i8** %41, align 8
  %43 = bitcast i8* %42 to %struct.smpType_struct*
  %44 = load %struct.obj_struct** %3, align 8
  %45 = getelementptr inbounds %struct.obj_struct* %44, i64 0
  %46 = bitcast %struct.obj_struct* %45 to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = load %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = load i8** %49, align 1
  %51 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %43, %struct.smpType_struct* %48, i8* %50)
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = extractvalue { %struct.smpType_struct*, i8* } %51, 0
  store %struct.smpType_struct* %54, %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = extractvalue { %struct.smpType_struct*, i8* } %51, 1
  store i8* %56, i8** %55, align 1
  %57 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = load %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = load i8** %60, align 1
  %62 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %59, i8* %61)
  %63 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 0
  %65 = extractvalue { %struct.smpType_struct*, i8* } %62, 0
  store %struct.smpType_struct* %65, %struct.smpType_struct** %64, align 1
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 1
  %67 = extractvalue { %struct.smpType_struct*, i8* } %62, 1
  store i8* %67, i8** %66, align 1
  br label %362

; <label>:68                                      ; preds = %0
  %69 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %70 = bitcast %struct.obj_struct* %listtype to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = extractvalue { %struct.smpType_struct*, i8* } %69, 0
  store %struct.smpType_struct* %72, %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = extractvalue { %struct.smpType_struct*, i8* } %69, 1
  store i8* %74, i8** %73, align 1
  %75 = load %struct.obj_struct** %3, align 8
  %76 = getelementptr inbounds %struct.obj_struct* %75, i64 0
  %77 = bitcast %struct.obj_struct* %76 to { %struct.smpType_struct*, i8* }*
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 0
  %79 = load %struct.smpType_struct** %78, align 1
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 1
  %81 = load i8** %80, align 1
  %82 = call i32 @smpObject_instancep_cint(%struct.smpType_struct* %79, i8* %81, i32 1, %struct.obj_struct* %listtype)
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %112

; <label>:84                                      ; preds = %68
  %85 = getelementptr inbounds %struct.obj_struct* %listtype, i32 0, i32 1
  %86 = load i8** %85, align 8
  %87 = bitcast i8* %86 to %struct.smpType_struct*
  %88 = load %struct.obj_struct** %3, align 8
  %89 = getelementptr inbounds %struct.obj_struct* %88, i64 0
  %90 = bitcast %struct.obj_struct* %89 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = load %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = load i8** %93, align 1
  %95 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %87, %struct.smpType_struct* %92, i8* %94)
  %96 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  %101 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = load %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = load i8** %104, align 1
  %106 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %103, i8* %105)
  %107 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 0
  %109 = extractvalue { %struct.smpType_struct*, i8* } %106, 0
  store %struct.smpType_struct* %109, %struct.smpType_struct** %108, align 1
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 1
  %111 = extractvalue { %struct.smpType_struct*, i8* } %106, 1
  store i8* %111, i8** %110, align 1
  br label %362

; <label>:112                                     ; preds = %68
  %113 = load %struct.obj_struct** %3, align 8
  %114 = getelementptr inbounds %struct.obj_struct* %113, i64 0
  %115 = getelementptr inbounds %struct.obj_struct* %114, i32 0, i32 1
  %116 = load i8** %115, align 8
  %117 = bitcast i8* %116 to %struct.smpstrstruct*
  %118 = getelementptr inbounds %struct.smpstrstruct* %117, i32 0, i32 0
  %119 = load i8** %118, align 8
  store i8* %119, i8** %format, align 8
  %120 = load %struct.obj_struct** %3, align 8
  %121 = getelementptr inbounds %struct.obj_struct* %120, i64 1
  %122 = bitcast %struct.obj_struct* %list to i8*
  %123 = bitcast %struct.obj_struct* %121 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %122, i8* %123, i64 16, i32 8, i1 false)
  store i64 16, i64* %str_len, align 8
  %124 = load i64* %str_len, align 8
  %125 = add i64 %124, 1
  %126 = mul i64 1, %125
  %127 = call noalias i8* @GC_malloc(i64 %126)
  store i8* %127, i8** %str, align 8
  store i64 0, i64* %i, align 8
  store i64 0, i64* %j, align 8
  %128 = load i8** %format, align 8
  store i8* %128, i8** %ptr, align 8
  %129 = bitcast %struct.obj_struct* %list to { %struct.smpType_struct*, i8* }*
  %130 = getelementptr { %struct.smpType_struct*, i8* }* %129, i32 0, i32 0
  %131 = load %struct.smpType_struct** %130, align 1
  %132 = getelementptr { %struct.smpType_struct*, i8* }* %129, i32 0, i32 1
  %133 = load i8** %132, align 1
  %134 = call i64 @smpList_length_clong(%struct.smpType_struct* %131, i8* %133)
  store i64 %134, i64* %arglen, align 8
  br label %135

; <label>:135                                     ; preds = %345, %155, %112
  %136 = load i8** %ptr, align 8
  %137 = load i8* %136, align 1
  %138 = icmp ne i8 %137, 0
  br i1 %138, label %139, label %348

; <label>:139                                     ; preds = %135
  %140 = load i8** %ptr, align 8
  %141 = load i8* %140, align 1
  %142 = sext i8 %141 to i32
  %143 = icmp ne i32 %142, 37
  br i1 %143, label %144, label %163

; <label>:144                                     ; preds = %139
  %145 = load i64* %i, align 8
  %146 = load i64* %str_len, align 8
  %147 = icmp uge i64 %145, %146
  br i1 %147, label %148, label %155

; <label>:148                                     ; preds = %144
  %149 = load i8** %str, align 8
  %150 = load i64* %str_len, align 8
  %151 = mul i64 %150, 2
  store i64 %151, i64* %str_len, align 8
  %152 = add i64 %151, 1
  %153 = mul i64 1, %152
  %154 = call i8* @GC_realloc(i8* %149, i64 %153)
  store i8* %154, i8** %str, align 8
  br label %155

; <label>:155                                     ; preds = %148, %144
  %156 = load i8** %ptr, align 8
  %157 = getelementptr inbounds i8* %156, i32 1
  store i8* %157, i8** %ptr, align 8
  %158 = load i8* %156, align 1
  %159 = load i64* %i, align 8
  %160 = add i64 %159, 1
  store i64 %160, i64* %i, align 8
  %161 = load i8** %str, align 8
  %162 = getelementptr inbounds i8* %161, i64 %159
  store i8 %158, i8* %162, align 1
  br label %135

; <label>:163                                     ; preds = %139
  %164 = load i64* %j, align 8
  %165 = load i64* %arglen, align 8
  %166 = icmp uge i64 %164, %165
  br i1 %166, label %167, label %221

; <label>:167                                     ; preds = %163
  %168 = load i64* %j, align 8
  %169 = add i64 %168, 1
  store i64 %169, i64* %j, align 8
  br label %170

; <label>:170                                     ; preds = %189, %167
  %171 = load i8** %ptr, align 8
  %172 = getelementptr inbounds i8* %171, i32 1
  store i8* %172, i8** %ptr, align 8
  %173 = load i8* %171, align 1
  %174 = icmp ne i8 %173, 0
  br i1 %174, label %175, label %190

; <label>:175                                     ; preds = %170
  %176 = load i8** %ptr, align 8
  %177 = load i8* %176, align 1
  %178 = sext i8 %177 to i32
  %179 = icmp eq i32 %178, 37
  br i1 %179, label %180, label %189

; <label>:180                                     ; preds = %175
  %181 = load i8** %ptr, align 8
  %182 = getelementptr inbounds i8* %181, i64 1
  %183 = load i8* %182, align 1
  %184 = sext i8 %183 to i32
  %185 = icmp ne i32 %184, 37
  br i1 %185, label %186, label %189

; <label>:186                                     ; preds = %180
  %187 = load i64* %j, align 8
  %188 = add i64 %187, 1
  store i64 %188, i64* %j, align 8
  br label %189

; <label>:189                                     ; preds = %186, %180, %175
  br label %170

; <label>:190                                     ; preds = %170
  %191 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([22 x i8]* @.str120, i32 0, i32 0))
  %192 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %193 = getelementptr { %struct.smpType_struct*, i8* }* %192, i32 0, i32 0
  %194 = extractvalue { %struct.smpType_struct*, i8* } %191, 0
  store %struct.smpType_struct* %194, %struct.smpType_struct** %193, align 1
  %195 = getelementptr { %struct.smpType_struct*, i8* }* %192, i32 0, i32 1
  %196 = extractvalue { %struct.smpType_struct*, i8* } %191, 1
  store i8* %196, i8** %195, align 1
  %197 = load i64* %j, align 8
  %198 = load i64* %arglen, align 8
  %199 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %200 = getelementptr { %struct.smpType_struct*, i8* }* %199, i32 0, i32 0
  %201 = load %struct.smpType_struct** %200, align 1
  %202 = getelementptr { %struct.smpType_struct*, i8* }* %199, i32 0, i32 1
  %203 = load i8** %202, align 1
  %204 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %201, i8* %203, i8* getelementptr inbounds ([67 x i8]* @.str162, i32 0, i32 0), i64 %197, i64 %198)
  %205 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %206 = getelementptr { %struct.smpType_struct*, i8* }* %205, i32 0, i32 0
  %207 = extractvalue { %struct.smpType_struct*, i8* } %204, 0
  store %struct.smpType_struct* %207, %struct.smpType_struct** %206, align 1
  %208 = getelementptr { %struct.smpType_struct*, i8* }* %205, i32 0, i32 1
  %209 = extractvalue { %struct.smpType_struct*, i8* } %204, 1
  store i8* %209, i8** %208, align 1
  %210 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %211 = getelementptr { %struct.smpType_struct*, i8* }* %210, i32 0, i32 0
  %212 = load %struct.smpType_struct** %211, align 1
  %213 = getelementptr { %struct.smpType_struct*, i8* }* %210, i32 0, i32 1
  %214 = load i8** %213, align 1
  %215 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %212, i8* %214)
  %216 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %217 = getelementptr { %struct.smpType_struct*, i8* }* %216, i32 0, i32 0
  %218 = extractvalue { %struct.smpType_struct*, i8* } %215, 0
  store %struct.smpType_struct* %218, %struct.smpType_struct** %217, align 1
  %219 = getelementptr { %struct.smpType_struct*, i8* }* %216, i32 0, i32 1
  %220 = extractvalue { %struct.smpType_struct*, i8* } %215, 1
  store i8* %220, i8** %219, align 1
  br label %362

; <label>:221                                     ; preds = %163
  %222 = load i8** %ptr, align 8
  store i8* %222, i8** %fmt_end, align 8
  %223 = getelementptr inbounds %struct.obj_struct* %list, i32 0, i32 1
  %224 = load i8** %223, align 8
  %225 = bitcast i8* %224 to %struct.smpPair_struct*
  %226 = getelementptr inbounds %struct.smpPair_struct* %225, i32 0, i32 0
  %227 = load i8** %ptr, align 8
  %228 = bitcast %struct.obj_struct* %226 to { %struct.smpType_struct*, i8* }*
  %229 = getelementptr { %struct.smpType_struct*, i8* }* %228, i32 0, i32 0
  %230 = load %struct.smpType_struct** %229, align 1
  %231 = getelementptr { %struct.smpType_struct*, i8* }* %228, i32 0, i32 1
  %232 = load i8** %231, align 1
  %233 = call { %struct.smpType_struct*, i8* } @obj_put_fmt(%struct.smpType_struct* %230, i8* %232, i8* %227, i8** %fmt_end)
  %234 = bitcast %struct.obj_struct* %fmt_res to { %struct.smpType_struct*, i8* }*
  %235 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 0
  %236 = extractvalue { %struct.smpType_struct*, i8* } %233, 0
  store %struct.smpType_struct* %236, %struct.smpType_struct** %235, align 1
  %237 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 1
  %238 = extractvalue { %struct.smpType_struct*, i8* } %233, 1
  store i8* %238, i8** %237, align 1
  %239 = getelementptr inbounds %struct.obj_struct* %fmt_res, i32 0, i32 0
  %240 = load %struct.smpType_struct** %239, align 8
  %241 = getelementptr inbounds %struct.smpType_struct* %240, i32 0, i32 0
  %242 = load i8** %241, align 8
  %243 = call i32 @strcmp(i8* %242, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %244 = icmp eq i32 %243, 0
  br i1 %244, label %245, label %248

; <label>:245                                     ; preds = %221
  %246 = bitcast %struct.obj_struct* %1 to i8*
  %247 = bitcast %struct.obj_struct* %fmt_res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %246, i8* %247, i64 16, i32 8, i1 false)
  br label %362

; <label>:248                                     ; preds = %221
  %249 = getelementptr inbounds %struct.obj_struct* %fmt_res, i32 0, i32 0
  %250 = load %struct.smpType_struct** %249, align 8
  %251 = getelementptr inbounds %struct.smpType_struct* %250, i32 0, i32 0
  %252 = load i8** %251, align 8
  %253 = call i32 @strcmp(i8* %252, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %254 = icmp eq i32 %253, 0
  %255 = zext i1 %254 to i32
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %257, label %289

; <label>:257                                     ; preds = %248
  %258 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %259 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %260 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 0
  %261 = extractvalue { %struct.smpType_struct*, i8* } %258, 0
  store %struct.smpType_struct* %261, %struct.smpType_struct** %260, align 1
  %262 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 1
  %263 = extractvalue { %struct.smpType_struct*, i8* } %258, 1
  store i8* %263, i8** %262, align 1
  %264 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 1
  %265 = load i8** %264, align 8
  %266 = bitcast i8* %265 to %struct.smpType_struct*
  %267 = bitcast %struct.obj_struct* %fmt_res to { %struct.smpType_struct*, i8* }*
  %268 = getelementptr { %struct.smpType_struct*, i8* }* %267, i32 0, i32 0
  %269 = load %struct.smpType_struct** %268, align 1
  %270 = getelementptr { %struct.smpType_struct*, i8* }* %267, i32 0, i32 1
  %271 = load i8** %270, align 1
  %272 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %266, %struct.smpType_struct* %269, i8* %271)
  %273 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %274 = getelementptr { %struct.smpType_struct*, i8* }* %273, i32 0, i32 0
  %275 = extractvalue { %struct.smpType_struct*, i8* } %272, 0
  store %struct.smpType_struct* %275, %struct.smpType_struct** %274, align 1
  %276 = getelementptr { %struct.smpType_struct*, i8* }* %273, i32 0, i32 1
  %277 = extractvalue { %struct.smpType_struct*, i8* } %272, 1
  store i8* %277, i8** %276, align 1
  %278 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %279 = getelementptr { %struct.smpType_struct*, i8* }* %278, i32 0, i32 0
  %280 = load %struct.smpType_struct** %279, align 1
  %281 = getelementptr { %struct.smpType_struct*, i8* }* %278, i32 0, i32 1
  %282 = load i8** %281, align 1
  %283 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %280, i8* %282)
  %284 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %285 = getelementptr { %struct.smpType_struct*, i8* }* %284, i32 0, i32 0
  %286 = extractvalue { %struct.smpType_struct*, i8* } %283, 0
  store %struct.smpType_struct* %286, %struct.smpType_struct** %285, align 1
  %287 = getelementptr { %struct.smpType_struct*, i8* }* %284, i32 0, i32 1
  %288 = extractvalue { %struct.smpType_struct*, i8* } %283, 1
  store i8* %288, i8** %287, align 1
  br label %362

; <label>:289                                     ; preds = %248
  br label %290

; <label>:290                                     ; preds = %289
  br label %291

; <label>:291                                     ; preds = %301, %290
  %292 = getelementptr inbounds %struct.obj_struct* %fmt_res, i32 0, i32 1
  %293 = load i8** %292, align 8
  %294 = bitcast i8* %293 to %struct.smpstrstruct*
  %295 = getelementptr inbounds %struct.smpstrstruct* %294, i32 0, i32 1
  %296 = load i64* %295, align 8
  %297 = load i64* %str_len, align 8
  %298 = load i64* %i, align 8
  %299 = sub i64 %297, %298
  %300 = icmp ugt i64 %296, %299
  br i1 %300, label %301, label %307

; <label>:301                                     ; preds = %291
  %302 = load i8** %str, align 8
  %303 = load i64* %str_len, align 8
  %304 = mul i64 %303, 2
  store i64 %304, i64* %str_len, align 8
  %305 = mul i64 1, %304
  %306 = call i8* @GC_realloc(i8* %302, i64 %305)
  store i8* %306, i8** %str, align 8
  br label %291

; <label>:307                                     ; preds = %291
  %308 = load i8** %str, align 8
  %309 = load i64* %i, align 8
  %310 = getelementptr inbounds i8* %308, i64 %309
  %311 = load i8** %str, align 8
  %312 = load i64* %i, align 8
  %313 = getelementptr inbounds i8* %311, i64 %312
  %314 = call i64 @llvm.objectsize.i64(i8* %313, i1 false)
  %315 = bitcast %struct.obj_struct* %fmt_res to { %struct.smpType_struct*, i8* }*
  %316 = getelementptr { %struct.smpType_struct*, i8* }* %315, i32 0, i32 0
  %317 = load %struct.smpType_struct** %316, align 1
  %318 = getelementptr { %struct.smpType_struct*, i8* }* %315, i32 0, i32 1
  %319 = load i8** %318, align 1
  %320 = call i8* @smpString_to_cstr(%struct.smpType_struct* %317, i8* %319)
  %321 = call i32 (i8*, i32, i64, i8*, ...)* @__sprintf_chk(i8* %310, i32 0, i64 %314, i8* getelementptr inbounds ([3 x i8]* @.str161, i32 0, i32 0), i8* %320)
  %322 = load i8** %fmt_end, align 8
  store i8* %322, i8** %ptr, align 8
  %323 = load i8** %str, align 8
  %324 = load i64* %i, align 8
  %325 = getelementptr inbounds i8* %323, i64 %324
  %326 = call i64 @strlen(i8* %325)
  %327 = load i64* %i, align 8
  %328 = add i64 %327, %326
  store i64 %328, i64* %i, align 8
  %329 = getelementptr inbounds %struct.obj_struct* %list, i32 0, i32 1
  %330 = load i8** %329, align 8
  %331 = bitcast i8* %330 to %struct.smpPair_struct*
  %332 = getelementptr inbounds %struct.smpPair_struct* %331, i32 0, i32 1
  %333 = load %struct.obj_struct** %332, align 8
  %334 = icmp ne %struct.obj_struct* %333, null
  br i1 %334, label %335, label %343

; <label>:335                                     ; preds = %307
  %336 = getelementptr inbounds %struct.obj_struct* %list, i32 0, i32 1
  %337 = load i8** %336, align 8
  %338 = bitcast i8* %337 to %struct.smpPair_struct*
  %339 = getelementptr inbounds %struct.smpPair_struct* %338, i32 0, i32 1
  %340 = load %struct.obj_struct** %339, align 8
  %341 = bitcast %struct.obj_struct* %list to i8*
  %342 = bitcast %struct.obj_struct* %340 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %341, i8* %342, i64 16, i32 8, i1 false)
  br label %345

; <label>:343                                     ; preds = %307
  %344 = bitcast %struct.obj_struct* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %344, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %345

; <label>:345                                     ; preds = %343, %335
  %346 = load i64* %j, align 8
  %347 = add i64 %346, 1
  store i64 %347, i64* %j, align 8
  br label %135

; <label>:348                                     ; preds = %135
  %349 = load i64* %i, align 8
  %350 = load i8** %str, align 8
  %351 = getelementptr inbounds i8* %350, i64 %349
  store i8 0, i8* %351, align 1
  %352 = load i8** %str, align 8
  %353 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %352)
  %354 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %355 = getelementptr { %struct.smpType_struct*, i8* }* %354, i32 0, i32 0
  %356 = extractvalue { %struct.smpType_struct*, i8* } %353, 0
  store %struct.smpType_struct* %356, %struct.smpType_struct** %355, align 1
  %357 = getelementptr { %struct.smpType_struct*, i8* }* %354, i32 0, i32 1
  %358 = extractvalue { %struct.smpType_struct*, i8* } %353, 1
  store i8* %358, i8** %357, align 1
  %359 = load i8** %str, align 8
  call void @GC_free(i8* %359)
  %360 = bitcast %struct.obj_struct* %1 to i8*
  %361 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %360, i8* %361, i64 16, i32 8, i1 false)
  br label %362

; <label>:362                                     ; preds = %348, %257, %245, %190, %84, %34, %29
  %363 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %364 = load { %struct.smpType_struct*, i8* }* %363, align 1
  ret { %struct.smpType_struct*, i8* } %364
}

define { %struct.smpType_struct*, i8* } @smpGlobal_throw_arg(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %11, i8* %13)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smpList_to_a(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %i = alloca i64, align 8
  %length = alloca i64, align 8
  %arr = alloca %struct.obj_struct*, align 8
  %ptr = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call i64 @smpList_length_clong(%struct.smpType_struct* %9, i8* %11)
  store i64 %12, i64* %length, align 8
  %13 = load i64* %length, align 8
  %14 = call i64 @next_power_of_2(i64 %13)
  %15 = mul i64 16, %14
  %16 = call noalias i8* @GC_malloc(i64 %15)
  %17 = bitcast i8* %16 to %struct.obj_struct*
  store %struct.obj_struct* %17, %struct.obj_struct** %arr, align 8
  %18 = load %struct.obj_struct** %arr, align 8
  %19 = bitcast %struct.obj_struct* %18 to i8*
  %20 = call i64 @llvm.objectsize.i64(i8* %19, i1 false)
  %21 = icmp ne i64 %20, -1
  br i1 %21, label %22, label %32

; <label>:22                                      ; preds = %0
  %23 = load %struct.obj_struct** %arr, align 8
  %24 = bitcast %struct.obj_struct* %23 to i8*
  %25 = load i64* %length, align 8
  %26 = call i64 @next_power_of_2(i64 %25)
  %27 = mul i64 16, %26
  %28 = load %struct.obj_struct** %arr, align 8
  %29 = bitcast %struct.obj_struct* %28 to i8*
  %30 = call i64 @llvm.objectsize.i64(i8* %29, i1 false)
  %31 = call i8* @__memset_chk(i8* %24, i32 0, i64 %27, i64 %30) nounwind
  br label %39

; <label>:32                                      ; preds = %0
  %33 = load %struct.obj_struct** %arr, align 8
  %34 = bitcast %struct.obj_struct* %33 to i8*
  %35 = load i64* %length, align 8
  %36 = call i64 @next_power_of_2(i64 %35)
  %37 = mul i64 16, %36
  %38 = call i8* @__inline_memset_chk(i8* %34, i32 0, i64 %37)
  br label %39

; <label>:39                                      ; preds = %32, %22
  %40 = phi i8* [ %31, %22 ], [ %38, %32 ]
  %41 = bitcast %struct.obj_struct* %ptr to i8*
  %42 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 16, i32 8, i1 false)
  store i64 0, i64* %i, align 8
  br label %43

; <label>:43                                      ; preds = %74, %39
  %44 = load i64* %i, align 8
  %45 = load i64* %length, align 8
  %46 = icmp slt i64 %44, %45
  br i1 %46, label %47, label %77

; <label>:47                                      ; preds = %43
  %48 = load i64* %i, align 8
  %49 = load %struct.obj_struct** %arr, align 8
  %50 = getelementptr inbounds %struct.obj_struct* %49, i64 %48
  %51 = getelementptr inbounds %struct.obj_struct* %ptr, i32 0, i32 1
  %52 = load i8** %51, align 8
  %53 = bitcast i8* %52 to %struct.smpPair_struct*
  %54 = getelementptr inbounds %struct.smpPair_struct* %53, i32 0, i32 0
  %55 = bitcast %struct.obj_struct* %50 to i8*
  %56 = bitcast %struct.obj_struct* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %55, i8* %56, i64 16, i32 8, i1 false)
  %57 = getelementptr inbounds %struct.obj_struct* %ptr, i32 0, i32 1
  %58 = load i8** %57, align 8
  %59 = bitcast i8* %58 to %struct.smpPair_struct*
  %60 = getelementptr inbounds %struct.smpPair_struct* %59, i32 0, i32 1
  %61 = load %struct.obj_struct** %60, align 8
  %62 = icmp ne %struct.obj_struct* %61, null
  br i1 %62, label %63, label %71

; <label>:63                                      ; preds = %47
  %64 = getelementptr inbounds %struct.obj_struct* %ptr, i32 0, i32 1
  %65 = load i8** %64, align 8
  %66 = bitcast i8* %65 to %struct.smpPair_struct*
  %67 = getelementptr inbounds %struct.smpPair_struct* %66, i32 0, i32 1
  %68 = load %struct.obj_struct** %67, align 8
  %69 = bitcast %struct.obj_struct* %ptr to i8*
  %70 = bitcast %struct.obj_struct* %68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %69, i8* %70, i64 16, i32 8, i1 false)
  br label %73

; <label>:71                                      ; preds = %47
  %72 = bitcast %struct.obj_struct* %ptr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %72, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %73

; <label>:73                                      ; preds = %71, %63
  br label %74

; <label>:74                                      ; preds = %73
  %75 = load i64* %i, align 8
  %76 = add nsw i64 %75, 1
  store i64 %76, i64* %i, align 8
  br label %43

; <label>:77                                      ; preds = %43
  %78 = load %struct.obj_struct** %arr, align 8
  %79 = load i64* %length, align 8
  %80 = call { %struct.smpType_struct*, i8* } @smpArray_init_array(%struct.obj_struct* %78, i64 %79)
  %81 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = extractvalue { %struct.smpType_struct*, i8* } %80, 0
  store %struct.smpType_struct* %83, %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = extractvalue { %struct.smpType_struct*, i8* } %80, 1
  store i8* %85, i8** %84, align 1
  %86 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %87 = load { %struct.smpType_struct*, i8* }* %86, align 1
  ret { %struct.smpType_struct*, i8* } %87
}

define { %struct.smpType_struct*, i8* } @smpGlobal_class_arg(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %name = alloca %struct.obj_struct, align 8
  %parents = alloca %struct.obj_struct, align 8
  %body = alloca %struct.obj_struct, align 8
  %name_str = alloca i8*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %name to i8*
  %11 = bitcast %struct.obj_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 16, i32 8, i1 false)
  %12 = load %struct.obj_struct** %3, align 8
  %13 = getelementptr inbounds %struct.obj_struct* %12, i64 1
  %14 = bitcast %struct.obj_struct* %parents to i8*
  %15 = bitcast %struct.obj_struct* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 16, i32 8, i1 false)
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 2
  %18 = bitcast %struct.obj_struct* %body to i8*
  %19 = bitcast %struct.obj_struct* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 16, i32 8, i1 false)
  %20 = bitcast %struct.obj_struct* %name to { %struct.smpType_struct*, i8* }*
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 1
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 1
  %24 = load i8** %23, align 1
  %25 = call i8* @smpString_to_cstr(%struct.smpType_struct* %22, i8* %24)
  store i8* %25, i8** %name_str, align 8
  %26 = bitcast %struct.obj_struct* %name to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = bitcast %struct.obj_struct* %parents to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smp_printf(i8* getelementptr inbounds ([36 x i8]* @.str160, i32 0, i32 0), %struct.smpType_struct* %28, i8* %30, %struct.smpType_struct* %33, i8* %35, %struct.obj_struct* byval align 8 %body)
  %37 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = extractvalue { %struct.smpType_struct*, i8* } %36, 0
  store %struct.smpType_struct* %39, %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = extractvalue { %struct.smpType_struct*, i8* } %36, 1
  store i8* %41, i8** %40, align 1
  %42 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %43 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %44 = load { %struct.smpType_struct*, i8* }* %43, align 1
  ret { %struct.smpType_struct*, i8* } %44
}

define { %struct.smpType_struct*, i8* } @smpGlobal_fprint(%struct.__sFILE* %fp, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.__sFILE*, align 8
  %obj = alloca %struct.obj_struct, align 8
  %strobj = alloca %struct.obj_struct, align 8
  store %struct.__sFILE* %fp, %struct.__sFILE** %2, align 8
  %3 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %obj.coerce1, i8** %5
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  %8 = load %struct.smpType_struct** %7, align 1
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  %10 = load i8** %9, align 1
  %11 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %8, i8* %10, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %12 = bitcast %struct.obj_struct* %strobj to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = getelementptr inbounds %struct.obj_struct* %strobj, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 8
  %19 = getelementptr inbounds %struct.smpType_struct* %18, i32 0, i32 0
  %20 = load i8** %19, align 8
  %21 = call i32 @strcmp(i8* %20, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %22 = icmp eq i32 %21, 0
  %23 = zext i1 %22 to i32
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %0
  %26 = bitcast %struct.obj_struct* %1 to i8*
  %27 = bitcast %struct.obj_struct* %strobj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  br label %38

; <label>:28                                      ; preds = %0
  %29 = load %struct.__sFILE** %2, align 8
  %30 = bitcast %struct.obj_struct* %strobj to { %struct.smpType_struct*, i8* }*
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 0
  %32 = load %struct.smpType_struct** %31, align 1
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 1
  %34 = load i8** %33, align 1
  %35 = call i8* @smpString_to_cstr(%struct.smpType_struct* %32, i8* %34)
  %36 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %29, i8* getelementptr inbounds ([3 x i8]* @.str161, i32 0, i32 0), i8* %35)
  %37 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %38

; <label>:38                                      ; preds = %28, %25
  %39 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %40 = load { %struct.smpType_struct*, i8* }* %39, align 1
  ret { %struct.smpType_struct*, i8* } %40
}

define { %struct.smpType_struct*, i8* } @smpGlobal_vsprintf(i8* %format, %struct.__va_list_tag* %ap) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %3 = alloca %struct.__va_list_tag*, align 8
  %argc = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %list = alloca %struct.obj_struct, align 8
  %list_ptr = alloca %struct.obj_struct, align 8
  %i = alloca i32, align 4
  %car = alloca %struct.obj_struct, align 8
  %cons = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %argv = alloca [2 x %struct.obj_struct], align 16
  %5 = alloca %struct.obj_struct, align 8
  store i8* %format, i8** %2, align 8
  store %struct.__va_list_tag* %ap, %struct.__va_list_tag** %3, align 8
  store i32 0, i32* %argc, align 4
  %6 = load i8** %2, align 8
  store i8* %6, i8** %ptr, align 8
  br label %7

; <label>:7                                       ; preds = %28, %0
  %8 = load i8** %ptr, align 8
  %9 = load i8* %8, align 1
  %10 = icmp ne i8 %9, 0
  br i1 %10, label %11, label %31

; <label>:11                                      ; preds = %7
  %12 = load i8** %ptr, align 8
  %13 = load i8* %12, align 1
  %14 = sext i8 %13 to i32
  %15 = icmp eq i32 %14, 37
  br i1 %15, label %16, label %28

; <label>:16                                      ; preds = %11
  %17 = load i8** %ptr, align 8
  %18 = getelementptr inbounds i8* %17, i32 1
  store i8* %18, i8** %ptr, align 8
  %19 = load i8** %ptr, align 8
  %20 = getelementptr inbounds i8* %19, i64 1
  %21 = load i8* %20, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp ne i32 %22, 37
  br i1 %23, label %24, label %27

; <label>:24                                      ; preds = %16
  %25 = load i32* %argc, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %argc, align 4
  br label %27

; <label>:27                                      ; preds = %24, %16
  br label %28

; <label>:28                                      ; preds = %27, %11
  %29 = load i8** %ptr, align 8
  %30 = getelementptr inbounds i8* %29, i32 1
  store i8* %30, i8** %ptr, align 8
  br label %7

; <label>:31                                      ; preds = %7
  %32 = bitcast %struct.obj_struct* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %33 = bitcast %struct.obj_struct* %list_ptr to i8*
  %34 = bitcast %struct.obj_struct* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* %34, i64 16, i32 8, i1 false)
  store i32 0, i32* %i, align 4
  br label %35

; <label>:35                                      ; preds = %113, %31
  %36 = load i32* %i, align 4
  %37 = load i32* %argc, align 4
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %116

; <label>:39                                      ; preds = %35
  %40 = load %struct.__va_list_tag** %3, align 8
  %41 = getelementptr inbounds %struct.__va_list_tag* %40, i32 0, i32 0
  %42 = load i32* %41
  %43 = icmp ule i32 %42, 32
  br i1 %43, label %44, label %50

; <label>:44                                      ; preds = %39
  %45 = getelementptr inbounds %struct.__va_list_tag* %40, i32 0, i32 3
  %46 = load i8** %45
  %47 = getelementptr i8* %46, i32 %42
  %48 = bitcast i8* %47 to %struct.obj_struct*
  %49 = add i32 %42, 16
  store i32 %49, i32* %41
  br label %55

; <label>:50                                      ; preds = %39
  %51 = getelementptr inbounds %struct.__va_list_tag* %40, i32 0, i32 2
  %52 = load i8** %51
  %53 = bitcast i8* %52 to %struct.obj_struct*
  %54 = getelementptr i8* %52, i32 16
  store i8* %54, i8** %51
  br label %55

; <label>:55                                      ; preds = %50, %44
  %56 = phi %struct.obj_struct* [ %48, %44 ], [ %53, %50 ]
  %57 = bitcast %struct.obj_struct* %car to i8*
  %58 = bitcast %struct.obj_struct* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 16, i32 8, i1 false)
  %59 = bitcast %struct.obj_struct* %car to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = load %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = load i8** %62, align 1
  %64 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %65 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %66 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %61, i8* %63, %struct.smpType_struct* %64, i8* %65)
  %67 = bitcast %struct.obj_struct* %cons to { %struct.smpType_struct*, i8* }*
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 0
  %69 = extractvalue { %struct.smpType_struct*, i8* } %66, 0
  store %struct.smpType_struct* %69, %struct.smpType_struct** %68, align 1
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 1
  %71 = extractvalue { %struct.smpType_struct*, i8* } %66, 1
  store i8* %71, i8** %70, align 1
  %72 = getelementptr inbounds %struct.obj_struct* %list_ptr, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 8
  %74 = getelementptr inbounds %struct.smpType_struct* %73, i32 0, i32 1
  %75 = load i32* %74, align 4
  %76 = load i32* @smpType_id_nil, align 4
  %77 = icmp eq i32 %75, %76
  br i1 %77, label %78, label %83

; <label>:78                                      ; preds = %55
  %79 = bitcast %struct.obj_struct* %list to i8*
  %80 = bitcast %struct.obj_struct* %cons to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %80, i64 16, i32 8, i1 false)
  %81 = bitcast %struct.obj_struct* %list_ptr to i8*
  %82 = bitcast %struct.obj_struct* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false)
  br label %112

; <label>:83                                      ; preds = %55
  %84 = bitcast %struct.obj_struct* %list_ptr to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = load %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = load i8** %87, align 1
  %89 = call { %struct.smpType_struct*, i8* } @smpPair_set_cdr_now(%struct.smpType_struct* %86, i8* %88, i32 1, %struct.obj_struct* %cons)
  %90 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = extractvalue { %struct.smpType_struct*, i8* } %89, 0
  store %struct.smpType_struct* %92, %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = extractvalue { %struct.smpType_struct*, i8* } %89, 1
  store i8* %94, i8** %93, align 1
  %95 = getelementptr inbounds %struct.obj_struct* %list_ptr, i32 0, i32 1
  %96 = load i8** %95, align 8
  %97 = bitcast i8* %96 to %struct.smpPair_struct*
  %98 = getelementptr inbounds %struct.smpPair_struct* %97, i32 0, i32 1
  %99 = load %struct.obj_struct** %98, align 8
  %100 = icmp ne %struct.obj_struct* %99, null
  br i1 %100, label %101, label %109

; <label>:101                                     ; preds = %83
  %102 = getelementptr inbounds %struct.obj_struct* %list_ptr, i32 0, i32 1
  %103 = load i8** %102, align 8
  %104 = bitcast i8* %103 to %struct.smpPair_struct*
  %105 = getelementptr inbounds %struct.smpPair_struct* %104, i32 0, i32 1
  %106 = load %struct.obj_struct** %105, align 8
  %107 = bitcast %struct.obj_struct* %list_ptr to i8*
  %108 = bitcast %struct.obj_struct* %106 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %107, i8* %108, i64 16, i32 8, i1 false)
  br label %111

; <label>:109                                     ; preds = %83
  %110 = bitcast %struct.obj_struct* %list_ptr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %110, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %111

; <label>:111                                     ; preds = %109, %101
  br label %112

; <label>:112                                     ; preds = %111, %78
  br label %113

; <label>:113                                     ; preds = %112
  %114 = load i32* %i, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %i, align 4
  br label %35

; <label>:116                                     ; preds = %35
  %117 = getelementptr inbounds [2 x %struct.obj_struct]* %argv, i32 0, i64 0
  %118 = load i8** %2, align 8
  %119 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %118)
  %120 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %121 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 0
  %122 = extractvalue { %struct.smpType_struct*, i8* } %119, 0
  store %struct.smpType_struct* %122, %struct.smpType_struct** %121, align 1
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 1
  %124 = extractvalue { %struct.smpType_struct*, i8* } %119, 1
  store i8* %124, i8** %123, align 1
  %125 = bitcast %struct.obj_struct* %117 to i8*
  %126 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %125, i8* %126, i64 16, i32 8, i1 false)
  %127 = getelementptr inbounds [2 x %struct.obj_struct]* %argv, i32 0, i64 1
  %128 = bitcast %struct.obj_struct* %127 to i8*
  %129 = bitcast %struct.obj_struct* %list to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %128, i8* %129, i64 16, i32 8, i1 false)
  %130 = load i32* %argc, align 4
  %131 = getelementptr inbounds [2 x %struct.obj_struct]* %argv, i32 0, i32 0
  %132 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %133 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %134 = call { %struct.smpType_struct*, i8* } @smpGlobal_sprintf_arg(%struct.smpType_struct* %132, i8* %133, i32 %130, %struct.obj_struct* %131)
  %135 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %136 = getelementptr { %struct.smpType_struct*, i8* }* %135, i32 0, i32 0
  %137 = extractvalue { %struct.smpType_struct*, i8* } %134, 0
  store %struct.smpType_struct* %137, %struct.smpType_struct** %136, align 1
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %135, i32 0, i32 1
  %139 = extractvalue { %struct.smpType_struct*, i8* } %134, 1
  store i8* %139, i8** %138, align 1
  %140 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %141 = load { %struct.smpType_struct*, i8* }* %140, align 1
  ret { %struct.smpType_struct*, i8* } %141
}

define { %struct.smpType_struct*, i8* } @smpHash_init_capacity(i64 %capacity) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i64, align 8
  %res = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.smpHash_struct, align 8
  store i64 %capacity, i64* %2, align 8
  %5 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str149, i32 0, i32 0))
  %6 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  %8 = extractvalue { %struct.smpType_struct*, i8* } %5, 0
  store %struct.smpType_struct* %8, %struct.smpType_struct** %7, align 1
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  %10 = extractvalue { %struct.smpType_struct*, i8* } %5, 1
  store i8* %10, i8** %9, align 1
  %11 = getelementptr inbounds %struct.obj_struct* %3, i32 0, i32 1
  %12 = load i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.smpType_struct*
  %14 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %13)
  %15 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = call noalias i8* @GC_malloc(i64 48)
  %21 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %20, i8** %21, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %23 = load i8** %22, align 8
  %24 = bitcast i8* %23 to %struct.smpHash_struct*
  %25 = load i64* %2, align 8
  call void @smpHash_core_init_capacity(%struct.smpHash_struct* sret %4, i64 %25)
  %26 = bitcast %struct.smpHash_struct* %24 to i8*
  %27 = bitcast %struct.smpHash_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 48, i32 8, i1 false)
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  %30 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %31 = load { %struct.smpType_struct*, i8* }* %30, align 1
  ret { %struct.smpType_struct*, i8* } %31
}

define { %struct.smpType_struct*, i8* } @smp_print(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %strobj = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %9, i8* %11, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %13 = bitcast %struct.obj_struct* %strobj to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %strobj to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %20, i8* %22)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %0
  %26 = bitcast %struct.obj_struct* %1 to i8*
  %27 = bitcast %struct.obj_struct* %strobj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  br label %86

; <label>:28                                      ; preds = %0
  %29 = getelementptr inbounds %struct.obj_struct* %strobj, i32 0, i32 0
  %30 = load %struct.smpType_struct** %29, align 8
  %31 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %30, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %75, label %33

; <label>:33                                      ; preds = %28
  %34 = getelementptr inbounds %struct.obj_struct* %strobj, i32 0, i32 0
  %35 = load %struct.smpType_struct** %34, align 8
  %36 = getelementptr inbounds %struct.smpType_struct* %35, i32 0, i32 0
  %37 = load i8** %36, align 8
  %38 = call i32 @strcmp(i8* %37, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %43

; <label>:40                                      ; preds = %33
  %41 = bitcast %struct.obj_struct* %1 to i8*
  %42 = bitcast %struct.obj_struct* %strobj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 16, i32 8, i1 false)
  br label %86

; <label>:43                                      ; preds = %33
  %44 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %45 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = extractvalue { %struct.smpType_struct*, i8* } %44, 0
  store %struct.smpType_struct* %47, %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = extractvalue { %struct.smpType_struct*, i8* } %44, 1
  store i8* %49, i8** %48, align 1
  %50 = getelementptr inbounds %struct.obj_struct* %3, i32 0, i32 1
  %51 = load i8** %50, align 8
  %52 = bitcast i8* %51 to %struct.smpType_struct*
  %53 = bitcast %struct.obj_struct* %strobj to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = load %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = load i8** %56, align 1
  %58 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %52, %struct.smpType_struct* %55, i8* %57)
  %59 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = extractvalue { %struct.smpType_struct*, i8* } %58, 0
  store %struct.smpType_struct* %61, %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = extractvalue { %struct.smpType_struct*, i8* } %58, 1
  store i8* %63, i8** %62, align 1
  %64 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 0
  %66 = load %struct.smpType_struct** %65, align 1
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 1
  %68 = load i8** %67, align 1
  %69 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %66, i8* %68)
  %70 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = extractvalue { %struct.smpType_struct*, i8* } %69, 0
  store %struct.smpType_struct* %72, %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = extractvalue { %struct.smpType_struct*, i8* } %69, 1
  store i8* %74, i8** %73, align 1
  br label %86

; <label>:75                                      ; preds = %28
  %76 = load %struct.__sFILE** @smp_stdout, align 8
  %77 = bitcast %struct.obj_struct* %strobj to { %struct.smpType_struct*, i8* }*
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 0
  %79 = load %struct.smpType_struct** %78, align 1
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 1
  %81 = load i8** %80, align 1
  %82 = call i8* @smpString_to_cstr(%struct.smpType_struct* %79, i8* %81)
  %83 = call i32 (%struct.__sFILE*, i8*, ...)* @fprintf(%struct.__sFILE* %76, i8* getelementptr inbounds ([3 x i8]* @.str161, i32 0, i32 0), i8* %82)
  %84 = bitcast %struct.obj_struct* %1 to i8*
  %85 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* %85, i64 16, i32 8, i1 false)
  br label %86

; <label>:86                                      ; preds = %75, %43, %40, %25
  %87 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %88 = load { %struct.smpType_struct*, i8* }* %87, align 1
  ret { %struct.smpType_struct*, i8* } %88
}

define { %struct.smpType_struct*, i8* } @smpInteger_mod(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = load i32* @smpType_id_int, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %40

; <label>:16                                      ; preds = %0
  %17 = call noalias i8* @GC_malloc(i64 16)
  %18 = bitcast i8* %17 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %18, [1 x %struct.__mpz_struct]** %z, align 8
  %19 = load [1 x %struct.__mpz_struct]** %z, align 8
  %20 = getelementptr inbounds [1 x %struct.__mpz_struct]* %19, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %20)
  %21 = load [1 x %struct.__mpz_struct]** %z, align 8
  %22 = getelementptr inbounds [1 x %struct.__mpz_struct]* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to [1 x %struct.__mpz_struct]*
  %26 = getelementptr inbounds [1 x %struct.__mpz_struct]* %25, i32 0, i32 0
  %27 = load %struct.obj_struct** %3, align 8
  %28 = getelementptr inbounds %struct.obj_struct* %27, i64 0
  %29 = getelementptr inbounds %struct.obj_struct* %28, i32 0, i32 1
  %30 = load i8** %29, align 8
  %31 = bitcast i8* %30 to [1 x %struct.__mpz_struct]*
  %32 = getelementptr inbounds [1 x %struct.__mpz_struct]* %31, i32 0, i32 0
  call void @__gmpz_mod(%struct.__mpz_struct* %22, %struct.__mpz_struct* %26, %struct.__mpz_struct* %32)
  %33 = load [1 x %struct.__mpz_struct]** %z, align 8
  %34 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %65

; <label>:40                                      ; preds = %0
  %41 = load %struct.obj_struct** %3, align 8
  %42 = getelementptr inbounds %struct.obj_struct* %41, i64 0
  %43 = bitcast %struct.obj_struct* %42 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = load i8** %46, align 1
  %48 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_int, %struct.smpType_struct* %45, i8* %47)
  %49 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = extractvalue { %struct.smpType_struct*, i8* } %48, 0
  store %struct.smpType_struct* %51, %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = extractvalue { %struct.smpType_struct*, i8* } %48, 1
  store i8* %53, i8** %52, align 1
  %54 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %56, i8* %58)
  %60 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  br label %65

; <label>:65                                      ; preds = %40, %16
  %66 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %67 = load { %struct.smpType_struct*, i8* }* %66, align 1
  ret { %struct.smpType_struct*, i8* } %67
}

define { %struct.smpType_struct*, i8* } @smpPair_set_cdr_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpPair_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpPair_struct*
  store %struct.smpPair_struct* %9, %struct.smpPair_struct** %core, align 8
  %10 = load %struct.obj_struct** %3, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %10, i64 0
  %12 = getelementptr inbounds %struct.obj_struct* %11, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = getelementptr inbounds %struct.smpType_struct* %13, i32 0, i32 1
  %15 = load i32* %14, align 4
  %16 = load i32* @smpType_id_nil, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %18, label %23

; <label>:18                                      ; preds = %0
  %19 = load %struct.smpPair_struct** %core, align 8
  %20 = getelementptr inbounds %struct.smpPair_struct* %19, i32 0, i32 1
  store %struct.obj_struct* null, %struct.obj_struct** %20, align 8
  %21 = bitcast %struct.obj_struct* %1 to i8*
  %22 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 16, i32 8, i1 false)
  br label %43

; <label>:23                                      ; preds = %0
  %24 = load %struct.smpPair_struct** %core, align 8
  %25 = getelementptr inbounds %struct.smpPair_struct* %24, i32 0, i32 1
  %26 = load %struct.obj_struct** %25, align 8
  %27 = icmp eq %struct.obj_struct* %26, null
  br i1 %27, label %28, label %33

; <label>:28                                      ; preds = %23
  %29 = call noalias i8* @GC_malloc(i64 16)
  %30 = bitcast i8* %29 to %struct.obj_struct*
  %31 = load %struct.smpPair_struct** %core, align 8
  %32 = getelementptr inbounds %struct.smpPair_struct* %31, i32 0, i32 1
  store %struct.obj_struct* %30, %struct.obj_struct** %32, align 8
  br label %33

; <label>:33                                      ; preds = %28, %23
  %34 = load %struct.smpPair_struct** %core, align 8
  %35 = getelementptr inbounds %struct.smpPair_struct* %34, i32 0, i32 1
  %36 = load %struct.obj_struct** %35, align 8
  %37 = load %struct.obj_struct** %3, align 8
  %38 = getelementptr inbounds %struct.obj_struct* %37, i64 0
  %39 = bitcast %struct.obj_struct* %36 to i8*
  %40 = bitcast %struct.obj_struct* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false)
  %41 = bitcast %struct.obj_struct* %1 to i8*
  %42 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 16, i32 8, i1 false)
  br label %43

; <label>:43                                      ; preds = %33, %18
  %44 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %45 = load { %struct.smpType_struct*, i8* }* %44, align 1
  ret { %struct.smpType_struct*, i8* } %45
}

define { %struct.smpType_struct*, i8* } @obj_put_fmt(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i8* %fmt, i8** %fmt_end) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i8**, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %width = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %prec = alloca i32, align 4
  %type = alloca i8, align 1
  %argc = alloca i32, align 4
  %argv = alloca %struct.obj_struct*, align 8
  %prec_obj = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca i8*
  %type_str = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %15
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  store i8* %obj.coerce1, i8** %16
  store i8* %fmt, i8** %2, align 8
  store i8** %fmt_end, i8*** %3, align 8
  %17 = load i8** %2, align 8
  %18 = load i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp ne i32 %19, 37
  br i1 %20, label %21, label %51

; <label>:21                                      ; preds = %0
  %22 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([22 x i8]* @.str120, i32 0, i32 0))
  %23 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = extractvalue { %struct.smpType_struct*, i8* } %22, 0
  store %struct.smpType_struct* %25, %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = extractvalue { %struct.smpType_struct*, i8* } %22, 1
  store i8* %27, i8** %26, align 1
  %28 = load i8** %2, align 8
  %29 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = load i8** %32, align 1
  %34 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %31, i8* %33, i8* getelementptr inbounds ([48 x i8]* @.str163, i32 0, i32 0), i8* %28)
  %35 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = load %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = load i8** %43, align 1
  %45 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %42, i8* %44)
  %46 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = extractvalue { %struct.smpType_struct*, i8* } %45, 0
  store %struct.smpType_struct* %48, %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = extractvalue { %struct.smpType_struct*, i8* } %45, 1
  store i8* %50, i8** %49, align 1
  br label %282

; <label>:51                                      ; preds = %0
  %52 = load i8** %2, align 8
  %53 = getelementptr inbounds i8* %52, i32 1
  store i8* %53, i8** %2, align 8
  store i32 0, i32* %width, align 4
  %54 = load i8** %2, align 8
  store i8* %54, i8** %ptr, align 8
  br label %55

; <label>:55                                      ; preds = %67, %51
  %56 = load i8** %ptr, align 8
  %57 = load i8* %56, align 1
  %58 = sext i8 %57 to i32
  %59 = icmp sge i32 %58, 48
  br i1 %59, label %60, label %65

; <label>:60                                      ; preds = %55
  %61 = load i8** %ptr, align 8
  %62 = load i8* %61, align 1
  %63 = sext i8 %62 to i32
  %64 = icmp sle i32 %63, 57
  br label %65

; <label>:65                                      ; preds = %60, %55
  %66 = phi i1 [ false, %55 ], [ %64, %60 ]
  br i1 %66, label %67, label %76

; <label>:67                                      ; preds = %65
  %68 = load i32* %width, align 4
  %69 = mul nsw i32 10, %68
  %70 = load i8** %ptr, align 8
  %71 = getelementptr inbounds i8* %70, i32 1
  store i8* %71, i8** %ptr, align 8
  %72 = load i8* %70, align 1
  %73 = sext i8 %72 to i32
  %74 = sub nsw i32 %73, 48
  %75 = add nsw i32 %69, %74
  store i32 %75, i32* %width, align 4
  br label %55

; <label>:76                                      ; preds = %65
  store i32 0, i32* %prec, align 4
  %77 = load i8** %ptr, align 8
  %78 = load i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = icmp eq i32 %79, 46
  br i1 %80, label %81, label %104

; <label>:81                                      ; preds = %76
  br label %82

; <label>:82                                      ; preds = %95, %81
  %83 = load i8** %ptr, align 8
  %84 = getelementptr inbounds i8* %83, i32 1
  store i8* %84, i8** %ptr, align 8
  %85 = load i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = icmp sge i32 %86, 48
  br i1 %87, label %88, label %93

; <label>:88                                      ; preds = %82
  %89 = load i8** %ptr, align 8
  %90 = load i8* %89, align 1
  %91 = sext i8 %90 to i32
  %92 = icmp sle i32 %91, 57
  br label %93

; <label>:93                                      ; preds = %88, %82
  %94 = phi i1 [ false, %82 ], [ %92, %88 ]
  br i1 %94, label %95, label %103

; <label>:95                                      ; preds = %93
  %96 = load i32* %prec, align 4
  %97 = mul nsw i32 10, %96
  %98 = load i8** %ptr, align 8
  %99 = load i8* %98, align 1
  %100 = sext i8 %99 to i32
  %101 = sub nsw i32 %100, 48
  %102 = add nsw i32 %97, %101
  store i32 %102, i32* %prec, align 4
  br label %82

; <label>:103                                     ; preds = %93
  br label %104

; <label>:104                                     ; preds = %103, %76
  %105 = load i8** %ptr, align 8
  %106 = getelementptr inbounds i8* %105, i32 1
  store i8* %106, i8** %ptr, align 8
  %107 = load i8* %105, align 1
  store i8 %107, i8* %type, align 1
  store i32 0, i32* %argc, align 4
  store %struct.obj_struct* null, %struct.obj_struct** %argv, align 8
  %108 = bitcast %struct.obj_struct* %prec_obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %108, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %109 = load i32* %prec, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %129

; <label>:111                                     ; preds = %104
  %112 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %113 = load %struct.smpType_struct** %112, align 8
  %114 = getelementptr inbounds %struct.smpType_struct* %113, i32 0, i32 0
  %115 = load i8** %114, align 8
  %116 = call i32 @strcmp(i8* %115, i8* getelementptr inbounds ([6 x i8]* @.str128, i32 0, i32 0))
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %129

; <label>:118                                     ; preds = %111
  %119 = load i32* %prec, align 4
  %120 = sext i32 %119 to i64
  %121 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %120)
  %122 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 0
  %124 = extractvalue { %struct.smpType_struct*, i8* } %121, 0
  store %struct.smpType_struct* %124, %struct.smpType_struct** %123, align 1
  %125 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 1
  %126 = extractvalue { %struct.smpType_struct*, i8* } %121, 1
  store i8* %126, i8** %125, align 1
  %127 = bitcast %struct.obj_struct* %prec_obj to i8*
  %128 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %127, i8* %128, i64 16, i32 8, i1 false)
  store i32 1, i32* %argc, align 4
  store %struct.obj_struct* %prec_obj, %struct.obj_struct** %argv, align 8
  br label %129

; <label>:129                                     ; preds = %118, %111, %104
  %130 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %130, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %131 = load i8* %type, align 1
  %132 = sext i8 %131 to i32
  %133 = icmp eq i32 %132, 115
  br i1 %133, label %134, label %150

; <label>:134                                     ; preds = %129
  %135 = load i32* %argc, align 4
  %136 = load %struct.obj_struct** %argv, align 8
  %137 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 0
  %139 = load %struct.smpType_struct** %138, align 1
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 1
  %141 = load i8** %140, align 1
  %142 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %139, i8* %141, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 %135, %struct.obj_struct* %136)
  %143 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %143, i32 0, i32 0
  %145 = extractvalue { %struct.smpType_struct*, i8* } %142, 0
  store %struct.smpType_struct* %145, %struct.smpType_struct** %144, align 1
  %146 = getelementptr { %struct.smpType_struct*, i8* }* %143, i32 0, i32 1
  %147 = extractvalue { %struct.smpType_struct*, i8* } %142, 1
  store i8* %147, i8** %146, align 1
  %148 = bitcast %struct.obj_struct* %res to i8*
  %149 = bitcast %struct.obj_struct* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %148, i8* %149, i64 16, i32 8, i1 false)
  br label %204

; <label>:150                                     ; preds = %129
  %151 = load i8* %type, align 1
  %152 = sext i8 %151 to i32
  %153 = icmp eq i32 %152, 119
  br i1 %153, label %154, label %170

; <label>:154                                     ; preds = %150
  %155 = load i32* %argc, align 4
  %156 = load %struct.obj_struct** %argv, align 8
  %157 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %158 = getelementptr { %struct.smpType_struct*, i8* }* %157, i32 0, i32 0
  %159 = load %struct.smpType_struct** %158, align 1
  %160 = getelementptr { %struct.smpType_struct*, i8* }* %157, i32 0, i32 1
  %161 = load i8** %160, align 1
  %162 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %159, i8* %161, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), i32 %155, %struct.obj_struct* %156)
  %163 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %164 = getelementptr { %struct.smpType_struct*, i8* }* %163, i32 0, i32 0
  %165 = extractvalue { %struct.smpType_struct*, i8* } %162, 0
  store %struct.smpType_struct* %165, %struct.smpType_struct** %164, align 1
  %166 = getelementptr { %struct.smpType_struct*, i8* }* %163, i32 0, i32 1
  %167 = extractvalue { %struct.smpType_struct*, i8* } %162, 1
  store i8* %167, i8** %166, align 1
  %168 = bitcast %struct.obj_struct* %res to i8*
  %169 = bitcast %struct.obj_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %168, i8* %169, i64 16, i32 8, i1 false)
  br label %203

; <label>:170                                     ; preds = %150
  %171 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([22 x i8]* @.str120, i32 0, i32 0))
  %172 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %173 = getelementptr { %struct.smpType_struct*, i8* }* %172, i32 0, i32 0
  %174 = extractvalue { %struct.smpType_struct*, i8* } %171, 0
  store %struct.smpType_struct* %174, %struct.smpType_struct** %173, align 1
  %175 = getelementptr { %struct.smpType_struct*, i8* }* %172, i32 0, i32 1
  %176 = extractvalue { %struct.smpType_struct*, i8* } %171, 1
  store i8* %176, i8** %175, align 1
  %177 = load i8* %type, align 1
  %178 = sext i8 %177 to i32
  %179 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %180 = getelementptr { %struct.smpType_struct*, i8* }* %179, i32 0, i32 0
  %181 = load %struct.smpType_struct** %180, align 1
  %182 = getelementptr { %struct.smpType_struct*, i8* }* %179, i32 0, i32 1
  %183 = load i8** %182, align 1
  %184 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %181, i8* %183, i8* getelementptr inbounds ([26 x i8]* @.str164, i32 0, i32 0), i32 %178)
  %185 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %186 = getelementptr { %struct.smpType_struct*, i8* }* %185, i32 0, i32 0
  %187 = extractvalue { %struct.smpType_struct*, i8* } %184, 0
  store %struct.smpType_struct* %187, %struct.smpType_struct** %186, align 1
  %188 = getelementptr { %struct.smpType_struct*, i8* }* %185, i32 0, i32 1
  %189 = extractvalue { %struct.smpType_struct*, i8* } %184, 1
  store i8* %189, i8** %188, align 1
  %190 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %191 = getelementptr { %struct.smpType_struct*, i8* }* %190, i32 0, i32 0
  %192 = load %struct.smpType_struct** %191, align 1
  %193 = getelementptr { %struct.smpType_struct*, i8* }* %190, i32 0, i32 1
  %194 = load i8** %193, align 1
  %195 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %192, i8* %194)
  %196 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %197 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 0
  %198 = extractvalue { %struct.smpType_struct*, i8* } %195, 0
  store %struct.smpType_struct* %198, %struct.smpType_struct** %197, align 1
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 1
  %200 = extractvalue { %struct.smpType_struct*, i8* } %195, 1
  store i8* %200, i8** %199, align 1
  %201 = bitcast %struct.obj_struct* %res to i8*
  %202 = bitcast %struct.obj_struct* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %201, i8* %202, i64 16, i32 8, i1 false)
  br label %203

; <label>:203                                     ; preds = %170, %154
  br label %204

; <label>:204                                     ; preds = %203, %134
  %205 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %206 = getelementptr { %struct.smpType_struct*, i8* }* %205, i32 0, i32 0
  %207 = load %struct.smpType_struct** %206, align 1
  %208 = getelementptr { %struct.smpType_struct*, i8* }* %205, i32 0, i32 1
  %209 = load i8** %208, align 1
  %210 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %207, i8* %209)
  %211 = icmp ne i32 %210, 0
  br i1 %211, label %212, label %215

; <label>:212                                     ; preds = %204
  %213 = bitcast %struct.obj_struct* %1 to i8*
  %214 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %213, i8* %214, i64 16, i32 8, i1 false)
  br label %282

; <label>:215                                     ; preds = %204
  %216 = load i8** %ptr, align 8
  %217 = load i8* %216, align 1
  %218 = sext i8 %217 to i32
  %219 = icmp eq i32 %218, 116
  br i1 %219, label %220, label %273

; <label>:220                                     ; preds = %215
  %221 = load i8** %ptr, align 8
  %222 = getelementptr inbounds i8* %221, i32 1
  store i8* %222, i8** %ptr, align 8
  %223 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %224 = load %struct.smpType_struct** %223, align 8
  %225 = getelementptr inbounds %struct.smpType_struct* %224, i32 0, i32 0
  %226 = load i8** %225, align 8
  %227 = call i64 @strlen(i8* %226)
  %228 = add i64 %227, 2
  %229 = call i8* @llvm.stacksave()
  store i8* %229, i8** %12
  %230 = alloca i8, i64 %228, align 16
  %231 = getelementptr inbounds i8* %230, i64 0
  store i8 58, i8* %231, align 1
  %232 = getelementptr inbounds i8* %230, i64 1
  %233 = call i64 @llvm.objectsize.i64(i8* %232, i1 false)
  %234 = icmp ne i64 %233, -1
  br i1 %234, label %235, label %244

; <label>:235                                     ; preds = %220
  %236 = getelementptr inbounds i8* %230, i64 1
  %237 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %238 = load %struct.smpType_struct** %237, align 8
  %239 = getelementptr inbounds %struct.smpType_struct* %238, i32 0, i32 0
  %240 = load i8** %239, align 8
  %241 = getelementptr inbounds i8* %230, i64 1
  %242 = call i64 @llvm.objectsize.i64(i8* %241, i1 false)
  %243 = call i8* @__strcpy_chk(i8* %236, i8* %240, i64 %242) nounwind
  br label %251

; <label>:244                                     ; preds = %220
  %245 = getelementptr inbounds i8* %230, i64 1
  %246 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %247 = load %struct.smpType_struct** %246, align 8
  %248 = getelementptr inbounds %struct.smpType_struct* %247, i32 0, i32 0
  %249 = load i8** %248, align 8
  %250 = call i8* @__inline_strcpy_chk(i8* %245, i8* %249)
  br label %251

; <label>:251                                     ; preds = %244, %235
  %252 = phi i8* [ %243, %235 ], [ %250, %244 ]
  %253 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %230)
  %254 = bitcast %struct.obj_struct* %type_str to { %struct.smpType_struct*, i8* }*
  %255 = getelementptr { %struct.smpType_struct*, i8* }* %254, i32 0, i32 0
  %256 = extractvalue { %struct.smpType_struct*, i8* } %253, 0
  store %struct.smpType_struct* %256, %struct.smpType_struct** %255, align 1
  %257 = getelementptr { %struct.smpType_struct*, i8* }* %254, i32 0, i32 1
  %258 = extractvalue { %struct.smpType_struct*, i8* } %253, 1
  store i8* %258, i8** %257, align 1
  %259 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %260 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 0
  %261 = load %struct.smpType_struct** %260, align 1
  %262 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 1
  %263 = load i8** %262, align 1
  %264 = call { %struct.smpType_struct*, i8* } @smpString_add(%struct.smpType_struct* %261, i8* %263, i32 1, %struct.obj_struct* %type_str)
  %265 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %266 = getelementptr { %struct.smpType_struct*, i8* }* %265, i32 0, i32 0
  %267 = extractvalue { %struct.smpType_struct*, i8* } %264, 0
  store %struct.smpType_struct* %267, %struct.smpType_struct** %266, align 1
  %268 = getelementptr { %struct.smpType_struct*, i8* }* %265, i32 0, i32 1
  %269 = extractvalue { %struct.smpType_struct*, i8* } %264, 1
  store i8* %269, i8** %268, align 1
  %270 = bitcast %struct.obj_struct* %res to i8*
  %271 = bitcast %struct.obj_struct* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %270, i8* %271, i64 16, i32 8, i1 false)
  %272 = load i8** %12
  call void @llvm.stackrestore(i8* %272)
  br label %273

; <label>:273                                     ; preds = %251, %215
  %274 = load i8*** %3, align 8
  %275 = icmp ne i8** %274, null
  br i1 %275, label %276, label %279

; <label>:276                                     ; preds = %273
  %277 = load i8** %ptr, align 8
  %278 = load i8*** %3, align 8
  store i8* %277, i8** %278, align 8
  br label %279

; <label>:279                                     ; preds = %276, %273
  %280 = bitcast %struct.obj_struct* %1 to i8*
  %281 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %280, i8* %281, i64 16, i32 8, i1 false)
  br label %282

; <label>:282                                     ; preds = %279, %212, %21
  %283 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %284 = load { %struct.smpType_struct*, i8* }* %283, align 1
  ret { %struct.smpType_struct*, i8* } %284
}

define { %struct.smpType_struct*, i8* } @smpString_add(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %str1 = alloca %struct.smpstrstruct, align 8
  %str2 = alloca %struct.smpstrstruct, align 8
  %length = alloca i64, align 8
  %str = alloca i8*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 8
  %14 = call i32 @smpObject_instancep_c(%struct.smpType_struct* %11, %struct.smpType_struct* byval align 8 %13)
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %101

; <label>:16                                      ; preds = %0
  %17 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %18 = load i8** %17, align 8
  %19 = bitcast i8* %18 to %struct.smpstrstruct*
  %20 = bitcast %struct.smpstrstruct* %str1 to i8*
  %21 = bitcast %struct.smpstrstruct* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i32 8, i1 false)
  %22 = load %struct.obj_struct** %3, align 8
  %23 = getelementptr inbounds %struct.obj_struct* %22, i64 0
  %24 = getelementptr inbounds %struct.obj_struct* %23, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to %struct.smpstrstruct*
  %27 = bitcast %struct.smpstrstruct* %str2 to i8*
  %28 = bitcast %struct.smpstrstruct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  %29 = getelementptr inbounds %struct.smpstrstruct* %str1, i32 0, i32 1
  %30 = load i64* %29, align 8
  %31 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 1
  %32 = load i64* %31, align 8
  %33 = add i64 %30, %32
  store i64 %33, i64* %length, align 8
  %34 = load i64* %length, align 8
  %35 = add i64 %34, 1
  %36 = call noalias i8* @GC_malloc(i64 %35)
  store i8* %36, i8** %str, align 8
  %37 = load i8** %str, align 8
  %38 = call i64 @llvm.objectsize.i64(i8* %37, i1 false)
  %39 = icmp ne i64 %38, -1
  br i1 %39, label %40, label %50

; <label>:40                                      ; preds = %16
  %41 = load i8** %str, align 8
  %42 = getelementptr inbounds %struct.smpstrstruct* %str1, i32 0, i32 0
  %43 = load i8** %42, align 8
  %44 = getelementptr inbounds %struct.smpstrstruct* %str1, i32 0, i32 1
  %45 = load i64* %44, align 8
  %46 = mul i64 1, %45
  %47 = load i8** %str, align 8
  %48 = call i64 @llvm.objectsize.i64(i8* %47, i1 false)
  %49 = call i8* @__memcpy_chk(i8* %41, i8* %43, i64 %46, i64 %48) nounwind
  br label %58

; <label>:50                                      ; preds = %16
  %51 = load i8** %str, align 8
  %52 = getelementptr inbounds %struct.smpstrstruct* %str1, i32 0, i32 0
  %53 = load i8** %52, align 8
  %54 = getelementptr inbounds %struct.smpstrstruct* %str1, i32 0, i32 1
  %55 = load i64* %54, align 8
  %56 = mul i64 1, %55
  %57 = call i8* @__inline_memcpy_chk(i8* %51, i8* %53, i64 %56)
  br label %58

; <label>:58                                      ; preds = %50, %40
  %59 = phi i8* [ %49, %40 ], [ %57, %50 ]
  %60 = load i8** %str, align 8
  %61 = getelementptr inbounds %struct.smpstrstruct* %str1, i32 0, i32 1
  %62 = load i64* %61, align 8
  %63 = getelementptr inbounds i8* %60, i64 %62
  %64 = call i64 @llvm.objectsize.i64(i8* %63, i1 false)
  %65 = icmp ne i64 %64, -1
  br i1 %65, label %66, label %82

; <label>:66                                      ; preds = %58
  %67 = load i8** %str, align 8
  %68 = getelementptr inbounds %struct.smpstrstruct* %str1, i32 0, i32 1
  %69 = load i64* %68, align 8
  %70 = getelementptr inbounds i8* %67, i64 %69
  %71 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 0
  %72 = load i8** %71, align 8
  %73 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 1
  %74 = load i64* %73, align 8
  %75 = mul i64 1, %74
  %76 = load i8** %str, align 8
  %77 = getelementptr inbounds %struct.smpstrstruct* %str1, i32 0, i32 1
  %78 = load i64* %77, align 8
  %79 = getelementptr inbounds i8* %76, i64 %78
  %80 = call i64 @llvm.objectsize.i64(i8* %79, i1 false)
  %81 = call i8* @__memcpy_chk(i8* %70, i8* %72, i64 %75, i64 %80) nounwind
  br label %93

; <label>:82                                      ; preds = %58
  %83 = load i8** %str, align 8
  %84 = getelementptr inbounds %struct.smpstrstruct* %str1, i32 0, i32 1
  %85 = load i64* %84, align 8
  %86 = getelementptr inbounds i8* %83, i64 %85
  %87 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 0
  %88 = load i8** %87, align 8
  %89 = getelementptr inbounds %struct.smpstrstruct* %str2, i32 0, i32 1
  %90 = load i64* %89, align 8
  %91 = mul i64 1, %90
  %92 = call i8* @__inline_memcpy_chk(i8* %86, i8* %88, i64 %91)
  br label %93

; <label>:93                                      ; preds = %82, %66
  %94 = phi i8* [ %81, %66 ], [ %92, %82 ]
  %95 = call { %struct.smpType_struct*, i8* } @smpString_init_ref(i8** %str)
  %96 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  br label %128

; <label>:101                                     ; preds = %0
  %102 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %103 = load %struct.smpType_struct** %102, align 8
  %104 = load %struct.obj_struct** %3, align 8
  %105 = getelementptr inbounds %struct.obj_struct* %104, i64 0
  %106 = bitcast %struct.obj_struct* %105 to { %struct.smpType_struct*, i8* }*
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 0
  %108 = load %struct.smpType_struct** %107, align 1
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 1
  %110 = load i8** %109, align 1
  %111 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %103, %struct.smpType_struct* %108, i8* %110)
  %112 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %113 = getelementptr { %struct.smpType_struct*, i8* }* %112, i32 0, i32 0
  %114 = extractvalue { %struct.smpType_struct*, i8* } %111, 0
  store %struct.smpType_struct* %114, %struct.smpType_struct** %113, align 1
  %115 = getelementptr { %struct.smpType_struct*, i8* }* %112, i32 0, i32 1
  %116 = extractvalue { %struct.smpType_struct*, i8* } %111, 1
  store i8* %116, i8** %115, align 1
  %117 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 0
  %119 = load %struct.smpType_struct** %118, align 1
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 1
  %121 = load i8** %120, align 1
  %122 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %119, i8* %121)
  %123 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %124 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 0
  %125 = extractvalue { %struct.smpType_struct*, i8* } %122, 0
  store %struct.smpType_struct* %125, %struct.smpType_struct** %124, align 1
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 1
  %127 = extractvalue { %struct.smpType_struct*, i8* } %122, 1
  store i8* %127, i8** %126, align 1
  br label %128

; <label>:128                                     ; preds = %101, %93
  %129 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %130 = load { %struct.smpType_struct*, i8* }* %129, align 1
  ret { %struct.smpType_struct*, i8* } %130
}

define { %struct.smpType_struct*, i8* } @smpThrown_init(i32 %type, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %obj = alloca %struct.obj_struct, align 8
  %core = alloca %struct.smpThrown_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  store i32 %type, i32* %2, align 4
  %3 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %obj.coerce1, i8** %5
  %6 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %7 = load %struct.smpType_struct** %6, align 8
  %8 = getelementptr inbounds %struct.smpType_struct* %7, i32 0, i32 0
  %9 = load i8** %8, align 8
  %10 = call i32 @strcmp(i8* %9, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %15

; <label>:12                                      ; preds = %0
  %13 = bitcast %struct.obj_struct* %1 to i8*
  %14 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  br label %52

; <label>:15                                      ; preds = %0
  %16 = load i32* %2, align 4
  %17 = and i32 %16, 15
  %18 = shl i32 %17, 28
  %19 = ashr i32 %18, 28
  %20 = bitcast %struct.smpThrown_struct* %core to i32*
  %21 = and i32 %17, 15
  %22 = load i32* %20, align 8
  %23 = and i32 %22, -16
  %24 = or i32 %23, %21
  store i32 %24, i32* %20, align 8
  %25 = getelementptr inbounds %struct.smpThrown_struct* %core, i32 0, i32 2
  store i64 1, i64* %25, align 8
  %26 = getelementptr inbounds %struct.smpThrown_struct* %core, i32 0, i32 2
  %27 = load i64* %26, align 8
  %28 = mul i64 16, %27
  %29 = call noalias i8* @GC_malloc(i64 %28)
  %30 = bitcast i8* %29 to %struct.obj_struct*
  %31 = getelementptr inbounds %struct.smpThrown_struct* %core, i32 0, i32 1
  store %struct.obj_struct* %30, %struct.obj_struct** %31, align 8
  %32 = getelementptr inbounds %struct.smpThrown_struct* %core, i32 0, i32 1
  %33 = load %struct.obj_struct** %32, align 8
  %34 = getelementptr inbounds %struct.obj_struct* %33, i64 0
  %35 = bitcast %struct.obj_struct* %34 to i8*
  %36 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 16, i32 8, i1 false)
  %37 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_thrown)
  %38 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = extractvalue { %struct.smpType_struct*, i8* } %37, 0
  store %struct.smpType_struct* %40, %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = extractvalue { %struct.smpType_struct*, i8* } %37, 1
  store i8* %42, i8** %41, align 1
  %43 = call noalias i8* @GC_malloc(i64 24)
  %44 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %43, i8** %44, align 8
  %45 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %46 = load i8** %45, align 8
  %47 = bitcast i8* %46 to %struct.smpThrown_struct*
  %48 = bitcast %struct.smpThrown_struct* %47 to i8*
  %49 = bitcast %struct.smpThrown_struct* %core to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %48, i8* %49, i64 24, i32 8, i1 false)
  %50 = bitcast %struct.obj_struct* %1 to i8*
  %51 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 16, i32 8, i1 false)
  br label %52

; <label>:52                                      ; preds = %15, %12
  %53 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %54 = load { %struct.smpType_struct*, i8* }* %53, align 1
  ret { %struct.smpType_struct*, i8* } %54
}

define i32 @smpHash_create_class() nounwind {
  %hash = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([5 x i8]* @.str149, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 0)
  %14 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str149, i32 0, i32 0))
  %15 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpHash_add_now, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str40, i32 0, i32 0))
  %21 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = extractvalue { %struct.smpType_struct*, i8* } %20, 0
  store %struct.smpType_struct* %23, %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = extractvalue { %struct.smpType_struct*, i8* } %20, 1
  store i8* %25, i8** %24, align 1
  %26 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %28, i8* %30, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), %struct.smpType_struct* %33, i8* %35)
  %37 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = extractvalue { %struct.smpType_struct*, i8* } %36, 0
  store %struct.smpType_struct* %39, %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = extractvalue { %struct.smpType_struct*, i8* } %36, 1
  store i8* %41, i8** %40, align 1
  %42 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpHash_at, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %43 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = extractvalue { %struct.smpType_struct*, i8* } %42, 0
  store %struct.smpType_struct* %45, %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = extractvalue { %struct.smpType_struct*, i8* } %42, 1
  store i8* %47, i8** %46, align 1
  %48 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = load %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = load i8** %51, align 1
  %53 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = load %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = load i8** %56, align 1
  %58 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %50, i8* %52, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str96, i32 0, i32 0), %struct.smpType_struct* %55, i8* %57)
  %59 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = extractvalue { %struct.smpType_struct*, i8* } %58, 0
  store %struct.smpType_struct* %61, %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = extractvalue { %struct.smpType_struct*, i8* } %58, 1
  store i8* %63, i8** %62, align 1
  %64 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpHash_at_assign, i32 3, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %65 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = extractvalue { %struct.smpType_struct*, i8* } %64, 0
  store %struct.smpType_struct* %67, %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = extractvalue { %struct.smpType_struct*, i8* } %64, 1
  store i8* %69, i8** %68, align 1
  %70 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = load %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = load i8** %73, align 1
  %75 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 0
  %77 = load %struct.smpType_struct** %76, align 1
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 1
  %79 = load i8** %78, align 1
  %80 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %72, i8* %74, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str97, i32 0, i32 0), %struct.smpType_struct* %77, i8* %79)
  %81 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = extractvalue { %struct.smpType_struct*, i8* } %80, 0
  store %struct.smpType_struct* %83, %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = extractvalue { %struct.smpType_struct*, i8* } %80, 1
  store i8* %85, i8** %84, align 1
  %86 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpHash_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %87 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = extractvalue { %struct.smpType_struct*, i8* } %86, 0
  store %struct.smpType_struct* %89, %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = extractvalue { %struct.smpType_struct*, i8* } %86, 1
  store i8* %91, i8** %90, align 1
  %92 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 0
  %94 = load %struct.smpType_struct** %93, align 1
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 1
  %96 = load i8** %95, align 1
  %97 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 0
  %99 = load %struct.smpType_struct** %98, align 1
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %97, i32 0, i32 1
  %101 = load i8** %100, align 1
  %102 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %94, i8* %96, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %99, i8* %101)
  %103 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %103, i32 0, i32 0
  %105 = extractvalue { %struct.smpType_struct*, i8* } %102, 0
  store %struct.smpType_struct* %105, %struct.smpType_struct** %104, align 1
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %103, i32 0, i32 1
  %107 = extractvalue { %struct.smpType_struct*, i8* } %102, 1
  store i8* %107, i8** %106, align 1
  %108 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpHash_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %109 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 0
  %111 = extractvalue { %struct.smpType_struct*, i8* } %108, 0
  store %struct.smpType_struct* %111, %struct.smpType_struct** %110, align 1
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %109, i32 0, i32 1
  %113 = extractvalue { %struct.smpType_struct*, i8* } %108, 1
  store i8* %113, i8** %112, align 1
  %114 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %115 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 0
  %116 = load %struct.smpType_struct** %115, align 1
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 1
  %118 = load i8** %117, align 1
  %119 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %119, i32 0, i32 0
  %121 = load %struct.smpType_struct** %120, align 1
  %122 = getelementptr { %struct.smpType_struct*, i8* }* %119, i32 0, i32 1
  %123 = load i8** %122, align 1
  %124 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %116, i8* %118, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %121, i8* %123)
  %125 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 0
  %127 = extractvalue { %struct.smpType_struct*, i8* } %124, 0
  store %struct.smpType_struct* %127, %struct.smpType_struct** %126, align 1
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 1
  %129 = extractvalue { %struct.smpType_struct*, i8* } %124, 1
  store i8* %129, i8** %128, align 1
  %130 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpHash_write, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %131 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %132 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 0
  %133 = extractvalue { %struct.smpType_struct*, i8* } %130, 0
  store %struct.smpType_struct* %133, %struct.smpType_struct** %132, align 1
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 1
  %135 = extractvalue { %struct.smpType_struct*, i8* } %130, 1
  store i8* %135, i8** %134, align 1
  %136 = bitcast %struct.obj_struct* %hash to { %struct.smpType_struct*, i8* }*
  %137 = getelementptr { %struct.smpType_struct*, i8* }* %136, i32 0, i32 0
  %138 = load %struct.smpType_struct** %137, align 1
  %139 = getelementptr { %struct.smpType_struct*, i8* }* %136, i32 0, i32 1
  %140 = load i8** %139, align 1
  %141 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %142 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 0
  %143 = load %struct.smpType_struct** %142, align 1
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 1
  %145 = load i8** %144, align 1
  %146 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %138, i8* %140, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), %struct.smpType_struct* %143, i8* %145)
  %147 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %148 = getelementptr { %struct.smpType_struct*, i8* }* %147, i32 0, i32 0
  %149 = extractvalue { %struct.smpType_struct*, i8* } %146, 0
  store %struct.smpType_struct* %149, %struct.smpType_struct** %148, align 1
  %150 = getelementptr { %struct.smpType_struct*, i8* }* %147, i32 0, i32 1
  %151 = extractvalue { %struct.smpType_struct*, i8* } %146, 1
  store i8* %151, i8** %150, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpHash_at_assign(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %pair = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 1
  %11 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = load %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = load i8** %14, align 1
  %16 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = load i8** %19, align 1
  %21 = call { %struct.smpType_struct*, i8* } @smpPair_init(%struct.smpType_struct* %13, i8* %15, %struct.smpType_struct* %18, i8* %20)
  %22 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = extractvalue { %struct.smpType_struct*, i8* } %21, 0
  store %struct.smpType_struct* %24, %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = extractvalue { %struct.smpType_struct*, i8* } %21, 1
  store i8* %26, i8** %25, align 1
  %27 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = load %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = load i8** %30, align 1
  %32 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %29, i8* %31)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %37

; <label>:34                                      ; preds = %0
  %35 = bitcast %struct.obj_struct* %1 to i8*
  %36 = bitcast %struct.obj_struct* %pair to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 16, i32 8, i1 false)
  br label %49

; <label>:37                                      ; preds = %0
  %38 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = load %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = load i8** %41, align 1
  %43 = call { %struct.smpType_struct*, i8* } @smpHash_add_now(%struct.smpType_struct* %40, i8* %42, i32 1, %struct.obj_struct* %pair)
  %44 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 0
  %46 = extractvalue { %struct.smpType_struct*, i8* } %43, 0
  store %struct.smpType_struct* %46, %struct.smpType_struct** %45, align 1
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 1
  %48 = extractvalue { %struct.smpType_struct*, i8* } %43, 1
  store i8* %48, i8** %47, align 1
  br label %49

; <label>:49                                      ; preds = %37, %34
  %50 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %51 = load { %struct.smpType_struct*, i8* }* %50, align 1
  ret { %struct.smpType_struct*, i8* } %51
}

define { %struct.smpType_struct*, i8* } @smpHash_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpHash_struct*
  %10 = call i32 @smpHash_core_clear(%struct.smpHash_struct* %9)
  %11 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %12 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %13 = load { %struct.smpType_struct*, i8* }* %12, align 1
  ret { %struct.smpType_struct*, i8* } %13
}

define { %struct.smpType_struct*, i8* } @smpHash_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpHash_make_string(%struct.smpType_struct* %9, i8* %11, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0))
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpHash_write(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpHash_make_string(%struct.smpType_struct* %9, i8* %11, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0))
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define i32 @smpHash_core_add_now(%struct.smpHash_struct* %hash, %struct.smpType_struct* %pair.coerce0, i8* %pair.coerce1) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca %struct.smpHash_struct*, align 8
  %pair = alloca %struct.obj_struct, align 8
  %index = alloca i32, align 4
  %code = alloca i32, align 4
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %hash2 = alloca %struct.smpHash_struct, align 8
  store %struct.smpHash_struct* %hash, %struct.smpHash_struct** %2, align 8
  %5 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %pair.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %pair.coerce1, i8** %7
  store i32 0, i32* %index, align 4
  %8 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = load %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = load i8** %11, align 1
  %13 = call { %struct.smpType_struct*, i8* } @smpList_car(%struct.smpType_struct* %10, i8* %12, i32 0, %struct.obj_struct* null)
  %14 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = extractvalue { %struct.smpType_struct*, i8* } %13, 0
  store %struct.smpType_struct* %16, %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = extractvalue { %struct.smpType_struct*, i8* } %13, 1
  store i8* %18, i8** %17, align 1
  %19 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 0
  %21 = load %struct.smpType_struct** %20, align 1
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 1
  %23 = load i8** %22, align 1
  %24 = call i32 @obj_hash(i32* %index, %struct.smpType_struct* %21, i8* %23)
  store i32 %24, i32* %code, align 4
  %25 = load i32* %code, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %29

; <label>:27                                      ; preds = %0
  %28 = load i32* %code, align 4
  store i32 %28, i32* %1
  br label %126

; <label>:29                                      ; preds = %0
  %30 = load %struct.smpHash_struct** %2, align 8
  %31 = getelementptr inbounds %struct.smpHash_struct* %30, i32 0, i32 2
  %32 = load i64* %31, align 8
  %33 = load i32* %index, align 4
  %34 = sext i32 %33 to i64
  %35 = urem i64 %34, %32
  %36 = trunc i64 %35 to i32
  store i32 %36, i32* %index, align 4
  %37 = load i32* %index, align 4
  %38 = sext i32 %37 to i64
  %39 = load %struct.smpHash_struct** %2, align 8
  %40 = getelementptr inbounds %struct.smpHash_struct* %39, i32 0, i32 0
  %41 = load %struct.obj_struct** %40, align 8
  %42 = getelementptr inbounds %struct.obj_struct* %41, i64 %38
  %43 = getelementptr inbounds %struct.obj_struct* %42, i32 0, i32 1
  %44 = load i8** %43, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %59, label %46

; <label>:46                                      ; preds = %29
  %47 = load i32* %index, align 4
  %48 = sext i32 %47 to i64
  %49 = load %struct.smpHash_struct** %2, align 8
  %50 = getelementptr inbounds %struct.smpHash_struct* %49, i32 0, i32 0
  %51 = load %struct.obj_struct** %50, align 8
  %52 = getelementptr inbounds %struct.obj_struct* %51, i64 %48
  %53 = getelementptr inbounds %struct.obj_struct* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 8
  %55 = getelementptr inbounds %struct.smpType_struct* %54, i32 0, i32 1
  %56 = load i32* %55, align 4
  %57 = load i32* @smpType_id_nil, align 4
  %58 = icmp eq i32 %56, %57
  br i1 %58, label %59, label %71

; <label>:59                                      ; preds = %46, %29
  %60 = load %struct.smpHash_struct** %2, align 8
  %61 = getelementptr inbounds %struct.smpHash_struct* %60, i32 0, i32 3
  %62 = load i64* %61, align 8
  %63 = add i64 %62, 1
  store i64 %63, i64* %61, align 8
  %64 = load i32* %index, align 4
  %65 = sext i32 %64 to i64
  %66 = load %struct.smpHash_struct** %2, align 8
  %67 = getelementptr inbounds %struct.smpHash_struct* %66, i32 0, i32 0
  %68 = load %struct.obj_struct** %67, align 8
  %69 = getelementptr inbounds %struct.obj_struct* %68, i64 %65
  %70 = bitcast %struct.obj_struct* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %70, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %71

; <label>:71                                      ; preds = %59, %46
  %72 = load i32* %index, align 4
  %73 = sext i32 %72 to i64
  %74 = load %struct.smpHash_struct** %2, align 8
  %75 = getelementptr inbounds %struct.smpHash_struct* %74, i32 0, i32 0
  %76 = load %struct.obj_struct** %75, align 8
  %77 = getelementptr inbounds %struct.obj_struct* %76, i64 %73
  %78 = load i32* %index, align 4
  %79 = sext i32 %78 to i64
  %80 = load %struct.smpHash_struct** %2, align 8
  %81 = getelementptr inbounds %struct.smpHash_struct* %80, i32 0, i32 0
  %82 = load %struct.obj_struct** %81, align 8
  %83 = getelementptr inbounds %struct.obj_struct* %82, i64 %79
  %84 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = load %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = load i8** %87, align 1
  %89 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %86, i8* %88, i32 1, %struct.obj_struct* %83)
  %90 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = extractvalue { %struct.smpType_struct*, i8* } %89, 0
  store %struct.smpType_struct* %92, %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = extractvalue { %struct.smpType_struct*, i8* } %89, 1
  store i8* %94, i8** %93, align 1
  %95 = bitcast %struct.obj_struct* %77 to i8*
  %96 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %95, i8* %96, i64 16, i32 8, i1 false)
  %97 = load %struct.smpHash_struct** %2, align 8
  %98 = getelementptr inbounds %struct.smpHash_struct* %97, i32 0, i32 4
  %99 = load i64* %98, align 8
  %100 = add i64 %99, 1
  store i64 %100, i64* %98, align 8
  %101 = load %struct.smpHash_struct** %2, align 8
  %102 = getelementptr inbounds %struct.smpHash_struct* %101, i32 0, i32 3
  %103 = load i64* %102, align 8
  %104 = load %struct.smpHash_struct** %2, align 8
  %105 = getelementptr inbounds %struct.smpHash_struct* %104, i32 0, i32 2
  %106 = load i64* %105, align 8
  %107 = udiv i64 %103, %106
  %108 = uitofp i64 %107 to double
  %109 = fcmp ogt double %108, 7.500000e-01
  br i1 %109, label %110, label %125

; <label>:110                                     ; preds = %71
  %111 = load %struct.smpHash_struct** %2, align 8
  %112 = getelementptr inbounds %struct.smpHash_struct* %111, i32 0, i32 2
  %113 = load i64* %112, align 8
  %114 = uitofp i64 %113 to double
  %115 = fmul double %114, 7.500000e-01
  %116 = fdiv double %115, 2.500000e-01
  %117 = fptoui double %116 to i64
  call void @smpHash_core_init_capacity(%struct.smpHash_struct* sret %hash2, i64 %117)
  %118 = load %struct.smpHash_struct** %2, align 8
  %119 = call i32 @smpHash_core_copy(%struct.smpHash_struct* %hash2, %struct.smpHash_struct* %118)
  %120 = load %struct.smpHash_struct** %2, align 8
  %121 = call i32 @smpHash_core_clear(%struct.smpHash_struct* %120)
  %122 = load %struct.smpHash_struct** %2, align 8
  %123 = bitcast %struct.smpHash_struct* %122 to i8*
  %124 = bitcast %struct.smpHash_struct* %hash2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %123, i8* %124, i64 48, i32 8, i1 false)
  br label %125

; <label>:125                                     ; preds = %110, %71
  store i32 0, i32* %1
  br label %126

; <label>:126                                     ; preds = %125, %27
  %127 = load i32* %1
  ret i32 %127
}

define void @smpHash_core_init_capacity(%struct.smpHash_struct* noalias sret %agg.result, i64 %capacity) nounwind {
  %1 = alloca i64, align 8
  %hash = alloca %struct.smpHash_struct, align 8
  store i64 %capacity, i64* %1, align 8
  %2 = load i64* %1, align 8
  %3 = icmp ult i64 %2, 10
  br i1 %3, label %4, label %5

; <label>:4                                       ; preds = %0
  store i64 10, i64* %1, align 8
  br label %5

; <label>:5                                       ; preds = %4, %0
  %6 = load i64* %1, align 8
  %7 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 2
  store i64 %6, i64* %7, align 8
  %8 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 2
  %9 = load i64* %8, align 8
  %10 = mul i64 16, %9
  %11 = call noalias i8* @GC_malloc(i64 %10)
  %12 = bitcast i8* %11 to %struct.obj_struct*
  %13 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  store %struct.obj_struct* %12, %struct.obj_struct** %13, align 8
  %14 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %15 = load %struct.obj_struct** %14, align 8
  %16 = bitcast %struct.obj_struct* %15 to i8*
  %17 = call i64 @llvm.objectsize.i64(i8* %16, i1 false)
  %18 = icmp ne i64 %17, -1
  br i1 %18, label %19, label %31

; <label>:19                                      ; preds = %5
  %20 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %21 = load %struct.obj_struct** %20, align 8
  %22 = bitcast %struct.obj_struct* %21 to i8*
  %23 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 2
  %24 = load i64* %23, align 8
  %25 = mul i64 16, %24
  %26 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %27 = load %struct.obj_struct** %26, align 8
  %28 = bitcast %struct.obj_struct* %27 to i8*
  %29 = call i64 @llvm.objectsize.i64(i8* %28, i1 false)
  %30 = call i8* @__memset_chk(i8* %22, i32 0, i64 %25, i64 %29) nounwind
  br label %39

; <label>:31                                      ; preds = %5
  %32 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %33 = load %struct.obj_struct** %32, align 8
  %34 = bitcast %struct.obj_struct* %33 to i8*
  %35 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 2
  %36 = load i64* %35, align 8
  %37 = mul i64 16, %36
  %38 = call i8* @__inline_memset_chk(i8* %34, i32 0, i64 %37)
  br label %39

; <label>:39                                      ; preds = %31, %19
  %40 = phi i8* [ %30, %19 ], [ %38, %31 ]
  %41 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 1
  %42 = bitcast %struct.obj_struct* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %43 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 3
  store i64 0, i64* %43, align 8
  %44 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 4
  store i64 0, i64* %44, align 8
  %45 = bitcast %struct.smpHash_struct* %agg.result to i8*
  %46 = bitcast %struct.smpHash_struct* %hash to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %46, i64 48, i32 8, i1 false)
  ret void
}

define i32 @smpHash_core_copy(%struct.smpHash_struct* %res, %struct.smpHash_struct* %hash) nounwind {
  %1 = alloca %struct.smpHash_struct*, align 8
  %2 = alloca %struct.smpHash_struct*, align 8
  %i = alloca i64, align 8
  %list = alloca %struct.obj_struct*, align 8
  store %struct.smpHash_struct* %res, %struct.smpHash_struct** %1, align 8
  store %struct.smpHash_struct* %hash, %struct.smpHash_struct** %2, align 8
  store i64 0, i64* %i, align 8
  br label %3

; <label>:3                                       ; preds = %48, %0
  %4 = load i64* %i, align 8
  %5 = load %struct.smpHash_struct** %2, align 8
  %6 = getelementptr inbounds %struct.smpHash_struct* %5, i32 0, i32 2
  %7 = load i64* %6, align 8
  %8 = icmp ult i64 %4, %7
  br i1 %8, label %9, label %51

; <label>:9                                       ; preds = %3
  %10 = load i64* %i, align 8
  %11 = load %struct.smpHash_struct** %2, align 8
  %12 = getelementptr inbounds %struct.smpHash_struct* %11, i32 0, i32 0
  %13 = load %struct.obj_struct** %12, align 8
  %14 = getelementptr inbounds %struct.obj_struct* %13, i64 %10
  %15 = getelementptr inbounds %struct.obj_struct* %14, i32 0, i32 1
  %16 = load i8** %15, align 8
  %17 = icmp ne i8* %16, null
  br i1 %17, label %18, label %47

; <label>:18                                      ; preds = %9
  %19 = load i64* %i, align 8
  %20 = load %struct.smpHash_struct** %2, align 8
  %21 = getelementptr inbounds %struct.smpHash_struct* %20, i32 0, i32 0
  %22 = load %struct.obj_struct** %21, align 8
  %23 = getelementptr inbounds %struct.obj_struct* %22, i64 %19
  store %struct.obj_struct* %23, %struct.obj_struct** %list, align 8
  br label %24

; <label>:24                                      ; preds = %27, %18
  %25 = load %struct.obj_struct** %list, align 8
  %26 = icmp ne %struct.obj_struct* %25, null
  br i1 %26, label %27, label %46

; <label>:27                                      ; preds = %24
  %28 = load %struct.smpHash_struct** %1, align 8
  %29 = load %struct.obj_struct** %list, align 8
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to %struct.smpPair_struct*
  %33 = getelementptr inbounds %struct.smpPair_struct* %32, i32 0, i32 0
  %34 = bitcast %struct.obj_struct* %33 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = load i8** %37, align 1
  %39 = call i32 @smpHash_core_add_now(%struct.smpHash_struct* %28, %struct.smpType_struct* %36, i8* %38)
  %40 = load %struct.obj_struct** %list, align 8
  %41 = getelementptr inbounds %struct.obj_struct* %40, i32 0, i32 1
  %42 = load i8** %41, align 8
  %43 = bitcast i8* %42 to %struct.smpPair_struct*
  %44 = getelementptr inbounds %struct.smpPair_struct* %43, i32 0, i32 1
  %45 = load %struct.obj_struct** %44, align 8
  store %struct.obj_struct* %45, %struct.obj_struct** %list, align 8
  br label %24

; <label>:46                                      ; preds = %24
  br label %47

; <label>:47                                      ; preds = %46, %9
  br label %48

; <label>:48                                      ; preds = %47
  %49 = load i64* %i, align 8
  %50 = add i64 %49, 1
  store i64 %50, i64* %i, align 8
  br label %3

; <label>:51                                      ; preds = %3
  ret i32 0
}

define i32 @smpHash_core_clear(%struct.smpHash_struct* %hash) nounwind {
  %1 = alloca %struct.smpHash_struct*, align 8
  store %struct.smpHash_struct* %hash, %struct.smpHash_struct** %1, align 8
  %2 = load %struct.smpHash_struct** %1, align 8
  %3 = getelementptr inbounds %struct.smpHash_struct* %2, i32 0, i32 0
  %4 = load %struct.obj_struct** %3, align 8
  %5 = bitcast %struct.obj_struct* %4 to i8*
  call void @GC_free(i8* %5)
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpList_cdr(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %cdr = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpPair_struct*
  %10 = getelementptr inbounds %struct.smpPair_struct* %9, i32 0, i32 1
  %11 = load %struct.obj_struct** %10, align 8
  store %struct.obj_struct* %11, %struct.obj_struct** %cdr, align 8
  %12 = load %struct.obj_struct** %cdr, align 8
  %13 = icmp ne %struct.obj_struct* %12, null
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %0
  %15 = load %struct.obj_struct** %cdr, align 8
  %16 = bitcast %struct.obj_struct* %1 to i8*
  %17 = bitcast %struct.obj_struct* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 16, i32 8, i1 false)
  br label %20

; <label>:18                                      ; preds = %0
  %19 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %20

; <label>:20                                      ; preds = %18, %14
  %21 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %22 = load { %struct.smpType_struct*, i8* }* %21, align 1
  ret { %struct.smpType_struct*, i8* } %22
}

define { %struct.smpType_struct*, i8* } @smpHash_containsp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str9, i32 0, i32 0))
  %10 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %17, i8* %19, i8* getelementptr inbounds ([34 x i8]* @.str165, i32 0, i32 0))
  %21 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = extractvalue { %struct.smpType_struct*, i8* } %20, 0
  store %struct.smpType_struct* %23, %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = extractvalue { %struct.smpType_struct*, i8* } %20, 1
  store i8* %25, i8** %24, align 1
  %26 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %28, i8* %30)
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = load { %struct.smpType_struct*, i8* }* %37, align 1
  ret { %struct.smpType_struct*, i8* } %38
}

define { %struct.smpType_struct*, i8* } @smpHash_init() nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = call { %struct.smpType_struct*, i8* } @smpHash_init_capacity(i64 10)
  %3 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  %5 = extractvalue { %struct.smpType_struct*, i8* } %2, 0
  store %struct.smpType_struct* %5, %struct.smpType_struct** %4, align 1
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  %7 = extractvalue { %struct.smpType_struct*, i8* } %2, 1
  store i8* %7, i8** %6, align 1
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpHash_make_string(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i8* %fun) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %hash = alloca %struct.smpHash_struct, align 8
  %str = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %space = alloca %struct.obj_struct, align 8
  %arrow = alloca %struct.obj_struct, align 8
  %r_paren = alloca %struct.obj_struct, align 8
  %i = alloca i64, align 8
  %list = alloca %struct.obj_struct*, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %10
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  store i8* %obj.coerce1, i8** %11
  store i8* %fun, i8** %2, align 8
  %12 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %13 = load i8** %12, align 8
  %14 = bitcast i8* %13 to %struct.smpHash_struct*
  %15 = bitcast %struct.smpHash_struct* %hash to i8*
  %16 = bitcast %struct.smpHash_struct* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 48, i32 8, i1 false)
  %17 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %18 = load %struct.obj_struct** %17, align 8
  %19 = icmp ne %struct.obj_struct* %18, null
  br i1 %19, label %22, label %20

; <label>:20                                      ; preds = %0
  %21 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %185

; <label>:22                                      ; preds = %0
  %23 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([6 x i8]* @.str166, i32 0, i32 0))
  %24 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 0
  %26 = extractvalue { %struct.smpType_struct*, i8* } %23, 0
  store %struct.smpType_struct* %26, %struct.smpType_struct** %25, align 1
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 1
  %28 = extractvalue { %struct.smpType_struct*, i8* } %23, 1
  store i8* %28, i8** %27, align 1
  %29 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str115, i32 0, i32 0))
  %30 = bitcast %struct.obj_struct* %space to { %struct.smpType_struct*, i8* }*
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 0
  %32 = extractvalue { %struct.smpType_struct*, i8* } %29, 0
  store %struct.smpType_struct* %32, %struct.smpType_struct** %31, align 1
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 1
  %34 = extractvalue { %struct.smpType_struct*, i8* } %29, 1
  store i8* %34, i8** %33, align 1
  %35 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([3 x i8]* @.str50, i32 0, i32 0))
  %36 = bitcast %struct.obj_struct* %arrow to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  %41 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str116, i32 0, i32 0))
  %42 = bitcast %struct.obj_struct* %r_paren to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = extractvalue { %struct.smpType_struct*, i8* } %41, 0
  store %struct.smpType_struct* %44, %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = extractvalue { %struct.smpType_struct*, i8* } %41, 1
  store i8* %46, i8** %45, align 1
  store i64 0, i64* %i, align 8
  br label %47

; <label>:47                                      ; preds = %168, %22
  %48 = load i64* %i, align 8
  %49 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 2
  %50 = load i64* %49, align 8
  %51 = icmp ult i64 %48, %50
  br i1 %51, label %52, label %171

; <label>:52                                      ; preds = %47
  %53 = load i64* %i, align 8
  %54 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %55 = load %struct.obj_struct** %54, align 8
  %56 = getelementptr inbounds %struct.obj_struct* %55, i64 %53
  %57 = getelementptr inbounds %struct.obj_struct* %56, i32 0, i32 1
  %58 = load i8** %57, align 8
  %59 = icmp ne i8* %58, null
  br i1 %59, label %60, label %167

; <label>:60                                      ; preds = %52
  %61 = load i64* %i, align 8
  %62 = getelementptr inbounds %struct.smpHash_struct* %hash, i32 0, i32 0
  %63 = load %struct.obj_struct** %62, align 8
  %64 = getelementptr inbounds %struct.obj_struct* %63, i64 %61
  store %struct.obj_struct* %64, %struct.obj_struct** %list, align 8
  br label %65

; <label>:65                                      ; preds = %137, %60
  %66 = load %struct.obj_struct** %list, align 8
  %67 = icmp ne %struct.obj_struct* %66, null
  br i1 %67, label %68, label %166

; <label>:68                                      ; preds = %65
  %69 = load %struct.obj_struct** %list, align 8
  %70 = getelementptr inbounds %struct.obj_struct* %69, i32 0, i32 1
  %71 = load i8** %70, align 8
  %72 = bitcast i8* %71 to %struct.smpPair_struct*
  %73 = getelementptr inbounds %struct.smpPair_struct* %72, i32 0, i32 0
  %74 = load i8** %2, align 8
  %75 = bitcast %struct.obj_struct* %73 to { %struct.smpType_struct*, i8* }*
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 0
  %77 = load %struct.smpType_struct** %76, align 1
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 1
  %79 = load i8** %78, align 1
  %80 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %77, i8* %79, i8* %74, i32 0, %struct.obj_struct* null)
  %81 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = extractvalue { %struct.smpType_struct*, i8* } %80, 0
  store %struct.smpType_struct* %83, %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = extractvalue { %struct.smpType_struct*, i8* } %80, 1
  store i8* %85, i8** %84, align 1
  %86 = bitcast %struct.obj_struct* %str to i8*
  %87 = bitcast %struct.obj_struct* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 16, i32 8, i1 false)
  %88 = getelementptr inbounds %struct.obj_struct* %str, i32 0, i32 0
  %89 = load %struct.smpType_struct** %88, align 8
  %90 = getelementptr inbounds %struct.smpType_struct* %89, i32 0, i32 0
  %91 = load i8** %90, align 8
  %92 = call i32 @strcmp(i8* %91, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %97

; <label>:94                                      ; preds = %68
  %95 = bitcast %struct.obj_struct* %1 to i8*
  %96 = bitcast %struct.obj_struct* %str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %95, i8* %96, i64 16, i32 8, i1 false)
  br label %185

; <label>:97                                      ; preds = %68
  %98 = getelementptr inbounds %struct.obj_struct* %str, i32 0, i32 0
  %99 = load %struct.smpType_struct** %98, align 8
  %100 = getelementptr inbounds %struct.smpType_struct* %99, i32 0, i32 0
  %101 = load i8** %100, align 8
  %102 = call i32 @strcmp(i8* %101, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %136, label %104

; <label>:104                                     ; preds = %97
  %105 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %106 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 0
  %108 = extractvalue { %struct.smpType_struct*, i8* } %105, 0
  store %struct.smpType_struct* %108, %struct.smpType_struct** %107, align 1
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 1
  %110 = extractvalue { %struct.smpType_struct*, i8* } %105, 1
  store i8* %110, i8** %109, align 1
  %111 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %112 = load i8** %111, align 8
  %113 = bitcast i8* %112 to %struct.smpType_struct*
  %114 = bitcast %struct.obj_struct* %str to { %struct.smpType_struct*, i8* }*
  %115 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 0
  %116 = load %struct.smpType_struct** %115, align 1
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %114, i32 0, i32 1
  %118 = load i8** %117, align 1
  %119 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %113, %struct.smpType_struct* %116, i8* %118)
  %120 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %121 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 0
  %122 = extractvalue { %struct.smpType_struct*, i8* } %119, 0
  store %struct.smpType_struct* %122, %struct.smpType_struct** %121, align 1
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 1
  %124 = extractvalue { %struct.smpType_struct*, i8* } %119, 1
  store i8* %124, i8** %123, align 1
  %125 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 0
  %127 = load %struct.smpType_struct** %126, align 1
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 1
  %129 = load i8** %128, align 1
  %130 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %127, i8* %129)
  %131 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %132 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 0
  %133 = extractvalue { %struct.smpType_struct*, i8* } %130, 0
  store %struct.smpType_struct* %133, %struct.smpType_struct** %132, align 1
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 1
  %135 = extractvalue { %struct.smpType_struct*, i8* } %130, 1
  store i8* %135, i8** %134, align 1
  br label %185

; <label>:136                                     ; preds = %97
  br label %137

; <label>:137                                     ; preds = %136
  %138 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %139 = getelementptr { %struct.smpType_struct*, i8* }* %138, i32 0, i32 0
  %140 = load %struct.smpType_struct** %139, align 1
  %141 = getelementptr { %struct.smpType_struct*, i8* }* %138, i32 0, i32 1
  %142 = load i8** %141, align 1
  %143 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %140, i8* %142, i32 1, %struct.obj_struct* %space)
  %144 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %145 = getelementptr { %struct.smpType_struct*, i8* }* %144, i32 0, i32 0
  %146 = extractvalue { %struct.smpType_struct*, i8* } %143, 0
  store %struct.smpType_struct* %146, %struct.smpType_struct** %145, align 1
  %147 = getelementptr { %struct.smpType_struct*, i8* }* %144, i32 0, i32 1
  %148 = extractvalue { %struct.smpType_struct*, i8* } %143, 1
  store i8* %148, i8** %147, align 1
  %149 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %150 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 0
  %151 = load %struct.smpType_struct** %150, align 1
  %152 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 1
  %153 = load i8** %152, align 1
  %154 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %151, i8* %153, i32 1, %struct.obj_struct* %str)
  %155 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %156 = getelementptr { %struct.smpType_struct*, i8* }* %155, i32 0, i32 0
  %157 = extractvalue { %struct.smpType_struct*, i8* } %154, 0
  store %struct.smpType_struct* %157, %struct.smpType_struct** %156, align 1
  %158 = getelementptr { %struct.smpType_struct*, i8* }* %155, i32 0, i32 1
  %159 = extractvalue { %struct.smpType_struct*, i8* } %154, 1
  store i8* %159, i8** %158, align 1
  %160 = load %struct.obj_struct** %list, align 8
  %161 = getelementptr inbounds %struct.obj_struct* %160, i32 0, i32 1
  %162 = load i8** %161, align 8
  %163 = bitcast i8* %162 to %struct.smpPair_struct*
  %164 = getelementptr inbounds %struct.smpPair_struct* %163, i32 0, i32 1
  %165 = load %struct.obj_struct** %164, align 8
  store %struct.obj_struct* %165, %struct.obj_struct** %list, align 8
  br label %65

; <label>:166                                     ; preds = %65
  br label %167

; <label>:167                                     ; preds = %166, %52
  br label %168

; <label>:168                                     ; preds = %167
  %169 = load i64* %i, align 8
  %170 = add i64 %169, 1
  store i64 %170, i64* %i, align 8
  br label %47

; <label>:171                                     ; preds = %47
  %172 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %173 = getelementptr { %struct.smpType_struct*, i8* }* %172, i32 0, i32 0
  %174 = load %struct.smpType_struct** %173, align 1
  %175 = getelementptr { %struct.smpType_struct*, i8* }* %172, i32 0, i32 1
  %176 = load i8** %175, align 1
  %177 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %174, i8* %176, i32 1, %struct.obj_struct* %r_paren)
  %178 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %179 = getelementptr { %struct.smpType_struct*, i8* }* %178, i32 0, i32 0
  %180 = extractvalue { %struct.smpType_struct*, i8* } %177, 0
  store %struct.smpType_struct* %180, %struct.smpType_struct** %179, align 1
  %181 = getelementptr { %struct.smpType_struct*, i8* }* %178, i32 0, i32 1
  %182 = extractvalue { %struct.smpType_struct*, i8* } %177, 1
  store i8* %182, i8** %181, align 1
  %183 = bitcast %struct.obj_struct* %1 to i8*
  %184 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %183, i8* %184, i64 16, i32 8, i1 false)
  br label %185

; <label>:185                                     ; preds = %171, %104, %94, %20
  %186 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %187 = load { %struct.smpType_struct*, i8* }* %186, align 1
  ret { %struct.smpType_struct*, i8* } %187
}

define i32 @smpInteger_create_class() nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %intclass = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = alloca %struct.obj_struct, align 8
  %16 = alloca %struct.obj_struct, align 8
  %17 = alloca %struct.obj_struct, align 8
  %18 = alloca %struct.obj_struct, align 8
  %19 = alloca %struct.obj_struct, align 8
  %20 = alloca %struct.obj_struct, align 8
  %21 = alloca %struct.obj_struct, align 8
  %22 = alloca %struct.obj_struct, align 8
  %23 = alloca %struct.obj_struct, align 8
  %24 = alloca %struct.obj_struct, align 8
  %25 = alloca %struct.obj_struct, align 8
  %26 = alloca %struct.obj_struct, align 8
  %27 = alloca %struct.obj_struct, align 8
  %28 = alloca %struct.obj_struct, align 8
  %29 = alloca %struct.obj_struct, align 8
  %30 = alloca %struct.obj_struct, align 8
  %31 = alloca %struct.obj_struct, align 8
  %32 = alloca %struct.obj_struct, align 8
  %33 = alloca %struct.obj_struct, align 8
  %34 = alloca %struct.obj_struct, align 8
  %35 = alloca %struct.obj_struct, align 8
  %36 = alloca %struct.obj_struct, align 8
  %37 = alloca %struct.obj_struct, align 8
  %38 = alloca %struct.obj_struct, align 8
  %39 = alloca %struct.obj_struct, align 8
  %40 = alloca %struct.obj_struct, align 8
  %41 = alloca %struct.obj_struct, align 8
  %42 = alloca %struct.obj_struct, align 8
  %43 = alloca %struct.obj_struct, align 8
  %44 = alloca %struct.obj_struct, align 8
  %45 = alloca %struct.obj_struct, align 8
  %46 = alloca %struct.obj_struct, align 8
  %47 = alloca %struct.obj_struct, align 8
  %48 = alloca %struct.obj_struct, align 8
  %49 = alloca %struct.obj_struct, align 8
  %50 = alloca %struct.obj_struct, align 8
  %51 = alloca %struct.obj_struct, align 8
  %52 = alloca %struct.obj_struct, align 8
  %53 = alloca %struct.obj_struct, align 8
  %54 = alloca %struct.obj_struct, align 8
  %55 = alloca %struct.obj_struct, align 8
  %56 = alloca %struct.obj_struct, align 8
  call void @__gmp_set_memory_functions(i8* (i64)* @smp_malloc_fun, i8* (i8*, i64, i64)* @smp_realloc_size, void (i8*, i64)* @smp_free_size)
  %57 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  %63 = getelementptr inbounds %struct.obj_struct* %1, i32 0, i32 1
  %64 = load i8** %63, align 8
  %65 = bitcast i8* %64 to %struct.smpType_struct*
  %66 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), %struct.smpType_struct* %65, i32 0)
  %67 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %68 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 0
  %70 = extractvalue { %struct.smpType_struct*, i8* } %67, 0
  store %struct.smpType_struct* %70, %struct.smpType_struct** %69, align 1
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 1
  %72 = extractvalue { %struct.smpType_struct*, i8* } %67, 1
  store i8* %72, i8** %71, align 1
  %73 = getelementptr inbounds %struct.obj_struct* %intclass, i32 0, i32 1
  %74 = load i8** %73, align 8
  %75 = bitcast i8* %74 to %struct.smpType_struct*
  %76 = bitcast %struct.smpType_struct* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_int to i8*), i8* %76, i64 64, i32 8, i1 false)
  %77 = call { %struct.smpType_struct*, i8* } @minihash_get(%struct.minihash_struct* @smpType_ids, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %78 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = getelementptr inbounds %struct.obj_struct* %2, i32 0, i32 1
  %84 = load i8** %83, align 8
  %85 = ptrtoint i8* %84 to i64
  %86 = trunc i64 %85 to i32
  store i32 %86, i32* @smpType_id_int, align 4
  %87 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %88 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = extractvalue { %struct.smpType_struct*, i8* } %87, 0
  store %struct.smpType_struct* %90, %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = extractvalue { %struct.smpType_struct*, i8* } %87, 1
  store i8* %92, i8** %91, align 1
  %93 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %93, i32 0, i32 0
  %95 = load %struct.smpType_struct** %94, align 1
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %93, i32 0, i32 1
  %97 = load i8** %96, align 1
  %98 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 0
  %100 = load %struct.smpType_struct** %99, align 1
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 1
  %102 = load i8** %101, align 1
  %103 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %95, i8* %97, i32 64, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %100, i8* %102)
  %104 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 0
  %106 = extractvalue { %struct.smpType_struct*, i8* } %103, 0
  store %struct.smpType_struct* %106, %struct.smpType_struct** %105, align 1
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 1
  %108 = extractvalue { %struct.smpType_struct*, i8* } %103, 1
  store i8* %108, i8** %107, align 1
  %109 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_add, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %110 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 0
  %112 = extractvalue { %struct.smpType_struct*, i8* } %109, 0
  store %struct.smpType_struct* %112, %struct.smpType_struct** %111, align 1
  %113 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 1
  %114 = extractvalue { %struct.smpType_struct*, i8* } %109, 1
  store i8* %114, i8** %113, align 1
  %115 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 0
  %117 = load %struct.smpType_struct** %116, align 1
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 1
  %119 = load i8** %118, align 1
  %120 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %121 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 0
  %122 = load %struct.smpType_struct** %121, align 1
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 1
  %124 = load i8** %123, align 1
  %125 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %117, i8* %119, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str65, i32 0, i32 0), %struct.smpType_struct* %122, i8* %124)
  %126 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %127 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 0
  %128 = extractvalue { %struct.smpType_struct*, i8* } %125, 0
  store %struct.smpType_struct* %128, %struct.smpType_struct** %127, align 1
  %129 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 1
  %130 = extractvalue { %struct.smpType_struct*, i8* } %125, 1
  store i8* %130, i8** %129, align 1
  %131 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_sub, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %132 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %133 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 0
  %134 = extractvalue { %struct.smpType_struct*, i8* } %131, 0
  store %struct.smpType_struct* %134, %struct.smpType_struct** %133, align 1
  %135 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 1
  %136 = extractvalue { %struct.smpType_struct*, i8* } %131, 1
  store i8* %136, i8** %135, align 1
  %137 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 0
  %139 = load %struct.smpType_struct** %138, align 1
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 1
  %141 = load i8** %140, align 1
  %142 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %143 = getelementptr { %struct.smpType_struct*, i8* }* %142, i32 0, i32 0
  %144 = load %struct.smpType_struct** %143, align 1
  %145 = getelementptr { %struct.smpType_struct*, i8* }* %142, i32 0, i32 1
  %146 = load i8** %145, align 1
  %147 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %139, i8* %141, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str66, i32 0, i32 0), %struct.smpType_struct* %144, i8* %146)
  %148 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %149 = getelementptr { %struct.smpType_struct*, i8* }* %148, i32 0, i32 0
  %150 = extractvalue { %struct.smpType_struct*, i8* } %147, 0
  store %struct.smpType_struct* %150, %struct.smpType_struct** %149, align 1
  %151 = getelementptr { %struct.smpType_struct*, i8* }* %148, i32 0, i32 1
  %152 = extractvalue { %struct.smpType_struct*, i8* } %147, 1
  store i8* %152, i8** %151, align 1
  %153 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_mul, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %154 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 0
  %156 = extractvalue { %struct.smpType_struct*, i8* } %153, 0
  store %struct.smpType_struct* %156, %struct.smpType_struct** %155, align 1
  %157 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 1
  %158 = extractvalue { %struct.smpType_struct*, i8* } %153, 1
  store i8* %158, i8** %157, align 1
  %159 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %160 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 0
  %161 = load %struct.smpType_struct** %160, align 1
  %162 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 1
  %163 = load i8** %162, align 1
  %164 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %165 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 0
  %166 = load %struct.smpType_struct** %165, align 1
  %167 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 1
  %168 = load i8** %167, align 1
  %169 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %161, i8* %163, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str67, i32 0, i32 0), %struct.smpType_struct* %166, i8* %168)
  %170 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %171 = getelementptr { %struct.smpType_struct*, i8* }* %170, i32 0, i32 0
  %172 = extractvalue { %struct.smpType_struct*, i8* } %169, 0
  store %struct.smpType_struct* %172, %struct.smpType_struct** %171, align 1
  %173 = getelementptr { %struct.smpType_struct*, i8* }* %170, i32 0, i32 1
  %174 = extractvalue { %struct.smpType_struct*, i8* } %169, 1
  store i8* %174, i8** %173, align 1
  %175 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_div, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %176 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %177 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 0
  %178 = extractvalue { %struct.smpType_struct*, i8* } %175, 0
  store %struct.smpType_struct* %178, %struct.smpType_struct** %177, align 1
  %179 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 1
  %180 = extractvalue { %struct.smpType_struct*, i8* } %175, 1
  store i8* %180, i8** %179, align 1
  %181 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %182 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 0
  %183 = load %struct.smpType_struct** %182, align 1
  %184 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 1
  %185 = load i8** %184, align 1
  %186 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %187 = getelementptr { %struct.smpType_struct*, i8* }* %186, i32 0, i32 0
  %188 = load %struct.smpType_struct** %187, align 1
  %189 = getelementptr { %struct.smpType_struct*, i8* }* %186, i32 0, i32 1
  %190 = load i8** %189, align 1
  %191 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %183, i8* %185, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str68, i32 0, i32 0), %struct.smpType_struct* %188, i8* %190)
  %192 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %193 = getelementptr { %struct.smpType_struct*, i8* }* %192, i32 0, i32 0
  %194 = extractvalue { %struct.smpType_struct*, i8* } %191, 0
  store %struct.smpType_struct* %194, %struct.smpType_struct** %193, align 1
  %195 = getelementptr { %struct.smpType_struct*, i8* }* %192, i32 0, i32 1
  %196 = extractvalue { %struct.smpType_struct*, i8* } %191, 1
  store i8* %196, i8** %195, align 1
  %197 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_mod, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %198 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %198, i32 0, i32 0
  %200 = extractvalue { %struct.smpType_struct*, i8* } %197, 0
  store %struct.smpType_struct* %200, %struct.smpType_struct** %199, align 1
  %201 = getelementptr { %struct.smpType_struct*, i8* }* %198, i32 0, i32 1
  %202 = extractvalue { %struct.smpType_struct*, i8* } %197, 1
  store i8* %202, i8** %201, align 1
  %203 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %204 = getelementptr { %struct.smpType_struct*, i8* }* %203, i32 0, i32 0
  %205 = load %struct.smpType_struct** %204, align 1
  %206 = getelementptr { %struct.smpType_struct*, i8* }* %203, i32 0, i32 1
  %207 = load i8** %206, align 1
  %208 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %209 = getelementptr { %struct.smpType_struct*, i8* }* %208, i32 0, i32 0
  %210 = load %struct.smpType_struct** %209, align 1
  %211 = getelementptr { %struct.smpType_struct*, i8* }* %208, i32 0, i32 1
  %212 = load i8** %211, align 1
  %213 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %205, i8* %207, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str69, i32 0, i32 0), %struct.smpType_struct* %210, i8* %212)
  %214 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %215 = getelementptr { %struct.smpType_struct*, i8* }* %214, i32 0, i32 0
  %216 = extractvalue { %struct.smpType_struct*, i8* } %213, 0
  store %struct.smpType_struct* %216, %struct.smpType_struct** %215, align 1
  %217 = getelementptr { %struct.smpType_struct*, i8* }* %214, i32 0, i32 1
  %218 = extractvalue { %struct.smpType_struct*, i8* } %213, 1
  store i8* %218, i8** %217, align 1
  %219 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_mod, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %220 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %221 = getelementptr { %struct.smpType_struct*, i8* }* %220, i32 0, i32 0
  %222 = extractvalue { %struct.smpType_struct*, i8* } %219, 0
  store %struct.smpType_struct* %222, %struct.smpType_struct** %221, align 1
  %223 = getelementptr { %struct.smpType_struct*, i8* }* %220, i32 0, i32 1
  %224 = extractvalue { %struct.smpType_struct*, i8* } %219, 1
  store i8* %224, i8** %223, align 1
  %225 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %226 = getelementptr { %struct.smpType_struct*, i8* }* %225, i32 0, i32 0
  %227 = load %struct.smpType_struct** %226, align 1
  %228 = getelementptr { %struct.smpType_struct*, i8* }* %225, i32 0, i32 1
  %229 = load i8** %228, align 1
  %230 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %231 = getelementptr { %struct.smpType_struct*, i8* }* %230, i32 0, i32 0
  %232 = load %struct.smpType_struct** %231, align 1
  %233 = getelementptr { %struct.smpType_struct*, i8* }* %230, i32 0, i32 1
  %234 = load i8** %233, align 1
  %235 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %227, i8* %229, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str167, i32 0, i32 0), %struct.smpType_struct* %232, i8* %234)
  %236 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %237 = getelementptr { %struct.smpType_struct*, i8* }* %236, i32 0, i32 0
  %238 = extractvalue { %struct.smpType_struct*, i8* } %235, 0
  store %struct.smpType_struct* %238, %struct.smpType_struct** %237, align 1
  %239 = getelementptr { %struct.smpType_struct*, i8* }* %236, i32 0, i32 1
  %240 = extractvalue { %struct.smpType_struct*, i8* } %235, 1
  store i8* %240, i8** %239, align 1
  %241 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_pow, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %242 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %243 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 0
  %244 = extractvalue { %struct.smpType_struct*, i8* } %241, 0
  store %struct.smpType_struct* %244, %struct.smpType_struct** %243, align 1
  %245 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 1
  %246 = extractvalue { %struct.smpType_struct*, i8* } %241, 1
  store i8* %246, i8** %245, align 1
  %247 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %248 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 0
  %249 = load %struct.smpType_struct** %248, align 1
  %250 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 1
  %251 = load i8** %250, align 1
  %252 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %253 = getelementptr { %struct.smpType_struct*, i8* }* %252, i32 0, i32 0
  %254 = load %struct.smpType_struct** %253, align 1
  %255 = getelementptr { %struct.smpType_struct*, i8* }* %252, i32 0, i32 1
  %256 = load i8** %255, align 1
  %257 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %249, i8* %251, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str129, i32 0, i32 0), %struct.smpType_struct* %254, i8* %256)
  %258 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %259 = getelementptr { %struct.smpType_struct*, i8* }* %258, i32 0, i32 0
  %260 = extractvalue { %struct.smpType_struct*, i8* } %257, 0
  store %struct.smpType_struct* %260, %struct.smpType_struct** %259, align 1
  %261 = getelementptr { %struct.smpType_struct*, i8* }* %258, i32 0, i32 1
  %262 = extractvalue { %struct.smpType_struct*, i8* } %257, 1
  store i8* %262, i8** %261, align 1
  %263 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_shl, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %264 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %265 = getelementptr { %struct.smpType_struct*, i8* }* %264, i32 0, i32 0
  %266 = extractvalue { %struct.smpType_struct*, i8* } %263, 0
  store %struct.smpType_struct* %266, %struct.smpType_struct** %265, align 1
  %267 = getelementptr { %struct.smpType_struct*, i8* }* %264, i32 0, i32 1
  %268 = extractvalue { %struct.smpType_struct*, i8* } %263, 1
  store i8* %268, i8** %267, align 1
  %269 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %270 = getelementptr { %struct.smpType_struct*, i8* }* %269, i32 0, i32 0
  %271 = load %struct.smpType_struct** %270, align 1
  %272 = getelementptr { %struct.smpType_struct*, i8* }* %269, i32 0, i32 1
  %273 = load i8** %272, align 1
  %274 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %275 = getelementptr { %struct.smpType_struct*, i8* }* %274, i32 0, i32 0
  %276 = load %struct.smpType_struct** %275, align 1
  %277 = getelementptr { %struct.smpType_struct*, i8* }* %274, i32 0, i32 1
  %278 = load i8** %277, align 1
  %279 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %271, i8* %273, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str70, i32 0, i32 0), %struct.smpType_struct* %276, i8* %278)
  %280 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %281 = getelementptr { %struct.smpType_struct*, i8* }* %280, i32 0, i32 0
  %282 = extractvalue { %struct.smpType_struct*, i8* } %279, 0
  store %struct.smpType_struct* %282, %struct.smpType_struct** %281, align 1
  %283 = getelementptr { %struct.smpType_struct*, i8* }* %280, i32 0, i32 1
  %284 = extractvalue { %struct.smpType_struct*, i8* } %279, 1
  store i8* %284, i8** %283, align 1
  %285 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_shr, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %286 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %287 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 0
  %288 = extractvalue { %struct.smpType_struct*, i8* } %285, 0
  store %struct.smpType_struct* %288, %struct.smpType_struct** %287, align 1
  %289 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 1
  %290 = extractvalue { %struct.smpType_struct*, i8* } %285, 1
  store i8* %290, i8** %289, align 1
  %291 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %292 = getelementptr { %struct.smpType_struct*, i8* }* %291, i32 0, i32 0
  %293 = load %struct.smpType_struct** %292, align 1
  %294 = getelementptr { %struct.smpType_struct*, i8* }* %291, i32 0, i32 1
  %295 = load i8** %294, align 1
  %296 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %297 = getelementptr { %struct.smpType_struct*, i8* }* %296, i32 0, i32 0
  %298 = load %struct.smpType_struct** %297, align 1
  %299 = getelementptr { %struct.smpType_struct*, i8* }* %296, i32 0, i32 1
  %300 = load i8** %299, align 1
  %301 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %293, i8* %295, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str71, i32 0, i32 0), %struct.smpType_struct* %298, i8* %300)
  %302 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %303 = getelementptr { %struct.smpType_struct*, i8* }* %302, i32 0, i32 0
  %304 = extractvalue { %struct.smpType_struct*, i8* } %301, 0
  store %struct.smpType_struct* %304, %struct.smpType_struct** %303, align 1
  %305 = getelementptr { %struct.smpType_struct*, i8* }* %302, i32 0, i32 1
  %306 = extractvalue { %struct.smpType_struct*, i8* } %301, 1
  store i8* %306, i8** %305, align 1
  %307 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_and, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %308 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %309 = getelementptr { %struct.smpType_struct*, i8* }* %308, i32 0, i32 0
  %310 = extractvalue { %struct.smpType_struct*, i8* } %307, 0
  store %struct.smpType_struct* %310, %struct.smpType_struct** %309, align 1
  %311 = getelementptr { %struct.smpType_struct*, i8* }* %308, i32 0, i32 1
  %312 = extractvalue { %struct.smpType_struct*, i8* } %307, 1
  store i8* %312, i8** %311, align 1
  %313 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %314 = getelementptr { %struct.smpType_struct*, i8* }* %313, i32 0, i32 0
  %315 = load %struct.smpType_struct** %314, align 1
  %316 = getelementptr { %struct.smpType_struct*, i8* }* %313, i32 0, i32 1
  %317 = load i8** %316, align 1
  %318 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %319 = getelementptr { %struct.smpType_struct*, i8* }* %318, i32 0, i32 0
  %320 = load %struct.smpType_struct** %319, align 1
  %321 = getelementptr { %struct.smpType_struct*, i8* }* %318, i32 0, i32 1
  %322 = load i8** %321, align 1
  %323 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %315, i8* %317, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str72, i32 0, i32 0), %struct.smpType_struct* %320, i8* %322)
  %324 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %325 = getelementptr { %struct.smpType_struct*, i8* }* %324, i32 0, i32 0
  %326 = extractvalue { %struct.smpType_struct*, i8* } %323, 0
  store %struct.smpType_struct* %326, %struct.smpType_struct** %325, align 1
  %327 = getelementptr { %struct.smpType_struct*, i8* }* %324, i32 0, i32 1
  %328 = extractvalue { %struct.smpType_struct*, i8* } %323, 1
  store i8* %328, i8** %327, align 1
  %329 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_ior, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %330 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %331 = getelementptr { %struct.smpType_struct*, i8* }* %330, i32 0, i32 0
  %332 = extractvalue { %struct.smpType_struct*, i8* } %329, 0
  store %struct.smpType_struct* %332, %struct.smpType_struct** %331, align 1
  %333 = getelementptr { %struct.smpType_struct*, i8* }* %330, i32 0, i32 1
  %334 = extractvalue { %struct.smpType_struct*, i8* } %329, 1
  store i8* %334, i8** %333, align 1
  %335 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %336 = getelementptr { %struct.smpType_struct*, i8* }* %335, i32 0, i32 0
  %337 = load %struct.smpType_struct** %336, align 1
  %338 = getelementptr { %struct.smpType_struct*, i8* }* %335, i32 0, i32 1
  %339 = load i8** %338, align 1
  %340 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %341 = getelementptr { %struct.smpType_struct*, i8* }* %340, i32 0, i32 0
  %342 = load %struct.smpType_struct** %341, align 1
  %343 = getelementptr { %struct.smpType_struct*, i8* }* %340, i32 0, i32 1
  %344 = load i8** %343, align 1
  %345 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %337, i8* %339, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str73, i32 0, i32 0), %struct.smpType_struct* %342, i8* %344)
  %346 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %347 = getelementptr { %struct.smpType_struct*, i8* }* %346, i32 0, i32 0
  %348 = extractvalue { %struct.smpType_struct*, i8* } %345, 0
  store %struct.smpType_struct* %348, %struct.smpType_struct** %347, align 1
  %349 = getelementptr { %struct.smpType_struct*, i8* }* %346, i32 0, i32 1
  %350 = extractvalue { %struct.smpType_struct*, i8* } %345, 1
  store i8* %350, i8** %349, align 1
  %351 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_xor, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %352 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %353 = getelementptr { %struct.smpType_struct*, i8* }* %352, i32 0, i32 0
  %354 = extractvalue { %struct.smpType_struct*, i8* } %351, 0
  store %struct.smpType_struct* %354, %struct.smpType_struct** %353, align 1
  %355 = getelementptr { %struct.smpType_struct*, i8* }* %352, i32 0, i32 1
  %356 = extractvalue { %struct.smpType_struct*, i8* } %351, 1
  store i8* %356, i8** %355, align 1
  %357 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %358 = getelementptr { %struct.smpType_struct*, i8* }* %357, i32 0, i32 0
  %359 = load %struct.smpType_struct** %358, align 1
  %360 = getelementptr { %struct.smpType_struct*, i8* }* %357, i32 0, i32 1
  %361 = load i8** %360, align 1
  %362 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %363 = getelementptr { %struct.smpType_struct*, i8* }* %362, i32 0, i32 0
  %364 = load %struct.smpType_struct** %363, align 1
  %365 = getelementptr { %struct.smpType_struct*, i8* }* %362, i32 0, i32 1
  %366 = load i8** %365, align 1
  %367 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %359, i8* %361, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str74, i32 0, i32 0), %struct.smpType_struct* %364, i8* %366)
  %368 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %369 = getelementptr { %struct.smpType_struct*, i8* }* %368, i32 0, i32 0
  %370 = extractvalue { %struct.smpType_struct*, i8* } %367, 0
  store %struct.smpType_struct* %370, %struct.smpType_struct** %369, align 1
  %371 = getelementptr { %struct.smpType_struct*, i8* }* %368, i32 0, i32 1
  %372 = extractvalue { %struct.smpType_struct*, i8* } %367, 1
  store i8* %372, i8** %371, align 1
  %373 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_inc, i32 1, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %374 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %375 = getelementptr { %struct.smpType_struct*, i8* }* %374, i32 0, i32 0
  %376 = extractvalue { %struct.smpType_struct*, i8* } %373, 0
  store %struct.smpType_struct* %376, %struct.smpType_struct** %375, align 1
  %377 = getelementptr { %struct.smpType_struct*, i8* }* %374, i32 0, i32 1
  %378 = extractvalue { %struct.smpType_struct*, i8* } %373, 1
  store i8* %378, i8** %377, align 1
  %379 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %380 = getelementptr { %struct.smpType_struct*, i8* }* %379, i32 0, i32 0
  %381 = load %struct.smpType_struct** %380, align 1
  %382 = getelementptr { %struct.smpType_struct*, i8* }* %379, i32 0, i32 1
  %383 = load i8** %382, align 1
  %384 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %385 = getelementptr { %struct.smpType_struct*, i8* }* %384, i32 0, i32 0
  %386 = load %struct.smpType_struct** %385, align 1
  %387 = getelementptr { %struct.smpType_struct*, i8* }* %384, i32 0, i32 1
  %388 = load i8** %387, align 1
  %389 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %381, i8* %383, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str168, i32 0, i32 0), %struct.smpType_struct* %386, i8* %388)
  %390 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %391 = getelementptr { %struct.smpType_struct*, i8* }* %390, i32 0, i32 0
  %392 = extractvalue { %struct.smpType_struct*, i8* } %389, 0
  store %struct.smpType_struct* %392, %struct.smpType_struct** %391, align 1
  %393 = getelementptr { %struct.smpType_struct*, i8* }* %390, i32 0, i32 1
  %394 = extractvalue { %struct.smpType_struct*, i8* } %389, 1
  store i8* %394, i8** %393, align 1
  %395 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_dec, i32 1, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %396 = bitcast %struct.obj_struct* %31 to { %struct.smpType_struct*, i8* }*
  %397 = getelementptr { %struct.smpType_struct*, i8* }* %396, i32 0, i32 0
  %398 = extractvalue { %struct.smpType_struct*, i8* } %395, 0
  store %struct.smpType_struct* %398, %struct.smpType_struct** %397, align 1
  %399 = getelementptr { %struct.smpType_struct*, i8* }* %396, i32 0, i32 1
  %400 = extractvalue { %struct.smpType_struct*, i8* } %395, 1
  store i8* %400, i8** %399, align 1
  %401 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %402 = getelementptr { %struct.smpType_struct*, i8* }* %401, i32 0, i32 0
  %403 = load %struct.smpType_struct** %402, align 1
  %404 = getelementptr { %struct.smpType_struct*, i8* }* %401, i32 0, i32 1
  %405 = load i8** %404, align 1
  %406 = bitcast %struct.obj_struct* %31 to { %struct.smpType_struct*, i8* }*
  %407 = getelementptr { %struct.smpType_struct*, i8* }* %406, i32 0, i32 0
  %408 = load %struct.smpType_struct** %407, align 1
  %409 = getelementptr { %struct.smpType_struct*, i8* }* %406, i32 0, i32 1
  %410 = load i8** %409, align 1
  %411 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %403, i8* %405, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str169, i32 0, i32 0), %struct.smpType_struct* %408, i8* %410)
  %412 = bitcast %struct.obj_struct* %32 to { %struct.smpType_struct*, i8* }*
  %413 = getelementptr { %struct.smpType_struct*, i8* }* %412, i32 0, i32 0
  %414 = extractvalue { %struct.smpType_struct*, i8* } %411, 0
  store %struct.smpType_struct* %414, %struct.smpType_struct** %413, align 1
  %415 = getelementptr { %struct.smpType_struct*, i8* }* %412, i32 0, i32 1
  %416 = extractvalue { %struct.smpType_struct*, i8* } %411, 1
  store i8* %416, i8** %415, align 1
  %417 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_cmp, i32 2, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %418 = bitcast %struct.obj_struct* %33 to { %struct.smpType_struct*, i8* }*
  %419 = getelementptr { %struct.smpType_struct*, i8* }* %418, i32 0, i32 0
  %420 = extractvalue { %struct.smpType_struct*, i8* } %417, 0
  store %struct.smpType_struct* %420, %struct.smpType_struct** %419, align 1
  %421 = getelementptr { %struct.smpType_struct*, i8* }* %418, i32 0, i32 1
  %422 = extractvalue { %struct.smpType_struct*, i8* } %417, 1
  store i8* %422, i8** %421, align 1
  %423 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %424 = getelementptr { %struct.smpType_struct*, i8* }* %423, i32 0, i32 0
  %425 = load %struct.smpType_struct** %424, align 1
  %426 = getelementptr { %struct.smpType_struct*, i8* }* %423, i32 0, i32 1
  %427 = load i8** %426, align 1
  %428 = bitcast %struct.obj_struct* %33 to { %struct.smpType_struct*, i8* }*
  %429 = getelementptr { %struct.smpType_struct*, i8* }* %428, i32 0, i32 0
  %430 = load %struct.smpType_struct** %429, align 1
  %431 = getelementptr { %struct.smpType_struct*, i8* }* %428, i32 0, i32 1
  %432 = load i8** %431, align 1
  %433 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %425, i8* %427, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str19, i32 0, i32 0), %struct.smpType_struct* %430, i8* %432)
  %434 = bitcast %struct.obj_struct* %34 to { %struct.smpType_struct*, i8* }*
  %435 = getelementptr { %struct.smpType_struct*, i8* }* %434, i32 0, i32 0
  %436 = extractvalue { %struct.smpType_struct*, i8* } %433, 0
  store %struct.smpType_struct* %436, %struct.smpType_struct** %435, align 1
  %437 = getelementptr { %struct.smpType_struct*, i8* }* %434, i32 0, i32 1
  %438 = extractvalue { %struct.smpType_struct*, i8* } %433, 1
  store i8* %438, i8** %437, align 1
  %439 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_equalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %440 = bitcast %struct.obj_struct* %35 to { %struct.smpType_struct*, i8* }*
  %441 = getelementptr { %struct.smpType_struct*, i8* }* %440, i32 0, i32 0
  %442 = extractvalue { %struct.smpType_struct*, i8* } %439, 0
  store %struct.smpType_struct* %442, %struct.smpType_struct** %441, align 1
  %443 = getelementptr { %struct.smpType_struct*, i8* }* %440, i32 0, i32 1
  %444 = extractvalue { %struct.smpType_struct*, i8* } %439, 1
  store i8* %444, i8** %443, align 1
  %445 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %446 = getelementptr { %struct.smpType_struct*, i8* }* %445, i32 0, i32 0
  %447 = load %struct.smpType_struct** %446, align 1
  %448 = getelementptr { %struct.smpType_struct*, i8* }* %445, i32 0, i32 1
  %449 = load i8** %448, align 1
  %450 = bitcast %struct.obj_struct* %35 to { %struct.smpType_struct*, i8* }*
  %451 = getelementptr { %struct.smpType_struct*, i8* }* %450, i32 0, i32 0
  %452 = load %struct.smpType_struct** %451, align 1
  %453 = getelementptr { %struct.smpType_struct*, i8* }* %450, i32 0, i32 1
  %454 = load i8** %453, align 1
  %455 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %447, i8* %449, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str49, i32 0, i32 0), %struct.smpType_struct* %452, i8* %454)
  %456 = bitcast %struct.obj_struct* %36 to { %struct.smpType_struct*, i8* }*
  %457 = getelementptr { %struct.smpType_struct*, i8* }* %456, i32 0, i32 0
  %458 = extractvalue { %struct.smpType_struct*, i8* } %455, 0
  store %struct.smpType_struct* %458, %struct.smpType_struct** %457, align 1
  %459 = getelementptr { %struct.smpType_struct*, i8* }* %456, i32 0, i32 1
  %460 = extractvalue { %struct.smpType_struct*, i8* } %455, 1
  store i8* %460, i8** %459, align 1
  %461 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_nequalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %462 = bitcast %struct.obj_struct* %37 to { %struct.smpType_struct*, i8* }*
  %463 = getelementptr { %struct.smpType_struct*, i8* }* %462, i32 0, i32 0
  %464 = extractvalue { %struct.smpType_struct*, i8* } %461, 0
  store %struct.smpType_struct* %464, %struct.smpType_struct** %463, align 1
  %465 = getelementptr { %struct.smpType_struct*, i8* }* %462, i32 0, i32 1
  %466 = extractvalue { %struct.smpType_struct*, i8* } %461, 1
  store i8* %466, i8** %465, align 1
  %467 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %468 = getelementptr { %struct.smpType_struct*, i8* }* %467, i32 0, i32 0
  %469 = load %struct.smpType_struct** %468, align 1
  %470 = getelementptr { %struct.smpType_struct*, i8* }* %467, i32 0, i32 1
  %471 = load i8** %470, align 1
  %472 = bitcast %struct.obj_struct* %37 to { %struct.smpType_struct*, i8* }*
  %473 = getelementptr { %struct.smpType_struct*, i8* }* %472, i32 0, i32 0
  %474 = load %struct.smpType_struct** %473, align 1
  %475 = getelementptr { %struct.smpType_struct*, i8* }* %472, i32 0, i32 1
  %476 = load i8** %475, align 1
  %477 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %469, i8* %471, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str130, i32 0, i32 0), %struct.smpType_struct* %474, i8* %476)
  %478 = bitcast %struct.obj_struct* %38 to { %struct.smpType_struct*, i8* }*
  %479 = getelementptr { %struct.smpType_struct*, i8* }* %478, i32 0, i32 0
  %480 = extractvalue { %struct.smpType_struct*, i8* } %477, 0
  store %struct.smpType_struct* %480, %struct.smpType_struct** %479, align 1
  %481 = getelementptr { %struct.smpType_struct*, i8* }* %478, i32 0, i32 1
  %482 = extractvalue { %struct.smpType_struct*, i8* } %477, 1
  store i8* %482, i8** %481, align 1
  %483 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_lt, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %484 = bitcast %struct.obj_struct* %39 to { %struct.smpType_struct*, i8* }*
  %485 = getelementptr { %struct.smpType_struct*, i8* }* %484, i32 0, i32 0
  %486 = extractvalue { %struct.smpType_struct*, i8* } %483, 0
  store %struct.smpType_struct* %486, %struct.smpType_struct** %485, align 1
  %487 = getelementptr { %struct.smpType_struct*, i8* }* %484, i32 0, i32 1
  %488 = extractvalue { %struct.smpType_struct*, i8* } %483, 1
  store i8* %488, i8** %487, align 1
  %489 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %490 = getelementptr { %struct.smpType_struct*, i8* }* %489, i32 0, i32 0
  %491 = load %struct.smpType_struct** %490, align 1
  %492 = getelementptr { %struct.smpType_struct*, i8* }* %489, i32 0, i32 1
  %493 = load i8** %492, align 1
  %494 = bitcast %struct.obj_struct* %39 to { %struct.smpType_struct*, i8* }*
  %495 = getelementptr { %struct.smpType_struct*, i8* }* %494, i32 0, i32 0
  %496 = load %struct.smpType_struct** %495, align 1
  %497 = getelementptr { %struct.smpType_struct*, i8* }* %494, i32 0, i32 1
  %498 = load i8** %497, align 1
  %499 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %491, i8* %493, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str131, i32 0, i32 0), %struct.smpType_struct* %496, i8* %498)
  %500 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %501 = getelementptr { %struct.smpType_struct*, i8* }* %500, i32 0, i32 0
  %502 = extractvalue { %struct.smpType_struct*, i8* } %499, 0
  store %struct.smpType_struct* %502, %struct.smpType_struct** %501, align 1
  %503 = getelementptr { %struct.smpType_struct*, i8* }* %500, i32 0, i32 1
  %504 = extractvalue { %struct.smpType_struct*, i8* } %499, 1
  store i8* %504, i8** %503, align 1
  %505 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_le, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %506 = bitcast %struct.obj_struct* %41 to { %struct.smpType_struct*, i8* }*
  %507 = getelementptr { %struct.smpType_struct*, i8* }* %506, i32 0, i32 0
  %508 = extractvalue { %struct.smpType_struct*, i8* } %505, 0
  store %struct.smpType_struct* %508, %struct.smpType_struct** %507, align 1
  %509 = getelementptr { %struct.smpType_struct*, i8* }* %506, i32 0, i32 1
  %510 = extractvalue { %struct.smpType_struct*, i8* } %505, 1
  store i8* %510, i8** %509, align 1
  %511 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %512 = getelementptr { %struct.smpType_struct*, i8* }* %511, i32 0, i32 0
  %513 = load %struct.smpType_struct** %512, align 1
  %514 = getelementptr { %struct.smpType_struct*, i8* }* %511, i32 0, i32 1
  %515 = load i8** %514, align 1
  %516 = bitcast %struct.obj_struct* %41 to { %struct.smpType_struct*, i8* }*
  %517 = getelementptr { %struct.smpType_struct*, i8* }* %516, i32 0, i32 0
  %518 = load %struct.smpType_struct** %517, align 1
  %519 = getelementptr { %struct.smpType_struct*, i8* }* %516, i32 0, i32 1
  %520 = load i8** %519, align 1
  %521 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %513, i8* %515, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str132, i32 0, i32 0), %struct.smpType_struct* %518, i8* %520)
  %522 = bitcast %struct.obj_struct* %42 to { %struct.smpType_struct*, i8* }*
  %523 = getelementptr { %struct.smpType_struct*, i8* }* %522, i32 0, i32 0
  %524 = extractvalue { %struct.smpType_struct*, i8* } %521, 0
  store %struct.smpType_struct* %524, %struct.smpType_struct** %523, align 1
  %525 = getelementptr { %struct.smpType_struct*, i8* }* %522, i32 0, i32 1
  %526 = extractvalue { %struct.smpType_struct*, i8* } %521, 1
  store i8* %526, i8** %525, align 1
  %527 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_ge, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %528 = bitcast %struct.obj_struct* %43 to { %struct.smpType_struct*, i8* }*
  %529 = getelementptr { %struct.smpType_struct*, i8* }* %528, i32 0, i32 0
  %530 = extractvalue { %struct.smpType_struct*, i8* } %527, 0
  store %struct.smpType_struct* %530, %struct.smpType_struct** %529, align 1
  %531 = getelementptr { %struct.smpType_struct*, i8* }* %528, i32 0, i32 1
  %532 = extractvalue { %struct.smpType_struct*, i8* } %527, 1
  store i8* %532, i8** %531, align 1
  %533 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %534 = getelementptr { %struct.smpType_struct*, i8* }* %533, i32 0, i32 0
  %535 = load %struct.smpType_struct** %534, align 1
  %536 = getelementptr { %struct.smpType_struct*, i8* }* %533, i32 0, i32 1
  %537 = load i8** %536, align 1
  %538 = bitcast %struct.obj_struct* %43 to { %struct.smpType_struct*, i8* }*
  %539 = getelementptr { %struct.smpType_struct*, i8* }* %538, i32 0, i32 0
  %540 = load %struct.smpType_struct** %539, align 1
  %541 = getelementptr { %struct.smpType_struct*, i8* }* %538, i32 0, i32 1
  %542 = load i8** %541, align 1
  %543 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %535, i8* %537, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), %struct.smpType_struct* %540, i8* %542)
  %544 = bitcast %struct.obj_struct* %44 to { %struct.smpType_struct*, i8* }*
  %545 = getelementptr { %struct.smpType_struct*, i8* }* %544, i32 0, i32 0
  %546 = extractvalue { %struct.smpType_struct*, i8* } %543, 0
  store %struct.smpType_struct* %546, %struct.smpType_struct** %545, align 1
  %547 = getelementptr { %struct.smpType_struct*, i8* }* %544, i32 0, i32 1
  %548 = extractvalue { %struct.smpType_struct*, i8* } %543, 1
  store i8* %548, i8** %547, align 1
  %549 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_gt, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %550 = bitcast %struct.obj_struct* %45 to { %struct.smpType_struct*, i8* }*
  %551 = getelementptr { %struct.smpType_struct*, i8* }* %550, i32 0, i32 0
  %552 = extractvalue { %struct.smpType_struct*, i8* } %549, 0
  store %struct.smpType_struct* %552, %struct.smpType_struct** %551, align 1
  %553 = getelementptr { %struct.smpType_struct*, i8* }* %550, i32 0, i32 1
  %554 = extractvalue { %struct.smpType_struct*, i8* } %549, 1
  store i8* %554, i8** %553, align 1
  %555 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %556 = getelementptr { %struct.smpType_struct*, i8* }* %555, i32 0, i32 0
  %557 = load %struct.smpType_struct** %556, align 1
  %558 = getelementptr { %struct.smpType_struct*, i8* }* %555, i32 0, i32 1
  %559 = load i8** %558, align 1
  %560 = bitcast %struct.obj_struct* %45 to { %struct.smpType_struct*, i8* }*
  %561 = getelementptr { %struct.smpType_struct*, i8* }* %560, i32 0, i32 0
  %562 = load %struct.smpType_struct** %561, align 1
  %563 = getelementptr { %struct.smpType_struct*, i8* }* %560, i32 0, i32 1
  %564 = load i8** %563, align 1
  %565 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %557, i8* %559, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str134, i32 0, i32 0), %struct.smpType_struct* %562, i8* %564)
  %566 = bitcast %struct.obj_struct* %46 to { %struct.smpType_struct*, i8* }*
  %567 = getelementptr { %struct.smpType_struct*, i8* }* %566, i32 0, i32 0
  %568 = extractvalue { %struct.smpType_struct*, i8* } %565, 0
  store %struct.smpType_struct* %568, %struct.smpType_struct** %567, align 1
  %569 = getelementptr { %struct.smpType_struct*, i8* }* %566, i32 0, i32 1
  %570 = extractvalue { %struct.smpType_struct*, i8* } %565, 1
  store i8* %570, i8** %569, align 1
  %571 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_eq, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %572 = bitcast %struct.obj_struct* %47 to { %struct.smpType_struct*, i8* }*
  %573 = getelementptr { %struct.smpType_struct*, i8* }* %572, i32 0, i32 0
  %574 = extractvalue { %struct.smpType_struct*, i8* } %571, 0
  store %struct.smpType_struct* %574, %struct.smpType_struct** %573, align 1
  %575 = getelementptr { %struct.smpType_struct*, i8* }* %572, i32 0, i32 1
  %576 = extractvalue { %struct.smpType_struct*, i8* } %571, 1
  store i8* %576, i8** %575, align 1
  %577 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %578 = getelementptr { %struct.smpType_struct*, i8* }* %577, i32 0, i32 0
  %579 = load %struct.smpType_struct** %578, align 1
  %580 = getelementptr { %struct.smpType_struct*, i8* }* %577, i32 0, i32 1
  %581 = load i8** %580, align 1
  %582 = bitcast %struct.obj_struct* %47 to { %struct.smpType_struct*, i8* }*
  %583 = getelementptr { %struct.smpType_struct*, i8* }* %582, i32 0, i32 0
  %584 = load %struct.smpType_struct** %583, align 1
  %585 = getelementptr { %struct.smpType_struct*, i8* }* %582, i32 0, i32 1
  %586 = load i8** %585, align 1
  %587 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %579, i8* %581, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str23, i32 0, i32 0), %struct.smpType_struct* %584, i8* %586)
  %588 = bitcast %struct.obj_struct* %48 to { %struct.smpType_struct*, i8* }*
  %589 = getelementptr { %struct.smpType_struct*, i8* }* %588, i32 0, i32 0
  %590 = extractvalue { %struct.smpType_struct*, i8* } %587, 0
  store %struct.smpType_struct* %590, %struct.smpType_struct** %589, align 1
  %591 = getelementptr { %struct.smpType_struct*, i8* }* %588, i32 0, i32 1
  %592 = extractvalue { %struct.smpType_struct*, i8* } %587, 1
  store i8* %592, i8** %591, align 1
  %593 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_equalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %594 = bitcast %struct.obj_struct* %49 to { %struct.smpType_struct*, i8* }*
  %595 = getelementptr { %struct.smpType_struct*, i8* }* %594, i32 0, i32 0
  %596 = extractvalue { %struct.smpType_struct*, i8* } %593, 0
  store %struct.smpType_struct* %596, %struct.smpType_struct** %595, align 1
  %597 = getelementptr { %struct.smpType_struct*, i8* }* %594, i32 0, i32 1
  %598 = extractvalue { %struct.smpType_struct*, i8* } %593, 1
  store i8* %598, i8** %597, align 1
  %599 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %600 = getelementptr { %struct.smpType_struct*, i8* }* %599, i32 0, i32 0
  %601 = load %struct.smpType_struct** %600, align 1
  %602 = getelementptr { %struct.smpType_struct*, i8* }* %599, i32 0, i32 1
  %603 = load i8** %602, align 1
  %604 = bitcast %struct.obj_struct* %49 to { %struct.smpType_struct*, i8* }*
  %605 = getelementptr { %struct.smpType_struct*, i8* }* %604, i32 0, i32 0
  %606 = load %struct.smpType_struct** %605, align 1
  %607 = getelementptr { %struct.smpType_struct*, i8* }* %604, i32 0, i32 1
  %608 = load i8** %607, align 1
  %609 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %601, i8* %603, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str22, i32 0, i32 0), %struct.smpType_struct* %606, i8* %608)
  %610 = bitcast %struct.obj_struct* %50 to { %struct.smpType_struct*, i8* }*
  %611 = getelementptr { %struct.smpType_struct*, i8* }* %610, i32 0, i32 0
  %612 = extractvalue { %struct.smpType_struct*, i8* } %609, 0
  store %struct.smpType_struct* %612, %struct.smpType_struct** %611, align 1
  %613 = getelementptr { %struct.smpType_struct*, i8* }* %610, i32 0, i32 1
  %614 = extractvalue { %struct.smpType_struct*, i8* } %609, 1
  store i8* %614, i8** %613, align 1
  %615 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_range, i32 4, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %616 = bitcast %struct.obj_struct* %51 to { %struct.smpType_struct*, i8* }*
  %617 = getelementptr { %struct.smpType_struct*, i8* }* %616, i32 0, i32 0
  %618 = extractvalue { %struct.smpType_struct*, i8* } %615, 0
  store %struct.smpType_struct* %618, %struct.smpType_struct** %617, align 1
  %619 = getelementptr { %struct.smpType_struct*, i8* }* %616, i32 0, i32 1
  %620 = extractvalue { %struct.smpType_struct*, i8* } %615, 1
  store i8* %620, i8** %619, align 1
  %621 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %622 = getelementptr { %struct.smpType_struct*, i8* }* %621, i32 0, i32 0
  %623 = load %struct.smpType_struct** %622, align 1
  %624 = getelementptr { %struct.smpType_struct*, i8* }* %621, i32 0, i32 1
  %625 = load i8** %624, align 1
  %626 = bitcast %struct.obj_struct* %51 to { %struct.smpType_struct*, i8* }*
  %627 = getelementptr { %struct.smpType_struct*, i8* }* %626, i32 0, i32 0
  %628 = load %struct.smpType_struct** %627, align 1
  %629 = getelementptr { %struct.smpType_struct*, i8* }* %626, i32 0, i32 1
  %630 = load i8** %629, align 1
  %631 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %623, i8* %625, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str170, i32 0, i32 0), %struct.smpType_struct* %628, i8* %630)
  %632 = bitcast %struct.obj_struct* %52 to { %struct.smpType_struct*, i8* }*
  %633 = getelementptr { %struct.smpType_struct*, i8* }* %632, i32 0, i32 0
  %634 = extractvalue { %struct.smpType_struct*, i8* } %631, 0
  store %struct.smpType_struct* %634, %struct.smpType_struct** %633, align 1
  %635 = getelementptr { %struct.smpType_struct*, i8* }* %632, i32 0, i32 1
  %636 = extractvalue { %struct.smpType_struct*, i8* } %631, 1
  store i8* %636, i8** %635, align 1
  %637 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpInteger_to_s, i32 3, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %638 = bitcast %struct.obj_struct* %53 to { %struct.smpType_struct*, i8* }*
  %639 = getelementptr { %struct.smpType_struct*, i8* }* %638, i32 0, i32 0
  %640 = extractvalue { %struct.smpType_struct*, i8* } %637, 0
  store %struct.smpType_struct* %640, %struct.smpType_struct** %639, align 1
  %641 = getelementptr { %struct.smpType_struct*, i8* }* %638, i32 0, i32 1
  %642 = extractvalue { %struct.smpType_struct*, i8* } %637, 1
  store i8* %642, i8** %641, align 1
  %643 = bitcast %struct.obj_struct* %intclass to { %struct.smpType_struct*, i8* }*
  %644 = getelementptr { %struct.smpType_struct*, i8* }* %643, i32 0, i32 0
  %645 = load %struct.smpType_struct** %644, align 1
  %646 = getelementptr { %struct.smpType_struct*, i8* }* %643, i32 0, i32 1
  %647 = load i8** %646, align 1
  %648 = bitcast %struct.obj_struct* %53 to { %struct.smpType_struct*, i8* }*
  %649 = getelementptr { %struct.smpType_struct*, i8* }* %648, i32 0, i32 0
  %650 = load %struct.smpType_struct** %649, align 1
  %651 = getelementptr { %struct.smpType_struct*, i8* }* %648, i32 0, i32 1
  %652 = load i8** %651, align 1
  %653 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %645, i8* %647, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %650, i8* %652)
  %654 = bitcast %struct.obj_struct* %54 to { %struct.smpType_struct*, i8* }*
  %655 = getelementptr { %struct.smpType_struct*, i8* }* %654, i32 0, i32 0
  %656 = extractvalue { %struct.smpType_struct*, i8* } %653, 0
  store %struct.smpType_struct* %656, %struct.smpType_struct** %655, align 1
  %657 = getelementptr { %struct.smpType_struct*, i8* }* %654, i32 0, i32 1
  %658 = extractvalue { %struct.smpType_struct*, i8* } %653, 1
  store i8* %658, i8** %657, align 1
  %659 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 0)
  %660 = bitcast %struct.obj_struct* %55 to { %struct.smpType_struct*, i8* }*
  %661 = getelementptr { %struct.smpType_struct*, i8* }* %660, i32 0, i32 0
  %662 = extractvalue { %struct.smpType_struct*, i8* } %659, 0
  store %struct.smpType_struct* %662, %struct.smpType_struct** %661, align 1
  %663 = getelementptr { %struct.smpType_struct*, i8* }* %660, i32 0, i32 1
  %664 = extractvalue { %struct.smpType_struct*, i8* } %659, 1
  store i8* %664, i8** %663, align 1
  %665 = bitcast %struct.obj_struct* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.obj_struct* @smpInteger_zero to i8*), i8* %665, i64 16, i32 8, i1 false)
  %666 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 1)
  %667 = bitcast %struct.obj_struct* %56 to { %struct.smpType_struct*, i8* }*
  %668 = getelementptr { %struct.smpType_struct*, i8* }* %667, i32 0, i32 0
  %669 = extractvalue { %struct.smpType_struct*, i8* } %666, 0
  store %struct.smpType_struct* %669, %struct.smpType_struct** %668, align 1
  %670 = getelementptr { %struct.smpType_struct*, i8* }* %667, i32 0, i32 1
  %671 = extractvalue { %struct.smpType_struct*, i8* } %666, 1
  store i8* %671, i8** %670, align 1
  %672 = bitcast %struct.obj_struct* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.obj_struct* @smpInteger_one to i8*), i8* %672, i64 16, i32 8, i1 false)
  ret i32 0
}

declare void @__gmp_set_memory_functions(i8* (i64)*, i8* (i8*, i64, i64)*, void (i8*, i64)*)

define { %struct.smpType_struct*, i8* } @smpInteger_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to [1 x %struct.__mpz_struct]*
  %10 = getelementptr inbounds [1 x %struct.__mpz_struct]* %9, i32 0, i32 0
  call void @__gmpz_clear(%struct.__mpz_struct* %10)
  %11 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %12 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %13 = load { %struct.smpType_struct*, i8* }* %12, align 1
  ret { %struct.smpType_struct*, i8* } %13
}

define { %struct.smpType_struct*, i8* } @smpInteger_sub(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %res = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_int, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %41

; <label>:17                                      ; preds = %0
  %18 = call noalias i8* @GC_malloc(i64 16)
  %19 = bitcast i8* %18 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %19, [1 x %struct.__mpz_struct]** %z, align 8
  %20 = load [1 x %struct.__mpz_struct]** %z, align 8
  %21 = getelementptr inbounds [1 x %struct.__mpz_struct]* %20, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %21)
  %22 = load [1 x %struct.__mpz_struct]** %z, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpz_struct]* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to [1 x %struct.__mpz_struct]*
  %27 = getelementptr inbounds [1 x %struct.__mpz_struct]* %26, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpz_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpz_struct]* %32, i32 0, i32 0
  call void @__gmpz_sub(%struct.__mpz_struct* %23, %struct.__mpz_struct* %27, %struct.__mpz_struct* %33)
  %34 = load [1 x %struct.__mpz_struct]** %z, align 8
  %35 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %34)
  %36 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  br label %110

; <label>:41                                      ; preds = %0
  %42 = load %struct.obj_struct** %3, align 8
  %43 = getelementptr inbounds %struct.obj_struct* %42, i64 0
  %44 = getelementptr inbounds %struct.obj_struct* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 8
  %46 = getelementptr inbounds %struct.smpType_struct* %45, i32 0, i32 1
  %47 = load i32* %46, align 4
  %48 = load i32* @smpType_id_float, align 4
  %49 = icmp eq i32 %47, %48
  br i1 %49, label %50, label %76

; <label>:50                                      ; preds = %41
  %51 = call noalias i8* @GC_malloc(i64 32)
  %52 = bitcast i8* %51 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %52, [1 x %struct.__mpfr_struct]** %res, align 8
  %53 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %54 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %53, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %54)
  %55 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %56 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %55, i32 0, i32 0
  %57 = load %struct.obj_struct** %3, align 8
  %58 = getelementptr inbounds %struct.obj_struct* %57, i64 0
  %59 = getelementptr inbounds %struct.obj_struct* %58, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to [1 x %struct.__mpfr_struct]*
  %62 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %61, i32 0, i32 0
  %63 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %64 = load i8** %63, align 8
  %65 = bitcast i8* %64 to [1 x %struct.__mpz_struct]*
  %66 = getelementptr inbounds [1 x %struct.__mpz_struct]* %65, i32 0, i32 0
  %67 = load i32* @smp_mpfr_rnd, align 4
  %68 = call i32 @mpfr_sub_z(%struct.__mpfr_struct* %56, %struct.__mpfr_struct* %62, %struct.__mpz_struct* %66, i32 %67)
  %69 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %70 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %69)
  %71 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = extractvalue { %struct.smpType_struct*, i8* } %70, 0
  store %struct.smpType_struct* %73, %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = extractvalue { %struct.smpType_struct*, i8* } %70, 1
  store i8* %75, i8** %74, align 1
  br label %110

; <label>:76                                      ; preds = %41
  %77 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %78 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %84 = load i8** %83, align 8
  %85 = bitcast i8* %84 to %struct.smpType_struct*
  %86 = load %struct.obj_struct** %3, align 8
  %87 = getelementptr inbounds %struct.obj_struct* %86, i64 0
  %88 = bitcast %struct.obj_struct* %87 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = load %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = load i8** %91, align 1
  %93 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %85, %struct.smpType_struct* %90, i8* %92)
  %94 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 0
  %96 = extractvalue { %struct.smpType_struct*, i8* } %93, 0
  store %struct.smpType_struct* %96, %struct.smpType_struct** %95, align 1
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 1
  %98 = extractvalue { %struct.smpType_struct*, i8* } %93, 1
  store i8* %98, i8** %97, align 1
  %99 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 0
  %101 = load %struct.smpType_struct** %100, align 1
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 1
  %103 = load i8** %102, align 1
  %104 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %101, i8* %103)
  %105 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 0
  %107 = extractvalue { %struct.smpType_struct*, i8* } %104, 0
  store %struct.smpType_struct* %107, %struct.smpType_struct** %106, align 1
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 1
  %109 = extractvalue { %struct.smpType_struct*, i8* } %104, 1
  store i8* %109, i8** %108, align 1
  br label %110

; <label>:110                                     ; preds = %76, %50, %17
  %111 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %112 = load { %struct.smpType_struct*, i8* }* %111, align 1
  ret { %struct.smpType_struct*, i8* } %112
}

define { %struct.smpType_struct*, i8* } @smpInteger_div(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %res = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_int, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %41

; <label>:17                                      ; preds = %0
  %18 = call noalias i8* @GC_malloc(i64 16)
  %19 = bitcast i8* %18 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %19, [1 x %struct.__mpz_struct]** %z, align 8
  %20 = load [1 x %struct.__mpz_struct]** %z, align 8
  %21 = getelementptr inbounds [1 x %struct.__mpz_struct]* %20, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %21)
  %22 = load [1 x %struct.__mpz_struct]** %z, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpz_struct]* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to [1 x %struct.__mpz_struct]*
  %27 = getelementptr inbounds [1 x %struct.__mpz_struct]* %26, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpz_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpz_struct]* %32, i32 0, i32 0
  call void @__gmpz_fdiv_q(%struct.__mpz_struct* %23, %struct.__mpz_struct* %27, %struct.__mpz_struct* %33)
  %34 = load [1 x %struct.__mpz_struct]** %z, align 8
  %35 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %34)
  %36 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  br label %110

; <label>:41                                      ; preds = %0
  %42 = load %struct.obj_struct** %3, align 8
  %43 = getelementptr inbounds %struct.obj_struct* %42, i64 0
  %44 = getelementptr inbounds %struct.obj_struct* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 8
  %46 = getelementptr inbounds %struct.smpType_struct* %45, i32 0, i32 1
  %47 = load i32* %46, align 4
  %48 = load i32* @smpType_id_float, align 4
  %49 = icmp eq i32 %47, %48
  br i1 %49, label %50, label %76

; <label>:50                                      ; preds = %41
  %51 = call noalias i8* @GC_malloc(i64 32)
  %52 = bitcast i8* %51 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %52, [1 x %struct.__mpfr_struct]** %res, align 8
  %53 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %54 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %53, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %54)
  %55 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %56 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %55, i32 0, i32 0
  %57 = load %struct.obj_struct** %3, align 8
  %58 = getelementptr inbounds %struct.obj_struct* %57, i64 0
  %59 = getelementptr inbounds %struct.obj_struct* %58, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to [1 x %struct.__mpfr_struct]*
  %62 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %61, i32 0, i32 0
  %63 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %64 = load i8** %63, align 8
  %65 = bitcast i8* %64 to [1 x %struct.__mpz_struct]*
  %66 = getelementptr inbounds [1 x %struct.__mpz_struct]* %65, i32 0, i32 0
  %67 = load i32* @smp_mpfr_rnd, align 4
  %68 = call i32 @mpfr_div_z(%struct.__mpfr_struct* %56, %struct.__mpfr_struct* %62, %struct.__mpz_struct* %66, i32 %67)
  %69 = load [1 x %struct.__mpfr_struct]** %res, align 8
  %70 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %69)
  %71 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = extractvalue { %struct.smpType_struct*, i8* } %70, 0
  store %struct.smpType_struct* %73, %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = extractvalue { %struct.smpType_struct*, i8* } %70, 1
  store i8* %75, i8** %74, align 1
  br label %110

; <label>:76                                      ; preds = %41
  %77 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %78 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %84 = load i8** %83, align 8
  %85 = bitcast i8* %84 to %struct.smpType_struct*
  %86 = load %struct.obj_struct** %3, align 8
  %87 = getelementptr inbounds %struct.obj_struct* %86, i64 0
  %88 = bitcast %struct.obj_struct* %87 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = load %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = load i8** %91, align 1
  %93 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %85, %struct.smpType_struct* %90, i8* %92)
  %94 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 0
  %96 = extractvalue { %struct.smpType_struct*, i8* } %93, 0
  store %struct.smpType_struct* %96, %struct.smpType_struct** %95, align 1
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 1
  %98 = extractvalue { %struct.smpType_struct*, i8* } %93, 1
  store i8* %98, i8** %97, align 1
  %99 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 0
  %101 = load %struct.smpType_struct** %100, align 1
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 1
  %103 = load i8** %102, align 1
  %104 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %101, i8* %103)
  %105 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 0
  %107 = extractvalue { %struct.smpType_struct*, i8* } %104, 0
  store %struct.smpType_struct* %107, %struct.smpType_struct** %106, align 1
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 1
  %109 = extractvalue { %struct.smpType_struct*, i8* } %104, 1
  store i8* %109, i8** %108, align 1
  br label %110

; <label>:110                                     ; preds = %76, %50, %17
  %111 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %112 = load { %struct.smpType_struct*, i8* }* %111, align 1
  ret { %struct.smpType_struct*, i8* } %112
}

define { %struct.smpType_struct*, i8* } @smpInteger_pow(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %f = alloca [1 x %struct.__mpfr_struct], align 16
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %f1 = alloca [1 x %struct.__mpfr_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_int, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %53

; <label>:17                                      ; preds = %0
  %18 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %f, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %18)
  %19 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %f, i32 0, i32 0
  %20 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %21 = load i8** %20, align 8
  %22 = bitcast i8* %21 to [1 x %struct.__mpz_struct]*
  %23 = getelementptr inbounds [1 x %struct.__mpz_struct]* %22, i32 0, i32 0
  %24 = load i32* @smp_mpfr_rnd, align 4
  %25 = call i32 @mpfr_set_z(%struct.__mpfr_struct* %19, %struct.__mpz_struct* %23, i32 %24)
  %26 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %f, i32 0, i32 0
  %27 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %f, i32 0, i32 0
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 1
  %31 = load i8** %30, align 8
  %32 = bitcast i8* %31 to [1 x %struct.__mpz_struct]*
  %33 = getelementptr inbounds [1 x %struct.__mpz_struct]* %32, i32 0, i32 0
  %34 = load i32* @smp_mpfr_rnd, align 4
  %35 = call i32 @mpfr_pow_z(%struct.__mpfr_struct* %26, %struct.__mpfr_struct* %27, %struct.__mpz_struct* %33, i32 %34)
  %36 = call noalias i8* @GC_malloc(i64 16)
  %37 = bitcast i8* %36 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %37, [1 x %struct.__mpz_struct]** %z, align 8
  %38 = load [1 x %struct.__mpz_struct]** %z, align 8
  %39 = getelementptr inbounds [1 x %struct.__mpz_struct]* %38, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %39)
  %40 = load [1 x %struct.__mpz_struct]** %z, align 8
  %41 = getelementptr inbounds [1 x %struct.__mpz_struct]* %40, i32 0, i32 0
  %42 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %f, i32 0, i32 0
  %43 = load i32* @smp_mpfr_rnd, align 4
  %44 = call i32 @mpfr_get_z(%struct.__mpz_struct* %41, %struct.__mpfr_struct* %42, i32 %43)
  %45 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %f, i32 0, i32 0
  call void @mpfr_clear(%struct.__mpfr_struct* %45)
  %46 = load [1 x %struct.__mpz_struct]** %z, align 8
  %47 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %46)
  %48 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = extractvalue { %struct.smpType_struct*, i8* } %47, 0
  store %struct.smpType_struct* %50, %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = extractvalue { %struct.smpType_struct*, i8* } %47, 1
  store i8* %52, i8** %51, align 1
  br label %122

; <label>:53                                      ; preds = %0
  %54 = load %struct.obj_struct** %3, align 8
  %55 = getelementptr inbounds %struct.obj_struct* %54, i64 0
  %56 = getelementptr inbounds %struct.obj_struct* %55, i32 0, i32 0
  %57 = load %struct.smpType_struct** %56, align 8
  %58 = getelementptr inbounds %struct.smpType_struct* %57, i32 0, i32 1
  %59 = load i32* %58, align 4
  %60 = load i32* @smpType_id_float, align 4
  %61 = icmp eq i32 %59, %60
  br i1 %61, label %62, label %88

; <label>:62                                      ; preds = %53
  %63 = call noalias i8* @GC_malloc(i64 32)
  %64 = bitcast i8* %63 to [1 x %struct.__mpfr_struct]*
  store [1 x %struct.__mpfr_struct]* %64, [1 x %struct.__mpfr_struct]** %f1, align 8
  %65 = load [1 x %struct.__mpfr_struct]** %f1, align 8
  %66 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %65, i32 0, i32 0
  call void @mpfr_init(%struct.__mpfr_struct* %66)
  %67 = load [1 x %struct.__mpfr_struct]** %f1, align 8
  %68 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %67, i32 0, i32 0
  %69 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %70 = load i8** %69, align 8
  %71 = bitcast i8* %70 to [1 x %struct.__mpfr_struct]*
  %72 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %71, i32 0, i32 0
  %73 = load %struct.obj_struct** %3, align 8
  %74 = getelementptr inbounds %struct.obj_struct* %73, i64 0
  %75 = getelementptr inbounds %struct.obj_struct* %74, i32 0, i32 1
  %76 = load i8** %75, align 8
  %77 = bitcast i8* %76 to [1 x %struct.__mpfr_struct]*
  %78 = getelementptr inbounds [1 x %struct.__mpfr_struct]* %77, i32 0, i32 0
  %79 = load i32* @smp_mpfr_rnd, align 4
  %80 = call i32 @mpfr_pow(%struct.__mpfr_struct* %68, %struct.__mpfr_struct* %72, %struct.__mpfr_struct* %78, i32 %79)
  %81 = load [1 x %struct.__mpfr_struct]** %f1, align 8
  %82 = call { %struct.smpType_struct*, i8* } @smpFloat_init_mpfr_ref([1 x %struct.__mpfr_struct]* %81)
  %83 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 0
  %85 = extractvalue { %struct.smpType_struct*, i8* } %82, 0
  store %struct.smpType_struct* %85, %struct.smpType_struct** %84, align 1
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 1
  %87 = extractvalue { %struct.smpType_struct*, i8* } %82, 1
  store i8* %87, i8** %86, align 1
  br label %122

; <label>:88                                      ; preds = %53
  %89 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %90 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = extractvalue { %struct.smpType_struct*, i8* } %89, 0
  store %struct.smpType_struct* %92, %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = extractvalue { %struct.smpType_struct*, i8* } %89, 1
  store i8* %94, i8** %93, align 1
  %95 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %96 = load i8** %95, align 8
  %97 = bitcast i8* %96 to %struct.smpType_struct*
  %98 = load %struct.obj_struct** %3, align 8
  %99 = getelementptr inbounds %struct.obj_struct* %98, i64 0
  %100 = bitcast %struct.obj_struct* %99 to { %struct.smpType_struct*, i8* }*
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 0
  %102 = load %struct.smpType_struct** %101, align 1
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 1
  %104 = load i8** %103, align 1
  %105 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %97, %struct.smpType_struct* %102, i8* %104)
  %106 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 0
  %108 = extractvalue { %struct.smpType_struct*, i8* } %105, 0
  store %struct.smpType_struct* %108, %struct.smpType_struct** %107, align 1
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 1
  %110 = extractvalue { %struct.smpType_struct*, i8* } %105, 1
  store i8* %110, i8** %109, align 1
  %111 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %111, i32 0, i32 0
  %113 = load %struct.smpType_struct** %112, align 1
  %114 = getelementptr { %struct.smpType_struct*, i8* }* %111, i32 0, i32 1
  %115 = load i8** %114, align 1
  %116 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %113, i8* %115)
  %117 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 0
  %119 = extractvalue { %struct.smpType_struct*, i8* } %116, 0
  store %struct.smpType_struct* %119, %struct.smpType_struct** %118, align 1
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %117, i32 0, i32 1
  %121 = extractvalue { %struct.smpType_struct*, i8* } %116, 1
  store i8* %121, i8** %120, align 1
  br label %122

; <label>:122                                     ; preds = %88, %62, %17
  %123 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %124 = load { %struct.smpType_struct*, i8* }* %123, align 1
  ret { %struct.smpType_struct*, i8* } %124
}

define { %struct.smpType_struct*, i8* } @smpInteger_shl(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %x = alloca [1 x %struct.__mpz_struct]*, align 8
  %bits = alloca i64, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = load i32* @smpType_id_int, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %50

; <label>:16                                      ; preds = %0
  %17 = load %struct.obj_struct** %3, align 8
  %18 = getelementptr inbounds %struct.obj_struct* %17, i64 0
  %19 = getelementptr inbounds %struct.obj_struct* %18, i32 0, i32 1
  %20 = load i8** %19, align 8
  %21 = bitcast i8* %20 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %21, [1 x %struct.__mpz_struct]** %x, align 8
  %22 = load [1 x %struct.__mpz_struct]** %x, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpz_struct]* %22, i32 0, i32 0
  %24 = call i32 @__gmpz_fits_ulong_p(%struct.__mpz_struct* %23) nounwind readonly
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %16
  %27 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %75

; <label>:28                                      ; preds = %16
  %29 = load [1 x %struct.__mpz_struct]** %x, align 8
  %30 = getelementptr inbounds [1 x %struct.__mpz_struct]* %29, i32 0, i32 0
  %31 = call i64 @__gmpz_get_ui(%struct.__mpz_struct* %30) nounwind readonly
  store i64 %31, i64* %bits, align 8
  %32 = call noalias i8* @GC_malloc(i64 16)
  %33 = bitcast i8* %32 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %33, [1 x %struct.__mpz_struct]** %z, align 8
  %34 = load [1 x %struct.__mpz_struct]** %z, align 8
  %35 = getelementptr inbounds [1 x %struct.__mpz_struct]* %34, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %35)
  %36 = load [1 x %struct.__mpz_struct]** %z, align 8
  %37 = getelementptr inbounds [1 x %struct.__mpz_struct]* %36, i32 0, i32 0
  %38 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %39 = load i8** %38, align 8
  %40 = bitcast i8* %39 to [1 x %struct.__mpz_struct]*
  %41 = getelementptr inbounds [1 x %struct.__mpz_struct]* %40, i32 0, i32 0
  %42 = load i64* %bits, align 8
  call void @__gmpz_mul_2exp(%struct.__mpz_struct* %37, %struct.__mpz_struct* %41, i64 %42)
  %43 = load [1 x %struct.__mpz_struct]** %z, align 8
  %44 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %43)
  %45 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = extractvalue { %struct.smpType_struct*, i8* } %44, 0
  store %struct.smpType_struct* %47, %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = extractvalue { %struct.smpType_struct*, i8* } %44, 1
  store i8* %49, i8** %48, align 1
  br label %75

; <label>:50                                      ; preds = %0
  %51 = load %struct.obj_struct** %3, align 8
  %52 = getelementptr inbounds %struct.obj_struct* %51, i64 0
  %53 = bitcast %struct.obj_struct* %52 to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = load %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = load i8** %56, align 1
  %58 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_int, %struct.smpType_struct* %55, i8* %57)
  %59 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = extractvalue { %struct.smpType_struct*, i8* } %58, 0
  store %struct.smpType_struct* %61, %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = extractvalue { %struct.smpType_struct*, i8* } %58, 1
  store i8* %63, i8** %62, align 1
  %64 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 0
  %66 = load %struct.smpType_struct** %65, align 1
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 1
  %68 = load i8** %67, align 1
  %69 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %66, i8* %68)
  %70 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = extractvalue { %struct.smpType_struct*, i8* } %69, 0
  store %struct.smpType_struct* %72, %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = extractvalue { %struct.smpType_struct*, i8* } %69, 1
  store i8* %74, i8** %73, align 1
  br label %75

; <label>:75                                      ; preds = %50, %28, %26
  %76 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %77 = load { %struct.smpType_struct*, i8* }* %76, align 1
  ret { %struct.smpType_struct*, i8* } %77
}

define { %struct.smpType_struct*, i8* } @smpInteger_shr(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %x = alloca [1 x %struct.__mpz_struct]*, align 8
  %bits = alloca i64, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = load i32* @smpType_id_int, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %50

; <label>:16                                      ; preds = %0
  %17 = load %struct.obj_struct** %3, align 8
  %18 = getelementptr inbounds %struct.obj_struct* %17, i64 0
  %19 = getelementptr inbounds %struct.obj_struct* %18, i32 0, i32 1
  %20 = load i8** %19, align 8
  %21 = bitcast i8* %20 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %21, [1 x %struct.__mpz_struct]** %x, align 8
  %22 = load [1 x %struct.__mpz_struct]** %x, align 8
  %23 = getelementptr inbounds [1 x %struct.__mpz_struct]* %22, i32 0, i32 0
  %24 = call i32 @__gmpz_fits_ulong_p(%struct.__mpz_struct* %23) nounwind readonly
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %28

; <label>:26                                      ; preds = %16
  %27 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %75

; <label>:28                                      ; preds = %16
  %29 = load [1 x %struct.__mpz_struct]** %x, align 8
  %30 = getelementptr inbounds [1 x %struct.__mpz_struct]* %29, i32 0, i32 0
  %31 = call i64 @__gmpz_get_ui(%struct.__mpz_struct* %30) nounwind readonly
  store i64 %31, i64* %bits, align 8
  %32 = call noalias i8* @GC_malloc(i64 16)
  %33 = bitcast i8* %32 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %33, [1 x %struct.__mpz_struct]** %z, align 8
  %34 = load [1 x %struct.__mpz_struct]** %z, align 8
  %35 = getelementptr inbounds [1 x %struct.__mpz_struct]* %34, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %35)
  %36 = load [1 x %struct.__mpz_struct]** %z, align 8
  %37 = getelementptr inbounds [1 x %struct.__mpz_struct]* %36, i32 0, i32 0
  %38 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %39 = load i8** %38, align 8
  %40 = bitcast i8* %39 to [1 x %struct.__mpz_struct]*
  %41 = getelementptr inbounds [1 x %struct.__mpz_struct]* %40, i32 0, i32 0
  %42 = load i64* %bits, align 8
  call void @__gmpz_fdiv_q_2exp(%struct.__mpz_struct* %37, %struct.__mpz_struct* %41, i64 %42)
  %43 = load [1 x %struct.__mpz_struct]** %z, align 8
  %44 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %43)
  %45 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = extractvalue { %struct.smpType_struct*, i8* } %44, 0
  store %struct.smpType_struct* %47, %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = extractvalue { %struct.smpType_struct*, i8* } %44, 1
  store i8* %49, i8** %48, align 1
  br label %75

; <label>:50                                      ; preds = %0
  %51 = load %struct.obj_struct** %3, align 8
  %52 = getelementptr inbounds %struct.obj_struct* %51, i64 0
  %53 = bitcast %struct.obj_struct* %52 to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = load %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = load i8** %56, align 1
  %58 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_int, %struct.smpType_struct* %55, i8* %57)
  %59 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = extractvalue { %struct.smpType_struct*, i8* } %58, 0
  store %struct.smpType_struct* %61, %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = extractvalue { %struct.smpType_struct*, i8* } %58, 1
  store i8* %63, i8** %62, align 1
  %64 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 0
  %66 = load %struct.smpType_struct** %65, align 1
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 1
  %68 = load i8** %67, align 1
  %69 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %66, i8* %68)
  %70 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = extractvalue { %struct.smpType_struct*, i8* } %69, 0
  store %struct.smpType_struct* %72, %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = extractvalue { %struct.smpType_struct*, i8* } %69, 1
  store i8* %74, i8** %73, align 1
  br label %75

; <label>:75                                      ; preds = %50, %28, %26
  %76 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %77 = load { %struct.smpType_struct*, i8* }* %76, align 1
  ret { %struct.smpType_struct*, i8* } %77
}

define { %struct.smpType_struct*, i8* } @smpInteger_and(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = load i32* @smpType_id_int, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %40

; <label>:16                                      ; preds = %0
  %17 = call noalias i8* @GC_malloc(i64 16)
  %18 = bitcast i8* %17 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %18, [1 x %struct.__mpz_struct]** %z, align 8
  %19 = load [1 x %struct.__mpz_struct]** %z, align 8
  %20 = getelementptr inbounds [1 x %struct.__mpz_struct]* %19, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %20)
  %21 = load [1 x %struct.__mpz_struct]** %z, align 8
  %22 = getelementptr inbounds [1 x %struct.__mpz_struct]* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to [1 x %struct.__mpz_struct]*
  %26 = getelementptr inbounds [1 x %struct.__mpz_struct]* %25, i32 0, i32 0
  %27 = load %struct.obj_struct** %3, align 8
  %28 = getelementptr inbounds %struct.obj_struct* %27, i64 0
  %29 = getelementptr inbounds %struct.obj_struct* %28, i32 0, i32 1
  %30 = load i8** %29, align 8
  %31 = bitcast i8* %30 to [1 x %struct.__mpz_struct]*
  %32 = getelementptr inbounds [1 x %struct.__mpz_struct]* %31, i32 0, i32 0
  call void @__gmpz_and(%struct.__mpz_struct* %22, %struct.__mpz_struct* %26, %struct.__mpz_struct* %32)
  %33 = load [1 x %struct.__mpz_struct]** %z, align 8
  %34 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %65

; <label>:40                                      ; preds = %0
  %41 = load %struct.obj_struct** %3, align 8
  %42 = getelementptr inbounds %struct.obj_struct* %41, i64 0
  %43 = bitcast %struct.obj_struct* %42 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = load i8** %46, align 1
  %48 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_int, %struct.smpType_struct* %45, i8* %47)
  %49 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = extractvalue { %struct.smpType_struct*, i8* } %48, 0
  store %struct.smpType_struct* %51, %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = extractvalue { %struct.smpType_struct*, i8* } %48, 1
  store i8* %53, i8** %52, align 1
  %54 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %56, i8* %58)
  %60 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  br label %65

; <label>:65                                      ; preds = %40, %16
  %66 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %67 = load { %struct.smpType_struct*, i8* }* %66, align 1
  ret { %struct.smpType_struct*, i8* } %67
}

define { %struct.smpType_struct*, i8* } @smpInteger_ior(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = load i32* @smpType_id_int, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %40

; <label>:16                                      ; preds = %0
  %17 = call noalias i8* @GC_malloc(i64 16)
  %18 = bitcast i8* %17 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %18, [1 x %struct.__mpz_struct]** %z, align 8
  %19 = load [1 x %struct.__mpz_struct]** %z, align 8
  %20 = getelementptr inbounds [1 x %struct.__mpz_struct]* %19, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %20)
  %21 = load [1 x %struct.__mpz_struct]** %z, align 8
  %22 = getelementptr inbounds [1 x %struct.__mpz_struct]* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to [1 x %struct.__mpz_struct]*
  %26 = getelementptr inbounds [1 x %struct.__mpz_struct]* %25, i32 0, i32 0
  %27 = load %struct.obj_struct** %3, align 8
  %28 = getelementptr inbounds %struct.obj_struct* %27, i64 0
  %29 = getelementptr inbounds %struct.obj_struct* %28, i32 0, i32 1
  %30 = load i8** %29, align 8
  %31 = bitcast i8* %30 to [1 x %struct.__mpz_struct]*
  %32 = getelementptr inbounds [1 x %struct.__mpz_struct]* %31, i32 0, i32 0
  call void @__gmpz_ior(%struct.__mpz_struct* %22, %struct.__mpz_struct* %26, %struct.__mpz_struct* %32)
  %33 = load [1 x %struct.__mpz_struct]** %z, align 8
  %34 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %65

; <label>:40                                      ; preds = %0
  %41 = load %struct.obj_struct** %3, align 8
  %42 = getelementptr inbounds %struct.obj_struct* %41, i64 0
  %43 = bitcast %struct.obj_struct* %42 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = load i8** %46, align 1
  %48 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_int, %struct.smpType_struct* %45, i8* %47)
  %49 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = extractvalue { %struct.smpType_struct*, i8* } %48, 0
  store %struct.smpType_struct* %51, %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = extractvalue { %struct.smpType_struct*, i8* } %48, 1
  store i8* %53, i8** %52, align 1
  %54 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %56, i8* %58)
  %60 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  br label %65

; <label>:65                                      ; preds = %40, %16
  %66 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %67 = load { %struct.smpType_struct*, i8* }* %66, align 1
  ret { %struct.smpType_struct*, i8* } %67
}

define { %struct.smpType_struct*, i8* } @smpInteger_xor(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 1
  %13 = load i32* %12, align 4
  %14 = load i32* @smpType_id_int, align 4
  %15 = icmp eq i32 %13, %14
  br i1 %15, label %16, label %40

; <label>:16                                      ; preds = %0
  %17 = call noalias i8* @GC_malloc(i64 16)
  %18 = bitcast i8* %17 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %18, [1 x %struct.__mpz_struct]** %z, align 8
  %19 = load [1 x %struct.__mpz_struct]** %z, align 8
  %20 = getelementptr inbounds [1 x %struct.__mpz_struct]* %19, i32 0, i32 0
  call void @__gmpz_init(%struct.__mpz_struct* %20)
  %21 = load [1 x %struct.__mpz_struct]** %z, align 8
  %22 = getelementptr inbounds [1 x %struct.__mpz_struct]* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to [1 x %struct.__mpz_struct]*
  %26 = getelementptr inbounds [1 x %struct.__mpz_struct]* %25, i32 0, i32 0
  %27 = load %struct.obj_struct** %3, align 8
  %28 = getelementptr inbounds %struct.obj_struct* %27, i64 0
  %29 = getelementptr inbounds %struct.obj_struct* %28, i32 0, i32 1
  %30 = load i8** %29, align 8
  %31 = bitcast i8* %30 to [1 x %struct.__mpz_struct]*
  %32 = getelementptr inbounds [1 x %struct.__mpz_struct]* %31, i32 0, i32 0
  call void @__gmpz_xor(%struct.__mpz_struct* %22, %struct.__mpz_struct* %26, %struct.__mpz_struct* %32)
  %33 = load [1 x %struct.__mpz_struct]** %z, align 8
  %34 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %65

; <label>:40                                      ; preds = %0
  %41 = load %struct.obj_struct** %3, align 8
  %42 = getelementptr inbounds %struct.obj_struct* %41, i64 0
  %43 = bitcast %struct.obj_struct* %42 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = load i8** %46, align 1
  %48 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_int, %struct.smpType_struct* %45, i8* %47)
  %49 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = extractvalue { %struct.smpType_struct*, i8* } %48, 0
  store %struct.smpType_struct* %51, %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = extractvalue { %struct.smpType_struct*, i8* } %48, 1
  store i8* %53, i8** %52, align 1
  %54 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %56, i8* %58)
  %60 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  br label %65

; <label>:65                                      ; preds = %40, %16
  %66 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %67 = load { %struct.smpType_struct*, i8* }* %66, align 1
  ret { %struct.smpType_struct*, i8* } %67
}

define { %struct.smpType_struct*, i8* } @smpInteger_cmp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %39

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = sext i32 %31 to i64
  %33 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %32)
  %34 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = extractvalue { %struct.smpType_struct*, i8* } %33, 0
  store %struct.smpType_struct* %36, %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = extractvalue { %struct.smpType_struct*, i8* } %33, 1
  store i8* %38, i8** %37, align 1
  br label %39

; <label>:39                                      ; preds = %30, %27
  %40 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %41 = load { %struct.smpType_struct*, i8* }* %40, align 1
  ret { %struct.smpType_struct*, i8* } %41
}

define { %struct.smpType_struct*, i8* } @smpInteger_lt(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp slt i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpInteger_le(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp sle i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpInteger_ge(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp sge i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpInteger_gt(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %err = alloca %struct.obj_struct, align 8
  %num = alloca i32, align 4
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = load i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smpInteger_cmp_cint(%struct.obj_struct* %err, %struct.smpType_struct* %12, i8* %14, %struct.smpType_struct* %17, i8* %19)
  store i32 %20, i32* %num, align 4
  %21 = getelementptr inbounds %struct.obj_struct* %err, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 8
  %23 = getelementptr inbounds %struct.smpType_struct* %22, i32 0, i32 1
  %24 = load i32* %23, align 4
  %25 = load i32* @smpType_id_thrown, align 4
  %26 = icmp eq i32 %24, %25
  br i1 %26, label %27, label %30

; <label>:27                                      ; preds = %0
  %28 = bitcast %struct.obj_struct* %1 to i8*
  %29 = bitcast %struct.obj_struct* %err to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 16, i32 8, i1 false)
  br label %40

; <label>:30                                      ; preds = %0
  %31 = load i32* %num, align 4
  %32 = icmp sgt i32 %31, 0
  %33 = zext i1 %32 to i32
  %34 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %33)
  %35 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  br label %40

; <label>:40                                      ; preds = %30, %27
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define { %struct.smpType_struct*, i8* } @smpInteger_eq(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load i32* %2, align 4
  %8 = load %struct.obj_struct** %3, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smpInteger_equalp(%struct.smpType_struct* %11, i8* %13, i32 %7, %struct.obj_struct* %8)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smpInteger_range(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res_type = alloca i32, align 4
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %min = alloca %struct.obj_struct, align 8
  %ctr = alloca %struct.obj_struct, align 8
  %max = alloca %struct.obj_struct, align 8
  %cmp_ret = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %15
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  store i8* %obj.coerce1, i8** %16
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  store i32 0, i32* %res_type, align 4
  %17 = load i32* %2, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %79

; <label>:19                                      ; preds = %0
  %20 = load %struct.obj_struct** %3, align 8
  %21 = getelementptr inbounds %struct.obj_struct* %20, i64 1
  %22 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = load i8** %25, align 1
  %27 = call i32 @smpString_equalp_cstr(%struct.smpType_struct* %24, i8* %26, i8* getelementptr inbounds ([6 x i8]* @.str94, i32 0, i32 0))
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %30

; <label>:29                                      ; preds = %19
  store i32 1, i32* %res_type, align 4
  br label %78

; <label>:30                                      ; preds = %19
  %31 = load %struct.obj_struct** %3, align 8
  %32 = getelementptr inbounds %struct.obj_struct* %31, i64 1
  %33 = bitcast %struct.obj_struct* %32 to { %struct.smpType_struct*, i8* }*
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 0
  %35 = load %struct.smpType_struct** %34, align 1
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 1
  %37 = load i8** %36, align 1
  %38 = call i32 @smpString_equalp_cstr(%struct.smpType_struct* %35, i8* %37, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %41

; <label>:40                                      ; preds = %30
  store i32 0, i32* %res_type, align 4
  br label %77

; <label>:41                                      ; preds = %30
  %42 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([14 x i8]* @.str20, i32 0, i32 0))
  %43 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = extractvalue { %struct.smpType_struct*, i8* } %42, 0
  store %struct.smpType_struct* %45, %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = extractvalue { %struct.smpType_struct*, i8* } %42, 1
  store i8* %47, i8** %46, align 1
  %48 = load %struct.obj_struct** %3, align 8
  %49 = getelementptr inbounds %struct.obj_struct* %48, i64 1
  %50 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = load %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = load i8** %53, align 1
  %55 = bitcast %struct.obj_struct* %49 to { %struct.smpType_struct*, i8* }*
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 0
  %57 = load %struct.smpType_struct** %56, align 1
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 1
  %59 = load i8** %58, align 1
  %60 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %52, i8* %54, i8* getelementptr inbounds ([52 x i8]* @.str171, i32 0, i32 0), %struct.smpType_struct* %57, i8* %59)
  %61 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 0
  %63 = extractvalue { %struct.smpType_struct*, i8* } %60, 0
  store %struct.smpType_struct* %63, %struct.smpType_struct** %62, align 1
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 1
  %65 = extractvalue { %struct.smpType_struct*, i8* } %60, 1
  store i8* %65, i8** %64, align 1
  %66 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = load %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = load i8** %69, align 1
  %71 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %68, i8* %70)
  %72 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 0
  %74 = extractvalue { %struct.smpType_struct*, i8* } %71, 0
  store %struct.smpType_struct* %74, %struct.smpType_struct** %73, align 1
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 1
  %76 = extractvalue { %struct.smpType_struct*, i8* } %71, 1
  store i8* %76, i8** %75, align 1
  br label %266

; <label>:77                                      ; preds = %40
  br label %78

; <label>:78                                      ; preds = %77, %29
  br label %79

; <label>:79                                      ; preds = %78, %0
  %80 = bitcast %struct.obj_struct* %min to i8*
  %81 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %80, i8* %81, i64 16, i32 8, i1 false)
  %82 = bitcast %struct.obj_struct* %ctr to i8*
  %83 = bitcast %struct.obj_struct* %min to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* %83, i64 16, i32 8, i1 false)
  %84 = load %struct.obj_struct** %3, align 8
  %85 = getelementptr inbounds %struct.obj_struct* %84, i64 0
  %86 = bitcast %struct.obj_struct* %max to i8*
  %87 = bitcast %struct.obj_struct* %85 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %86, i8* %87, i64 16, i32 8, i1 false)
  %88 = bitcast %struct.obj_struct* %cmp_ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %88, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %89 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %89, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %90 = load i32* %res_type, align 4
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %184

; <label>:92                                      ; preds = %79
  %93 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %93, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %94

; <label>:94                                      ; preds = %92, %169
  %95 = bitcast %struct.obj_struct* %ctr to { %struct.smpType_struct*, i8* }*
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 0
  %97 = load %struct.smpType_struct** %96, align 1
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 1
  %99 = load i8** %98, align 1
  %100 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %97, i8* %99, i8* getelementptr inbounds ([2 x i8]* @.str131, i32 0, i32 0), i32 1, %struct.obj_struct* %max)
  %101 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = extractvalue { %struct.smpType_struct*, i8* } %100, 0
  store %struct.smpType_struct* %103, %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = extractvalue { %struct.smpType_struct*, i8* } %100, 1
  store i8* %105, i8** %104, align 1
  %106 = bitcast %struct.obj_struct* %cmp_ret to i8*
  %107 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %106, i8* %107, i64 16, i32 8, i1 false)
  %108 = bitcast %struct.obj_struct* %cmp_ret to { %struct.smpType_struct*, i8* }*
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 0
  %110 = load %struct.smpType_struct** %109, align 1
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 1
  %112 = load i8** %111, align 1
  %113 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %110, i8* %112)
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %115, label %118

; <label>:115                                     ; preds = %94
  %116 = bitcast %struct.obj_struct* %1 to i8*
  %117 = bitcast %struct.obj_struct* %cmp_ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %116, i8* %117, i64 16, i32 8, i1 false)
  br label %266

; <label>:118                                     ; preds = %94
  %119 = bitcast %struct.obj_struct* %cmp_ret to { %struct.smpType_struct*, i8* }*
  %120 = getelementptr { %struct.smpType_struct*, i8* }* %119, i32 0, i32 0
  %121 = load %struct.smpType_struct** %120, align 1
  %122 = getelementptr { %struct.smpType_struct*, i8* }* %119, i32 0, i32 1
  %123 = load i8** %122, align 1
  %124 = call i32 @smpObject_truep_c(%struct.smpType_struct* %121, i8* %123)
  %125 = icmp ne i32 %124, 0
  br i1 %125, label %127, label %126

; <label>:126                                     ; preds = %118
  br label %170

; <label>:127                                     ; preds = %118
  %128 = bitcast %struct.obj_struct* %ctr to { %struct.smpType_struct*, i8* }*
  %129 = getelementptr { %struct.smpType_struct*, i8* }* %128, i32 0, i32 0
  %130 = load %struct.smpType_struct** %129, align 1
  %131 = getelementptr { %struct.smpType_struct*, i8* }* %128, i32 0, i32 1
  %132 = load i8** %131, align 1
  %133 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 0
  %135 = load %struct.smpType_struct** %134, align 1
  %136 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 1
  %137 = load i8** %136, align 1
  %138 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %130, i8* %132, %struct.smpType_struct* %135, i8* %137)
  %139 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %139, i32 0, i32 0
  %141 = extractvalue { %struct.smpType_struct*, i8* } %138, 0
  store %struct.smpType_struct* %141, %struct.smpType_struct** %140, align 1
  %142 = getelementptr { %struct.smpType_struct*, i8* }* %139, i32 0, i32 1
  %143 = extractvalue { %struct.smpType_struct*, i8* } %138, 1
  store i8* %143, i8** %142, align 1
  %144 = bitcast %struct.obj_struct* %res to i8*
  %145 = bitcast %struct.obj_struct* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %144, i8* %145, i64 16, i32 8, i1 false)
  %146 = bitcast %struct.obj_struct* %ctr to { %struct.smpType_struct*, i8* }*
  %147 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 0
  %148 = load %struct.smpType_struct** %147, align 1
  %149 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 1
  %150 = load i8** %149, align 1
  %151 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %148, i8* %150, i8* getelementptr inbounds ([4 x i8]* @.str168, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %152 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %153 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 0
  %154 = extractvalue { %struct.smpType_struct*, i8* } %151, 0
  store %struct.smpType_struct* %154, %struct.smpType_struct** %153, align 1
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 1
  %156 = extractvalue { %struct.smpType_struct*, i8* } %151, 1
  store i8* %156, i8** %155, align 1
  %157 = bitcast %struct.obj_struct* %ctr to i8*
  %158 = bitcast %struct.obj_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %157, i8* %158, i64 16, i32 8, i1 false)
  %159 = bitcast %struct.obj_struct* %ctr to { %struct.smpType_struct*, i8* }*
  %160 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 0
  %161 = load %struct.smpType_struct** %160, align 1
  %162 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 1
  %163 = load i8** %162, align 1
  %164 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %161, i8* %163)
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %166, label %169

; <label>:166                                     ; preds = %127
  %167 = bitcast %struct.obj_struct* %1 to i8*
  %168 = bitcast %struct.obj_struct* %ctr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %167, i8* %168, i64 16, i32 8, i1 false)
  br label %266

; <label>:169                                     ; preds = %127
  br label %94

; <label>:170                                     ; preds = %126
  %171 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %172 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 0
  %173 = load %struct.smpType_struct** %172, align 1
  %174 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 1
  %175 = load i8** %174, align 1
  %176 = call { %struct.smpType_struct*, i8* } @smpList_reverse(%struct.smpType_struct* %173, i8* %175, i32 0, %struct.obj_struct* null)
  %177 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %178 = getelementptr { %struct.smpType_struct*, i8* }* %177, i32 0, i32 0
  %179 = extractvalue { %struct.smpType_struct*, i8* } %176, 0
  store %struct.smpType_struct* %179, %struct.smpType_struct** %178, align 1
  %180 = getelementptr { %struct.smpType_struct*, i8* }* %177, i32 0, i32 1
  %181 = extractvalue { %struct.smpType_struct*, i8* } %176, 1
  store i8* %181, i8** %180, align 1
  %182 = bitcast %struct.obj_struct* %res to i8*
  %183 = bitcast %struct.obj_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %182, i8* %183, i64 16, i32 8, i1 false)
  br label %263

; <label>:184                                     ; preds = %79
  %185 = call { %struct.smpType_struct*, i8* } @smpArray_init()
  %186 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %187 = getelementptr { %struct.smpType_struct*, i8* }* %186, i32 0, i32 0
  %188 = extractvalue { %struct.smpType_struct*, i8* } %185, 0
  store %struct.smpType_struct* %188, %struct.smpType_struct** %187, align 1
  %189 = getelementptr { %struct.smpType_struct*, i8* }* %186, i32 0, i32 1
  %190 = extractvalue { %struct.smpType_struct*, i8* } %185, 1
  store i8* %190, i8** %189, align 1
  %191 = bitcast %struct.obj_struct* %res to i8*
  %192 = bitcast %struct.obj_struct* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %191, i8* %192, i64 16, i32 8, i1 false)
  br label %193

; <label>:193                                     ; preds = %184, %261
  %194 = bitcast %struct.obj_struct* %ctr to { %struct.smpType_struct*, i8* }*
  %195 = getelementptr { %struct.smpType_struct*, i8* }* %194, i32 0, i32 0
  %196 = load %struct.smpType_struct** %195, align 1
  %197 = getelementptr { %struct.smpType_struct*, i8* }* %194, i32 0, i32 1
  %198 = load i8** %197, align 1
  %199 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %196, i8* %198, i8* getelementptr inbounds ([2 x i8]* @.str131, i32 0, i32 0), i32 1, %struct.obj_struct* %max)
  %200 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %201 = getelementptr { %struct.smpType_struct*, i8* }* %200, i32 0, i32 0
  %202 = extractvalue { %struct.smpType_struct*, i8* } %199, 0
  store %struct.smpType_struct* %202, %struct.smpType_struct** %201, align 1
  %203 = getelementptr { %struct.smpType_struct*, i8* }* %200, i32 0, i32 1
  %204 = extractvalue { %struct.smpType_struct*, i8* } %199, 1
  store i8* %204, i8** %203, align 1
  %205 = bitcast %struct.obj_struct* %cmp_ret to i8*
  %206 = bitcast %struct.obj_struct* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %205, i8* %206, i64 16, i32 8, i1 false)
  %207 = bitcast %struct.obj_struct* %cmp_ret to { %struct.smpType_struct*, i8* }*
  %208 = getelementptr { %struct.smpType_struct*, i8* }* %207, i32 0, i32 0
  %209 = load %struct.smpType_struct** %208, align 1
  %210 = getelementptr { %struct.smpType_struct*, i8* }* %207, i32 0, i32 1
  %211 = load i8** %210, align 1
  %212 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %209, i8* %211)
  %213 = icmp ne i32 %212, 0
  br i1 %213, label %214, label %217

; <label>:214                                     ; preds = %193
  %215 = bitcast %struct.obj_struct* %1 to i8*
  %216 = bitcast %struct.obj_struct* %cmp_ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %215, i8* %216, i64 16, i32 8, i1 false)
  br label %266

; <label>:217                                     ; preds = %193
  %218 = bitcast %struct.obj_struct* %cmp_ret to { %struct.smpType_struct*, i8* }*
  %219 = getelementptr { %struct.smpType_struct*, i8* }* %218, i32 0, i32 0
  %220 = load %struct.smpType_struct** %219, align 1
  %221 = getelementptr { %struct.smpType_struct*, i8* }* %218, i32 0, i32 1
  %222 = load i8** %221, align 1
  %223 = call i32 @smpObject_truep_c(%struct.smpType_struct* %220, i8* %222)
  %224 = icmp ne i32 %223, 0
  br i1 %224, label %226, label %225

; <label>:225                                     ; preds = %217
  br label %262

; <label>:226                                     ; preds = %217
  %227 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %228 = getelementptr { %struct.smpType_struct*, i8* }* %227, i32 0, i32 0
  %229 = load %struct.smpType_struct** %228, align 1
  %230 = getelementptr { %struct.smpType_struct*, i8* }* %227, i32 0, i32 1
  %231 = load i8** %230, align 1
  %232 = call { %struct.smpType_struct*, i8* } @smpArray_add_now(%struct.smpType_struct* %229, i8* %231, i32 1, %struct.obj_struct* %ctr)
  %233 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %234 = getelementptr { %struct.smpType_struct*, i8* }* %233, i32 0, i32 0
  %235 = extractvalue { %struct.smpType_struct*, i8* } %232, 0
  store %struct.smpType_struct* %235, %struct.smpType_struct** %234, align 1
  %236 = getelementptr { %struct.smpType_struct*, i8* }* %233, i32 0, i32 1
  %237 = extractvalue { %struct.smpType_struct*, i8* } %232, 1
  store i8* %237, i8** %236, align 1
  %238 = bitcast %struct.obj_struct* %ctr to { %struct.smpType_struct*, i8* }*
  %239 = getelementptr { %struct.smpType_struct*, i8* }* %238, i32 0, i32 0
  %240 = load %struct.smpType_struct** %239, align 1
  %241 = getelementptr { %struct.smpType_struct*, i8* }* %238, i32 0, i32 1
  %242 = load i8** %241, align 1
  %243 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %240, i8* %242, i8* getelementptr inbounds ([4 x i8]* @.str168, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %244 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %245 = getelementptr { %struct.smpType_struct*, i8* }* %244, i32 0, i32 0
  %246 = extractvalue { %struct.smpType_struct*, i8* } %243, 0
  store %struct.smpType_struct* %246, %struct.smpType_struct** %245, align 1
  %247 = getelementptr { %struct.smpType_struct*, i8* }* %244, i32 0, i32 1
  %248 = extractvalue { %struct.smpType_struct*, i8* } %243, 1
  store i8* %248, i8** %247, align 1
  %249 = bitcast %struct.obj_struct* %ctr to i8*
  %250 = bitcast %struct.obj_struct* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %249, i8* %250, i64 16, i32 8, i1 false)
  %251 = bitcast %struct.obj_struct* %ctr to { %struct.smpType_struct*, i8* }*
  %252 = getelementptr { %struct.smpType_struct*, i8* }* %251, i32 0, i32 0
  %253 = load %struct.smpType_struct** %252, align 1
  %254 = getelementptr { %struct.smpType_struct*, i8* }* %251, i32 0, i32 1
  %255 = load i8** %254, align 1
  %256 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %253, i8* %255)
  %257 = icmp ne i32 %256, 0
  br i1 %257, label %258, label %261

; <label>:258                                     ; preds = %226
  %259 = bitcast %struct.obj_struct* %1 to i8*
  %260 = bitcast %struct.obj_struct* %ctr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %259, i8* %260, i64 16, i32 8, i1 false)
  br label %266

; <label>:261                                     ; preds = %226
  br label %193

; <label>:262                                     ; preds = %225
  br label %263

; <label>:263                                     ; preds = %262, %170
  %264 = bitcast %struct.obj_struct* %1 to i8*
  %265 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %264, i8* %265, i64 16, i32 8, i1 false)
  br label %266

; <label>:266                                     ; preds = %263, %258, %214, %166, %115, %41
  %267 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %268 = load { %struct.smpType_struct*, i8* }* %267, align 1
  ret { %struct.smpType_struct*, i8* } %268
}

define { %struct.smpType_struct*, i8* } @smpInteger_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %base = alloca i32, align 4
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %str = alloca i8*, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  store i32 10, i32* %base, align 4
  %9 = load i32* %2, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %94

; <label>:11                                      ; preds = %0
  %12 = load %struct.obj_struct** %3, align 8
  %13 = getelementptr inbounds %struct.obj_struct* %12, i64 0
  %14 = getelementptr inbounds %struct.obj_struct* %13, i32 0, i32 0
  %15 = load %struct.smpType_struct** %14, align 8
  %16 = getelementptr inbounds %struct.smpType_struct* %15, i32 0, i32 1
  %17 = load i32* %16, align 4
  %18 = load i32* @smpType_id_nil, align 4
  %19 = icmp eq i32 %17, %18
  br i1 %19, label %94, label %20

; <label>:20                                      ; preds = %11
  %21 = load %struct.obj_struct** %3, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %21, i64 0
  %23 = getelementptr inbounds %struct.obj_struct* %22, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 8
  %25 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %24, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %75, label %27

; <label>:27                                      ; preds = %20
  %28 = load %struct.obj_struct** %3, align 8
  %29 = getelementptr inbounds %struct.obj_struct* %28, i64 0
  %30 = getelementptr inbounds %struct.obj_struct* %29, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 8
  %32 = getelementptr inbounds %struct.smpType_struct* %31, i32 0, i32 0
  %33 = load i8** %32, align 8
  %34 = call i32 @strcmp(i8* %33, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %41

; <label>:36                                      ; preds = %27
  %37 = load %struct.obj_struct** %3, align 8
  %38 = getelementptr inbounds %struct.obj_struct* %37, i64 0
  %39 = bitcast %struct.obj_struct* %1 to i8*
  %40 = bitcast %struct.obj_struct* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false)
  br label %107

; <label>:41                                      ; preds = %27
  %42 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %43 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = extractvalue { %struct.smpType_struct*, i8* } %42, 0
  store %struct.smpType_struct* %45, %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = extractvalue { %struct.smpType_struct*, i8* } %42, 1
  store i8* %47, i8** %46, align 1
  %48 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %49 = load i8** %48, align 8
  %50 = bitcast i8* %49 to %struct.smpType_struct*
  %51 = load %struct.obj_struct** %3, align 8
  %52 = getelementptr inbounds %struct.obj_struct* %51, i64 0
  %53 = bitcast %struct.obj_struct* %52 to { %struct.smpType_struct*, i8* }*
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 0
  %55 = load %struct.smpType_struct** %54, align 1
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %53, i32 0, i32 1
  %57 = load i8** %56, align 1
  %58 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %50, %struct.smpType_struct* %55, i8* %57)
  %59 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = extractvalue { %struct.smpType_struct*, i8* } %58, 0
  store %struct.smpType_struct* %61, %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = extractvalue { %struct.smpType_struct*, i8* } %58, 1
  store i8* %63, i8** %62, align 1
  %64 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 0
  %66 = load %struct.smpType_struct** %65, align 1
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 1
  %68 = load i8** %67, align 1
  %69 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %66, i8* %68)
  %70 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = extractvalue { %struct.smpType_struct*, i8* } %69, 0
  store %struct.smpType_struct* %72, %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = extractvalue { %struct.smpType_struct*, i8* } %69, 1
  store i8* %74, i8** %73, align 1
  br label %107

; <label>:75                                      ; preds = %20
  %76 = load %struct.obj_struct** %3, align 8
  %77 = getelementptr inbounds %struct.obj_struct* %76, i64 0
  %78 = getelementptr inbounds %struct.obj_struct* %77, i32 0, i32 1
  %79 = load i8** %78, align 8
  %80 = bitcast i8* %79 to [1 x %struct.__mpz_struct]*
  %81 = getelementptr inbounds [1 x %struct.__mpz_struct]* %80, i32 0, i32 0
  %82 = call i32 @__gmpz_fits_sint_p(%struct.__mpz_struct* %81) nounwind readonly
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %93

; <label>:84                                      ; preds = %75
  %85 = load %struct.obj_struct** %3, align 8
  %86 = getelementptr inbounds %struct.obj_struct* %85, i64 0
  %87 = getelementptr inbounds %struct.obj_struct* %86, i32 0, i32 1
  %88 = load i8** %87, align 8
  %89 = bitcast i8* %88 to [1 x %struct.__mpz_struct]*
  %90 = getelementptr inbounds [1 x %struct.__mpz_struct]* %89, i32 0, i32 0
  %91 = call i64 @__gmpz_get_si(%struct.__mpz_struct* %90) nounwind readonly
  %92 = trunc i64 %91 to i32
  store i32 %92, i32* %base, align 4
  br label %93

; <label>:93                                      ; preds = %84, %75
  br label %94

; <label>:94                                      ; preds = %93, %11, %0
  %95 = load i32* %base, align 4
  %96 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %97 = load i8** %96, align 8
  %98 = bitcast i8* %97 to [1 x %struct.__mpz_struct]*
  %99 = getelementptr inbounds [1 x %struct.__mpz_struct]* %98, i32 0, i32 0
  %100 = call i8* @__gmpz_get_str(i8* null, i32 %95, %struct.__mpz_struct* %99)
  store i8* %100, i8** %str, align 8
  %101 = call { %struct.smpType_struct*, i8* } @smpString_init_ref(i8** %str)
  %102 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 0
  %104 = extractvalue { %struct.smpType_struct*, i8* } %101, 0
  store %struct.smpType_struct* %104, %struct.smpType_struct** %103, align 1
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 1
  %106 = extractvalue { %struct.smpType_struct*, i8* } %101, 1
  store i8* %106, i8** %105, align 1
  br label %107

; <label>:107                                     ; preds = %94, %41, %36
  %108 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %109 = load { %struct.smpType_struct*, i8* }* %108, align 1
  ret { %struct.smpType_struct*, i8* } %109
}

define { %struct.smpType_struct*, i8* } @smpInteger_init_mpz(%struct.__mpz_struct* %x) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.__mpz_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  store %struct.__mpz_struct* %x, %struct.__mpz_struct** %2, align 8
  %3 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_int)
  %4 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = call noalias i8* @GC_malloc(i64 16)
  %10 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %9, i8** %10, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %12 = load i8** %11, align 8
  %13 = bitcast i8* %12 to [1 x %struct.__mpz_struct]*
  %14 = getelementptr inbounds [1 x %struct.__mpz_struct]* %13, i32 0, i32 0
  %15 = load %struct.__mpz_struct** %2, align 8
  call void @__gmpz_init_set(%struct.__mpz_struct* %14, %struct.__mpz_struct* %15)
  %16 = bitcast %struct.obj_struct* %1 to i8*
  %17 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 16, i32 8, i1 false)
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

declare void @__gmpz_init_set(%struct.__mpz_struct*, %struct.__mpz_struct*)

define { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %x) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca [1 x %struct.__mpz_struct]*, align 8
  %res = alloca %struct.obj_struct, align 8
  store [1 x %struct.__mpz_struct]* %x, [1 x %struct.__mpz_struct]** %2, align 8
  %3 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_int)
  %4 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = load [1 x %struct.__mpz_struct]** %2, align 8
  %10 = bitcast [1 x %struct.__mpz_struct]* %9 to i8*
  %11 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %10, i8** %11, align 8
  %12 = bitcast %struct.obj_struct* %1 to i8*
  %13 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 8, i1 false)
  %14 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %15 = load { %struct.smpType_struct*, i8* }* %14, align 1
  ret { %struct.smpType_struct*, i8* } %15
}

declare void @__gmpz_init_set_si(%struct.__mpz_struct*, i64)

define { %struct.smpType_struct*, i8* } @smpInteger_init_str(i8* %str) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %z = alloca [1 x %struct.__mpz_struct]*, align 8
  %res = alloca %struct.obj_struct, align 8
  store i8* %str, i8** %2, align 8
  %3 = call noalias i8* @GC_malloc(i64 16)
  %4 = bitcast i8* %3 to [1 x %struct.__mpz_struct]*
  store [1 x %struct.__mpz_struct]* %4, [1 x %struct.__mpz_struct]** %z, align 8
  %5 = load [1 x %struct.__mpz_struct]** %z, align 8
  %6 = getelementptr inbounds [1 x %struct.__mpz_struct]* %5, i32 0, i32 0
  %7 = load i8** %2, align 8
  %8 = call i32 @__gmpz_init_set_str(%struct.__mpz_struct* %6, i8* %7, i32 0)
  %9 = load [1 x %struct.__mpz_struct]** %z, align 8
  %10 = call { %struct.smpType_struct*, i8* } @smpInteger_init_mpz_ref([1 x %struct.__mpz_struct]* %9)
  %11 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = extractvalue { %struct.smpType_struct*, i8* } %10, 0
  store %struct.smpType_struct* %13, %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = extractvalue { %struct.smpType_struct*, i8* } %10, 1
  store i8* %15, i8** %14, align 1
  %16 = bitcast %struct.obj_struct* %1 to i8*
  %17 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 16, i32 8, i1 false)
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

declare i32 @__gmpz_init_set_str(%struct.__mpz_struct*, i8*, i32)

declare void @__gmpz_clear(%struct.__mpz_struct*)

declare void @__gmpz_init(%struct.__mpz_struct*)

declare void @__gmpz_add(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*)

declare void @__gmpz_sub(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*)

declare void @__gmpz_mul(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*)

declare void @__gmpz_fdiv_q(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*)

declare void @__gmpz_mod(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*)

declare i32 @mpfr_set_z(%struct.__mpfr_struct*, %struct.__mpz_struct*, i32)

declare i32 @mpfr_get_z(%struct.__mpz_struct*, %struct.__mpfr_struct*, i32)

declare i32 @__gmpz_fits_ulong_p(%struct.__mpz_struct*) nounwind readonly

declare i64 @__gmpz_get_ui(%struct.__mpz_struct*) nounwind readonly

declare void @__gmpz_mul_2exp(%struct.__mpz_struct*, %struct.__mpz_struct*, i64)

declare void @__gmpz_fdiv_q_2exp(%struct.__mpz_struct*, %struct.__mpz_struct*, i64)

declare void @__gmpz_and(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*)

declare void @__gmpz_ior(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*)

declare void @__gmpz_com(%struct.__mpz_struct*, %struct.__mpz_struct*)

declare void @__gmpz_xor(%struct.__mpz_struct*, %struct.__mpz_struct*, %struct.__mpz_struct*)

declare i32 @__gmpz_cmp(%struct.__mpz_struct*, %struct.__mpz_struct*) nounwind readonly

define i32 @smpString_equalp_cstr(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i8* %str) nounwind {
  %obj = alloca %struct.obj_struct, align 8
  %1 = alloca i8*, align 8
  %2 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %obj.coerce1, i8** %4
  store i8* %str, i8** %1, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  %7 = load %struct.smpType_struct** %6, align 1
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  %9 = load i8** %8, align 1
  %10 = call i8* @smpString_to_cstr(%struct.smpType_struct* %7, i8* %9)
  %11 = load i8** %1, align 8
  %12 = call i32 @strcmp(i8* %10, i8* %11)
  %13 = icmp eq i32 %12, 0
  %14 = zext i1 %13 to i32
  ret i32 %14
}

define { %struct.smpType_struct*, i8* } @smpList_reverse(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %car = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  %9 = bitcast %struct.obj_struct* %car to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %10

; <label>:10                                      ; preds = %13, %0
  %11 = load %struct.obj_struct** %ptr, align 8
  %12 = icmp ne %struct.obj_struct* %11, null
  br i1 %12, label %13, label %43

; <label>:13                                      ; preds = %10
  %14 = load %struct.obj_struct** %ptr, align 8
  %15 = getelementptr inbounds %struct.obj_struct* %14, i32 0, i32 1
  %16 = load i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.smpPair_struct*
  %18 = getelementptr inbounds %struct.smpPair_struct* %17, i32 0, i32 0
  %19 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 0
  %21 = load %struct.smpType_struct** %20, align 1
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 1
  %23 = load i8** %22, align 1
  %24 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 0
  %26 = load %struct.smpType_struct** %25, align 1
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 1
  %28 = load i8** %27, align 1
  %29 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %21, i8* %23, %struct.smpType_struct* %26, i8* %28)
  %30 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 0
  %32 = extractvalue { %struct.smpType_struct*, i8* } %29, 0
  store %struct.smpType_struct* %32, %struct.smpType_struct** %31, align 1
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 1
  %34 = extractvalue { %struct.smpType_struct*, i8* } %29, 1
  store i8* %34, i8** %33, align 1
  %35 = bitcast %struct.obj_struct* %res to i8*
  %36 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 16, i32 8, i1 false)
  %37 = load %struct.obj_struct** %ptr, align 8
  %38 = getelementptr inbounds %struct.obj_struct* %37, i32 0, i32 1
  %39 = load i8** %38, align 8
  %40 = bitcast i8* %39 to %struct.smpPair_struct*
  %41 = getelementptr inbounds %struct.smpPair_struct* %40, i32 0, i32 1
  %42 = load %struct.obj_struct** %41, align 8
  store %struct.obj_struct* %42, %struct.obj_struct** %ptr, align 8
  br label %10

; <label>:43                                      ; preds = %10
  %44 = bitcast %struct.obj_struct* %1 to i8*
  %45 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %45, i64 16, i32 8, i1 false)
  %46 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %47 = load { %struct.smpType_struct*, i8* }* %46, align 1
  ret { %struct.smpType_struct*, i8* } %47
}

declare i32 @__gmpz_fits_slong_p(%struct.__mpz_struct*) nounwind readonly

declare i8* @index(i8*, i32)

declare i8* @__gmpz_get_str(i8*, i32, %struct.__mpz_struct*)

define i32 @smpList_create_class() nounwind {
  %listclass = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = alloca %struct.obj_struct, align 8
  %16 = alloca %struct.obj_struct, align 8
  %17 = alloca %struct.obj_struct, align 8
  %18 = alloca %struct.obj_struct, align 8
  %19 = alloca %struct.obj_struct, align 8
  %20 = alloca %struct.obj_struct, align 8
  %21 = alloca %struct.obj_struct, align 8
  %22 = alloca %struct.obj_struct, align 8
  %23 = alloca %struct.obj_struct, align 8
  %24 = alloca %struct.obj_struct, align 8
  %25 = alloca %struct.obj_struct, align 8
  %26 = alloca %struct.obj_struct, align 8
  %27 = alloca %struct.obj_struct, align 8
  %28 = alloca %struct.obj_struct, align 8
  %29 = alloca %struct.obj_struct, align 8
  %30 = alloca %struct.obj_struct, align 8
  %31 = alloca %struct.obj_struct, align 8
  %32 = alloca %struct.obj_struct, align 8
  %33 = alloca %struct.obj_struct, align 8
  %34 = alloca %struct.obj_struct, align 8
  %35 = alloca %struct.obj_struct, align 8
  %36 = alloca %struct.obj_struct, align 8
  %37 = alloca %struct.obj_struct, align 8
  %38 = alloca %struct.obj_struct, align 8
  %39 = alloca %struct.obj_struct, align 8
  %40 = alloca %struct.obj_struct, align 8
  %41 = alloca %struct.obj_struct, align 8
  %42 = alloca %struct.obj_struct, align 8
  %43 = alloca %struct.obj_struct, align 8
  %44 = alloca %struct.obj_struct, align 8
  %45 = alloca %struct.obj_struct, align 8
  %46 = alloca %struct.obj_struct, align 8
  %47 = alloca %struct.obj_struct, align 8
  %48 = alloca %struct.obj_struct, align 8
  %49 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %50 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = extractvalue { %struct.smpType_struct*, i8* } %49, 0
  store %struct.smpType_struct* %52, %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = extractvalue { %struct.smpType_struct*, i8* } %49, 1
  store i8* %54, i8** %53, align 1
  %55 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_add, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %56 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = extractvalue { %struct.smpType_struct*, i8* } %55, 0
  store %struct.smpType_struct* %58, %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = extractvalue { %struct.smpType_struct*, i8* } %55, 1
  store i8* %60, i8** %59, align 1
  %61 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 0
  %63 = load %struct.smpType_struct** %62, align 1
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 1
  %65 = load i8** %64, align 1
  %66 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = load %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = load i8** %69, align 1
  %71 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %63, i8* %65, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str65, i32 0, i32 0), %struct.smpType_struct* %68, i8* %70)
  %72 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 0
  %74 = extractvalue { %struct.smpType_struct*, i8* } %71, 0
  store %struct.smpType_struct* %74, %struct.smpType_struct** %73, align 1
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 1
  %76 = extractvalue { %struct.smpType_struct*, i8* } %71, 1
  store i8* %76, i8** %75, align 1
  %77 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_add_now, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %78 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 0
  %85 = load %struct.smpType_struct** %84, align 1
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %83, i32 0, i32 1
  %87 = load i8** %86, align 1
  %88 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = load %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = load i8** %91, align 1
  %93 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %85, i8* %87, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), %struct.smpType_struct* %90, i8* %92)
  %94 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 0
  %96 = extractvalue { %struct.smpType_struct*, i8* } %93, 0
  store %struct.smpType_struct* %96, %struct.smpType_struct** %95, align 1
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 1
  %98 = extractvalue { %struct.smpType_struct*, i8* } %93, 1
  store i8* %98, i8** %97, align 1
  %99 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_append, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %100 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 0
  %102 = extractvalue { %struct.smpType_struct*, i8* } %99, 0
  store %struct.smpType_struct* %102, %struct.smpType_struct** %101, align 1
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 1
  %104 = extractvalue { %struct.smpType_struct*, i8* } %99, 1
  store i8* %104, i8** %103, align 1
  %105 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 0
  %107 = load %struct.smpType_struct** %106, align 1
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 1
  %109 = load i8** %108, align 1
  %110 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 0
  %112 = load %struct.smpType_struct** %111, align 1
  %113 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 1
  %114 = load i8** %113, align 1
  %115 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %107, i8* %109, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str172, i32 0, i32 0), %struct.smpType_struct* %112, i8* %114)
  %116 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %116, i32 0, i32 0
  %118 = extractvalue { %struct.smpType_struct*, i8* } %115, 0
  store %struct.smpType_struct* %118, %struct.smpType_struct** %117, align 1
  %119 = getelementptr { %struct.smpType_struct*, i8* }* %116, i32 0, i32 1
  %120 = extractvalue { %struct.smpType_struct*, i8* } %115, 1
  store i8* %120, i8** %119, align 1
  %121 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_append_now, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %122 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 0
  %124 = extractvalue { %struct.smpType_struct*, i8* } %121, 0
  store %struct.smpType_struct* %124, %struct.smpType_struct** %123, align 1
  %125 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 1
  %126 = extractvalue { %struct.smpType_struct*, i8* } %121, 1
  store i8* %126, i8** %125, align 1
  %127 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 0
  %129 = load %struct.smpType_struct** %128, align 1
  %130 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 1
  %131 = load i8** %130, align 1
  %132 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %133 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 0
  %134 = load %struct.smpType_struct** %133, align 1
  %135 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 1
  %136 = load i8** %135, align 1
  %137 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %129, i8* %131, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str173, i32 0, i32 0), %struct.smpType_struct* %134, i8* %136)
  %138 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %139 = getelementptr { %struct.smpType_struct*, i8* }* %138, i32 0, i32 0
  %140 = extractvalue { %struct.smpType_struct*, i8* } %137, 0
  store %struct.smpType_struct* %140, %struct.smpType_struct** %139, align 1
  %141 = getelementptr { %struct.smpType_struct*, i8* }* %138, i32 0, i32 1
  %142 = extractvalue { %struct.smpType_struct*, i8* } %137, 1
  store i8* %142, i8** %141, align 1
  %143 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_at, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %144 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %145 = getelementptr { %struct.smpType_struct*, i8* }* %144, i32 0, i32 0
  %146 = extractvalue { %struct.smpType_struct*, i8* } %143, 0
  store %struct.smpType_struct* %146, %struct.smpType_struct** %145, align 1
  %147 = getelementptr { %struct.smpType_struct*, i8* }* %144, i32 0, i32 1
  %148 = extractvalue { %struct.smpType_struct*, i8* } %143, 1
  store i8* %148, i8** %147, align 1
  %149 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %150 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 0
  %151 = load %struct.smpType_struct** %150, align 1
  %152 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 1
  %153 = load i8** %152, align 1
  %154 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 0
  %156 = load %struct.smpType_struct** %155, align 1
  %157 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 1
  %158 = load i8** %157, align 1
  %159 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %151, i8* %153, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str96, i32 0, i32 0), %struct.smpType_struct* %156, i8* %158)
  %160 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %161 = getelementptr { %struct.smpType_struct*, i8* }* %160, i32 0, i32 0
  %162 = extractvalue { %struct.smpType_struct*, i8* } %159, 0
  store %struct.smpType_struct* %162, %struct.smpType_struct** %161, align 1
  %163 = getelementptr { %struct.smpType_struct*, i8* }* %160, i32 0, i32 1
  %164 = extractvalue { %struct.smpType_struct*, i8* } %159, 1
  store i8* %164, i8** %163, align 1
  %165 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_at_assign, i32 3, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %166 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %167 = getelementptr { %struct.smpType_struct*, i8* }* %166, i32 0, i32 0
  %168 = extractvalue { %struct.smpType_struct*, i8* } %165, 0
  store %struct.smpType_struct* %168, %struct.smpType_struct** %167, align 1
  %169 = getelementptr { %struct.smpType_struct*, i8* }* %166, i32 0, i32 1
  %170 = extractvalue { %struct.smpType_struct*, i8* } %165, 1
  store i8* %170, i8** %169, align 1
  %171 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %172 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 0
  %173 = load %struct.smpType_struct** %172, align 1
  %174 = getelementptr { %struct.smpType_struct*, i8* }* %171, i32 0, i32 1
  %175 = load i8** %174, align 1
  %176 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %177 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 0
  %178 = load %struct.smpType_struct** %177, align 1
  %179 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 1
  %180 = load i8** %179, align 1
  %181 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %173, i8* %175, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str97, i32 0, i32 0), %struct.smpType_struct* %178, i8* %180)
  %182 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %183 = getelementptr { %struct.smpType_struct*, i8* }* %182, i32 0, i32 0
  %184 = extractvalue { %struct.smpType_struct*, i8* } %181, 0
  store %struct.smpType_struct* %184, %struct.smpType_struct** %183, align 1
  %185 = getelementptr { %struct.smpType_struct*, i8* }* %182, i32 0, i32 1
  %186 = extractvalue { %struct.smpType_struct*, i8* } %181, 1
  store i8* %186, i8** %185, align 1
  %187 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_car, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %188 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %189 = getelementptr { %struct.smpType_struct*, i8* }* %188, i32 0, i32 0
  %190 = extractvalue { %struct.smpType_struct*, i8* } %187, 0
  store %struct.smpType_struct* %190, %struct.smpType_struct** %189, align 1
  %191 = getelementptr { %struct.smpType_struct*, i8* }* %188, i32 0, i32 1
  %192 = extractvalue { %struct.smpType_struct*, i8* } %187, 1
  store i8* %192, i8** %191, align 1
  %193 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %194 = getelementptr { %struct.smpType_struct*, i8* }* %193, i32 0, i32 0
  %195 = load %struct.smpType_struct** %194, align 1
  %196 = getelementptr { %struct.smpType_struct*, i8* }* %193, i32 0, i32 1
  %197 = load i8** %196, align 1
  %198 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %198, i32 0, i32 0
  %200 = load %struct.smpType_struct** %199, align 1
  %201 = getelementptr { %struct.smpType_struct*, i8* }* %198, i32 0, i32 1
  %202 = load i8** %201, align 1
  %203 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %195, i8* %197, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str174, i32 0, i32 0), %struct.smpType_struct* %200, i8* %202)
  %204 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %205 = getelementptr { %struct.smpType_struct*, i8* }* %204, i32 0, i32 0
  %206 = extractvalue { %struct.smpType_struct*, i8* } %203, 0
  store %struct.smpType_struct* %206, %struct.smpType_struct** %205, align 1
  %207 = getelementptr { %struct.smpType_struct*, i8* }* %204, i32 0, i32 1
  %208 = extractvalue { %struct.smpType_struct*, i8* } %203, 1
  store i8* %208, i8** %207, align 1
  %209 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_cdr, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %210 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %211 = getelementptr { %struct.smpType_struct*, i8* }* %210, i32 0, i32 0
  %212 = extractvalue { %struct.smpType_struct*, i8* } %209, 0
  store %struct.smpType_struct* %212, %struct.smpType_struct** %211, align 1
  %213 = getelementptr { %struct.smpType_struct*, i8* }* %210, i32 0, i32 1
  %214 = extractvalue { %struct.smpType_struct*, i8* } %209, 1
  store i8* %214, i8** %213, align 1
  %215 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %216 = getelementptr { %struct.smpType_struct*, i8* }* %215, i32 0, i32 0
  %217 = load %struct.smpType_struct** %216, align 1
  %218 = getelementptr { %struct.smpType_struct*, i8* }* %215, i32 0, i32 1
  %219 = load i8** %218, align 1
  %220 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %221 = getelementptr { %struct.smpType_struct*, i8* }* %220, i32 0, i32 0
  %222 = load %struct.smpType_struct** %221, align 1
  %223 = getelementptr { %struct.smpType_struct*, i8* }* %220, i32 0, i32 1
  %224 = load i8** %223, align 1
  %225 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %217, i8* %219, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str175, i32 0, i32 0), %struct.smpType_struct* %222, i8* %224)
  %226 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %227 = getelementptr { %struct.smpType_struct*, i8* }* %226, i32 0, i32 0
  %228 = extractvalue { %struct.smpType_struct*, i8* } %225, 0
  store %struct.smpType_struct* %228, %struct.smpType_struct** %227, align 1
  %229 = getelementptr { %struct.smpType_struct*, i8* }* %226, i32 0, i32 1
  %230 = extractvalue { %struct.smpType_struct*, i8* } %225, 1
  store i8* %230, i8** %229, align 1
  %231 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_concat, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %232 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %233 = getelementptr { %struct.smpType_struct*, i8* }* %232, i32 0, i32 0
  %234 = extractvalue { %struct.smpType_struct*, i8* } %231, 0
  store %struct.smpType_struct* %234, %struct.smpType_struct** %233, align 1
  %235 = getelementptr { %struct.smpType_struct*, i8* }* %232, i32 0, i32 1
  %236 = extractvalue { %struct.smpType_struct*, i8* } %231, 1
  store i8* %236, i8** %235, align 1
  %237 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %238 = getelementptr { %struct.smpType_struct*, i8* }* %237, i32 0, i32 0
  %239 = load %struct.smpType_struct** %238, align 1
  %240 = getelementptr { %struct.smpType_struct*, i8* }* %237, i32 0, i32 1
  %241 = load i8** %240, align 1
  %242 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %243 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 0
  %244 = load %struct.smpType_struct** %243, align 1
  %245 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 1
  %246 = load i8** %245, align 1
  %247 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %239, i8* %241, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str176, i32 0, i32 0), %struct.smpType_struct* %244, i8* %246)
  %248 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %249 = getelementptr { %struct.smpType_struct*, i8* }* %248, i32 0, i32 0
  %250 = extractvalue { %struct.smpType_struct*, i8* } %247, 0
  store %struct.smpType_struct* %250, %struct.smpType_struct** %249, align 1
  %251 = getelementptr { %struct.smpType_struct*, i8* }* %248, i32 0, i32 1
  %252 = extractvalue { %struct.smpType_struct*, i8* } %247, 1
  store i8* %252, i8** %251, align 1
  %253 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_concat_now, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %254 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %255 = getelementptr { %struct.smpType_struct*, i8* }* %254, i32 0, i32 0
  %256 = extractvalue { %struct.smpType_struct*, i8* } %253, 0
  store %struct.smpType_struct* %256, %struct.smpType_struct** %255, align 1
  %257 = getelementptr { %struct.smpType_struct*, i8* }* %254, i32 0, i32 1
  %258 = extractvalue { %struct.smpType_struct*, i8* } %253, 1
  store i8* %258, i8** %257, align 1
  %259 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %260 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 0
  %261 = load %struct.smpType_struct** %260, align 1
  %262 = getelementptr { %struct.smpType_struct*, i8* }* %259, i32 0, i32 1
  %263 = load i8** %262, align 1
  %264 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %265 = getelementptr { %struct.smpType_struct*, i8* }* %264, i32 0, i32 0
  %266 = load %struct.smpType_struct** %265, align 1
  %267 = getelementptr { %struct.smpType_struct*, i8* }* %264, i32 0, i32 1
  %268 = load i8** %267, align 1
  %269 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %261, i8* %263, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str177, i32 0, i32 0), %struct.smpType_struct* %266, i8* %268)
  %270 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %271 = getelementptr { %struct.smpType_struct*, i8* }* %270, i32 0, i32 0
  %272 = extractvalue { %struct.smpType_struct*, i8* } %269, 0
  store %struct.smpType_struct* %272, %struct.smpType_struct** %271, align 1
  %273 = getelementptr { %struct.smpType_struct*, i8* }* %270, i32 0, i32 1
  %274 = extractvalue { %struct.smpType_struct*, i8* } %269, 1
  store i8* %274, i8** %273, align 1
  %275 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_copy, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %276 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %277 = getelementptr { %struct.smpType_struct*, i8* }* %276, i32 0, i32 0
  %278 = extractvalue { %struct.smpType_struct*, i8* } %275, 0
  store %struct.smpType_struct* %278, %struct.smpType_struct** %277, align 1
  %279 = getelementptr { %struct.smpType_struct*, i8* }* %276, i32 0, i32 1
  %280 = extractvalue { %struct.smpType_struct*, i8* } %275, 1
  store i8* %280, i8** %279, align 1
  %281 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %282 = getelementptr { %struct.smpType_struct*, i8* }* %281, i32 0, i32 0
  %283 = load %struct.smpType_struct** %282, align 1
  %284 = getelementptr { %struct.smpType_struct*, i8* }* %281, i32 0, i32 1
  %285 = load i8** %284, align 1
  %286 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %287 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 0
  %288 = load %struct.smpType_struct** %287, align 1
  %289 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 1
  %290 = load i8** %289, align 1
  %291 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %283, i8* %285, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str98, i32 0, i32 0), %struct.smpType_struct* %288, i8* %290)
  %292 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %293 = getelementptr { %struct.smpType_struct*, i8* }* %292, i32 0, i32 0
  %294 = extractvalue { %struct.smpType_struct*, i8* } %291, 0
  store %struct.smpType_struct* %294, %struct.smpType_struct** %293, align 1
  %295 = getelementptr { %struct.smpType_struct*, i8* }* %292, i32 0, i32 1
  %296 = extractvalue { %struct.smpType_struct*, i8* } %291, 1
  store i8* %296, i8** %295, align 1
  %297 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_each, i32 2, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %298 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %299 = getelementptr { %struct.smpType_struct*, i8* }* %298, i32 0, i32 0
  %300 = extractvalue { %struct.smpType_struct*, i8* } %297, 0
  store %struct.smpType_struct* %300, %struct.smpType_struct** %299, align 1
  %301 = getelementptr { %struct.smpType_struct*, i8* }* %298, i32 0, i32 1
  %302 = extractvalue { %struct.smpType_struct*, i8* } %297, 1
  store i8* %302, i8** %301, align 1
  %303 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %304 = getelementptr { %struct.smpType_struct*, i8* }* %303, i32 0, i32 0
  %305 = load %struct.smpType_struct** %304, align 1
  %306 = getelementptr { %struct.smpType_struct*, i8* }* %303, i32 0, i32 1
  %307 = load i8** %306, align 1
  %308 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %309 = getelementptr { %struct.smpType_struct*, i8* }* %308, i32 0, i32 0
  %310 = load %struct.smpType_struct** %309, align 1
  %311 = getelementptr { %struct.smpType_struct*, i8* }* %308, i32 0, i32 1
  %312 = load i8** %311, align 1
  %313 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %305, i8* %307, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str178, i32 0, i32 0), %struct.smpType_struct* %310, i8* %312)
  %314 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %315 = getelementptr { %struct.smpType_struct*, i8* }* %314, i32 0, i32 0
  %316 = extractvalue { %struct.smpType_struct*, i8* } %313, 0
  store %struct.smpType_struct* %316, %struct.smpType_struct** %315, align 1
  %317 = getelementptr { %struct.smpType_struct*, i8* }* %314, i32 0, i32 1
  %318 = extractvalue { %struct.smpType_struct*, i8* } %313, 1
  store i8* %318, i8** %317, align 1
  %319 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_emptyp, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0))
  %320 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %321 = getelementptr { %struct.smpType_struct*, i8* }* %320, i32 0, i32 0
  %322 = extractvalue { %struct.smpType_struct*, i8* } %319, 0
  store %struct.smpType_struct* %322, %struct.smpType_struct** %321, align 1
  %323 = getelementptr { %struct.smpType_struct*, i8* }* %320, i32 0, i32 1
  %324 = extractvalue { %struct.smpType_struct*, i8* } %319, 1
  store i8* %324, i8** %323, align 1
  %325 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %326 = getelementptr { %struct.smpType_struct*, i8* }* %325, i32 0, i32 0
  %327 = load %struct.smpType_struct** %326, align 1
  %328 = getelementptr { %struct.smpType_struct*, i8* }* %325, i32 0, i32 1
  %329 = load i8** %328, align 1
  %330 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %331 = getelementptr { %struct.smpType_struct*, i8* }* %330, i32 0, i32 0
  %332 = load %struct.smpType_struct** %331, align 1
  %333 = getelementptr { %struct.smpType_struct*, i8* }* %330, i32 0, i32 1
  %334 = load i8** %333, align 1
  %335 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %327, i8* %329, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str179, i32 0, i32 0), %struct.smpType_struct* %332, i8* %334)
  %336 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %337 = getelementptr { %struct.smpType_struct*, i8* }* %336, i32 0, i32 0
  %338 = extractvalue { %struct.smpType_struct*, i8* } %335, 0
  store %struct.smpType_struct* %338, %struct.smpType_struct** %337, align 1
  %339 = getelementptr { %struct.smpType_struct*, i8* }* %336, i32 0, i32 1
  %340 = extractvalue { %struct.smpType_struct*, i8* } %335, 1
  store i8* %340, i8** %339, align 1
  %341 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_equalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %342 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %343 = getelementptr { %struct.smpType_struct*, i8* }* %342, i32 0, i32 0
  %344 = extractvalue { %struct.smpType_struct*, i8* } %341, 0
  store %struct.smpType_struct* %344, %struct.smpType_struct** %343, align 1
  %345 = getelementptr { %struct.smpType_struct*, i8* }* %342, i32 0, i32 1
  %346 = extractvalue { %struct.smpType_struct*, i8* } %341, 1
  store i8* %346, i8** %345, align 1
  %347 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %348 = getelementptr { %struct.smpType_struct*, i8* }* %347, i32 0, i32 0
  %349 = load %struct.smpType_struct** %348, align 1
  %350 = getelementptr { %struct.smpType_struct*, i8* }* %347, i32 0, i32 1
  %351 = load i8** %350, align 1
  %352 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %353 = getelementptr { %struct.smpType_struct*, i8* }* %352, i32 0, i32 0
  %354 = load %struct.smpType_struct** %353, align 1
  %355 = getelementptr { %struct.smpType_struct*, i8* }* %352, i32 0, i32 1
  %356 = load i8** %355, align 1
  %357 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %349, i8* %351, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str22, i32 0, i32 0), %struct.smpType_struct* %354, i8* %356)
  %358 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %359 = getelementptr { %struct.smpType_struct*, i8* }* %358, i32 0, i32 0
  %360 = extractvalue { %struct.smpType_struct*, i8* } %357, 0
  store %struct.smpType_struct* %360, %struct.smpType_struct** %359, align 1
  %361 = getelementptr { %struct.smpType_struct*, i8* }* %358, i32 0, i32 1
  %362 = extractvalue { %struct.smpType_struct*, i8* } %357, 1
  store i8* %362, i8** %361, align 1
  %363 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_length, i32 1, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %364 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %365 = getelementptr { %struct.smpType_struct*, i8* }* %364, i32 0, i32 0
  %366 = extractvalue { %struct.smpType_struct*, i8* } %363, 0
  store %struct.smpType_struct* %366, %struct.smpType_struct** %365, align 1
  %367 = getelementptr { %struct.smpType_struct*, i8* }* %364, i32 0, i32 1
  %368 = extractvalue { %struct.smpType_struct*, i8* } %363, 1
  store i8* %368, i8** %367, align 1
  %369 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %370 = getelementptr { %struct.smpType_struct*, i8* }* %369, i32 0, i32 0
  %371 = load %struct.smpType_struct** %370, align 1
  %372 = getelementptr { %struct.smpType_struct*, i8* }* %369, i32 0, i32 1
  %373 = load i8** %372, align 1
  %374 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %375 = getelementptr { %struct.smpType_struct*, i8* }* %374, i32 0, i32 0
  %376 = load %struct.smpType_struct** %375, align 1
  %377 = getelementptr { %struct.smpType_struct*, i8* }* %374, i32 0, i32 1
  %378 = load i8** %377, align 1
  %379 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %371, i8* %373, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str180, i32 0, i32 0), %struct.smpType_struct* %376, i8* %378)
  %380 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %381 = getelementptr { %struct.smpType_struct*, i8* }* %380, i32 0, i32 0
  %382 = extractvalue { %struct.smpType_struct*, i8* } %379, 0
  store %struct.smpType_struct* %382, %struct.smpType_struct** %381, align 1
  %383 = getelementptr { %struct.smpType_struct*, i8* }* %380, i32 0, i32 1
  %384 = extractvalue { %struct.smpType_struct*, i8* } %379, 1
  store i8* %384, i8** %383, align 1
  %385 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_map, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %386 = bitcast %struct.obj_struct* %31 to { %struct.smpType_struct*, i8* }*
  %387 = getelementptr { %struct.smpType_struct*, i8* }* %386, i32 0, i32 0
  %388 = extractvalue { %struct.smpType_struct*, i8* } %385, 0
  store %struct.smpType_struct* %388, %struct.smpType_struct** %387, align 1
  %389 = getelementptr { %struct.smpType_struct*, i8* }* %386, i32 0, i32 1
  %390 = extractvalue { %struct.smpType_struct*, i8* } %385, 1
  store i8* %390, i8** %389, align 1
  %391 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %392 = getelementptr { %struct.smpType_struct*, i8* }* %391, i32 0, i32 0
  %393 = load %struct.smpType_struct** %392, align 1
  %394 = getelementptr { %struct.smpType_struct*, i8* }* %391, i32 0, i32 1
  %395 = load i8** %394, align 1
  %396 = bitcast %struct.obj_struct* %31 to { %struct.smpType_struct*, i8* }*
  %397 = getelementptr { %struct.smpType_struct*, i8* }* %396, i32 0, i32 0
  %398 = load %struct.smpType_struct** %397, align 1
  %399 = getelementptr { %struct.smpType_struct*, i8* }* %396, i32 0, i32 1
  %400 = load i8** %399, align 1
  %401 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %393, i8* %395, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str99, i32 0, i32 0), %struct.smpType_struct* %398, i8* %400)
  %402 = bitcast %struct.obj_struct* %32 to { %struct.smpType_struct*, i8* }*
  %403 = getelementptr { %struct.smpType_struct*, i8* }* %402, i32 0, i32 0
  %404 = extractvalue { %struct.smpType_struct*, i8* } %401, 0
  store %struct.smpType_struct* %404, %struct.smpType_struct** %403, align 1
  %405 = getelementptr { %struct.smpType_struct*, i8* }* %402, i32 0, i32 1
  %406 = extractvalue { %struct.smpType_struct*, i8* } %401, 1
  store i8* %406, i8** %405, align 1
  %407 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_reduce, i32 4, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %408 = bitcast %struct.obj_struct* %33 to { %struct.smpType_struct*, i8* }*
  %409 = getelementptr { %struct.smpType_struct*, i8* }* %408, i32 0, i32 0
  %410 = extractvalue { %struct.smpType_struct*, i8* } %407, 0
  store %struct.smpType_struct* %410, %struct.smpType_struct** %409, align 1
  %411 = getelementptr { %struct.smpType_struct*, i8* }* %408, i32 0, i32 1
  %412 = extractvalue { %struct.smpType_struct*, i8* } %407, 1
  store i8* %412, i8** %411, align 1
  %413 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %414 = getelementptr { %struct.smpType_struct*, i8* }* %413, i32 0, i32 0
  %415 = load %struct.smpType_struct** %414, align 1
  %416 = getelementptr { %struct.smpType_struct*, i8* }* %413, i32 0, i32 1
  %417 = load i8** %416, align 1
  %418 = bitcast %struct.obj_struct* %33 to { %struct.smpType_struct*, i8* }*
  %419 = getelementptr { %struct.smpType_struct*, i8* }* %418, i32 0, i32 0
  %420 = load %struct.smpType_struct** %419, align 1
  %421 = getelementptr { %struct.smpType_struct*, i8* }* %418, i32 0, i32 1
  %422 = load i8** %421, align 1
  %423 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %415, i8* %417, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str100, i32 0, i32 0), %struct.smpType_struct* %420, i8* %422)
  %424 = bitcast %struct.obj_struct* %34 to { %struct.smpType_struct*, i8* }*
  %425 = getelementptr { %struct.smpType_struct*, i8* }* %424, i32 0, i32 0
  %426 = extractvalue { %struct.smpType_struct*, i8* } %423, 0
  store %struct.smpType_struct* %426, %struct.smpType_struct** %425, align 1
  %427 = getelementptr { %struct.smpType_struct*, i8* }* %424, i32 0, i32 1
  %428 = extractvalue { %struct.smpType_struct*, i8* } %423, 1
  store i8* %428, i8** %427, align 1
  %429 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_reverse, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %430 = bitcast %struct.obj_struct* %35 to { %struct.smpType_struct*, i8* }*
  %431 = getelementptr { %struct.smpType_struct*, i8* }* %430, i32 0, i32 0
  %432 = extractvalue { %struct.smpType_struct*, i8* } %429, 0
  store %struct.smpType_struct* %432, %struct.smpType_struct** %431, align 1
  %433 = getelementptr { %struct.smpType_struct*, i8* }* %430, i32 0, i32 1
  %434 = extractvalue { %struct.smpType_struct*, i8* } %429, 1
  store i8* %434, i8** %433, align 1
  %435 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %436 = getelementptr { %struct.smpType_struct*, i8* }* %435, i32 0, i32 0
  %437 = load %struct.smpType_struct** %436, align 1
  %438 = getelementptr { %struct.smpType_struct*, i8* }* %435, i32 0, i32 1
  %439 = load i8** %438, align 1
  %440 = bitcast %struct.obj_struct* %35 to { %struct.smpType_struct*, i8* }*
  %441 = getelementptr { %struct.smpType_struct*, i8* }* %440, i32 0, i32 0
  %442 = load %struct.smpType_struct** %441, align 1
  %443 = getelementptr { %struct.smpType_struct*, i8* }* %440, i32 0, i32 1
  %444 = load i8** %443, align 1
  %445 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %437, i8* %439, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str102, i32 0, i32 0), %struct.smpType_struct* %442, i8* %444)
  %446 = bitcast %struct.obj_struct* %36 to { %struct.smpType_struct*, i8* }*
  %447 = getelementptr { %struct.smpType_struct*, i8* }* %446, i32 0, i32 0
  %448 = extractvalue { %struct.smpType_struct*, i8* } %445, 0
  store %struct.smpType_struct* %448, %struct.smpType_struct** %447, align 1
  %449 = getelementptr { %struct.smpType_struct*, i8* }* %446, i32 0, i32 1
  %450 = extractvalue { %struct.smpType_struct*, i8* } %445, 1
  store i8* %450, i8** %449, align 1
  %451 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_sort, i32 3, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %452 = bitcast %struct.obj_struct* %37 to { %struct.smpType_struct*, i8* }*
  %453 = getelementptr { %struct.smpType_struct*, i8* }* %452, i32 0, i32 0
  %454 = extractvalue { %struct.smpType_struct*, i8* } %451, 0
  store %struct.smpType_struct* %454, %struct.smpType_struct** %453, align 1
  %455 = getelementptr { %struct.smpType_struct*, i8* }* %452, i32 0, i32 1
  %456 = extractvalue { %struct.smpType_struct*, i8* } %451, 1
  store i8* %456, i8** %455, align 1
  %457 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %458 = getelementptr { %struct.smpType_struct*, i8* }* %457, i32 0, i32 0
  %459 = load %struct.smpType_struct** %458, align 1
  %460 = getelementptr { %struct.smpType_struct*, i8* }* %457, i32 0, i32 1
  %461 = load i8** %460, align 1
  %462 = bitcast %struct.obj_struct* %37 to { %struct.smpType_struct*, i8* }*
  %463 = getelementptr { %struct.smpType_struct*, i8* }* %462, i32 0, i32 0
  %464 = load %struct.smpType_struct** %463, align 1
  %465 = getelementptr { %struct.smpType_struct*, i8* }* %462, i32 0, i32 1
  %466 = load i8** %465, align 1
  %467 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %459, i8* %461, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str104, i32 0, i32 0), %struct.smpType_struct* %464, i8* %466)
  %468 = bitcast %struct.obj_struct* %38 to { %struct.smpType_struct*, i8* }*
  %469 = getelementptr { %struct.smpType_struct*, i8* }* %468, i32 0, i32 0
  %470 = extractvalue { %struct.smpType_struct*, i8* } %467, 0
  store %struct.smpType_struct* %470, %struct.smpType_struct** %469, align 1
  %471 = getelementptr { %struct.smpType_struct*, i8* }* %468, i32 0, i32 1
  %472 = extractvalue { %struct.smpType_struct*, i8* } %467, 1
  store i8* %472, i8** %471, align 1
  %473 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_nsort, i32 3, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %474 = bitcast %struct.obj_struct* %39 to { %struct.smpType_struct*, i8* }*
  %475 = getelementptr { %struct.smpType_struct*, i8* }* %474, i32 0, i32 0
  %476 = extractvalue { %struct.smpType_struct*, i8* } %473, 0
  store %struct.smpType_struct* %476, %struct.smpType_struct** %475, align 1
  %477 = getelementptr { %struct.smpType_struct*, i8* }* %474, i32 0, i32 1
  %478 = extractvalue { %struct.smpType_struct*, i8* } %473, 1
  store i8* %478, i8** %477, align 1
  %479 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %480 = getelementptr { %struct.smpType_struct*, i8* }* %479, i32 0, i32 0
  %481 = load %struct.smpType_struct** %480, align 1
  %482 = getelementptr { %struct.smpType_struct*, i8* }* %479, i32 0, i32 1
  %483 = load i8** %482, align 1
  %484 = bitcast %struct.obj_struct* %39 to { %struct.smpType_struct*, i8* }*
  %485 = getelementptr { %struct.smpType_struct*, i8* }* %484, i32 0, i32 0
  %486 = load %struct.smpType_struct** %485, align 1
  %487 = getelementptr { %struct.smpType_struct*, i8* }* %484, i32 0, i32 1
  %488 = load i8** %487, align 1
  %489 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %481, i8* %483, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str181, i32 0, i32 0), %struct.smpType_struct* %486, i8* %488)
  %490 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %491 = getelementptr { %struct.smpType_struct*, i8* }* %490, i32 0, i32 0
  %492 = extractvalue { %struct.smpType_struct*, i8* } %489, 0
  store %struct.smpType_struct* %492, %struct.smpType_struct** %491, align 1
  %493 = getelementptr { %struct.smpType_struct*, i8* }* %490, i32 0, i32 1
  %494 = extractvalue { %struct.smpType_struct*, i8* } %489, 1
  store i8* %494, i8** %493, align 1
  %495 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_to_a, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %496 = bitcast %struct.obj_struct* %41 to { %struct.smpType_struct*, i8* }*
  %497 = getelementptr { %struct.smpType_struct*, i8* }* %496, i32 0, i32 0
  %498 = extractvalue { %struct.smpType_struct*, i8* } %495, 0
  store %struct.smpType_struct* %498, %struct.smpType_struct** %497, align 1
  %499 = getelementptr { %struct.smpType_struct*, i8* }* %496, i32 0, i32 1
  %500 = extractvalue { %struct.smpType_struct*, i8* } %495, 1
  store i8* %500, i8** %499, align 1
  %501 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %502 = getelementptr { %struct.smpType_struct*, i8* }* %501, i32 0, i32 0
  %503 = load %struct.smpType_struct** %502, align 1
  %504 = getelementptr { %struct.smpType_struct*, i8* }* %501, i32 0, i32 1
  %505 = load i8** %504, align 1
  %506 = bitcast %struct.obj_struct* %41 to { %struct.smpType_struct*, i8* }*
  %507 = getelementptr { %struct.smpType_struct*, i8* }* %506, i32 0, i32 0
  %508 = load %struct.smpType_struct** %507, align 1
  %509 = getelementptr { %struct.smpType_struct*, i8* }* %506, i32 0, i32 1
  %510 = load i8** %509, align 1
  %511 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %503, i8* %505, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str106, i32 0, i32 0), %struct.smpType_struct* %508, i8* %510)
  %512 = bitcast %struct.obj_struct* %42 to { %struct.smpType_struct*, i8* }*
  %513 = getelementptr { %struct.smpType_struct*, i8* }* %512, i32 0, i32 0
  %514 = extractvalue { %struct.smpType_struct*, i8* } %511, 0
  store %struct.smpType_struct* %514, %struct.smpType_struct** %513, align 1
  %515 = getelementptr { %struct.smpType_struct*, i8* }* %512, i32 0, i32 1
  %516 = extractvalue { %struct.smpType_struct*, i8* } %511, 1
  store i8* %516, i8** %515, align 1
  %517 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_to_list, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %518 = bitcast %struct.obj_struct* %43 to { %struct.smpType_struct*, i8* }*
  %519 = getelementptr { %struct.smpType_struct*, i8* }* %518, i32 0, i32 0
  %520 = extractvalue { %struct.smpType_struct*, i8* } %517, 0
  store %struct.smpType_struct* %520, %struct.smpType_struct** %519, align 1
  %521 = getelementptr { %struct.smpType_struct*, i8* }* %518, i32 0, i32 1
  %522 = extractvalue { %struct.smpType_struct*, i8* } %517, 1
  store i8* %522, i8** %521, align 1
  %523 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %524 = getelementptr { %struct.smpType_struct*, i8* }* %523, i32 0, i32 0
  %525 = load %struct.smpType_struct** %524, align 1
  %526 = getelementptr { %struct.smpType_struct*, i8* }* %523, i32 0, i32 1
  %527 = load i8** %526, align 1
  %528 = bitcast %struct.obj_struct* %43 to { %struct.smpType_struct*, i8* }*
  %529 = getelementptr { %struct.smpType_struct*, i8* }* %528, i32 0, i32 0
  %530 = load %struct.smpType_struct** %529, align 1
  %531 = getelementptr { %struct.smpType_struct*, i8* }* %528, i32 0, i32 1
  %532 = load i8** %531, align 1
  %533 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %525, i8* %527, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str107, i32 0, i32 0), %struct.smpType_struct* %530, i8* %532)
  %534 = bitcast %struct.obj_struct* %44 to { %struct.smpType_struct*, i8* }*
  %535 = getelementptr { %struct.smpType_struct*, i8* }* %534, i32 0, i32 0
  %536 = extractvalue { %struct.smpType_struct*, i8* } %533, 0
  store %struct.smpType_struct* %536, %struct.smpType_struct** %535, align 1
  %537 = getelementptr { %struct.smpType_struct*, i8* }* %534, i32 0, i32 1
  %538 = extractvalue { %struct.smpType_struct*, i8* } %533, 1
  store i8* %538, i8** %537, align 1
  %539 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_to_s, i32 3, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %540 = bitcast %struct.obj_struct* %45 to { %struct.smpType_struct*, i8* }*
  %541 = getelementptr { %struct.smpType_struct*, i8* }* %540, i32 0, i32 0
  %542 = extractvalue { %struct.smpType_struct*, i8* } %539, 0
  store %struct.smpType_struct* %542, %struct.smpType_struct** %541, align 1
  %543 = getelementptr { %struct.smpType_struct*, i8* }* %540, i32 0, i32 1
  %544 = extractvalue { %struct.smpType_struct*, i8* } %539, 1
  store i8* %544, i8** %543, align 1
  %545 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %546 = getelementptr { %struct.smpType_struct*, i8* }* %545, i32 0, i32 0
  %547 = load %struct.smpType_struct** %546, align 1
  %548 = getelementptr { %struct.smpType_struct*, i8* }* %545, i32 0, i32 1
  %549 = load i8** %548, align 1
  %550 = bitcast %struct.obj_struct* %45 to { %struct.smpType_struct*, i8* }*
  %551 = getelementptr { %struct.smpType_struct*, i8* }* %550, i32 0, i32 0
  %552 = load %struct.smpType_struct** %551, align 1
  %553 = getelementptr { %struct.smpType_struct*, i8* }* %550, i32 0, i32 1
  %554 = load i8** %553, align 1
  %555 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %547, i8* %549, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %552, i8* %554)
  %556 = bitcast %struct.obj_struct* %46 to { %struct.smpType_struct*, i8* }*
  %557 = getelementptr { %struct.smpType_struct*, i8* }* %556, i32 0, i32 0
  %558 = extractvalue { %struct.smpType_struct*, i8* } %555, 0
  store %struct.smpType_struct* %558, %struct.smpType_struct** %557, align 1
  %559 = getelementptr { %struct.smpType_struct*, i8* }* %556, i32 0, i32 1
  %560 = extractvalue { %struct.smpType_struct*, i8* } %555, 1
  store i8* %560, i8** %559, align 1
  %561 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_write, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %562 = bitcast %struct.obj_struct* %47 to { %struct.smpType_struct*, i8* }*
  %563 = getelementptr { %struct.smpType_struct*, i8* }* %562, i32 0, i32 0
  %564 = extractvalue { %struct.smpType_struct*, i8* } %561, 0
  store %struct.smpType_struct* %564, %struct.smpType_struct** %563, align 1
  %565 = getelementptr { %struct.smpType_struct*, i8* }* %562, i32 0, i32 1
  %566 = extractvalue { %struct.smpType_struct*, i8* } %561, 1
  store i8* %566, i8** %565, align 1
  %567 = bitcast %struct.obj_struct* %listclass to { %struct.smpType_struct*, i8* }*
  %568 = getelementptr { %struct.smpType_struct*, i8* }* %567, i32 0, i32 0
  %569 = load %struct.smpType_struct** %568, align 1
  %570 = getelementptr { %struct.smpType_struct*, i8* }* %567, i32 0, i32 1
  %571 = load i8** %570, align 1
  %572 = bitcast %struct.obj_struct* %47 to { %struct.smpType_struct*, i8* }*
  %573 = getelementptr { %struct.smpType_struct*, i8* }* %572, i32 0, i32 0
  %574 = load %struct.smpType_struct** %573, align 1
  %575 = getelementptr { %struct.smpType_struct*, i8* }* %572, i32 0, i32 1
  %576 = load i8** %575, align 1
  %577 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %569, i8* %571, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), %struct.smpType_struct* %574, i8* %576)
  %578 = bitcast %struct.obj_struct* %48 to { %struct.smpType_struct*, i8* }*
  %579 = getelementptr { %struct.smpType_struct*, i8* }* %578, i32 0, i32 0
  %580 = extractvalue { %struct.smpType_struct*, i8* } %577, 0
  store %struct.smpType_struct* %580, %struct.smpType_struct** %579, align 1
  %581 = getelementptr { %struct.smpType_struct*, i8* }* %578, i32 0, i32 1
  %582 = extractvalue { %struct.smpType_struct*, i8* } %577, 1
  store i8* %582, i8** %581, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpList_add(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %obj2 = alloca %struct.obj_struct, align 8
  %arg2 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = load %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = load i8** %11, align 1
  %13 = call { %struct.smpType_struct*, i8* } @smpList_copy(%struct.smpType_struct* %10, i8* %12, i32 0, %struct.obj_struct* null)
  %14 = bitcast %struct.obj_struct* %obj2 to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = extractvalue { %struct.smpType_struct*, i8* } %13, 0
  store %struct.smpType_struct* %16, %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = extractvalue { %struct.smpType_struct*, i8* } %13, 1
  store i8* %18, i8** %17, align 1
  %19 = load %struct.obj_struct** %3, align 8
  %20 = getelementptr inbounds %struct.obj_struct* %19, i64 0
  %21 = bitcast %struct.obj_struct* %arg2 to i8*
  %22 = bitcast %struct.obj_struct* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 16, i32 8, i1 false)
  %23 = getelementptr inbounds %struct.obj_struct* %arg2, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 8
  %25 = getelementptr inbounds %struct.smpType_struct* %24, i32 0, i32 1
  %26 = load i32* %25, align 4
  %27 = load i32* @smpType_id_list, align 4
  %28 = icmp eq i32 %26, %27
  br i1 %28, label %29, label %43

; <label>:29                                      ; preds = %0
  %30 = bitcast %struct.obj_struct* %arg2 to { %struct.smpType_struct*, i8* }*
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 0
  %32 = load %struct.smpType_struct** %31, align 1
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 1
  %34 = load i8** %33, align 1
  %35 = call { %struct.smpType_struct*, i8* } @smpList_copy(%struct.smpType_struct* %32, i8* %34, i32 0, %struct.obj_struct* null)
  %36 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  %41 = bitcast %struct.obj_struct* %arg2 to i8*
  %42 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 16, i32 8, i1 false)
  br label %43

; <label>:43                                      ; preds = %29, %0
  %44 = bitcast %struct.obj_struct* %obj2 to { %struct.smpType_struct*, i8* }*
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 0
  %46 = load %struct.smpType_struct** %45, align 1
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 1
  %48 = load i8** %47, align 1
  %49 = call { %struct.smpType_struct*, i8* } @smpList_add_now(%struct.smpType_struct* %46, i8* %48, i32 1, %struct.obj_struct* %arg2)
  %50 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = extractvalue { %struct.smpType_struct*, i8* } %49, 0
  store %struct.smpType_struct* %52, %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = extractvalue { %struct.smpType_struct*, i8* } %49, 1
  store i8* %54, i8** %53, align 1
  %55 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %56 = load { %struct.smpType_struct*, i8* }* %55, align 1
  ret { %struct.smpType_struct*, i8* } %56
}

define { %struct.smpType_struct*, i8* } @smpList_add_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %list_core = alloca %struct.smpPair_struct*, align 8
  %cons_cell = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 8
  %10 = getelementptr inbounds %struct.smpType_struct* %9, i32 0, i32 1
  %11 = load i32* %10, align 4
  %12 = load i32* @smpType_id_nil, align 4
  %13 = icmp eq i32 %11, %12
  br i1 %13, label %14, label %44

; <label>:14                                      ; preds = %0
  %15 = load %struct.obj_struct** %3, align 8
  %16 = getelementptr inbounds %struct.obj_struct* %15, i64 0
  %17 = getelementptr inbounds %struct.obj_struct* %16, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 8
  %19 = getelementptr inbounds %struct.smpType_struct* %18, i32 0, i32 1
  %20 = load i32* %19, align 4
  %21 = load i32* @smpType_id_list, align 4
  %22 = icmp eq i32 %20, %21
  br i1 %22, label %23, label %28

; <label>:23                                      ; preds = %14
  %24 = load %struct.obj_struct** %3, align 8
  %25 = getelementptr inbounds %struct.obj_struct* %24, i64 0
  %26 = bitcast %struct.obj_struct* %1 to i8*
  %27 = bitcast %struct.obj_struct* %25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  br label %109

; <label>:28                                      ; preds = %14
  %29 = load %struct.obj_struct** %3, align 8
  %30 = getelementptr inbounds %struct.obj_struct* %29, i64 0
  %31 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %37 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %38 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %33, i8* %35, %struct.smpType_struct* %36, i8* %37)
  %39 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = extractvalue { %struct.smpType_struct*, i8* } %38, 0
  store %struct.smpType_struct* %41, %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = extractvalue { %struct.smpType_struct*, i8* } %38, 1
  store i8* %43, i8** %42, align 1
  br label %109

; <label>:44                                      ; preds = %0
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  br label %45

; <label>:45                                      ; preds = %53, %44
  %46 = load %struct.obj_struct** %ptr, align 8
  %47 = getelementptr inbounds %struct.obj_struct* %46, i32 0, i32 1
  %48 = load i8** %47, align 8
  %49 = bitcast i8* %48 to %struct.smpPair_struct*
  %50 = getelementptr inbounds %struct.smpPair_struct* %49, i32 0, i32 1
  %51 = load %struct.obj_struct** %50, align 8
  %52 = icmp ne %struct.obj_struct* %51, null
  br i1 %52, label %53, label %60

; <label>:53                                      ; preds = %45
  %54 = load %struct.obj_struct** %ptr, align 8
  %55 = getelementptr inbounds %struct.obj_struct* %54, i32 0, i32 1
  %56 = load i8** %55, align 8
  %57 = bitcast i8* %56 to %struct.smpPair_struct*
  %58 = getelementptr inbounds %struct.smpPair_struct* %57, i32 0, i32 1
  %59 = load %struct.obj_struct** %58, align 8
  store %struct.obj_struct* %59, %struct.obj_struct** %ptr, align 8
  br label %45

; <label>:60                                      ; preds = %45
  %61 = load %struct.obj_struct** %ptr, align 8
  %62 = getelementptr inbounds %struct.obj_struct* %61, i32 0, i32 1
  %63 = load i8** %62, align 8
  %64 = bitcast i8* %63 to %struct.smpPair_struct*
  store %struct.smpPair_struct* %64, %struct.smpPair_struct** %list_core, align 8
  %65 = bitcast %struct.obj_struct* %cons_cell to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %65, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %66 = load %struct.obj_struct** %3, align 8
  %67 = getelementptr inbounds %struct.obj_struct* %66, i64 0
  %68 = getelementptr inbounds %struct.obj_struct* %67, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 8
  %70 = getelementptr inbounds %struct.smpType_struct* %69, i32 0, i32 1
  %71 = load i32* %70, align 4
  %72 = load i32* @smpType_id_list, align 4
  %73 = icmp eq i32 %71, %72
  br i1 %73, label %74, label %79

; <label>:74                                      ; preds = %60
  %75 = load %struct.obj_struct** %3, align 8
  %76 = getelementptr inbounds %struct.obj_struct* %75, i64 0
  %77 = bitcast %struct.obj_struct* %cons_cell to i8*
  %78 = bitcast %struct.obj_struct* %76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %77, i8* %78, i64 16, i32 8, i1 false)
  br label %97

; <label>:79                                      ; preds = %60
  %80 = load %struct.obj_struct** %3, align 8
  %81 = getelementptr inbounds %struct.obj_struct* %80, i64 0
  %82 = bitcast %struct.obj_struct* %81 to { %struct.smpType_struct*, i8* }*
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 0
  %84 = load %struct.smpType_struct** %83, align 1
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 1
  %86 = load i8** %85, align 1
  %87 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %88 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %89 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %84, i8* %86, %struct.smpType_struct* %87, i8* %88)
  %90 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = extractvalue { %struct.smpType_struct*, i8* } %89, 0
  store %struct.smpType_struct* %92, %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = extractvalue { %struct.smpType_struct*, i8* } %89, 1
  store i8* %94, i8** %93, align 1
  %95 = bitcast %struct.obj_struct* %cons_cell to i8*
  %96 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %95, i8* %96, i64 16, i32 8, i1 false)
  br label %97

; <label>:97                                      ; preds = %79, %74
  %98 = call noalias i8* @GC_malloc(i64 16)
  %99 = bitcast i8* %98 to %struct.obj_struct*
  %100 = load %struct.smpPair_struct** %list_core, align 8
  %101 = getelementptr inbounds %struct.smpPair_struct* %100, i32 0, i32 1
  store %struct.obj_struct* %99, %struct.obj_struct** %101, align 8
  %102 = load %struct.smpPair_struct** %list_core, align 8
  %103 = getelementptr inbounds %struct.smpPair_struct* %102, i32 0, i32 1
  %104 = load %struct.obj_struct** %103, align 8
  %105 = bitcast %struct.obj_struct* %104 to i8*
  %106 = bitcast %struct.obj_struct* %cons_cell to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 16, i32 8, i1 false)
  %107 = bitcast %struct.obj_struct* %1 to i8*
  %108 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %107, i8* %108, i64 16, i32 8, i1 false)
  br label %109

; <label>:109                                     ; preds = %97, %28, %23
  %110 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %111 = load { %struct.smpType_struct*, i8* }* %110, align 1
  ret { %struct.smpType_struct*, i8* } %111
}

define { %struct.smpType_struct*, i8* } @smpList_append(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %obj2 = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpList_copy(%struct.smpType_struct* %9, i8* %11, i32 0, %struct.obj_struct* null)
  %13 = bitcast %struct.obj_struct* %obj2 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %obj2 to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %20, i8* %22)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %0
  %26 = bitcast %struct.obj_struct* %1 to i8*
  %27 = bitcast %struct.obj_struct* %obj2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  br label %42

; <label>:28                                      ; preds = %0
  %29 = load i32* %2, align 4
  %30 = load %struct.obj_struct** %3, align 8
  %31 = bitcast %struct.obj_struct* %obj2 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = call { %struct.smpType_struct*, i8* } @smpList_append_now(%struct.smpType_struct* %33, i8* %35, i32 %29, %struct.obj_struct* %30)
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = extractvalue { %struct.smpType_struct*, i8* } %36, 0
  store %struct.smpType_struct* %39, %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = extractvalue { %struct.smpType_struct*, i8* } %36, 1
  store i8* %41, i8** %40, align 1
  br label %42

; <label>:42                                      ; preds = %28, %25
  %43 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %44 = load { %struct.smpType_struct*, i8* }* %43, align 1
  ret { %struct.smpType_struct*, i8* } %44
}

define { %struct.smpType_struct*, i8* } @smpList_at(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %index = alloca i64, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %63, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = getelementptr inbounds %struct.obj_struct* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %15
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %96

; <label>:29                                      ; preds = %15
  %30 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %37 = load i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.smpType_struct*
  %39 = load %struct.obj_struct** %3, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 0
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %38, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %96

; <label>:63                                      ; preds = %0
  %64 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %65 = load %struct.obj_struct** %3, align 8
  %66 = getelementptr inbounds %struct.obj_struct* %65, i64 0
  %67 = bitcast %struct.obj_struct* %66 to { %struct.smpType_struct*, i8* }*
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 1
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 1
  %71 = load i8** %70, align 1
  %72 = call i64 @smpInteger_to_clong(%struct.obj_struct* %ret, %struct.smpType_struct* %69, i8* %71)
  store i64 %72, i64* %index, align 8
  %73 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = load %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = load i8** %76, align 1
  %78 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %75, i8* %77)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %83

; <label>:80                                      ; preds = %63
  %81 = bitcast %struct.obj_struct* %1 to i8*
  %82 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false)
  br label %96

; <label>:83                                      ; preds = %63
  %84 = load i64* %index, align 8
  %85 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 0
  %87 = load %struct.smpType_struct** %86, align 1
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 1
  %89 = load i8** %88, align 1
  %90 = call { %struct.smpType_struct*, i8* } @smpList_at_c(%struct.smpType_struct* %87, i8* %89, i64 %84)
  %91 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 0
  %93 = extractvalue { %struct.smpType_struct*, i8* } %90, 0
  store %struct.smpType_struct* %93, %struct.smpType_struct** %92, align 1
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 1
  %95 = extractvalue { %struct.smpType_struct*, i8* } %90, 1
  store i8* %95, i8** %94, align 1
  br label %96

; <label>:96                                      ; preds = %83, %80, %29, %24
  %97 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %98 = load { %struct.smpType_struct*, i8* }* %97, align 1
  ret { %struct.smpType_struct*, i8* } %98
}

define { %struct.smpType_struct*, i8* } @smpList_at_assign(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %index = alloca i64, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %63, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = getelementptr inbounds %struct.obj_struct* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %15
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %103

; <label>:29                                      ; preds = %15
  %30 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %37 = load i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.smpType_struct*
  %39 = load %struct.obj_struct** %3, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 0
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %38, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %103

; <label>:63                                      ; preds = %0
  %64 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %64, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %65 = load %struct.obj_struct** %3, align 8
  %66 = getelementptr inbounds %struct.obj_struct* %65, i64 0
  %67 = bitcast %struct.obj_struct* %66 to { %struct.smpType_struct*, i8* }*
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 1
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 1
  %71 = load i8** %70, align 1
  %72 = call i64 @smpInteger_to_clong(%struct.obj_struct* %ret, %struct.smpType_struct* %69, i8* %71)
  store i64 %72, i64* %index, align 8
  %73 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = load %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = load i8** %76, align 1
  %78 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %75, i8* %77)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %83

; <label>:80                                      ; preds = %63
  %81 = bitcast %struct.obj_struct* %1 to i8*
  %82 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %81, i8* %82, i64 16, i32 8, i1 false)
  br label %103

; <label>:83                                      ; preds = %63
  %84 = load i64* %index, align 8
  %85 = load %struct.obj_struct** %3, align 8
  %86 = getelementptr inbounds %struct.obj_struct* %85, i64 1
  %87 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = load %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = load i8** %90, align 1
  %92 = bitcast %struct.obj_struct* %86 to { %struct.smpType_struct*, i8* }*
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 0
  %94 = load %struct.smpType_struct** %93, align 1
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 1
  %96 = load i8** %95, align 1
  %97 = call { %struct.smpType_struct*, i8* } @smpList_at_assign_c(%struct.smpType_struct* %89, i8* %91, i64 %84, %struct.smpType_struct* %94, i8* %96)
  %98 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 0
  %100 = extractvalue { %struct.smpType_struct*, i8* } %97, 0
  store %struct.smpType_struct* %100, %struct.smpType_struct** %99, align 1
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 1
  %102 = extractvalue { %struct.smpType_struct*, i8* } %97, 1
  store i8* %102, i8** %101, align 1
  br label %103

; <label>:103                                     ; preds = %83, %80, %29, %24
  %104 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %105 = load { %struct.smpType_struct*, i8* }* %104, align 1
  ret { %struct.smpType_struct*, i8* } %105
}

define { %struct.smpType_struct*, i8* } @smpList_concat(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %63, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = getelementptr inbounds %struct.obj_struct* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %15
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %89

; <label>:29                                      ; preds = %15
  %30 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %37 = load i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.smpType_struct*
  %39 = load %struct.obj_struct** %3, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 0
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %38, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %89

; <label>:63                                      ; preds = %0
  %64 = load %struct.obj_struct** %3, align 8
  %65 = getelementptr inbounds %struct.obj_struct* %64, i64 0
  %66 = getelementptr inbounds %struct.obj_struct* %65, i32 0, i32 0
  %67 = load %struct.smpType_struct** %66, align 8
  %68 = getelementptr inbounds %struct.smpType_struct* %67, i32 0, i32 1
  %69 = load i32* %68, align 4
  %70 = load i32* @smpType_id_nil, align 4
  %71 = icmp eq i32 %69, %70
  br i1 %71, label %72, label %75

; <label>:72                                      ; preds = %63
  %73 = bitcast %struct.obj_struct* %1 to i8*
  %74 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %73, i8* %74, i64 16, i32 8, i1 false)
  br label %89

; <label>:75                                      ; preds = %63
  %76 = load i32* %2, align 4
  %77 = load %struct.obj_struct** %3, align 8
  %78 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = load %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = load i8** %81, align 1
  %83 = call { %struct.smpType_struct*, i8* } @smpList_add(%struct.smpType_struct* %80, i8* %82, i32 %76, %struct.obj_struct* %77)
  %84 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = extractvalue { %struct.smpType_struct*, i8* } %83, 0
  store %struct.smpType_struct* %86, %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = extractvalue { %struct.smpType_struct*, i8* } %83, 1
  store i8* %88, i8** %87, align 1
  br label %89

; <label>:89                                      ; preds = %75, %72, %29, %24
  %90 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %91 = load { %struct.smpType_struct*, i8* }* %90, align 1
  ret { %struct.smpType_struct*, i8* } %91
}

define { %struct.smpType_struct*, i8* } @smpList_concat_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = load %struct.obj_struct** %3, align 8
  %10 = getelementptr inbounds %struct.obj_struct* %9, i64 0
  %11 = getelementptr inbounds %struct.obj_struct* %10, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %63, label %15

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = getelementptr inbounds %struct.obj_struct* %17, i32 0, i32 0
  %19 = load %struct.smpType_struct** %18, align 8
  %20 = getelementptr inbounds %struct.smpType_struct* %19, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = call i32 @strcmp(i8* %21, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %29

; <label>:24                                      ; preds = %15
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %89

; <label>:29                                      ; preds = %15
  %30 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %31 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  %36 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %37 = load i8** %36, align 8
  %38 = bitcast i8* %37 to %struct.smpType_struct*
  %39 = load %struct.obj_struct** %3, align 8
  %40 = getelementptr inbounds %struct.obj_struct* %39, i64 0
  %41 = bitcast %struct.obj_struct* %40 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %38, %struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %89

; <label>:63                                      ; preds = %0
  %64 = load %struct.obj_struct** %3, align 8
  %65 = getelementptr inbounds %struct.obj_struct* %64, i64 0
  %66 = getelementptr inbounds %struct.obj_struct* %65, i32 0, i32 0
  %67 = load %struct.smpType_struct** %66, align 8
  %68 = getelementptr inbounds %struct.smpType_struct* %67, i32 0, i32 1
  %69 = load i32* %68, align 4
  %70 = load i32* @smpType_id_nil, align 4
  %71 = icmp eq i32 %69, %70
  br i1 %71, label %72, label %75

; <label>:72                                      ; preds = %63
  %73 = bitcast %struct.obj_struct* %1 to i8*
  %74 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %73, i8* %74, i64 16, i32 8, i1 false)
  br label %89

; <label>:75                                      ; preds = %63
  %76 = load i32* %2, align 4
  %77 = load %struct.obj_struct** %3, align 8
  %78 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = load %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = load i8** %81, align 1
  %83 = call { %struct.smpType_struct*, i8* } @smpList_add_now(%struct.smpType_struct* %80, i8* %82, i32 %76, %struct.obj_struct* %77)
  %84 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = extractvalue { %struct.smpType_struct*, i8* } %83, 0
  store %struct.smpType_struct* %86, %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = extractvalue { %struct.smpType_struct*, i8* } %83, 1
  store i8* %88, i8** %87, align 1
  br label %89

; <label>:89                                      ; preds = %75, %72, %29, %24
  %90 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %91 = load { %struct.smpType_struct*, i8* }* %90, align 1
  ret { %struct.smpType_struct*, i8* } %91
}

define { %struct.smpType_struct*, i8* } @smpList_copy(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %last = alloca %struct.obj_struct, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %car = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %obj.coerce1, i8** %9
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %10 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %11 = bitcast %struct.obj_struct* %last to i8*
  %12 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 16, i32 8, i1 false)
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  %13 = bitcast %struct.obj_struct* %car to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %14

; <label>:14                                      ; preds = %92, %0
  %15 = load %struct.obj_struct** %ptr, align 8
  %16 = icmp ne %struct.obj_struct* %15, null
  br i1 %16, label %17, label %99

; <label>:17                                      ; preds = %14
  %18 = load %struct.obj_struct** %ptr, align 8
  %19 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 0
  %21 = load %struct.smpType_struct** %20, align 1
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 1
  %23 = load i8** %22, align 1
  %24 = call { %struct.smpType_struct*, i8* } @smpList_car(%struct.smpType_struct* %21, i8* %23, i32 0, %struct.obj_struct* null)
  %25 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = extractvalue { %struct.smpType_struct*, i8* } %24, 0
  store %struct.smpType_struct* %27, %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = extractvalue { %struct.smpType_struct*, i8* } %24, 1
  store i8* %29, i8** %28, align 1
  %30 = bitcast %struct.obj_struct* %car to i8*
  %31 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* %31, i64 16, i32 8, i1 false)
  %32 = getelementptr inbounds %struct.obj_struct* %last, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 8
  %34 = getelementptr inbounds %struct.smpType_struct* %33, i32 0, i32 1
  %35 = load i32* %34, align 4
  %36 = load i32* @smpType_id_nil, align 4
  %37 = icmp eq i32 %35, %36
  br i1 %37, label %38, label %54

; <label>:38                                      ; preds = %17
  %39 = bitcast %struct.obj_struct* %car to { %struct.smpType_struct*, i8* }*
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 0
  %41 = load %struct.smpType_struct** %40, align 1
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %39, i32 0, i32 1
  %43 = load i8** %42, align 1
  %44 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %41, i8* %43, i32 1, %struct.obj_struct* @smp_nil)
  %45 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = extractvalue { %struct.smpType_struct*, i8* } %44, 0
  store %struct.smpType_struct* %47, %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = extractvalue { %struct.smpType_struct*, i8* } %44, 1
  store i8* %49, i8** %48, align 1
  %50 = bitcast %struct.obj_struct* %res to i8*
  %51 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 16, i32 8, i1 false)
  %52 = bitcast %struct.obj_struct* %last to i8*
  %53 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* %53, i64 16, i32 8, i1 false)
  br label %92

; <label>:54                                      ; preds = %17
  %55 = call noalias i8* @GC_malloc(i64 16)
  %56 = bitcast i8* %55 to %struct.obj_struct*
  %57 = getelementptr inbounds %struct.obj_struct* %last, i32 0, i32 1
  %58 = load i8** %57, align 8
  %59 = bitcast i8* %58 to %struct.smpPair_struct*
  %60 = getelementptr inbounds %struct.smpPair_struct* %59, i32 0, i32 1
  store %struct.obj_struct* %56, %struct.obj_struct** %60, align 8
  %61 = getelementptr inbounds %struct.obj_struct* %last, i32 0, i32 1
  %62 = load i8** %61, align 8
  %63 = bitcast i8* %62 to %struct.smpPair_struct*
  %64 = getelementptr inbounds %struct.smpPair_struct* %63, i32 0, i32 1
  %65 = load %struct.obj_struct** %64, align 8
  %66 = bitcast %struct.obj_struct* %car to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = load %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = load i8** %69, align 1
  %71 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %68, i8* %70, i32 1, %struct.obj_struct* @smp_nil)
  %72 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 0
  %74 = extractvalue { %struct.smpType_struct*, i8* } %71, 0
  store %struct.smpType_struct* %74, %struct.smpType_struct** %73, align 1
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 1
  %76 = extractvalue { %struct.smpType_struct*, i8* } %71, 1
  store i8* %76, i8** %75, align 1
  %77 = bitcast %struct.obj_struct* %65 to i8*
  %78 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %77, i8* %78, i64 16, i32 8, i1 false)
  %79 = bitcast %struct.obj_struct* %last to i8*
  %80 = bitcast %struct.obj_struct* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %79, i8* %80, i64 16, i32 8, i1 false)
  %81 = bitcast %struct.obj_struct* %last to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = load %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = load i8** %84, align 1
  %86 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %83, i8* %85)
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %91

; <label>:88                                      ; preds = %54
  %89 = bitcast %struct.obj_struct* %1 to i8*
  %90 = bitcast %struct.obj_struct* %last to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %89, i8* %90, i64 16, i32 8, i1 false)
  br label %102

; <label>:91                                      ; preds = %54
  br label %92

; <label>:92                                      ; preds = %91, %38
  %93 = load %struct.obj_struct** %ptr, align 8
  %94 = getelementptr inbounds %struct.obj_struct* %93, i32 0, i32 1
  %95 = load i8** %94, align 8
  %96 = bitcast i8* %95 to %struct.smpPair_struct*
  %97 = getelementptr inbounds %struct.smpPair_struct* %96, i32 0, i32 1
  %98 = load %struct.obj_struct** %97, align 8
  store %struct.obj_struct* %98, %struct.obj_struct** %ptr, align 8
  br label %14

; <label>:99                                      ; preds = %14
  %100 = bitcast %struct.obj_struct* %1 to i8*
  %101 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %100, i8* %101, i64 16, i32 8, i1 false)
  br label %102

; <label>:102                                     ; preds = %99, %88
  %103 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %104 = load { %struct.smpType_struct*, i8* }* %103, align 1
  ret { %struct.smpType_struct*, i8* } %104
}

define { %struct.smpType_struct*, i8* } @smpList_each(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %list = alloca %struct.smpPair_struct*, align 8
  %code = alloca %struct.obj_struct, align 8
  %rest = alloca %struct.obj_struct*, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %9
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  store i8* %obj.coerce1, i8** %10
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = getelementptr inbounds %struct.smpType_struct* %12, i32 0, i32 1
  %14 = load i32* %13, align 4
  %15 = load i32* @smpType_id_nil, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %19

; <label>:17                                      ; preds = %0
  %18 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %161

; <label>:19                                      ; preds = %0
  %20 = load %struct.obj_struct** %3, align 8
  %21 = getelementptr inbounds %struct.obj_struct* %20, i64 0
  %22 = getelementptr inbounds %struct.obj_struct* %21, i32 0, i32 0
  %23 = load %struct.smpType_struct** %22, align 8
  %24 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %23, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %74, label %26

; <label>:26                                      ; preds = %19
  %27 = load %struct.obj_struct** %3, align 8
  %28 = getelementptr inbounds %struct.obj_struct* %27, i64 0
  %29 = getelementptr inbounds %struct.obj_struct* %28, i32 0, i32 0
  %30 = load %struct.smpType_struct** %29, align 8
  %31 = getelementptr inbounds %struct.smpType_struct* %30, i32 0, i32 0
  %32 = load i8** %31, align 8
  %33 = call i32 @strcmp(i8* %32, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %40

; <label>:35                                      ; preds = %26
  %36 = load %struct.obj_struct** %3, align 8
  %37 = getelementptr inbounds %struct.obj_struct* %36, i64 0
  %38 = bitcast %struct.obj_struct* %1 to i8*
  %39 = bitcast %struct.obj_struct* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 16, i32 8, i1 false)
  br label %161

; <label>:40                                      ; preds = %26
  %41 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %42 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = extractvalue { %struct.smpType_struct*, i8* } %41, 0
  store %struct.smpType_struct* %44, %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = extractvalue { %struct.smpType_struct*, i8* } %41, 1
  store i8* %46, i8** %45, align 1
  %47 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %48 = load i8** %47, align 8
  %49 = bitcast i8* %48 to %struct.smpType_struct*
  %50 = load %struct.obj_struct** %3, align 8
  %51 = getelementptr inbounds %struct.obj_struct* %50, i64 0
  %52 = bitcast %struct.obj_struct* %51 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %49, %struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  %63 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 0
  %65 = load %struct.smpType_struct** %64, align 1
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 1
  %67 = load i8** %66, align 1
  %68 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %65, i8* %67)
  %69 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 0
  %71 = extractvalue { %struct.smpType_struct*, i8* } %68, 0
  store %struct.smpType_struct* %71, %struct.smpType_struct** %70, align 1
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 1
  %73 = extractvalue { %struct.smpType_struct*, i8* } %68, 1
  store i8* %73, i8** %72, align 1
  br label %161

; <label>:74                                      ; preds = %19
  %75 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %76 = load i8** %75, align 8
  %77 = bitcast i8* %76 to %struct.smpPair_struct*
  store %struct.smpPair_struct* %77, %struct.smpPair_struct** %list, align 8
  br label %78

; <label>:78                                      ; preds = %158, %74
  %79 = load %struct.smpPair_struct** %list, align 8
  %80 = icmp ne %struct.smpPair_struct* %79, null
  br i1 %80, label %81, label %159

; <label>:81                                      ; preds = %78
  %82 = load %struct.obj_struct** %3, align 8
  %83 = getelementptr inbounds %struct.obj_struct* %82, i64 0
  %84 = load %struct.smpPair_struct** %list, align 8
  %85 = getelementptr inbounds %struct.smpPair_struct* %84, i32 0, i32 0
  %86 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %87 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %88 = bitcast %struct.obj_struct* %83 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = load %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = load i8** %91, align 1
  %93 = call { %struct.smpType_struct*, i8* } @smpFunction_call(%struct.smpType_struct* %86, i8* %87, %struct.smpType_struct* %90, i8* %92, i32 1, %struct.obj_struct* %85)
  %94 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 0
  %96 = extractvalue { %struct.smpType_struct*, i8* } %93, 0
  store %struct.smpType_struct* %96, %struct.smpType_struct** %95, align 1
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 1
  %98 = extractvalue { %struct.smpType_struct*, i8* } %93, 1
  store i8* %98, i8** %97, align 1
  %99 = bitcast %struct.obj_struct* %code to i8*
  %100 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %99, i8* %100, i64 16, i32 8, i1 false)
  %101 = bitcast %struct.obj_struct* %code to { %struct.smpType_struct*, i8* }*
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 0
  %103 = load %struct.smpType_struct** %102, align 1
  %104 = getelementptr { %struct.smpType_struct*, i8* }* %101, i32 0, i32 1
  %105 = load i8** %104, align 1
  %106 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %103, i8* %105)
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %108, label %111

; <label>:108                                     ; preds = %81
  %109 = bitcast %struct.obj_struct* %1 to i8*
  %110 = bitcast %struct.obj_struct* %code to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* %110, i64 16, i32 8, i1 false)
  br label %161

; <label>:111                                     ; preds = %81
  %112 = load %struct.smpPair_struct** %list, align 8
  %113 = getelementptr inbounds %struct.smpPair_struct* %112, i32 0, i32 1
  %114 = load %struct.obj_struct** %113, align 8
  store %struct.obj_struct* %114, %struct.obj_struct** %rest, align 8
  %115 = load %struct.obj_struct** %rest, align 8
  %116 = icmp eq %struct.obj_struct* %115, null
  br i1 %116, label %117, label %118

; <label>:117                                     ; preds = %111
  br label %159

; <label>:118                                     ; preds = %111
  %119 = load %struct.obj_struct** %rest, align 8
  %120 = getelementptr inbounds %struct.obj_struct* %119, i32 0, i32 0
  %121 = load %struct.smpType_struct** %120, align 8
  %122 = getelementptr inbounds %struct.smpType_struct* %121, i32 0, i32 1
  %123 = load i32* %122, align 4
  %124 = load i32* @smpType_id_list, align 4
  %125 = icmp eq i32 %123, %124
  br i1 %125, label %126, label %131

; <label>:126                                     ; preds = %118
  %127 = load %struct.obj_struct** %rest, align 8
  %128 = getelementptr inbounds %struct.obj_struct* %127, i32 0, i32 1
  %129 = load i8** %128, align 8
  %130 = bitcast i8* %129 to %struct.smpPair_struct*
  store %struct.smpPair_struct* %130, %struct.smpPair_struct** %list, align 8
  br label %157

; <label>:131                                     ; preds = %118
  %132 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %133 = load %struct.smpType_struct** %132, align 8
  %134 = load %struct.obj_struct** %rest, align 8
  %135 = bitcast %struct.obj_struct* %134 to { %struct.smpType_struct*, i8* }*
  %136 = getelementptr { %struct.smpType_struct*, i8* }* %135, i32 0, i32 0
  %137 = load %struct.smpType_struct** %136, align 1
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %135, i32 0, i32 1
  %139 = load i8** %138, align 1
  %140 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %133, %struct.smpType_struct* %137, i8* %139)
  %141 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %142 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 0
  %143 = extractvalue { %struct.smpType_struct*, i8* } %140, 0
  store %struct.smpType_struct* %143, %struct.smpType_struct** %142, align 1
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 1
  %145 = extractvalue { %struct.smpType_struct*, i8* } %140, 1
  store i8* %145, i8** %144, align 1
  %146 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %147 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 0
  %148 = load %struct.smpType_struct** %147, align 1
  %149 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 1
  %150 = load i8** %149, align 1
  %151 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %148, i8* %150)
  %152 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %153 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 0
  %154 = extractvalue { %struct.smpType_struct*, i8* } %151, 0
  store %struct.smpType_struct* %154, %struct.smpType_struct** %153, align 1
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 1
  %156 = extractvalue { %struct.smpType_struct*, i8* } %151, 1
  store i8* %156, i8** %155, align 1
  br label %161

; <label>:157                                     ; preds = %126
  br label %158

; <label>:158                                     ; preds = %157
  br label %78

; <label>:159                                     ; preds = %117, %78
  %160 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %160, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %161

; <label>:161                                     ; preds = %159, %131, %108, %40, %35, %17
  %162 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %163 = load { %struct.smpType_struct*, i8* }* %162, align 1
  ret { %struct.smpType_struct*, i8* } %163
}

define { %struct.smpType_struct*, i8* } @smpList_emptyp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpList_equalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %list1 = alloca %struct.obj_struct, align 8
  %list2 = alloca %struct.obj_struct, align 8
  %car1 = alloca %struct.obj_struct, align 8
  %car2 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = load %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %8, i64 0
  %10 = getelementptr inbounds %struct.obj_struct* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 8
  %12 = getelementptr inbounds %struct.smpType_struct* %11, i32 0, i32 0
  %13 = load i8** %12, align 8
  %14 = call i32 @strcmp(i8* %13, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %15 = icmp eq i32 %14, 0
  %16 = zext i1 %15 to i32
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %20

; <label>:18                                      ; preds = %0
  %19 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %122

; <label>:20                                      ; preds = %0
  %21 = bitcast %struct.obj_struct* %list1 to i8*
  %22 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 16, i32 8, i1 false)
  %23 = load %struct.obj_struct** %3, align 8
  %24 = getelementptr inbounds %struct.obj_struct* %23, i64 0
  %25 = bitcast %struct.obj_struct* %list2 to i8*
  %26 = bitcast %struct.obj_struct* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %25, i8* %26, i64 16, i32 8, i1 false)
  %27 = bitcast %struct.obj_struct* %list1 to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = load %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = load i8** %30, align 1
  %32 = call i64 @smpList_length_clong(%struct.smpType_struct* %29, i8* %31)
  %33 = bitcast %struct.obj_struct* %list2 to { %struct.smpType_struct*, i8* }*
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 0
  %35 = load %struct.smpType_struct** %34, align 1
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 1
  %37 = load i8** %36, align 1
  %38 = call i64 @smpList_length_clong(%struct.smpType_struct* %35, i8* %37)
  %39 = icmp ne i64 %32, %38
  br i1 %39, label %40, label %42

; <label>:40                                      ; preds = %20
  %41 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %122

; <label>:42                                      ; preds = %20
  br label %43

; <label>:43                                      ; preds = %119, %42
  %44 = getelementptr inbounds %struct.obj_struct* %list1, i32 0, i32 0
  %45 = load %struct.smpType_struct** %44, align 8
  %46 = getelementptr inbounds %struct.smpType_struct* %45, i32 0, i32 1
  %47 = load i32* %46, align 4
  %48 = load i32* @smpType_id_nil, align 4
  %49 = icmp eq i32 %47, %48
  %50 = zext i1 %49 to i32
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %120

; <label>:52                                      ; preds = %43
  %53 = getelementptr inbounds %struct.obj_struct* %list1, i32 0, i32 1
  %54 = load i8** %53, align 8
  %55 = bitcast i8* %54 to %struct.smpPair_struct*
  %56 = getelementptr inbounds %struct.smpPair_struct* %55, i32 0, i32 0
  %57 = bitcast %struct.obj_struct* %car1 to i8*
  %58 = bitcast %struct.obj_struct* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %57, i8* %58, i64 16, i32 8, i1 false)
  %59 = getelementptr inbounds %struct.obj_struct* %list2, i32 0, i32 1
  %60 = load i8** %59, align 8
  %61 = bitcast i8* %60 to %struct.smpPair_struct*
  %62 = getelementptr inbounds %struct.smpPair_struct* %61, i32 0, i32 0
  %63 = bitcast %struct.obj_struct* %car2 to i8*
  %64 = bitcast %struct.obj_struct* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %64, i64 16, i32 8, i1 false)
  %65 = bitcast %struct.obj_struct* %car1 to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = load %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = load i8** %68, align 1
  %70 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %67, i8* %69, i8* getelementptr inbounds ([7 x i8]* @.str22, i32 0, i32 0), i32 1, %struct.obj_struct* %car2)
  %71 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = extractvalue { %struct.smpType_struct*, i8* } %70, 0
  store %struct.smpType_struct* %73, %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = extractvalue { %struct.smpType_struct*, i8* } %70, 1
  store i8* %75, i8** %74, align 1
  %76 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 0
  %78 = load %struct.smpType_struct** %77, align 1
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 1
  %80 = load i8** %79, align 1
  %81 = call i32 @smpObject_truep_c(%struct.smpType_struct* %78, i8* %80)
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %85

; <label>:83                                      ; preds = %52
  %84 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %84, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %122

; <label>:85                                      ; preds = %52
  %86 = getelementptr inbounds %struct.obj_struct* %list1, i32 0, i32 1
  %87 = load i8** %86, align 8
  %88 = bitcast i8* %87 to %struct.smpPair_struct*
  %89 = getelementptr inbounds %struct.smpPair_struct* %88, i32 0, i32 1
  %90 = load %struct.obj_struct** %89, align 8
  %91 = icmp ne %struct.obj_struct* %90, null
  br i1 %91, label %92, label %100

; <label>:92                                      ; preds = %85
  %93 = getelementptr inbounds %struct.obj_struct* %list1, i32 0, i32 1
  %94 = load i8** %93, align 8
  %95 = bitcast i8* %94 to %struct.smpPair_struct*
  %96 = getelementptr inbounds %struct.smpPair_struct* %95, i32 0, i32 1
  %97 = load %struct.obj_struct** %96, align 8
  %98 = bitcast %struct.obj_struct* %list1 to i8*
  %99 = bitcast %struct.obj_struct* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %98, i8* %99, i64 16, i32 8, i1 false)
  br label %102

; <label>:100                                     ; preds = %85
  %101 = bitcast %struct.obj_struct* %list1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %101, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %102

; <label>:102                                     ; preds = %100, %92
  %103 = getelementptr inbounds %struct.obj_struct* %list2, i32 0, i32 1
  %104 = load i8** %103, align 8
  %105 = bitcast i8* %104 to %struct.smpPair_struct*
  %106 = getelementptr inbounds %struct.smpPair_struct* %105, i32 0, i32 1
  %107 = load %struct.obj_struct** %106, align 8
  %108 = icmp ne %struct.obj_struct* %107, null
  br i1 %108, label %109, label %117

; <label>:109                                     ; preds = %102
  %110 = getelementptr inbounds %struct.obj_struct* %list2, i32 0, i32 1
  %111 = load i8** %110, align 8
  %112 = bitcast i8* %111 to %struct.smpPair_struct*
  %113 = getelementptr inbounds %struct.smpPair_struct* %112, i32 0, i32 1
  %114 = load %struct.obj_struct** %113, align 8
  %115 = bitcast %struct.obj_struct* %list2 to i8*
  %116 = bitcast %struct.obj_struct* %114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %115, i8* %116, i64 16, i32 8, i1 false)
  br label %119

; <label>:117                                     ; preds = %102
  %118 = bitcast %struct.obj_struct* %list2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %118, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %119

; <label>:119                                     ; preds = %117, %109
  br label %43

; <label>:120                                     ; preds = %43
  %121 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* bitcast (%struct.obj_struct* @smp_true to i8*), i64 16, i32 8, i1 false)
  br label %122

; <label>:122                                     ; preds = %120, %83, %40, %18
  %123 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %124 = load { %struct.smpType_struct*, i8* }* %123, align 1
  ret { %struct.smpType_struct*, i8* } %124
}

define { %struct.smpType_struct*, i8* } @smpList_length(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %length = alloca i64, align 8
  %list = alloca %struct.smpPair_struct*, align 8
  %rest = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 8
  %10 = getelementptr inbounds %struct.smpType_struct* %9, i32 0, i32 1
  %11 = load i32* %10, align 4
  %12 = load i32* @smpType_id_nil, align 4
  %13 = icmp eq i32 %11, %12
  br i1 %13, label %14, label %21

; <label>:14                                      ; preds = %0
  %15 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 0)
  %16 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = extractvalue { %struct.smpType_struct*, i8* } %15, 0
  store %struct.smpType_struct* %18, %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = extractvalue { %struct.smpType_struct*, i8* } %15, 1
  store i8* %20, i8** %19, align 1
  br label %86

; <label>:21                                      ; preds = %0
  store i64 0, i64* %length, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %23 = load i8** %22, align 8
  %24 = bitcast i8* %23 to %struct.smpPair_struct*
  store %struct.smpPair_struct* %24, %struct.smpPair_struct** %list, align 8
  br label %25

; <label>:25                                      ; preds = %77, %21
  %26 = load %struct.smpPair_struct** %list, align 8
  %27 = icmp ne %struct.smpPair_struct* %26, null
  br i1 %27, label %28, label %78

; <label>:28                                      ; preds = %25
  %29 = load i64* %length, align 8
  %30 = add nsw i64 %29, 1
  store i64 %30, i64* %length, align 8
  %31 = load %struct.smpPair_struct** %list, align 8
  %32 = getelementptr inbounds %struct.smpPair_struct* %31, i32 0, i32 1
  %33 = load %struct.obj_struct** %32, align 8
  store %struct.obj_struct* %33, %struct.obj_struct** %rest, align 8
  %34 = load %struct.obj_struct** %rest, align 8
  %35 = icmp eq %struct.obj_struct* %34, null
  br i1 %35, label %36, label %37

; <label>:36                                      ; preds = %28
  br label %78

; <label>:37                                      ; preds = %28
  %38 = load %struct.obj_struct** %rest, align 8
  %39 = getelementptr inbounds %struct.obj_struct* %38, i32 0, i32 0
  %40 = load %struct.smpType_struct** %39, align 8
  %41 = getelementptr inbounds %struct.smpType_struct* %40, i32 0, i32 1
  %42 = load i32* %41, align 4
  %43 = load i32* @smpType_id_list, align 4
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %45, label %50

; <label>:45                                      ; preds = %37
  %46 = load %struct.obj_struct** %rest, align 8
  %47 = getelementptr inbounds %struct.obj_struct* %46, i32 0, i32 1
  %48 = load i8** %47, align 8
  %49 = bitcast i8* %48 to %struct.smpPair_struct*
  store %struct.smpPair_struct* %49, %struct.smpPair_struct** %list, align 8
  br label %76

; <label>:50                                      ; preds = %37
  %51 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %52 = load %struct.smpType_struct** %51, align 8
  %53 = load %struct.obj_struct** %rest, align 8
  %54 = bitcast %struct.obj_struct* %53 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %52, %struct.smpType_struct* %56, i8* %58)
  %60 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  %65 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = load %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = load i8** %68, align 1
  %70 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %67, i8* %69)
  %71 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = extractvalue { %struct.smpType_struct*, i8* } %70, 0
  store %struct.smpType_struct* %73, %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = extractvalue { %struct.smpType_struct*, i8* } %70, 1
  store i8* %75, i8** %74, align 1
  br label %86

; <label>:76                                      ; preds = %45
  br label %77

; <label>:77                                      ; preds = %76
  br label %25

; <label>:78                                      ; preds = %36, %25
  %79 = load i64* %length, align 8
  %80 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %79)
  %81 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = extractvalue { %struct.smpType_struct*, i8* } %80, 0
  store %struct.smpType_struct* %83, %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = extractvalue { %struct.smpType_struct*, i8* } %80, 1
  store i8* %85, i8** %84, align 1
  br label %86

; <label>:86                                      ; preds = %78, %50, %14
  %87 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %88 = load { %struct.smpType_struct*, i8* }* %87, align 1
  ret { %struct.smpType_struct*, i8* } %88
}

define { %struct.smpType_struct*, i8* } @smpList_map(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %last = alloca %struct.obj_struct, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %car = alloca %struct.obj_struct, align 8
  %called = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %11
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  store i8* %obj.coerce1, i8** %12
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %13 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %14 = load %struct.smpType_struct** %13, align 8
  %15 = getelementptr inbounds %struct.smpType_struct* %14, i32 0, i32 1
  %16 = load i32* %15, align 4
  %17 = load i32* @smpType_id_nil, align 4
  %18 = icmp eq i32 %16, %17
  br i1 %18, label %19, label %21

; <label>:19                                      ; preds = %0
  %20 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %196

; <label>:21                                      ; preds = %0
  %22 = load %struct.obj_struct** %3, align 8
  %23 = getelementptr inbounds %struct.obj_struct* %22, i64 0
  %24 = getelementptr inbounds %struct.obj_struct* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 8
  %26 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %25, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %76, label %28

; <label>:28                                      ; preds = %21
  %29 = load %struct.obj_struct** %3, align 8
  %30 = getelementptr inbounds %struct.obj_struct* %29, i64 0
  %31 = getelementptr inbounds %struct.obj_struct* %30, i32 0, i32 0
  %32 = load %struct.smpType_struct** %31, align 8
  %33 = getelementptr inbounds %struct.smpType_struct* %32, i32 0, i32 0
  %34 = load i8** %33, align 8
  %35 = call i32 @strcmp(i8* %34, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %42

; <label>:37                                      ; preds = %28
  %38 = load %struct.obj_struct** %3, align 8
  %39 = getelementptr inbounds %struct.obj_struct* %38, i64 0
  %40 = bitcast %struct.obj_struct* %1 to i8*
  %41 = bitcast %struct.obj_struct* %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* %41, i64 16, i32 8, i1 false)
  br label %196

; <label>:42                                      ; preds = %28
  %43 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %44 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 0
  %46 = extractvalue { %struct.smpType_struct*, i8* } %43, 0
  store %struct.smpType_struct* %46, %struct.smpType_struct** %45, align 1
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 1
  %48 = extractvalue { %struct.smpType_struct*, i8* } %43, 1
  store i8* %48, i8** %47, align 1
  %49 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %50 = load i8** %49, align 8
  %51 = bitcast i8* %50 to %struct.smpType_struct*
  %52 = load %struct.obj_struct** %3, align 8
  %53 = getelementptr inbounds %struct.obj_struct* %52, i64 0
  %54 = bitcast %struct.obj_struct* %53 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %51, %struct.smpType_struct* %56, i8* %58)
  %60 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  %65 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = load %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = load i8** %68, align 1
  %70 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %67, i8* %69)
  %71 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = extractvalue { %struct.smpType_struct*, i8* } %70, 0
  store %struct.smpType_struct* %73, %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = extractvalue { %struct.smpType_struct*, i8* } %70, 1
  store i8* %75, i8** %74, align 1
  br label %196

; <label>:76                                      ; preds = %21
  %77 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %77, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %78 = bitcast %struct.obj_struct* %last to i8*
  %79 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %78, i8* %79, i64 16, i32 8, i1 false)
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  br label %80

; <label>:80                                      ; preds = %186, %76
  %81 = load %struct.obj_struct** %ptr, align 8
  %82 = icmp ne %struct.obj_struct* %81, null
  br i1 %82, label %83, label %193

; <label>:83                                      ; preds = %80
  %84 = load %struct.obj_struct** %ptr, align 8
  %85 = bitcast %struct.obj_struct* %84 to { %struct.smpType_struct*, i8* }*
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 0
  %87 = load %struct.smpType_struct** %86, align 1
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 1
  %89 = load i8** %88, align 1
  %90 = call { %struct.smpType_struct*, i8* } @smpList_car(%struct.smpType_struct* %87, i8* %89, i32 0, %struct.obj_struct* null)
  %91 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 0
  %93 = extractvalue { %struct.smpType_struct*, i8* } %90, 0
  store %struct.smpType_struct* %93, %struct.smpType_struct** %92, align 1
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 1
  %95 = extractvalue { %struct.smpType_struct*, i8* } %90, 1
  store i8* %95, i8** %94, align 1
  %96 = bitcast %struct.obj_struct* %car to i8*
  %97 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %96, i8* %97, i64 16, i32 8, i1 false)
  %98 = load %struct.obj_struct** %3, align 8
  %99 = getelementptr inbounds %struct.obj_struct* %98, i64 0
  %100 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %101 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %102 = bitcast %struct.obj_struct* %99 to { %struct.smpType_struct*, i8* }*
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 0
  %104 = load %struct.smpType_struct** %103, align 1
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 1
  %106 = load i8** %105, align 1
  %107 = call { %struct.smpType_struct*, i8* } @smpFunction_call(%struct.smpType_struct* %100, i8* %101, %struct.smpType_struct* %104, i8* %106, i32 1, %struct.obj_struct* %car)
  %108 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 0
  %110 = extractvalue { %struct.smpType_struct*, i8* } %107, 0
  store %struct.smpType_struct* %110, %struct.smpType_struct** %109, align 1
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 1
  %112 = extractvalue { %struct.smpType_struct*, i8* } %107, 1
  store i8* %112, i8** %111, align 1
  %113 = bitcast %struct.obj_struct* %called to i8*
  %114 = bitcast %struct.obj_struct* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %113, i8* %114, i64 16, i32 8, i1 false)
  %115 = bitcast %struct.obj_struct* %called to { %struct.smpType_struct*, i8* }*
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 0
  %117 = load %struct.smpType_struct** %116, align 1
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 1
  %119 = load i8** %118, align 1
  %120 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %117, i8* %119)
  %121 = icmp ne i32 %120, 0
  br i1 %121, label %122, label %125

; <label>:122                                     ; preds = %83
  %123 = bitcast %struct.obj_struct* %1 to i8*
  %124 = bitcast %struct.obj_struct* %called to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %123, i8* %124, i64 16, i32 8, i1 false)
  br label %196

; <label>:125                                     ; preds = %83
  %126 = getelementptr inbounds %struct.obj_struct* %last, i32 0, i32 0
  %127 = load %struct.smpType_struct** %126, align 8
  %128 = getelementptr inbounds %struct.smpType_struct* %127, i32 0, i32 1
  %129 = load i32* %128, align 4
  %130 = load i32* @smpType_id_nil, align 4
  %131 = icmp eq i32 %129, %130
  br i1 %131, label %132, label %148

; <label>:132                                     ; preds = %125
  %133 = bitcast %struct.obj_struct* %called to { %struct.smpType_struct*, i8* }*
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 0
  %135 = load %struct.smpType_struct** %134, align 1
  %136 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 1
  %137 = load i8** %136, align 1
  %138 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %135, i8* %137, i32 1, %struct.obj_struct* @smp_nil)
  %139 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %139, i32 0, i32 0
  %141 = extractvalue { %struct.smpType_struct*, i8* } %138, 0
  store %struct.smpType_struct* %141, %struct.smpType_struct** %140, align 1
  %142 = getelementptr { %struct.smpType_struct*, i8* }* %139, i32 0, i32 1
  %143 = extractvalue { %struct.smpType_struct*, i8* } %138, 1
  store i8* %143, i8** %142, align 1
  %144 = bitcast %struct.obj_struct* %res to i8*
  %145 = bitcast %struct.obj_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %144, i8* %145, i64 16, i32 8, i1 false)
  %146 = bitcast %struct.obj_struct* %last to i8*
  %147 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %146, i8* %147, i64 16, i32 8, i1 false)
  br label %186

; <label>:148                                     ; preds = %125
  %149 = call noalias i8* @GC_malloc(i64 16)
  %150 = bitcast i8* %149 to %struct.obj_struct*
  %151 = getelementptr inbounds %struct.obj_struct* %last, i32 0, i32 1
  %152 = load i8** %151, align 8
  %153 = bitcast i8* %152 to %struct.smpPair_struct*
  %154 = getelementptr inbounds %struct.smpPair_struct* %153, i32 0, i32 1
  store %struct.obj_struct* %150, %struct.obj_struct** %154, align 8
  %155 = getelementptr inbounds %struct.obj_struct* %last, i32 0, i32 1
  %156 = load i8** %155, align 8
  %157 = bitcast i8* %156 to %struct.smpPair_struct*
  %158 = getelementptr inbounds %struct.smpPair_struct* %157, i32 0, i32 1
  %159 = load %struct.obj_struct** %158, align 8
  %160 = bitcast %struct.obj_struct* %called to { %struct.smpType_struct*, i8* }*
  %161 = getelementptr { %struct.smpType_struct*, i8* }* %160, i32 0, i32 0
  %162 = load %struct.smpType_struct** %161, align 1
  %163 = getelementptr { %struct.smpType_struct*, i8* }* %160, i32 0, i32 1
  %164 = load i8** %163, align 1
  %165 = call { %struct.smpType_struct*, i8* } @smpObject_cons(%struct.smpType_struct* %162, i8* %164, i32 1, %struct.obj_struct* @smp_nil)
  %166 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %167 = getelementptr { %struct.smpType_struct*, i8* }* %166, i32 0, i32 0
  %168 = extractvalue { %struct.smpType_struct*, i8* } %165, 0
  store %struct.smpType_struct* %168, %struct.smpType_struct** %167, align 1
  %169 = getelementptr { %struct.smpType_struct*, i8* }* %166, i32 0, i32 1
  %170 = extractvalue { %struct.smpType_struct*, i8* } %165, 1
  store i8* %170, i8** %169, align 1
  %171 = bitcast %struct.obj_struct* %159 to i8*
  %172 = bitcast %struct.obj_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %171, i8* %172, i64 16, i32 8, i1 false)
  %173 = bitcast %struct.obj_struct* %last to i8*
  %174 = bitcast %struct.obj_struct* %159 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %173, i8* %174, i64 16, i32 8, i1 false)
  %175 = bitcast %struct.obj_struct* %last to { %struct.smpType_struct*, i8* }*
  %176 = getelementptr { %struct.smpType_struct*, i8* }* %175, i32 0, i32 0
  %177 = load %struct.smpType_struct** %176, align 1
  %178 = getelementptr { %struct.smpType_struct*, i8* }* %175, i32 0, i32 1
  %179 = load i8** %178, align 1
  %180 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %177, i8* %179)
  %181 = icmp ne i32 %180, 0
  br i1 %181, label %182, label %185

; <label>:182                                     ; preds = %148
  %183 = bitcast %struct.obj_struct* %1 to i8*
  %184 = bitcast %struct.obj_struct* %last to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %183, i8* %184, i64 16, i32 8, i1 false)
  br label %196

; <label>:185                                     ; preds = %148
  br label %186

; <label>:186                                     ; preds = %185, %132
  %187 = load %struct.obj_struct** %ptr, align 8
  %188 = getelementptr inbounds %struct.obj_struct* %187, i32 0, i32 1
  %189 = load i8** %188, align 8
  %190 = bitcast i8* %189 to %struct.smpPair_struct*
  %191 = getelementptr inbounds %struct.smpPair_struct* %190, i32 0, i32 1
  %192 = load %struct.obj_struct** %191, align 8
  store %struct.obj_struct* %192, %struct.obj_struct** %ptr, align 8
  br label %80

; <label>:193                                     ; preds = %80
  %194 = bitcast %struct.obj_struct* %1 to i8*
  %195 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %194, i8* %195, i64 16, i32 8, i1 false)
  br label %196

; <label>:196                                     ; preds = %193, %182, %122, %42, %37, %19
  %197 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %198 = load { %struct.smpType_struct*, i8* }* %197, align 1
  ret { %struct.smpType_struct*, i8* } %198
}

define { %struct.smpType_struct*, i8* } @smpList_reduce(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %initial = alloca %struct.obj_struct, align 8
  %fun = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %pair = alloca [2 x %struct.obj_struct], align 16
  %6 = alloca %struct.obj_struct, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %8
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  store i8* %obj.coerce1, i8** %9
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %10 = bitcast %struct.obj_struct* %initial to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %11 = load %struct.obj_struct** %3, align 8
  %12 = getelementptr inbounds %struct.obj_struct* %11, i64 0
  %13 = bitcast %struct.obj_struct* %fun to i8*
  %14 = bitcast %struct.obj_struct* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* %14, i64 16, i32 8, i1 false)
  %15 = load i32* %2, align 4
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %17, label %22

; <label>:17                                      ; preds = %0
  %18 = load %struct.obj_struct** %3, align 8
  %19 = getelementptr inbounds %struct.obj_struct* %18, i64 1
  %20 = bitcast %struct.obj_struct* %initial to i8*
  %21 = bitcast %struct.obj_struct* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i32 8, i1 false)
  br label %56

; <label>:22                                      ; preds = %0
  %23 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 8
  %25 = getelementptr inbounds %struct.smpType_struct* %24, i32 0, i32 1
  %26 = load i32* %25, align 4
  %27 = load i32* @smpType_id_nil, align 4
  %28 = icmp eq i32 %26, %27
  br i1 %28, label %29, label %31

; <label>:29                                      ; preds = %22
  %30 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %174

; <label>:31                                      ; preds = %22
  %32 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %33 = load i8** %32, align 8
  %34 = bitcast i8* %33 to %struct.smpPair_struct*
  %35 = getelementptr inbounds %struct.smpPair_struct* %34, i32 0, i32 0
  %36 = bitcast %struct.obj_struct* %initial to i8*
  %37 = bitcast %struct.obj_struct* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %36, i8* %37, i64 16, i32 8, i1 false)
  %38 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %39 = load i8** %38, align 8
  %40 = bitcast i8* %39 to %struct.smpPair_struct*
  %41 = getelementptr inbounds %struct.smpPair_struct* %40, i32 0, i32 1
  %42 = load %struct.obj_struct** %41, align 8
  %43 = icmp ne %struct.obj_struct* %42, null
  br i1 %43, label %44, label %52

; <label>:44                                      ; preds = %31
  %45 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %46 = load i8** %45, align 8
  %47 = bitcast i8* %46 to %struct.smpPair_struct*
  %48 = getelementptr inbounds %struct.smpPair_struct* %47, i32 0, i32 1
  %49 = load %struct.obj_struct** %48, align 8
  %50 = bitcast %struct.obj_struct* %obj to i8*
  %51 = bitcast %struct.obj_struct* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %50, i8* %51, i64 16, i32 8, i1 false)
  br label %54

; <label>:52                                      ; preds = %31
  %53 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %54

; <label>:54                                      ; preds = %52, %44
  br label %55

; <label>:55                                      ; preds = %54
  br label %56

; <label>:56                                      ; preds = %55, %17
  %57 = getelementptr inbounds %struct.obj_struct* %fun, i32 0, i32 0
  %58 = load %struct.smpType_struct** %57, align 8
  %59 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %58, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %103, label %61

; <label>:61                                      ; preds = %56
  %62 = getelementptr inbounds %struct.obj_struct* %fun, i32 0, i32 0
  %63 = load %struct.smpType_struct** %62, align 8
  %64 = getelementptr inbounds %struct.smpType_struct* %63, i32 0, i32 0
  %65 = load i8** %64, align 8
  %66 = call i32 @strcmp(i8* %65, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %71

; <label>:68                                      ; preds = %61
  %69 = bitcast %struct.obj_struct* %1 to i8*
  %70 = bitcast %struct.obj_struct* %fun to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %69, i8* %70, i64 16, i32 8, i1 false)
  br label %174

; <label>:71                                      ; preds = %61
  %72 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %73 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 0
  %75 = extractvalue { %struct.smpType_struct*, i8* } %72, 0
  store %struct.smpType_struct* %75, %struct.smpType_struct** %74, align 1
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %73, i32 0, i32 1
  %77 = extractvalue { %struct.smpType_struct*, i8* } %72, 1
  store i8* %77, i8** %76, align 1
  %78 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %79 = load i8** %78, align 8
  %80 = bitcast i8* %79 to %struct.smpType_struct*
  %81 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = load %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = load i8** %84, align 1
  %86 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %80, %struct.smpType_struct* %83, i8* %85)
  %87 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 0
  %89 = extractvalue { %struct.smpType_struct*, i8* } %86, 0
  store %struct.smpType_struct* %89, %struct.smpType_struct** %88, align 1
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %87, i32 0, i32 1
  %91 = extractvalue { %struct.smpType_struct*, i8* } %86, 1
  store i8* %91, i8** %90, align 1
  %92 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 0
  %94 = load %struct.smpType_struct** %93, align 1
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %92, i32 0, i32 1
  %96 = load i8** %95, align 1
  %97 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %94, i8* %96)
  %98 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 0
  %100 = extractvalue { %struct.smpType_struct*, i8* } %97, 0
  store %struct.smpType_struct* %100, %struct.smpType_struct** %99, align 1
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 1
  %102 = extractvalue { %struct.smpType_struct*, i8* } %97, 1
  store i8* %102, i8** %101, align 1
  br label %174

; <label>:103                                     ; preds = %56
  %104 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %105 = bitcast %struct.obj_struct* %104 to i8*
  %106 = bitcast %struct.obj_struct* %initial to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %105, i8* %106, i64 16, i32 8, i1 false)
  br label %107

; <label>:107                                     ; preds = %169, %103
  %108 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 0
  %110 = load %struct.smpType_struct** %109, align 1
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 1
  %112 = load i8** %111, align 1
  %113 = call i32 @smpObject_truep_c(%struct.smpType_struct* %110, i8* %112)
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %115, label %170

; <label>:115                                     ; preds = %107
  %116 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 1
  %117 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %118 = load i8** %117, align 8
  %119 = bitcast i8* %118 to %struct.smpPair_struct*
  %120 = getelementptr inbounds %struct.smpPair_struct* %119, i32 0, i32 0
  %121 = bitcast %struct.obj_struct* %116 to i8*
  %122 = bitcast %struct.obj_struct* %120 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* %122, i64 16, i32 8, i1 false)
  %123 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %124 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i32 0
  %125 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %126 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %127 = bitcast %struct.obj_struct* %fun to { %struct.smpType_struct*, i8* }*
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 0
  %129 = load %struct.smpType_struct** %128, align 1
  %130 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 1
  %131 = load i8** %130, align 1
  %132 = call { %struct.smpType_struct*, i8* } @smpFunction_call(%struct.smpType_struct* %125, i8* %126, %struct.smpType_struct* %129, i8* %131, i32 2, %struct.obj_struct* %124)
  %133 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 0
  %135 = extractvalue { %struct.smpType_struct*, i8* } %132, 0
  store %struct.smpType_struct* %135, %struct.smpType_struct** %134, align 1
  %136 = getelementptr { %struct.smpType_struct*, i8* }* %133, i32 0, i32 1
  %137 = extractvalue { %struct.smpType_struct*, i8* } %132, 1
  store i8* %137, i8** %136, align 1
  %138 = bitcast %struct.obj_struct* %123 to i8*
  %139 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %138, i8* %139, i64 16, i32 8, i1 false)
  %140 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %141 = bitcast %struct.obj_struct* %140 to { %struct.smpType_struct*, i8* }*
  %142 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 0
  %143 = load %struct.smpType_struct** %142, align 1
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %141, i32 0, i32 1
  %145 = load i8** %144, align 1
  %146 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %143, i8* %145)
  %147 = icmp ne i32 %146, 0
  br i1 %147, label %148, label %152

; <label>:148                                     ; preds = %115
  %149 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %150 = bitcast %struct.obj_struct* %1 to i8*
  %151 = bitcast %struct.obj_struct* %149 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %150, i8* %151, i64 16, i32 8, i1 false)
  br label %174

; <label>:152                                     ; preds = %115
  %153 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %154 = load i8** %153, align 8
  %155 = bitcast i8* %154 to %struct.smpPair_struct*
  %156 = getelementptr inbounds %struct.smpPair_struct* %155, i32 0, i32 1
  %157 = load %struct.obj_struct** %156, align 8
  %158 = icmp ne %struct.obj_struct* %157, null
  br i1 %158, label %159, label %167

; <label>:159                                     ; preds = %152
  %160 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %161 = load i8** %160, align 8
  %162 = bitcast i8* %161 to %struct.smpPair_struct*
  %163 = getelementptr inbounds %struct.smpPair_struct* %162, i32 0, i32 1
  %164 = load %struct.obj_struct** %163, align 8
  %165 = bitcast %struct.obj_struct* %obj to i8*
  %166 = bitcast %struct.obj_struct* %164 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %165, i8* %166, i64 16, i32 8, i1 false)
  br label %169

; <label>:167                                     ; preds = %152
  %168 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %168, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %169

; <label>:169                                     ; preds = %167, %159
  br label %107

; <label>:170                                     ; preds = %107
  %171 = getelementptr inbounds [2 x %struct.obj_struct]* %pair, i32 0, i64 0
  %172 = bitcast %struct.obj_struct* %1 to i8*
  %173 = bitcast %struct.obj_struct* %171 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %172, i8* %173, i64 16, i32 8, i1 false)
  br label %174

; <label>:174                                     ; preds = %170, %148, %71, %68, %29
  %175 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %176 = load { %struct.smpType_struct*, i8* }* %175, align 1
  ret { %struct.smpType_struct*, i8* } %176
}

define { %struct.smpType_struct*, i8* } @smpList_sort(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %copy = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpList_copy(%struct.smpType_struct* %9, i8* %11, i32 0, %struct.obj_struct* null)
  %13 = bitcast %struct.obj_struct* %copy to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %copy to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %20, i8* %22)
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %28

; <label>:25                                      ; preds = %0
  %26 = bitcast %struct.obj_struct* %1 to i8*
  %27 = bitcast %struct.obj_struct* %copy to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  br label %42

; <label>:28                                      ; preds = %0
  %29 = load i32* %2, align 4
  %30 = load %struct.obj_struct** %3, align 8
  %31 = bitcast %struct.obj_struct* %copy to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = load %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = load i8** %34, align 1
  %36 = call { %struct.smpType_struct*, i8* } @smpList_nsort(%struct.smpType_struct* %33, i8* %35, i32 %29, %struct.obj_struct* %30)
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = extractvalue { %struct.smpType_struct*, i8* } %36, 0
  store %struct.smpType_struct* %39, %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = extractvalue { %struct.smpType_struct*, i8* } %36, 1
  store i8* %41, i8** %40, align 1
  br label %42

; <label>:42                                      ; preds = %28, %25
  %43 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %44 = load { %struct.smpType_struct*, i8* }* %43, align 1
  ret { %struct.smpType_struct*, i8* } %44
}

define { %struct.smpType_struct*, i8* } @smpList_to_list(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  %8 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 16, i32 8, i1 false)
  %9 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %10 = load { %struct.smpType_struct*, i8* }* %9, align 1
  ret { %struct.smpType_struct*, i8* } %10
}

define { %struct.smpType_struct*, i8* } @smpList_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %divider = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %str2 = alloca %struct.obj_struct, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %first_timep = alloca i32, align 4
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %paren = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %13
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  store i8* %obj.coerce1, i8** %14
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %15 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str182, i32 0, i32 0))
  %16 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = extractvalue { %struct.smpType_struct*, i8* } %15, 0
  store %struct.smpType_struct* %18, %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = extractvalue { %struct.smpType_struct*, i8* } %15, 1
  store i8* %20, i8** %19, align 1
  %21 = bitcast %struct.obj_struct* %divider to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %22 = load i32* %2, align 4
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %84

; <label>:24                                      ; preds = %0
  %25 = load %struct.obj_struct** %3, align 8
  %26 = getelementptr inbounds %struct.obj_struct* %25, i64 0
  %27 = getelementptr inbounds %struct.obj_struct* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 8
  %29 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %28, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %79, label %31

; <label>:31                                      ; preds = %24
  %32 = load %struct.obj_struct** %3, align 8
  %33 = getelementptr inbounds %struct.obj_struct* %32, i64 0
  %34 = getelementptr inbounds %struct.obj_struct* %33, i32 0, i32 0
  %35 = load %struct.smpType_struct** %34, align 8
  %36 = getelementptr inbounds %struct.smpType_struct* %35, i32 0, i32 0
  %37 = load i8** %36, align 8
  %38 = call i32 @strcmp(i8* %37, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %45

; <label>:40                                      ; preds = %31
  %41 = load %struct.obj_struct** %3, align 8
  %42 = getelementptr inbounds %struct.obj_struct* %41, i64 0
  %43 = bitcast %struct.obj_struct* %1 to i8*
  %44 = bitcast %struct.obj_struct* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %43, i8* %44, i64 16, i32 8, i1 false)
  br label %186

; <label>:45                                      ; preds = %31
  %46 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %47 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = getelementptr inbounds %struct.obj_struct* %5, i32 0, i32 1
  %53 = load i8** %52, align 8
  %54 = bitcast i8* %53 to %struct.smpType_struct*
  %55 = load %struct.obj_struct** %3, align 8
  %56 = getelementptr inbounds %struct.obj_struct* %55, i64 0
  %57 = bitcast %struct.obj_struct* %56 to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = load %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = load i8** %60, align 1
  %62 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %54, %struct.smpType_struct* %59, i8* %61)
  %63 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 0
  %65 = extractvalue { %struct.smpType_struct*, i8* } %62, 0
  store %struct.smpType_struct* %65, %struct.smpType_struct** %64, align 1
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 1
  %67 = extractvalue { %struct.smpType_struct*, i8* } %62, 1
  store i8* %67, i8** %66, align 1
  %68 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 0
  %70 = load %struct.smpType_struct** %69, align 1
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 1
  %72 = load i8** %71, align 1
  %73 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %70, i8* %72)
  %74 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %74, i32 0, i32 0
  %76 = extractvalue { %struct.smpType_struct*, i8* } %73, 0
  store %struct.smpType_struct* %76, %struct.smpType_struct** %75, align 1
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %74, i32 0, i32 1
  %78 = extractvalue { %struct.smpType_struct*, i8* } %73, 1
  store i8* %78, i8** %77, align 1
  br label %186

; <label>:79                                      ; preds = %24
  %80 = load %struct.obj_struct** %3, align 8
  %81 = getelementptr inbounds %struct.obj_struct* %80, i64 0
  %82 = bitcast %struct.obj_struct* %divider to i8*
  %83 = bitcast %struct.obj_struct* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* %83, i64 16, i32 8, i1 false)
  br label %93

; <label>:84                                      ; preds = %0
  %85 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str115, i32 0, i32 0))
  %86 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %86, i32 0, i32 0
  %88 = extractvalue { %struct.smpType_struct*, i8* } %85, 0
  store %struct.smpType_struct* %88, %struct.smpType_struct** %87, align 1
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %86, i32 0, i32 1
  %90 = extractvalue { %struct.smpType_struct*, i8* } %85, 1
  store i8* %90, i8** %89, align 1
  %91 = bitcast %struct.obj_struct* %divider to i8*
  %92 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %91, i8* %92, i64 16, i32 8, i1 false)
  br label %93

; <label>:93                                      ; preds = %84, %79
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  store i32 1, i32* %first_timep, align 4
  br label %94

; <label>:94                                      ; preds = %148, %93
  %95 = load %struct.obj_struct** %ptr, align 8
  %96 = icmp ne %struct.obj_struct* %95, null
  br i1 %96, label %97, label %166

; <label>:97                                      ; preds = %94
  %98 = load %struct.obj_struct** %ptr, align 8
  %99 = bitcast %struct.obj_struct* %98 to { %struct.smpType_struct*, i8* }*
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 0
  %101 = load %struct.smpType_struct** %100, align 1
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 1
  %103 = load i8** %102, align 1
  %104 = call { %struct.smpType_struct*, i8* } @smpList_car(%struct.smpType_struct* %101, i8* %103, i32 0, %struct.obj_struct* null)
  %105 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %106 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 0
  %107 = extractvalue { %struct.smpType_struct*, i8* } %104, 0
  store %struct.smpType_struct* %107, %struct.smpType_struct** %106, align 1
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %105, i32 0, i32 1
  %109 = extractvalue { %struct.smpType_struct*, i8* } %104, 1
  store i8* %109, i8** %108, align 1
  %110 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 0
  %112 = load %struct.smpType_struct** %111, align 1
  %113 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 1
  %114 = load i8** %113, align 1
  %115 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %112, i8* %114, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %116 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %116, i32 0, i32 0
  %118 = extractvalue { %struct.smpType_struct*, i8* } %115, 0
  store %struct.smpType_struct* %118, %struct.smpType_struct** %117, align 1
  %119 = getelementptr { %struct.smpType_struct*, i8* }* %116, i32 0, i32 1
  %120 = extractvalue { %struct.smpType_struct*, i8* } %115, 1
  store i8* %120, i8** %119, align 1
  %121 = bitcast %struct.obj_struct* %str2 to i8*
  %122 = bitcast %struct.obj_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* %122, i64 16, i32 8, i1 false)
  %123 = bitcast %struct.obj_struct* %str2 to { %struct.smpType_struct*, i8* }*
  %124 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 0
  %125 = load %struct.smpType_struct** %124, align 1
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %123, i32 0, i32 1
  %127 = load i8** %126, align 1
  %128 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %125, i8* %127)
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %130, label %133

; <label>:130                                     ; preds = %97
  %131 = bitcast %struct.obj_struct* %1 to i8*
  %132 = bitcast %struct.obj_struct* %str2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %131, i8* %132, i64 16, i32 8, i1 false)
  br label %186

; <label>:133                                     ; preds = %97
  %134 = load i32* %first_timep, align 4
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %148

; <label>:136                                     ; preds = %133
  %137 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 0
  %139 = load %struct.smpType_struct** %138, align 1
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 1
  %141 = load i8** %140, align 1
  %142 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %139, i8* %141, i32 1, %struct.obj_struct* %divider)
  %143 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %143, i32 0, i32 0
  %145 = extractvalue { %struct.smpType_struct*, i8* } %142, 0
  store %struct.smpType_struct* %145, %struct.smpType_struct** %144, align 1
  %146 = getelementptr { %struct.smpType_struct*, i8* }* %143, i32 0, i32 1
  %147 = extractvalue { %struct.smpType_struct*, i8* } %142, 1
  store i8* %147, i8** %146, align 1
  br label %148

; <label>:148                                     ; preds = %136, %133
  %149 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %150 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 0
  %151 = load %struct.smpType_struct** %150, align 1
  %152 = getelementptr { %struct.smpType_struct*, i8* }* %149, i32 0, i32 1
  %153 = load i8** %152, align 1
  %154 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %151, i8* %153, i32 1, %struct.obj_struct* %str2)
  %155 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %156 = getelementptr { %struct.smpType_struct*, i8* }* %155, i32 0, i32 0
  %157 = extractvalue { %struct.smpType_struct*, i8* } %154, 0
  store %struct.smpType_struct* %157, %struct.smpType_struct** %156, align 1
  %158 = getelementptr { %struct.smpType_struct*, i8* }* %155, i32 0, i32 1
  %159 = extractvalue { %struct.smpType_struct*, i8* } %154, 1
  store i8* %159, i8** %158, align 1
  %160 = load %struct.obj_struct** %ptr, align 8
  %161 = getelementptr inbounds %struct.obj_struct* %160, i32 0, i32 1
  %162 = load i8** %161, align 8
  %163 = bitcast i8* %162 to %struct.smpPair_struct*
  %164 = getelementptr inbounds %struct.smpPair_struct* %163, i32 0, i32 1
  %165 = load %struct.obj_struct** %164, align 8
  store %struct.obj_struct* %165, %struct.obj_struct** %ptr, align 8
  store i32 0, i32* %first_timep, align 4
  br label %94

; <label>:166                                     ; preds = %94
  %167 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str116, i32 0, i32 0))
  %168 = bitcast %struct.obj_struct* %paren to { %struct.smpType_struct*, i8* }*
  %169 = getelementptr { %struct.smpType_struct*, i8* }* %168, i32 0, i32 0
  %170 = extractvalue { %struct.smpType_struct*, i8* } %167, 0
  store %struct.smpType_struct* %170, %struct.smpType_struct** %169, align 1
  %171 = getelementptr { %struct.smpType_struct*, i8* }* %168, i32 0, i32 1
  %172 = extractvalue { %struct.smpType_struct*, i8* } %167, 1
  store i8* %172, i8** %171, align 1
  %173 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %174 = getelementptr { %struct.smpType_struct*, i8* }* %173, i32 0, i32 0
  %175 = load %struct.smpType_struct** %174, align 1
  %176 = getelementptr { %struct.smpType_struct*, i8* }* %173, i32 0, i32 1
  %177 = load i8** %176, align 1
  %178 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %175, i8* %177, i32 1, %struct.obj_struct* %paren)
  %179 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %180 = getelementptr { %struct.smpType_struct*, i8* }* %179, i32 0, i32 0
  %181 = extractvalue { %struct.smpType_struct*, i8* } %178, 0
  store %struct.smpType_struct* %181, %struct.smpType_struct** %180, align 1
  %182 = getelementptr { %struct.smpType_struct*, i8* }* %179, i32 0, i32 1
  %183 = extractvalue { %struct.smpType_struct*, i8* } %178, 1
  store i8* %183, i8** %182, align 1
  %184 = bitcast %struct.obj_struct* %1 to i8*
  %185 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %184, i8* %185, i64 16, i32 8, i1 false)
  br label %186

; <label>:186                                     ; preds = %166, %130, %45, %40
  %187 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %188 = load { %struct.smpType_struct*, i8* }* %187, align 1
  ret { %struct.smpType_struct*, i8* } %188
}

define { %struct.smpType_struct*, i8* } @smpList_write(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %res = alloca %struct.obj_struct, align 8
  %divider = alloca %struct.obj_struct, align 8
  %str2 = alloca %struct.obj_struct, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %paren = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %10
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  store i8* %obj.coerce1, i8** %11
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %12 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([6 x i8]* @.str183, i32 0, i32 0))
  %13 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str115, i32 0, i32 0))
  %19 = bitcast %struct.obj_struct* %divider to { %struct.smpType_struct*, i8* }*
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 0
  %21 = extractvalue { %struct.smpType_struct*, i8* } %18, 0
  store %struct.smpType_struct* %21, %struct.smpType_struct** %20, align 1
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 1
  %23 = extractvalue { %struct.smpType_struct*, i8* } %18, 1
  store i8* %23, i8** %22, align 1
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  br label %24

; <label>:24                                      ; preds = %27, %0
  %25 = load %struct.obj_struct** %ptr, align 8
  %26 = icmp ne %struct.obj_struct* %25, null
  br i1 %26, label %27, label %83

; <label>:27                                      ; preds = %24
  %28 = load %struct.obj_struct** %ptr, align 8
  %29 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = load i8** %32, align 1
  %34 = call { %struct.smpType_struct*, i8* } @smpList_car(%struct.smpType_struct* %31, i8* %33, i32 0, %struct.obj_struct* null)
  %35 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = load i32* %2, align 4
  %41 = load %struct.obj_struct** %3, align 8
  %42 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = load %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = load i8** %45, align 1
  %47 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %44, i8* %46, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), i32 %40, %struct.obj_struct* %41)
  %48 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = extractvalue { %struct.smpType_struct*, i8* } %47, 0
  store %struct.smpType_struct* %50, %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = extractvalue { %struct.smpType_struct*, i8* } %47, 1
  store i8* %52, i8** %51, align 1
  %53 = bitcast %struct.obj_struct* %str2 to i8*
  %54 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %53, i8* %54, i64 16, i32 8, i1 false)
  %55 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 0
  %57 = load %struct.smpType_struct** %56, align 1
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 1
  %59 = load i8** %58, align 1
  %60 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %57, i8* %59, i32 1, %struct.obj_struct* %divider)
  %61 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 0
  %63 = extractvalue { %struct.smpType_struct*, i8* } %60, 0
  store %struct.smpType_struct* %63, %struct.smpType_struct** %62, align 1
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %61, i32 0, i32 1
  %65 = extractvalue { %struct.smpType_struct*, i8* } %60, 1
  store i8* %65, i8** %64, align 1
  %66 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = load %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = load i8** %69, align 1
  %71 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %68, i8* %70, i32 1, %struct.obj_struct* %str2)
  %72 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 0
  %74 = extractvalue { %struct.smpType_struct*, i8* } %71, 0
  store %struct.smpType_struct* %74, %struct.smpType_struct** %73, align 1
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 1
  %76 = extractvalue { %struct.smpType_struct*, i8* } %71, 1
  store i8* %76, i8** %75, align 1
  %77 = load %struct.obj_struct** %ptr, align 8
  %78 = getelementptr inbounds %struct.obj_struct* %77, i32 0, i32 1
  %79 = load i8** %78, align 8
  %80 = bitcast i8* %79 to %struct.smpPair_struct*
  %81 = getelementptr inbounds %struct.smpPair_struct* %80, i32 0, i32 1
  %82 = load %struct.obj_struct** %81, align 8
  store %struct.obj_struct* %82, %struct.obj_struct** %ptr, align 8
  br label %24

; <label>:83                                      ; preds = %24
  %84 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str116, i32 0, i32 0))
  %85 = bitcast %struct.obj_struct* %paren to { %struct.smpType_struct*, i8* }*
  %86 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 0
  %87 = extractvalue { %struct.smpType_struct*, i8* } %84, 0
  store %struct.smpType_struct* %87, %struct.smpType_struct** %86, align 1
  %88 = getelementptr { %struct.smpType_struct*, i8* }* %85, i32 0, i32 1
  %89 = extractvalue { %struct.smpType_struct*, i8* } %84, 1
  store i8* %89, i8** %88, align 1
  %90 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = load %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = load i8** %93, align 1
  %95 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %92, i8* %94, i32 1, %struct.obj_struct* %paren)
  %96 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = extractvalue { %struct.smpType_struct*, i8* } %95, 0
  store %struct.smpType_struct* %98, %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = extractvalue { %struct.smpType_struct*, i8* } %95, 1
  store i8* %100, i8** %99, align 1
  %101 = bitcast %struct.obj_struct* %1 to i8*
  %102 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %101, i8* %102, i64 16, i32 8, i1 false)
  %103 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %104 = load { %struct.smpType_struct*, i8* }* %103, align 1
  ret { %struct.smpType_struct*, i8* } %104
}

define { %struct.smpType_struct*, i8* } @smpList_at_c(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i64 %index) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i64, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %i = alloca i64, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i64 %index, i64* %2, align 8
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  store i64 0, i64* %i, align 8
  br label %8

; <label>:8                                       ; preds = %30, %0
  %9 = load %struct.obj_struct** %ptr, align 8
  %10 = icmp ne %struct.obj_struct* %9, null
  br i1 %10, label %11, label %33

; <label>:11                                      ; preds = %8
  %12 = load i64* %i, align 8
  %13 = load i64* %2, align 8
  %14 = icmp uge i64 %12, %13
  br i1 %14, label %15, label %23

; <label>:15                                      ; preds = %11
  %16 = load %struct.obj_struct** %ptr, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i32 0, i32 1
  %18 = load i8** %17, align 8
  %19 = bitcast i8* %18 to %struct.smpPair_struct*
  %20 = getelementptr inbounds %struct.smpPair_struct* %19, i32 0, i32 0
  %21 = bitcast %struct.obj_struct* %1 to i8*
  %22 = bitcast %struct.obj_struct* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %21, i8* %22, i64 16, i32 8, i1 false)
  br label %63

; <label>:23                                      ; preds = %11
  %24 = load %struct.obj_struct** %ptr, align 8
  %25 = getelementptr inbounds %struct.obj_struct* %24, i32 0, i32 1
  %26 = load i8** %25, align 8
  %27 = bitcast i8* %26 to %struct.smpPair_struct*
  %28 = getelementptr inbounds %struct.smpPair_struct* %27, i32 0, i32 1
  %29 = load %struct.obj_struct** %28, align 8
  store %struct.obj_struct* %29, %struct.obj_struct** %ptr, align 8
  br label %30

; <label>:30                                      ; preds = %23
  %31 = load i64* %i, align 8
  %32 = add i64 %31, 1
  store i64 %32, i64* %i, align 8
  br label %8

; <label>:33                                      ; preds = %8
  %34 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([26 x i8]* @.str108, i32 0, i32 0))
  %35 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = load i64* %2, align 8
  %41 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %43, i8* %45, i8* getelementptr inbounds ([4 x i8]* @.str109, i32 0, i32 0), i64 %40)
  %47 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  br label %63

; <label>:63                                      ; preds = %33, %15
  %64 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %65 = load { %struct.smpType_struct*, i8* }* %64, align 1
  ret { %struct.smpType_struct*, i8* } %65
}

define { %struct.smpType_struct*, i8* } @smpList_at_assign_c(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i64 %index, %struct.smpType_struct* %val.coerce0, i8* %val.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i64, align 8
  %val = alloca %struct.obj_struct, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %i = alloca i64, align 8
  %list = alloca %struct.smpPair_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i64 %index, i64* %2, align 8
  %8 = bitcast %struct.obj_struct* %val to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  store %struct.smpType_struct* %val.coerce0, %struct.smpType_struct** %9
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  store i8* %val.coerce1, i8** %10
  store %struct.obj_struct* %obj, %struct.obj_struct** %ptr, align 8
  store i64 0, i64* %i, align 8
  br label %11

; <label>:11                                      ; preds = %38, %0
  %12 = load %struct.obj_struct** %ptr, align 8
  %13 = icmp ne %struct.obj_struct* %12, null
  br i1 %13, label %14, label %41

; <label>:14                                      ; preds = %11
  %15 = load i64* %i, align 8
  %16 = load i64* %2, align 8
  %17 = icmp uge i64 %15, %16
  br i1 %17, label %18, label %31

; <label>:18                                      ; preds = %14
  %19 = load %struct.obj_struct** %ptr, align 8
  %20 = getelementptr inbounds %struct.obj_struct* %19, i32 0, i32 1
  %21 = load i8** %20, align 8
  %22 = bitcast i8* %21 to %struct.smpPair_struct*
  %23 = bitcast %struct.smpPair_struct* %list to i8*
  %24 = bitcast %struct.smpPair_struct* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 24, i32 8, i1 false)
  %25 = getelementptr inbounds %struct.smpPair_struct* %list, i32 0, i32 0
  %26 = bitcast %struct.obj_struct* %25 to i8*
  %27 = bitcast %struct.obj_struct* %val to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %26, i8* %27, i64 16, i32 8, i1 false)
  %28 = getelementptr inbounds %struct.smpPair_struct* %list, i32 0, i32 0
  %29 = bitcast %struct.obj_struct* %1 to i8*
  %30 = bitcast %struct.obj_struct* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 16, i32 8, i1 false)
  br label %71

; <label>:31                                      ; preds = %14
  %32 = load %struct.obj_struct** %ptr, align 8
  %33 = getelementptr inbounds %struct.obj_struct* %32, i32 0, i32 1
  %34 = load i8** %33, align 8
  %35 = bitcast i8* %34 to %struct.smpPair_struct*
  %36 = getelementptr inbounds %struct.smpPair_struct* %35, i32 0, i32 1
  %37 = load %struct.obj_struct** %36, align 8
  store %struct.obj_struct* %37, %struct.obj_struct** %ptr, align 8
  br label %38

; <label>:38                                      ; preds = %31
  %39 = load i64* %i, align 8
  %40 = add i64 %39, 1
  store i64 %40, i64* %i, align 8
  br label %11

; <label>:41                                      ; preds = %11
  %42 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([26 x i8]* @.str108, i32 0, i32 0))
  %43 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = extractvalue { %struct.smpType_struct*, i8* } %42, 0
  store %struct.smpType_struct* %45, %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = extractvalue { %struct.smpType_struct*, i8* } %42, 1
  store i8* %47, i8** %46, align 1
  %48 = load i64* %2, align 8
  %49 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = load %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = load i8** %52, align 1
  %54 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %51, i8* %53, i8* getelementptr inbounds ([4 x i8]* @.str109, i32 0, i32 0), i64 %48)
  %55 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 0
  %57 = extractvalue { %struct.smpType_struct*, i8* } %54, 0
  store %struct.smpType_struct* %57, %struct.smpType_struct** %56, align 1
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 1
  %59 = extractvalue { %struct.smpType_struct*, i8* } %54, 1
  store i8* %59, i8** %58, align 1
  %60 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = load %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = load i8** %63, align 1
  %65 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %62, i8* %64)
  %66 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = extractvalue { %struct.smpType_struct*, i8* } %65, 0
  store %struct.smpType_struct* %68, %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = extractvalue { %struct.smpType_struct*, i8* } %65, 1
  store i8* %70, i8** %69, align 1
  br label %71

; <label>:71                                      ; preds = %41, %18
  %72 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %73 = load { %struct.smpType_struct*, i8* }* %72, align 1
  ret { %struct.smpType_struct*, i8* } %73
}

define { %struct.smpType_struct*, i8* } @smpList_reverse_now_attempt(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %8 = load { %struct.smpType_struct*, i8* }* %7, align 1
  ret { %struct.smpType_struct*, i8* } %8
}

define { %struct.smpType_struct*, i8* } @smpList_sort_rec(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i64 %length, %struct.smpType_struct* %cmp_fun.coerce0, i8* %cmp_fun.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i64, align 8
  %cmp_fun = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %half = alloca i64, align 8
  %list1 = alloca %struct.obj_struct, align 8
  %list2 = alloca %struct.obj_struct, align 8
  %op2 = alloca %struct.obj_struct, align 8
  %ptr = alloca %struct.obj_struct*, align 8
  %i = alloca i64, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %ret = alloca %struct.obj_struct, align 8
  %cons_cell = alloca %struct.obj_struct, align 8
  %cmp = alloca i32, align 4
  %firstp = alloca i32, align 4
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %12
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  store i8* %obj.coerce1, i8** %13
  store i64 %length, i64* %2, align 8
  %14 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  store %struct.smpType_struct* %cmp_fun.coerce0, %struct.smpType_struct** %15
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  store i8* %cmp_fun.coerce1, i8** %16
  %17 = load i64* %2, align 8
  %18 = icmp ule i64 %17, 1
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %0
  %20 = bitcast %struct.obj_struct* %1 to i8*
  %21 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i32 8, i1 false)
  br label %370

; <label>:22                                      ; preds = %0
  %23 = load i64* %2, align 8
  %24 = icmp uge i64 %23, 8
  br i1 %24, label %25, label %59

; <label>:25                                      ; preds = %22
  %26 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smpList_to_a(%struct.smpType_struct* %28, i8* %30, i32 0, %struct.obj_struct* null)
  %32 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = load %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = load i8** %40, align 1
  %42 = call { %struct.smpType_struct*, i8* } @smpArray_sort(%struct.smpType_struct* %39, i8* %41, i32 0, %struct.obj_struct* null)
  %43 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 0
  %45 = extractvalue { %struct.smpType_struct*, i8* } %42, 0
  store %struct.smpType_struct* %45, %struct.smpType_struct** %44, align 1
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %43, i32 0, i32 1
  %47 = extractvalue { %struct.smpType_struct*, i8* } %42, 1
  store i8* %47, i8** %46, align 1
  %48 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 0
  %50 = load %struct.smpType_struct** %49, align 1
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %48, i32 0, i32 1
  %52 = load i8** %51, align 1
  %53 = call { %struct.smpType_struct*, i8* } @smpArray_to_list(%struct.smpType_struct* %50, i8* %52, i32 0, %struct.obj_struct* null)
  %54 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = extractvalue { %struct.smpType_struct*, i8* } %53, 0
  store %struct.smpType_struct* %56, %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = extractvalue { %struct.smpType_struct*, i8* } %53, 1
  store i8* %58, i8** %57, align 1
  br label %370

; <label>:59                                      ; preds = %22
  br label %60

; <label>:60                                      ; preds = %59
  %61 = load i64* %2, align 8
  %62 = udiv i64 %61, 2
  store i64 %62, i64* %half, align 8
  %63 = bitcast %struct.obj_struct* %op2 to i8*
  %64 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %64, i64 16, i32 8, i1 false)
  store %struct.obj_struct* %op2, %struct.obj_struct** %ptr, align 8
  store i64 0, i64* %i, align 8
  br label %65

; <label>:65                                      ; preds = %83, %60
  %66 = load %struct.obj_struct** %ptr, align 8
  %67 = icmp ne %struct.obj_struct* %66, null
  br i1 %67, label %68, label %72

; <label>:68                                      ; preds = %65
  %69 = load i64* %i, align 8
  %70 = load i64* %half, align 8
  %71 = icmp ult i64 %69, %70
  br label %72

; <label>:72                                      ; preds = %68, %65
  %73 = phi i1 [ false, %65 ], [ %71, %68 ]
  br i1 %73, label %74, label %86

; <label>:74                                      ; preds = %72
  %75 = load %struct.obj_struct** %ptr, align 8
  %76 = bitcast %struct.obj_struct* %op2 to i8*
  %77 = bitcast %struct.obj_struct* %75 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %76, i8* %77, i64 16, i32 8, i1 false)
  %78 = getelementptr inbounds %struct.obj_struct* %op2, i32 0, i32 1
  %79 = load i8** %78, align 8
  %80 = bitcast i8* %79 to %struct.smpPair_struct*
  %81 = getelementptr inbounds %struct.smpPair_struct* %80, i32 0, i32 1
  %82 = load %struct.obj_struct** %81, align 8
  store %struct.obj_struct* %82, %struct.obj_struct** %ptr, align 8
  br label %83

; <label>:83                                      ; preds = %74
  %84 = load i64* %i, align 8
  %85 = add i64 %84, 1
  store i64 %85, i64* %i, align 8
  br label %65

; <label>:86                                      ; preds = %72
  %87 = getelementptr inbounds %struct.obj_struct* %op2, i32 0, i32 1
  %88 = load i8** %87, align 8
  %89 = bitcast i8* %88 to %struct.smpPair_struct*
  %90 = getelementptr inbounds %struct.smpPair_struct* %89, i32 0, i32 1
  store %struct.obj_struct* null, %struct.obj_struct** %90, align 8
  %91 = load %struct.obj_struct** %ptr, align 8
  %92 = bitcast %struct.obj_struct* %op2 to i8*
  %93 = bitcast %struct.obj_struct* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %92, i8* %93, i64 16, i32 8, i1 false)
  %94 = load i64* %half, align 8
  %95 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 0
  %97 = load %struct.smpType_struct** %96, align 1
  %98 = getelementptr { %struct.smpType_struct*, i8* }* %95, i32 0, i32 1
  %99 = load i8** %98, align 1
  %100 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 0
  %102 = load %struct.smpType_struct** %101, align 1
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 1
  %104 = load i8** %103, align 1
  %105 = call { %struct.smpType_struct*, i8* } @smpList_sort_rec(%struct.smpType_struct* %97, i8* %99, i64 %94, %struct.smpType_struct* %102, i8* %104)
  %106 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 0
  %108 = extractvalue { %struct.smpType_struct*, i8* } %105, 0
  store %struct.smpType_struct* %108, %struct.smpType_struct** %107, align 1
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 1
  %110 = extractvalue { %struct.smpType_struct*, i8* } %105, 1
  store i8* %110, i8** %109, align 1
  %111 = bitcast %struct.obj_struct* %list1 to i8*
  %112 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %111, i8* %112, i64 16, i32 8, i1 false)
  %113 = bitcast %struct.obj_struct* %list1 to { %struct.smpType_struct*, i8* }*
  %114 = getelementptr { %struct.smpType_struct*, i8* }* %113, i32 0, i32 0
  %115 = load %struct.smpType_struct** %114, align 1
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %113, i32 0, i32 1
  %117 = load i8** %116, align 1
  %118 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %115, i8* %117)
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %120, label %123

; <label>:120                                     ; preds = %86
  %121 = bitcast %struct.obj_struct* %1 to i8*
  %122 = bitcast %struct.obj_struct* %list1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %121, i8* %122, i64 16, i32 8, i1 false)
  br label %370

; <label>:123                                     ; preds = %86
  %124 = load i64* %2, align 8
  %125 = load i64* %half, align 8
  %126 = sub i64 %124, %125
  %127 = bitcast %struct.obj_struct* %op2 to { %struct.smpType_struct*, i8* }*
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 0
  %129 = load %struct.smpType_struct** %128, align 1
  %130 = getelementptr { %struct.smpType_struct*, i8* }* %127, i32 0, i32 1
  %131 = load i8** %130, align 1
  %132 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %133 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 0
  %134 = load %struct.smpType_struct** %133, align 1
  %135 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 1
  %136 = load i8** %135, align 1
  %137 = call { %struct.smpType_struct*, i8* } @smpList_sort_rec(%struct.smpType_struct* %129, i8* %131, i64 %126, %struct.smpType_struct* %134, i8* %136)
  %138 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %139 = getelementptr { %struct.smpType_struct*, i8* }* %138, i32 0, i32 0
  %140 = extractvalue { %struct.smpType_struct*, i8* } %137, 0
  store %struct.smpType_struct* %140, %struct.smpType_struct** %139, align 1
  %141 = getelementptr { %struct.smpType_struct*, i8* }* %138, i32 0, i32 1
  %142 = extractvalue { %struct.smpType_struct*, i8* } %137, 1
  store i8* %142, i8** %141, align 1
  %143 = bitcast %struct.obj_struct* %list2 to i8*
  %144 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %143, i8* %144, i64 16, i32 8, i1 false)
  %145 = bitcast %struct.obj_struct* %list2 to { %struct.smpType_struct*, i8* }*
  %146 = getelementptr { %struct.smpType_struct*, i8* }* %145, i32 0, i32 0
  %147 = load %struct.smpType_struct** %146, align 1
  %148 = getelementptr { %struct.smpType_struct*, i8* }* %145, i32 0, i32 1
  %149 = load i8** %148, align 1
  %150 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %147, i8* %149)
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %152, label %155

; <label>:152                                     ; preds = %123
  %153 = bitcast %struct.obj_struct* %1 to i8*
  %154 = bitcast %struct.obj_struct* %list2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %153, i8* %154, i64 16, i32 8, i1 false)
  br label %370

; <label>:155                                     ; preds = %123
  %156 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %156, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %157 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %157, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %158 = bitcast %struct.obj_struct* %cons_cell to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %158, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  store %struct.obj_struct* null, %struct.obj_struct** %ptr, align 8
  store i32 0, i32* %cmp, align 4
  store i32 1, i32* %firstp, align 4
  br label %159

; <label>:159                                     ; preds = %318, %155
  %160 = bitcast %struct.obj_struct* %list1 to { %struct.smpType_struct*, i8* }*
  %161 = getelementptr { %struct.smpType_struct*, i8* }* %160, i32 0, i32 0
  %162 = load %struct.smpType_struct** %161, align 1
  %163 = getelementptr { %struct.smpType_struct*, i8* }* %160, i32 0, i32 1
  %164 = load i8** %163, align 1
  %165 = call i32 @smpObject_truep_c(%struct.smpType_struct* %162, i8* %164)
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %167, label %175

; <label>:167                                     ; preds = %159
  %168 = bitcast %struct.obj_struct* %list2 to { %struct.smpType_struct*, i8* }*
  %169 = getelementptr { %struct.smpType_struct*, i8* }* %168, i32 0, i32 0
  %170 = load %struct.smpType_struct** %169, align 1
  %171 = getelementptr { %struct.smpType_struct*, i8* }* %168, i32 0, i32 1
  %172 = load i8** %171, align 1
  %173 = call i32 @smpObject_truep_c(%struct.smpType_struct* %170, i8* %172)
  %174 = icmp ne i32 %173, 0
  br label %175

; <label>:175                                     ; preds = %167, %159
  %176 = phi i1 [ false, %159 ], [ %174, %167 ]
  br i1 %176, label %177, label %319

; <label>:177                                     ; preds = %175
  %178 = getelementptr inbounds %struct.obj_struct* %list1, i32 0, i32 1
  %179 = load i8** %178, align 8
  %180 = bitcast i8* %179 to %struct.smpPair_struct*
  %181 = getelementptr inbounds %struct.smpPair_struct* %180, i32 0, i32 0
  %182 = getelementptr inbounds %struct.obj_struct* %list2, i32 0, i32 1
  %183 = load i8** %182, align 8
  %184 = bitcast i8* %183 to %struct.smpPair_struct*
  %185 = getelementptr inbounds %struct.smpPair_struct* %184, i32 0, i32 0
  %186 = bitcast %struct.obj_struct* %cmp_fun to { %struct.smpType_struct*, i8* }*
  %187 = getelementptr { %struct.smpType_struct*, i8* }* %186, i32 0, i32 0
  %188 = load %struct.smpType_struct** %187, align 1
  %189 = getelementptr { %struct.smpType_struct*, i8* }* %186, i32 0, i32 1
  %190 = load i8** %189, align 1
  %191 = bitcast %struct.obj_struct* %181 to { %struct.smpType_struct*, i8* }*
  %192 = getelementptr { %struct.smpType_struct*, i8* }* %191, i32 0, i32 0
  %193 = load %struct.smpType_struct** %192, align 1
  %194 = getelementptr { %struct.smpType_struct*, i8* }* %191, i32 0, i32 1
  %195 = load i8** %194, align 1
  %196 = call i32 @smp_cmp_helper(%struct.obj_struct* %ret, %struct.smpType_struct* %188, i8* %190, %struct.smpType_struct* %193, i8* %195, %struct.obj_struct* byval align 8 %185)
  store i32 %196, i32* %cmp, align 4
  %197 = bitcast %struct.obj_struct* %ret to { %struct.smpType_struct*, i8* }*
  %198 = getelementptr { %struct.smpType_struct*, i8* }* %197, i32 0, i32 0
  %199 = load %struct.smpType_struct** %198, align 1
  %200 = getelementptr { %struct.smpType_struct*, i8* }* %197, i32 0, i32 1
  %201 = load i8** %200, align 1
  %202 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %199, i8* %201)
  %203 = icmp ne i32 %202, 0
  br i1 %203, label %204, label %207

; <label>:204                                     ; preds = %177
  %205 = bitcast %struct.obj_struct* %1 to i8*
  %206 = bitcast %struct.obj_struct* %ret to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %205, i8* %206, i64 16, i32 8, i1 false)
  br label %370

; <label>:207                                     ; preds = %177
  %208 = load i32* %cmp, align 4
  %209 = icmp slt i32 %208, 0
  br i1 %209, label %210, label %264

; <label>:210                                     ; preds = %207
  %211 = getelementptr inbounds %struct.obj_struct* %list1, i32 0, i32 1
  %212 = load i8** %211, align 8
  %213 = bitcast i8* %212 to %struct.smpPair_struct*
  %214 = getelementptr inbounds %struct.smpPair_struct* %213, i32 0, i32 0
  %215 = bitcast %struct.obj_struct* %214 to { %struct.smpType_struct*, i8* }*
  %216 = getelementptr { %struct.smpType_struct*, i8* }* %215, i32 0, i32 0
  %217 = load %struct.smpType_struct** %216, align 1
  %218 = getelementptr { %struct.smpType_struct*, i8* }* %215, i32 0, i32 1
  %219 = load i8** %218, align 1
  %220 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %221 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %222 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %217, i8* %219, %struct.smpType_struct* %220, i8* %221)
  %223 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %224 = getelementptr { %struct.smpType_struct*, i8* }* %223, i32 0, i32 0
  %225 = extractvalue { %struct.smpType_struct*, i8* } %222, 0
  store %struct.smpType_struct* %225, %struct.smpType_struct** %224, align 1
  %226 = getelementptr { %struct.smpType_struct*, i8* }* %223, i32 0, i32 1
  %227 = extractvalue { %struct.smpType_struct*, i8* } %222, 1
  store i8* %227, i8** %226, align 1
  %228 = bitcast %struct.obj_struct* %cons_cell to i8*
  %229 = bitcast %struct.obj_struct* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %228, i8* %229, i64 16, i32 8, i1 false)
  %230 = load i32* %firstp, align 4
  %231 = icmp ne i32 %230, 0
  br i1 %231, label %232, label %235

; <label>:232                                     ; preds = %210
  %233 = bitcast %struct.obj_struct* %res to i8*
  %234 = bitcast %struct.obj_struct* %cons_cell to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %233, i8* %234, i64 16, i32 8, i1 false)
  store %struct.obj_struct* %res, %struct.obj_struct** %ptr, align 8
  store i32 0, i32* %firstp, align 4
  br label %246

; <label>:235                                     ; preds = %210
  %236 = call noalias i8* @GC_malloc(i64 16)
  %237 = bitcast i8* %236 to %struct.obj_struct*
  %238 = load %struct.obj_struct** %ptr, align 8
  %239 = getelementptr inbounds %struct.obj_struct* %238, i32 0, i32 1
  %240 = load i8** %239, align 8
  %241 = bitcast i8* %240 to %struct.smpPair_struct*
  %242 = getelementptr inbounds %struct.smpPair_struct* %241, i32 0, i32 1
  store %struct.obj_struct* %237, %struct.obj_struct** %242, align 8
  store %struct.obj_struct* %237, %struct.obj_struct** %ptr, align 8
  %243 = load %struct.obj_struct** %ptr, align 8
  %244 = bitcast %struct.obj_struct* %243 to i8*
  %245 = bitcast %struct.obj_struct* %cons_cell to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %244, i8* %245, i64 16, i32 8, i1 false)
  br label %246

; <label>:246                                     ; preds = %235, %232
  %247 = getelementptr inbounds %struct.obj_struct* %list1, i32 0, i32 1
  %248 = load i8** %247, align 8
  %249 = bitcast i8* %248 to %struct.smpPair_struct*
  %250 = getelementptr inbounds %struct.smpPair_struct* %249, i32 0, i32 1
  %251 = load %struct.obj_struct** %250, align 8
  %252 = icmp ne %struct.obj_struct* %251, null
  br i1 %252, label %253, label %261

; <label>:253                                     ; preds = %246
  %254 = getelementptr inbounds %struct.obj_struct* %list1, i32 0, i32 1
  %255 = load i8** %254, align 8
  %256 = bitcast i8* %255 to %struct.smpPair_struct*
  %257 = getelementptr inbounds %struct.smpPair_struct* %256, i32 0, i32 1
  %258 = load %struct.obj_struct** %257, align 8
  %259 = bitcast %struct.obj_struct* %list1 to i8*
  %260 = bitcast %struct.obj_struct* %258 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %259, i8* %260, i64 16, i32 8, i1 false)
  br label %263

; <label>:261                                     ; preds = %246
  %262 = bitcast %struct.obj_struct* %list1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %262, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %263

; <label>:263                                     ; preds = %261, %253
  br label %318

; <label>:264                                     ; preds = %207
  %265 = getelementptr inbounds %struct.obj_struct* %list2, i32 0, i32 1
  %266 = load i8** %265, align 8
  %267 = bitcast i8* %266 to %struct.smpPair_struct*
  %268 = getelementptr inbounds %struct.smpPair_struct* %267, i32 0, i32 0
  %269 = bitcast %struct.obj_struct* %268 to { %struct.smpType_struct*, i8* }*
  %270 = getelementptr { %struct.smpType_struct*, i8* }* %269, i32 0, i32 0
  %271 = load %struct.smpType_struct** %270, align 1
  %272 = getelementptr { %struct.smpType_struct*, i8* }* %269, i32 0, i32 1
  %273 = load i8** %272, align 1
  %274 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %275 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %276 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %271, i8* %273, %struct.smpType_struct* %274, i8* %275)
  %277 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %278 = getelementptr { %struct.smpType_struct*, i8* }* %277, i32 0, i32 0
  %279 = extractvalue { %struct.smpType_struct*, i8* } %276, 0
  store %struct.smpType_struct* %279, %struct.smpType_struct** %278, align 1
  %280 = getelementptr { %struct.smpType_struct*, i8* }* %277, i32 0, i32 1
  %281 = extractvalue { %struct.smpType_struct*, i8* } %276, 1
  store i8* %281, i8** %280, align 1
  %282 = bitcast %struct.obj_struct* %cons_cell to i8*
  %283 = bitcast %struct.obj_struct* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %282, i8* %283, i64 16, i32 8, i1 false)
  %284 = load i32* %firstp, align 4
  %285 = icmp ne i32 %284, 0
  br i1 %285, label %286, label %289

; <label>:286                                     ; preds = %264
  %287 = bitcast %struct.obj_struct* %res to i8*
  %288 = bitcast %struct.obj_struct* %cons_cell to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %287, i8* %288, i64 16, i32 8, i1 false)
  store %struct.obj_struct* %res, %struct.obj_struct** %ptr, align 8
  store i32 0, i32* %firstp, align 4
  br label %300

; <label>:289                                     ; preds = %264
  %290 = call noalias i8* @GC_malloc(i64 16)
  %291 = bitcast i8* %290 to %struct.obj_struct*
  %292 = load %struct.obj_struct** %ptr, align 8
  %293 = getelementptr inbounds %struct.obj_struct* %292, i32 0, i32 1
  %294 = load i8** %293, align 8
  %295 = bitcast i8* %294 to %struct.smpPair_struct*
  %296 = getelementptr inbounds %struct.smpPair_struct* %295, i32 0, i32 1
  store %struct.obj_struct* %291, %struct.obj_struct** %296, align 8
  store %struct.obj_struct* %291, %struct.obj_struct** %ptr, align 8
  %297 = load %struct.obj_struct** %ptr, align 8
  %298 = bitcast %struct.obj_struct* %297 to i8*
  %299 = bitcast %struct.obj_struct* %cons_cell to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %298, i8* %299, i64 16, i32 8, i1 false)
  br label %300

; <label>:300                                     ; preds = %289, %286
  %301 = getelementptr inbounds %struct.obj_struct* %list2, i32 0, i32 1
  %302 = load i8** %301, align 8
  %303 = bitcast i8* %302 to %struct.smpPair_struct*
  %304 = getelementptr inbounds %struct.smpPair_struct* %303, i32 0, i32 1
  %305 = load %struct.obj_struct** %304, align 8
  %306 = icmp ne %struct.obj_struct* %305, null
  br i1 %306, label %307, label %315

; <label>:307                                     ; preds = %300
  %308 = getelementptr inbounds %struct.obj_struct* %list2, i32 0, i32 1
  %309 = load i8** %308, align 8
  %310 = bitcast i8* %309 to %struct.smpPair_struct*
  %311 = getelementptr inbounds %struct.smpPair_struct* %310, i32 0, i32 1
  %312 = load %struct.obj_struct** %311, align 8
  %313 = bitcast %struct.obj_struct* %list2 to i8*
  %314 = bitcast %struct.obj_struct* %312 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %313, i8* %314, i64 16, i32 8, i1 false)
  br label %317

; <label>:315                                     ; preds = %300
  %316 = bitcast %struct.obj_struct* %list2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %316, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %317

; <label>:317                                     ; preds = %315, %307
  br label %318

; <label>:318                                     ; preds = %317, %263
  br label %159

; <label>:319                                     ; preds = %175
  %320 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 0
  %321 = load %struct.smpType_struct** %320, align 8
  %322 = getelementptr inbounds %struct.smpType_struct* %321, i32 0, i32 1
  %323 = load i32* %322, align 4
  %324 = load i32* @smpType_id_list, align 4
  %325 = icmp eq i32 %323, %324
  br i1 %325, label %326, label %340

; <label>:326                                     ; preds = %319
  %327 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %328 = getelementptr { %struct.smpType_struct*, i8* }* %327, i32 0, i32 0
  %329 = load %struct.smpType_struct** %328, align 1
  %330 = getelementptr { %struct.smpType_struct*, i8* }* %327, i32 0, i32 1
  %331 = load i8** %330, align 1
  %332 = call { %struct.smpType_struct*, i8* } @smpList_concat_now(%struct.smpType_struct* %329, i8* %331, i32 1, %struct.obj_struct* %list1)
  %333 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %334 = getelementptr { %struct.smpType_struct*, i8* }* %333, i32 0, i32 0
  %335 = extractvalue { %struct.smpType_struct*, i8* } %332, 0
  store %struct.smpType_struct* %335, %struct.smpType_struct** %334, align 1
  %336 = getelementptr { %struct.smpType_struct*, i8* }* %333, i32 0, i32 1
  %337 = extractvalue { %struct.smpType_struct*, i8* } %332, 1
  store i8* %337, i8** %336, align 1
  %338 = bitcast %struct.obj_struct* %res to i8*
  %339 = bitcast %struct.obj_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %338, i8* %339, i64 16, i32 8, i1 false)
  br label %343

; <label>:340                                     ; preds = %319
  %341 = bitcast %struct.obj_struct* %res to i8*
  %342 = bitcast %struct.obj_struct* %list1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %341, i8* %342, i64 16, i32 8, i1 false)
  br label %343

; <label>:343                                     ; preds = %340, %326
  %344 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 0
  %345 = load %struct.smpType_struct** %344, align 8
  %346 = getelementptr inbounds %struct.smpType_struct* %345, i32 0, i32 1
  %347 = load i32* %346, align 4
  %348 = load i32* @smpType_id_list, align 4
  %349 = icmp eq i32 %347, %348
  br i1 %349, label %350, label %364

; <label>:350                                     ; preds = %343
  %351 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %352 = getelementptr { %struct.smpType_struct*, i8* }* %351, i32 0, i32 0
  %353 = load %struct.smpType_struct** %352, align 1
  %354 = getelementptr { %struct.smpType_struct*, i8* }* %351, i32 0, i32 1
  %355 = load i8** %354, align 1
  %356 = call { %struct.smpType_struct*, i8* } @smpList_concat_now(%struct.smpType_struct* %353, i8* %355, i32 1, %struct.obj_struct* %list2)
  %357 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %358 = getelementptr { %struct.smpType_struct*, i8* }* %357, i32 0, i32 0
  %359 = extractvalue { %struct.smpType_struct*, i8* } %356, 0
  store %struct.smpType_struct* %359, %struct.smpType_struct** %358, align 1
  %360 = getelementptr { %struct.smpType_struct*, i8* }* %357, i32 0, i32 1
  %361 = extractvalue { %struct.smpType_struct*, i8* } %356, 1
  store i8* %361, i8** %360, align 1
  %362 = bitcast %struct.obj_struct* %res to i8*
  %363 = bitcast %struct.obj_struct* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %362, i8* %363, i64 16, i32 8, i1 false)
  br label %367

; <label>:364                                     ; preds = %343
  %365 = bitcast %struct.obj_struct* %res to i8*
  %366 = bitcast %struct.obj_struct* %list2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %365, i8* %366, i64 16, i32 8, i1 false)
  br label %367

; <label>:367                                     ; preds = %364, %350
  %368 = bitcast %struct.obj_struct* %1 to i8*
  %369 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %368, i8* %369, i64 16, i32 8, i1 false)
  br label %370

; <label>:370                                     ; preds = %367, %204, %152, %120, %25, %19
  %371 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %372 = load { %struct.smpType_struct*, i8* }* %371, align 1
  ret { %struct.smpType_struct*, i8* } %372
}

define i32 @smpListBuffer_create_class() nounwind {
  %listbuf = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([11 x i8]* @.str184, i32 0, i32 0), %struct.smpType_struct* @smpType_nil, i32 128)
  %6 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([11 x i8]* @.str184, i32 0, i32 0))
  %7 = bitcast %struct.obj_struct* %listbuf to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = extractvalue { %struct.smpType_struct*, i8* } %6, 0
  store %struct.smpType_struct* %9, %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = extractvalue { %struct.smpType_struct*, i8* } %6, 1
  store i8* %11, i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpListBuffer_add_now, i32 2, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %listbuf to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = load i8** %26, align 1
  %28 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %20, i8* %22, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), %struct.smpType_struct* %25, i8* %27)
  %29 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = extractvalue { %struct.smpType_struct*, i8* } %28, 0
  store %struct.smpType_struct* %31, %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = extractvalue { %struct.smpType_struct*, i8* } %28, 1
  store i8* %33, i8** %32, align 1
  %34 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpListBuffer_to_list, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %35 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = bitcast %struct.obj_struct* %listbuf to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = load %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = load i8** %43, align 1
  %45 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = load i8** %48, align 1
  %50 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %42, i8* %44, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str107, i32 0, i32 0), %struct.smpType_struct* %47, i8* %49)
  %51 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = extractvalue { %struct.smpType_struct*, i8* } %50, 0
  store %struct.smpType_struct* %53, %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = extractvalue { %struct.smpType_struct*, i8* } %50, 1
  store i8* %55, i8** %54, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpListBuffer_init() nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %lb = alloca %struct.listbuf_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = getelementptr inbounds %struct.listbuf_struct* %lb, i32 0, i32 0
  %4 = bitcast %struct.obj_struct* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %5 = getelementptr inbounds %struct.listbuf_struct* %lb, i32 0, i32 1
  %6 = bitcast %struct.obj_struct* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %6, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %7 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([11 x i8]* @.str184, i32 0, i32 0))
  %8 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = extractvalue { %struct.smpType_struct*, i8* } %7, 0
  store %struct.smpType_struct* %10, %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = extractvalue { %struct.smpType_struct*, i8* } %7, 1
  store i8* %12, i8** %11, align 1
  %13 = getelementptr inbounds %struct.obj_struct* %2, i32 0, i32 1
  %14 = load i8** %13, align 8
  %15 = bitcast i8* %14 to %struct.smpType_struct*
  %16 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %15)
  %17 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 0
  %19 = extractvalue { %struct.smpType_struct*, i8* } %16, 0
  store %struct.smpType_struct* %19, %struct.smpType_struct** %18, align 1
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %17, i32 0, i32 1
  %21 = extractvalue { %struct.smpType_struct*, i8* } %16, 1
  store i8* %21, i8** %20, align 1
  %22 = call noalias i8* @GC_malloc(i64 32)
  %23 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %22, i8** %23, align 8
  %24 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %25 = load i8** %24, align 8
  %26 = bitcast i8* %25 to %struct.listbuf_struct*
  %27 = bitcast %struct.listbuf_struct* %26 to i8*
  %28 = bitcast %struct.listbuf_struct* %lb to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 32, i32 8, i1 false)
  %29 = bitcast %struct.obj_struct* %1 to i8*
  %30 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* %30, i64 16, i32 8, i1 false)
  %31 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %32 = load { %struct.smpType_struct*, i8* }* %31, align 1
  ret { %struct.smpType_struct*, i8* } %32
}

define i32 @smpNil_create_class() nounwind {
  %nilclass = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = alloca %struct.obj_struct, align 8
  %16 = alloca %struct.obj_struct, align 8
  %17 = alloca %struct.obj_struct, align 8
  %18 = alloca %struct.obj_struct, align 8
  %19 = alloca %struct.obj_struct, align 8
  %20 = alloca %struct.obj_struct, align 8
  %21 = alloca %struct.obj_struct, align 8
  %22 = alloca %struct.obj_struct, align 8
  %23 = alloca %struct.obj_struct, align 8
  %24 = alloca %struct.obj_struct, align 8
  %25 = alloca %struct.obj_struct, align 8
  %26 = alloca %struct.obj_struct, align 8
  %27 = alloca %struct.obj_struct, align 8
  %28 = alloca %struct.obj_struct, align 8
  %29 = alloca %struct.obj_struct, align 8
  %30 = alloca %struct.obj_struct, align 8
  %31 = alloca %struct.obj_struct, align 8
  %32 = alloca %struct.obj_struct, align 8
  %33 = alloca %struct.obj_struct, align 8
  %34 = alloca %struct.obj_struct, align 8
  %35 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %36 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  %41 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_add, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %42 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = extractvalue { %struct.smpType_struct*, i8* } %41, 0
  store %struct.smpType_struct* %44, %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = extractvalue { %struct.smpType_struct*, i8* } %41, 1
  store i8* %46, i8** %45, align 1
  %47 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = load %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = load i8** %50, align 1
  %52 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = load %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = load i8** %55, align 1
  %57 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %49, i8* %51, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str65, i32 0, i32 0), %struct.smpType_struct* %54, i8* %56)
  %58 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 0
  %60 = extractvalue { %struct.smpType_struct*, i8* } %57, 0
  store %struct.smpType_struct* %60, %struct.smpType_struct** %59, align 1
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %58, i32 0, i32 1
  %62 = extractvalue { %struct.smpType_struct*, i8* } %57, 1
  store i8* %62, i8** %61, align 1
  %63 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_add_now, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %64 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 0
  %66 = extractvalue { %struct.smpType_struct*, i8* } %63, 0
  store %struct.smpType_struct* %66, %struct.smpType_struct** %65, align 1
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 1
  %68 = extractvalue { %struct.smpType_struct*, i8* } %63, 1
  store i8* %68, i8** %67, align 1
  %69 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 0
  %71 = load %struct.smpType_struct** %70, align 1
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %69, i32 0, i32 1
  %73 = load i8** %72, align 1
  %74 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %74, i32 0, i32 0
  %76 = load %struct.smpType_struct** %75, align 1
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %74, i32 0, i32 1
  %78 = load i8** %77, align 1
  %79 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %71, i8* %73, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str95, i32 0, i32 0), %struct.smpType_struct* %76, i8* %78)
  %80 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 0
  %82 = extractvalue { %struct.smpType_struct*, i8* } %79, 0
  store %struct.smpType_struct* %82, %struct.smpType_struct** %81, align 1
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %80, i32 0, i32 1
  %84 = extractvalue { %struct.smpType_struct*, i8* } %79, 1
  store i8* %84, i8** %83, align 1
  %85 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_append, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %86 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %86, i32 0, i32 0
  %88 = extractvalue { %struct.smpType_struct*, i8* } %85, 0
  store %struct.smpType_struct* %88, %struct.smpType_struct** %87, align 1
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %86, i32 0, i32 1
  %90 = extractvalue { %struct.smpType_struct*, i8* } %85, 1
  store i8* %90, i8** %89, align 1
  %91 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 0
  %93 = load %struct.smpType_struct** %92, align 1
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %91, i32 0, i32 1
  %95 = load i8** %94, align 1
  %96 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = load %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = load i8** %99, align 1
  %101 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %93, i8* %95, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str172, i32 0, i32 0), %struct.smpType_struct* %98, i8* %100)
  %102 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 0
  %104 = extractvalue { %struct.smpType_struct*, i8* } %101, 0
  store %struct.smpType_struct* %104, %struct.smpType_struct** %103, align 1
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 1
  %106 = extractvalue { %struct.smpType_struct*, i8* } %101, 1
  store i8* %106, i8** %105, align 1
  %107 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_append_now, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %108 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 0
  %110 = extractvalue { %struct.smpType_struct*, i8* } %107, 0
  store %struct.smpType_struct* %110, %struct.smpType_struct** %109, align 1
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %108, i32 0, i32 1
  %112 = extractvalue { %struct.smpType_struct*, i8* } %107, 1
  store i8* %112, i8** %111, align 1
  %113 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %114 = getelementptr { %struct.smpType_struct*, i8* }* %113, i32 0, i32 0
  %115 = load %struct.smpType_struct** %114, align 1
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %113, i32 0, i32 1
  %117 = load i8** %116, align 1
  %118 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %119 = getelementptr { %struct.smpType_struct*, i8* }* %118, i32 0, i32 0
  %120 = load %struct.smpType_struct** %119, align 1
  %121 = getelementptr { %struct.smpType_struct*, i8* }* %118, i32 0, i32 1
  %122 = load i8** %121, align 1
  %123 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %115, i8* %117, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str173, i32 0, i32 0), %struct.smpType_struct* %120, i8* %122)
  %124 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %125 = getelementptr { %struct.smpType_struct*, i8* }* %124, i32 0, i32 0
  %126 = extractvalue { %struct.smpType_struct*, i8* } %123, 0
  store %struct.smpType_struct* %126, %struct.smpType_struct** %125, align 1
  %127 = getelementptr { %struct.smpType_struct*, i8* }* %124, i32 0, i32 1
  %128 = extractvalue { %struct.smpType_struct*, i8* } %123, 1
  store i8* %128, i8** %127, align 1
  %129 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_car, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %130 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %131 = getelementptr { %struct.smpType_struct*, i8* }* %130, i32 0, i32 0
  %132 = extractvalue { %struct.smpType_struct*, i8* } %129, 0
  store %struct.smpType_struct* %132, %struct.smpType_struct** %131, align 1
  %133 = getelementptr { %struct.smpType_struct*, i8* }* %130, i32 0, i32 1
  %134 = extractvalue { %struct.smpType_struct*, i8* } %129, 1
  store i8* %134, i8** %133, align 1
  %135 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %136 = getelementptr { %struct.smpType_struct*, i8* }* %135, i32 0, i32 0
  %137 = load %struct.smpType_struct** %136, align 1
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %135, i32 0, i32 1
  %139 = load i8** %138, align 1
  %140 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %141 = getelementptr { %struct.smpType_struct*, i8* }* %140, i32 0, i32 0
  %142 = load %struct.smpType_struct** %141, align 1
  %143 = getelementptr { %struct.smpType_struct*, i8* }* %140, i32 0, i32 1
  %144 = load i8** %143, align 1
  %145 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %137, i8* %139, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str174, i32 0, i32 0), %struct.smpType_struct* %142, i8* %144)
  %146 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %147 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 0
  %148 = extractvalue { %struct.smpType_struct*, i8* } %145, 0
  store %struct.smpType_struct* %148, %struct.smpType_struct** %147, align 1
  %149 = getelementptr { %struct.smpType_struct*, i8* }* %146, i32 0, i32 1
  %150 = extractvalue { %struct.smpType_struct*, i8* } %145, 1
  store i8* %150, i8** %149, align 1
  %151 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_cdr, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %152 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %153 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 0
  %154 = extractvalue { %struct.smpType_struct*, i8* } %151, 0
  store %struct.smpType_struct* %154, %struct.smpType_struct** %153, align 1
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %152, i32 0, i32 1
  %156 = extractvalue { %struct.smpType_struct*, i8* } %151, 1
  store i8* %156, i8** %155, align 1
  %157 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %158 = getelementptr { %struct.smpType_struct*, i8* }* %157, i32 0, i32 0
  %159 = load %struct.smpType_struct** %158, align 1
  %160 = getelementptr { %struct.smpType_struct*, i8* }* %157, i32 0, i32 1
  %161 = load i8** %160, align 1
  %162 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %163 = getelementptr { %struct.smpType_struct*, i8* }* %162, i32 0, i32 0
  %164 = load %struct.smpType_struct** %163, align 1
  %165 = getelementptr { %struct.smpType_struct*, i8* }* %162, i32 0, i32 1
  %166 = load i8** %165, align 1
  %167 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %159, i8* %161, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str175, i32 0, i32 0), %struct.smpType_struct* %164, i8* %166)
  %168 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %169 = getelementptr { %struct.smpType_struct*, i8* }* %168, i32 0, i32 0
  %170 = extractvalue { %struct.smpType_struct*, i8* } %167, 0
  store %struct.smpType_struct* %170, %struct.smpType_struct** %169, align 1
  %171 = getelementptr { %struct.smpType_struct*, i8* }* %168, i32 0, i32 1
  %172 = extractvalue { %struct.smpType_struct*, i8* } %167, 1
  store i8* %172, i8** %171, align 1
  %173 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpList_concat, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %174 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %175 = getelementptr { %struct.smpType_struct*, i8* }* %174, i32 0, i32 0
  %176 = extractvalue { %struct.smpType_struct*, i8* } %173, 0
  store %struct.smpType_struct* %176, %struct.smpType_struct** %175, align 1
  %177 = getelementptr { %struct.smpType_struct*, i8* }* %174, i32 0, i32 1
  %178 = extractvalue { %struct.smpType_struct*, i8* } %173, 1
  store i8* %178, i8** %177, align 1
  %179 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %180 = getelementptr { %struct.smpType_struct*, i8* }* %179, i32 0, i32 0
  %181 = load %struct.smpType_struct** %180, align 1
  %182 = getelementptr { %struct.smpType_struct*, i8* }* %179, i32 0, i32 1
  %183 = load i8** %182, align 1
  %184 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %185 = getelementptr { %struct.smpType_struct*, i8* }* %184, i32 0, i32 0
  %186 = load %struct.smpType_struct** %185, align 1
  %187 = getelementptr { %struct.smpType_struct*, i8* }* %184, i32 0, i32 1
  %188 = load i8** %187, align 1
  %189 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %181, i8* %183, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str176, i32 0, i32 0), %struct.smpType_struct* %186, i8* %188)
  %190 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %191 = getelementptr { %struct.smpType_struct*, i8* }* %190, i32 0, i32 0
  %192 = extractvalue { %struct.smpType_struct*, i8* } %189, 0
  store %struct.smpType_struct* %192, %struct.smpType_struct** %191, align 1
  %193 = getelementptr { %struct.smpType_struct*, i8* }* %190, i32 0, i32 1
  %194 = extractvalue { %struct.smpType_struct*, i8* } %189, 1
  store i8* %194, i8** %193, align 1
  %195 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_copy, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %196 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %197 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 0
  %198 = extractvalue { %struct.smpType_struct*, i8* } %195, 0
  store %struct.smpType_struct* %198, %struct.smpType_struct** %197, align 1
  %199 = getelementptr { %struct.smpType_struct*, i8* }* %196, i32 0, i32 1
  %200 = extractvalue { %struct.smpType_struct*, i8* } %195, 1
  store i8* %200, i8** %199, align 1
  %201 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %202 = getelementptr { %struct.smpType_struct*, i8* }* %201, i32 0, i32 0
  %203 = load %struct.smpType_struct** %202, align 1
  %204 = getelementptr { %struct.smpType_struct*, i8* }* %201, i32 0, i32 1
  %205 = load i8** %204, align 1
  %206 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %207 = getelementptr { %struct.smpType_struct*, i8* }* %206, i32 0, i32 0
  %208 = load %struct.smpType_struct** %207, align 1
  %209 = getelementptr { %struct.smpType_struct*, i8* }* %206, i32 0, i32 1
  %210 = load i8** %209, align 1
  %211 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %203, i8* %205, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str98, i32 0, i32 0), %struct.smpType_struct* %208, i8* %210)
  %212 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %213 = getelementptr { %struct.smpType_struct*, i8* }* %212, i32 0, i32 0
  %214 = extractvalue { %struct.smpType_struct*, i8* } %211, 0
  store %struct.smpType_struct* %214, %struct.smpType_struct** %213, align 1
  %215 = getelementptr { %struct.smpType_struct*, i8* }* %212, i32 0, i32 1
  %216 = extractvalue { %struct.smpType_struct*, i8* } %211, 1
  store i8* %216, i8** %215, align 1
  %217 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_each, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %218 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %219 = getelementptr { %struct.smpType_struct*, i8* }* %218, i32 0, i32 0
  %220 = extractvalue { %struct.smpType_struct*, i8* } %217, 0
  store %struct.smpType_struct* %220, %struct.smpType_struct** %219, align 1
  %221 = getelementptr { %struct.smpType_struct*, i8* }* %218, i32 0, i32 1
  %222 = extractvalue { %struct.smpType_struct*, i8* } %217, 1
  store i8* %222, i8** %221, align 1
  %223 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %224 = getelementptr { %struct.smpType_struct*, i8* }* %223, i32 0, i32 0
  %225 = load %struct.smpType_struct** %224, align 1
  %226 = getelementptr { %struct.smpType_struct*, i8* }* %223, i32 0, i32 1
  %227 = load i8** %226, align 1
  %228 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %229 = getelementptr { %struct.smpType_struct*, i8* }* %228, i32 0, i32 0
  %230 = load %struct.smpType_struct** %229, align 1
  %231 = getelementptr { %struct.smpType_struct*, i8* }* %228, i32 0, i32 1
  %232 = load i8** %231, align 1
  %233 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %225, i8* %227, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str178, i32 0, i32 0), %struct.smpType_struct* %230, i8* %232)
  %234 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %235 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 0
  %236 = extractvalue { %struct.smpType_struct*, i8* } %233, 0
  store %struct.smpType_struct* %236, %struct.smpType_struct** %235, align 1
  %237 = getelementptr { %struct.smpType_struct*, i8* }* %234, i32 0, i32 1
  %238 = extractvalue { %struct.smpType_struct*, i8* } %233, 1
  store i8* %238, i8** %237, align 1
  %239 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_emptyp, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0))
  %240 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %241 = getelementptr { %struct.smpType_struct*, i8* }* %240, i32 0, i32 0
  %242 = extractvalue { %struct.smpType_struct*, i8* } %239, 0
  store %struct.smpType_struct* %242, %struct.smpType_struct** %241, align 1
  %243 = getelementptr { %struct.smpType_struct*, i8* }* %240, i32 0, i32 1
  %244 = extractvalue { %struct.smpType_struct*, i8* } %239, 1
  store i8* %244, i8** %243, align 1
  %245 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %246 = getelementptr { %struct.smpType_struct*, i8* }* %245, i32 0, i32 0
  %247 = load %struct.smpType_struct** %246, align 1
  %248 = getelementptr { %struct.smpType_struct*, i8* }* %245, i32 0, i32 1
  %249 = load i8** %248, align 1
  %250 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %251 = getelementptr { %struct.smpType_struct*, i8* }* %250, i32 0, i32 0
  %252 = load %struct.smpType_struct** %251, align 1
  %253 = getelementptr { %struct.smpType_struct*, i8* }* %250, i32 0, i32 1
  %254 = load i8** %253, align 1
  %255 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %247, i8* %249, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str179, i32 0, i32 0), %struct.smpType_struct* %252, i8* %254)
  %256 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %257 = getelementptr { %struct.smpType_struct*, i8* }* %256, i32 0, i32 0
  %258 = extractvalue { %struct.smpType_struct*, i8* } %255, 0
  store %struct.smpType_struct* %258, %struct.smpType_struct** %257, align 1
  %259 = getelementptr { %struct.smpType_struct*, i8* }* %256, i32 0, i32 1
  %260 = extractvalue { %struct.smpType_struct*, i8* } %255, 1
  store i8* %260, i8** %259, align 1
  %261 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_length, i32 1, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %262 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %263 = getelementptr { %struct.smpType_struct*, i8* }* %262, i32 0, i32 0
  %264 = extractvalue { %struct.smpType_struct*, i8* } %261, 0
  store %struct.smpType_struct* %264, %struct.smpType_struct** %263, align 1
  %265 = getelementptr { %struct.smpType_struct*, i8* }* %262, i32 0, i32 1
  %266 = extractvalue { %struct.smpType_struct*, i8* } %261, 1
  store i8* %266, i8** %265, align 1
  %267 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %268 = getelementptr { %struct.smpType_struct*, i8* }* %267, i32 0, i32 0
  %269 = load %struct.smpType_struct** %268, align 1
  %270 = getelementptr { %struct.smpType_struct*, i8* }* %267, i32 0, i32 1
  %271 = load i8** %270, align 1
  %272 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %273 = getelementptr { %struct.smpType_struct*, i8* }* %272, i32 0, i32 0
  %274 = load %struct.smpType_struct** %273, align 1
  %275 = getelementptr { %struct.smpType_struct*, i8* }* %272, i32 0, i32 1
  %276 = load i8** %275, align 1
  %277 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %269, i8* %271, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str180, i32 0, i32 0), %struct.smpType_struct* %274, i8* %276)
  %278 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %279 = getelementptr { %struct.smpType_struct*, i8* }* %278, i32 0, i32 0
  %280 = extractvalue { %struct.smpType_struct*, i8* } %277, 0
  store %struct.smpType_struct* %280, %struct.smpType_struct** %279, align 1
  %281 = getelementptr { %struct.smpType_struct*, i8* }* %278, i32 0, i32 1
  %282 = extractvalue { %struct.smpType_struct*, i8* } %277, 1
  store i8* %282, i8** %281, align 1
  %283 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_map, i32 2, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %284 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %285 = getelementptr { %struct.smpType_struct*, i8* }* %284, i32 0, i32 0
  %286 = extractvalue { %struct.smpType_struct*, i8* } %283, 0
  store %struct.smpType_struct* %286, %struct.smpType_struct** %285, align 1
  %287 = getelementptr { %struct.smpType_struct*, i8* }* %284, i32 0, i32 1
  %288 = extractvalue { %struct.smpType_struct*, i8* } %283, 1
  store i8* %288, i8** %287, align 1
  %289 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %290 = getelementptr { %struct.smpType_struct*, i8* }* %289, i32 0, i32 0
  %291 = load %struct.smpType_struct** %290, align 1
  %292 = getelementptr { %struct.smpType_struct*, i8* }* %289, i32 0, i32 1
  %293 = load i8** %292, align 1
  %294 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %295 = getelementptr { %struct.smpType_struct*, i8* }* %294, i32 0, i32 0
  %296 = load %struct.smpType_struct** %295, align 1
  %297 = getelementptr { %struct.smpType_struct*, i8* }* %294, i32 0, i32 1
  %298 = load i8** %297, align 1
  %299 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %291, i8* %293, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str99, i32 0, i32 0), %struct.smpType_struct* %296, i8* %298)
  %300 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %301 = getelementptr { %struct.smpType_struct*, i8* }* %300, i32 0, i32 0
  %302 = extractvalue { %struct.smpType_struct*, i8* } %299, 0
  store %struct.smpType_struct* %302, %struct.smpType_struct** %301, align 1
  %303 = getelementptr { %struct.smpType_struct*, i8* }* %300, i32 0, i32 1
  %304 = extractvalue { %struct.smpType_struct*, i8* } %299, 1
  store i8* %304, i8** %303, align 1
  %305 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_reduce, i32 4, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %306 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %307 = getelementptr { %struct.smpType_struct*, i8* }* %306, i32 0, i32 0
  %308 = extractvalue { %struct.smpType_struct*, i8* } %305, 0
  store %struct.smpType_struct* %308, %struct.smpType_struct** %307, align 1
  %309 = getelementptr { %struct.smpType_struct*, i8* }* %306, i32 0, i32 1
  %310 = extractvalue { %struct.smpType_struct*, i8* } %305, 1
  store i8* %310, i8** %309, align 1
  %311 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %312 = getelementptr { %struct.smpType_struct*, i8* }* %311, i32 0, i32 0
  %313 = load %struct.smpType_struct** %312, align 1
  %314 = getelementptr { %struct.smpType_struct*, i8* }* %311, i32 0, i32 1
  %315 = load i8** %314, align 1
  %316 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %317 = getelementptr { %struct.smpType_struct*, i8* }* %316, i32 0, i32 0
  %318 = load %struct.smpType_struct** %317, align 1
  %319 = getelementptr { %struct.smpType_struct*, i8* }* %316, i32 0, i32 1
  %320 = load i8** %319, align 1
  %321 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %313, i8* %315, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str100, i32 0, i32 0), %struct.smpType_struct* %318, i8* %320)
  %322 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %323 = getelementptr { %struct.smpType_struct*, i8* }* %322, i32 0, i32 0
  %324 = extractvalue { %struct.smpType_struct*, i8* } %321, 0
  store %struct.smpType_struct* %324, %struct.smpType_struct** %323, align 1
  %325 = getelementptr { %struct.smpType_struct*, i8* }* %322, i32 0, i32 1
  %326 = extractvalue { %struct.smpType_struct*, i8* } %321, 1
  store i8* %326, i8** %325, align 1
  %327 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_reverse, i32 1, i8* getelementptr inbounds ([5 x i8]* @.str26, i32 0, i32 0))
  %328 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %329 = getelementptr { %struct.smpType_struct*, i8* }* %328, i32 0, i32 0
  %330 = extractvalue { %struct.smpType_struct*, i8* } %327, 0
  store %struct.smpType_struct* %330, %struct.smpType_struct** %329, align 1
  %331 = getelementptr { %struct.smpType_struct*, i8* }* %328, i32 0, i32 1
  %332 = extractvalue { %struct.smpType_struct*, i8* } %327, 1
  store i8* %332, i8** %331, align 1
  %333 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %334 = getelementptr { %struct.smpType_struct*, i8* }* %333, i32 0, i32 0
  %335 = load %struct.smpType_struct** %334, align 1
  %336 = getelementptr { %struct.smpType_struct*, i8* }* %333, i32 0, i32 1
  %337 = load i8** %336, align 1
  %338 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %339 = getelementptr { %struct.smpType_struct*, i8* }* %338, i32 0, i32 0
  %340 = load %struct.smpType_struct** %339, align 1
  %341 = getelementptr { %struct.smpType_struct*, i8* }* %338, i32 0, i32 1
  %342 = load i8** %341, align 1
  %343 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %335, i8* %337, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str102, i32 0, i32 0), %struct.smpType_struct* %340, i8* %342)
  %344 = bitcast %struct.obj_struct* %28 to { %struct.smpType_struct*, i8* }*
  %345 = getelementptr { %struct.smpType_struct*, i8* }* %344, i32 0, i32 0
  %346 = extractvalue { %struct.smpType_struct*, i8* } %343, 0
  store %struct.smpType_struct* %346, %struct.smpType_struct** %345, align 1
  %347 = getelementptr { %struct.smpType_struct*, i8* }* %344, i32 0, i32 1
  %348 = extractvalue { %struct.smpType_struct*, i8* } %343, 1
  store i8* %348, i8** %347, align 1
  %349 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_equalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %350 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %351 = getelementptr { %struct.smpType_struct*, i8* }* %350, i32 0, i32 0
  %352 = extractvalue { %struct.smpType_struct*, i8* } %349, 0
  store %struct.smpType_struct* %352, %struct.smpType_struct** %351, align 1
  %353 = getelementptr { %struct.smpType_struct*, i8* }* %350, i32 0, i32 1
  %354 = extractvalue { %struct.smpType_struct*, i8* } %349, 1
  store i8* %354, i8** %353, align 1
  %355 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %356 = getelementptr { %struct.smpType_struct*, i8* }* %355, i32 0, i32 0
  %357 = load %struct.smpType_struct** %356, align 1
  %358 = getelementptr { %struct.smpType_struct*, i8* }* %355, i32 0, i32 1
  %359 = load i8** %358, align 1
  %360 = bitcast %struct.obj_struct* %29 to { %struct.smpType_struct*, i8* }*
  %361 = getelementptr { %struct.smpType_struct*, i8* }* %360, i32 0, i32 0
  %362 = load %struct.smpType_struct** %361, align 1
  %363 = getelementptr { %struct.smpType_struct*, i8* }* %360, i32 0, i32 1
  %364 = load i8** %363, align 1
  %365 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %357, i8* %359, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str22, i32 0, i32 0), %struct.smpType_struct* %362, i8* %364)
  %366 = bitcast %struct.obj_struct* %30 to { %struct.smpType_struct*, i8* }*
  %367 = getelementptr { %struct.smpType_struct*, i8* }* %366, i32 0, i32 0
  %368 = extractvalue { %struct.smpType_struct*, i8* } %365, 0
  store %struct.smpType_struct* %368, %struct.smpType_struct** %367, align 1
  %369 = getelementptr { %struct.smpType_struct*, i8* }* %366, i32 0, i32 1
  %370 = extractvalue { %struct.smpType_struct*, i8* } %365, 1
  store i8* %370, i8** %369, align 1
  %371 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_to_s, i32 3, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8]* @.str101, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %372 = bitcast %struct.obj_struct* %31 to { %struct.smpType_struct*, i8* }*
  %373 = getelementptr { %struct.smpType_struct*, i8* }* %372, i32 0, i32 0
  %374 = extractvalue { %struct.smpType_struct*, i8* } %371, 0
  store %struct.smpType_struct* %374, %struct.smpType_struct** %373, align 1
  %375 = getelementptr { %struct.smpType_struct*, i8* }* %372, i32 0, i32 1
  %376 = extractvalue { %struct.smpType_struct*, i8* } %371, 1
  store i8* %376, i8** %375, align 1
  %377 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %378 = getelementptr { %struct.smpType_struct*, i8* }* %377, i32 0, i32 0
  %379 = load %struct.smpType_struct** %378, align 1
  %380 = getelementptr { %struct.smpType_struct*, i8* }* %377, i32 0, i32 1
  %381 = load i8** %380, align 1
  %382 = bitcast %struct.obj_struct* %31 to { %struct.smpType_struct*, i8* }*
  %383 = getelementptr { %struct.smpType_struct*, i8* }* %382, i32 0, i32 0
  %384 = load %struct.smpType_struct** %383, align 1
  %385 = getelementptr { %struct.smpType_struct*, i8* }* %382, i32 0, i32 1
  %386 = load i8** %385, align 1
  %387 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %379, i8* %381, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %384, i8* %386)
  %388 = bitcast %struct.obj_struct* %32 to { %struct.smpType_struct*, i8* }*
  %389 = getelementptr { %struct.smpType_struct*, i8* }* %388, i32 0, i32 0
  %390 = extractvalue { %struct.smpType_struct*, i8* } %387, 0
  store %struct.smpType_struct* %390, %struct.smpType_struct** %389, align 1
  %391 = getelementptr { %struct.smpType_struct*, i8* }* %388, i32 0, i32 1
  %392 = extractvalue { %struct.smpType_struct*, i8* } %387, 1
  store i8* %392, i8** %391, align 1
  %393 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpNil_write, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %394 = bitcast %struct.obj_struct* %33 to { %struct.smpType_struct*, i8* }*
  %395 = getelementptr { %struct.smpType_struct*, i8* }* %394, i32 0, i32 0
  %396 = extractvalue { %struct.smpType_struct*, i8* } %393, 0
  store %struct.smpType_struct* %396, %struct.smpType_struct** %395, align 1
  %397 = getelementptr { %struct.smpType_struct*, i8* }* %394, i32 0, i32 1
  %398 = extractvalue { %struct.smpType_struct*, i8* } %393, 1
  store i8* %398, i8** %397, align 1
  %399 = bitcast %struct.obj_struct* %nilclass to { %struct.smpType_struct*, i8* }*
  %400 = getelementptr { %struct.smpType_struct*, i8* }* %399, i32 0, i32 0
  %401 = load %struct.smpType_struct** %400, align 1
  %402 = getelementptr { %struct.smpType_struct*, i8* }* %399, i32 0, i32 1
  %403 = load i8** %402, align 1
  %404 = bitcast %struct.obj_struct* %33 to { %struct.smpType_struct*, i8* }*
  %405 = getelementptr { %struct.smpType_struct*, i8* }* %404, i32 0, i32 0
  %406 = load %struct.smpType_struct** %405, align 1
  %407 = getelementptr { %struct.smpType_struct*, i8* }* %404, i32 0, i32 1
  %408 = load i8** %407, align 1
  %409 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %401, i8* %403, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), %struct.smpType_struct* %406, i8* %408)
  %410 = bitcast %struct.obj_struct* %34 to { %struct.smpType_struct*, i8* }*
  %411 = getelementptr { %struct.smpType_struct*, i8* }* %410, i32 0, i32 0
  %412 = extractvalue { %struct.smpType_struct*, i8* } %409, 0
  store %struct.smpType_struct* %412, %struct.smpType_struct** %411, align 1
  %413 = getelementptr { %struct.smpType_struct*, i8* }* %410, i32 0, i32 1
  %414 = extractvalue { %struct.smpType_struct*, i8* } %409, 1
  store i8* %414, i8** %413, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpNil_car(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpNil_cdr(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpNil_copy(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpNil_each(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpNil_emptyp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpNil_length(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smpInteger_zero to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpNil_map(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpNil_reduce(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load i32* %2, align 4
  %8 = icmp sgt i32 %7, 1
  br i1 %8, label %9, label %14

; <label>:9                                       ; preds = %0
  %10 = load %struct.obj_struct** %3, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %10, i64 1
  %12 = bitcast %struct.obj_struct* %1 to i8*
  %13 = bitcast %struct.obj_struct* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* %13, i64 16, i32 8, i1 false)
  br label %16

; <label>:14                                      ; preds = %0
  %15 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %16

; <label>:16                                      ; preds = %14, %9
  %17 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %18 = load { %struct.smpType_struct*, i8* }* %17, align 1
  ret { %struct.smpType_struct*, i8* } %18
}

define { %struct.smpType_struct*, i8* } @smpNil_reverse(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = load { %struct.smpType_struct*, i8* }* %8, align 1
  ret { %struct.smpType_struct*, i8* } %9
}

define { %struct.smpType_struct*, i8* } @smpNil_equalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call i32 @smpObject_truep_c(%struct.smpType_struct* %11, i8* %13)
  %15 = icmp eq i32 %14, 0
  %16 = zext i1 %15 to i32
  %17 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %16)
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %24 = load { %struct.smpType_struct*, i8* }* %23, align 1
  ret { %struct.smpType_struct*, i8* } %24
}

define { %struct.smpType_struct*, i8* } @smpNil_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([4 x i8]* @.str158, i32 0, i32 0))
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = extractvalue { %struct.smpType_struct*, i8* } %7, 0
  store %struct.smpType_struct* %10, %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = extractvalue { %struct.smpType_struct*, i8* } %7, 1
  store i8* %12, i8** %11, align 1
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = load { %struct.smpType_struct*, i8* }* %13, align 1
  ret { %struct.smpType_struct*, i8* } %14
}

define { %struct.smpType_struct*, i8* } @smpNil_write(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([4 x i8]* @.str158, i32 0, i32 0))
  %8 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  %10 = extractvalue { %struct.smpType_struct*, i8* } %7, 0
  store %struct.smpType_struct* %10, %struct.smpType_struct** %9, align 1
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  %12 = extractvalue { %struct.smpType_struct*, i8* } %7, 1
  store i8* %12, i8** %11, align 1
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = load { %struct.smpType_struct*, i8* }* %13, align 1
  ret { %struct.smpType_struct*, i8* } %14
}

define { %struct.smpType_struct*, i8* } @smpNil_add(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = getelementptr inbounds %struct.obj_struct* %8, i32 0, i32 0
  %10 = load %struct.smpType_struct** %9, align 8
  %11 = getelementptr inbounds %struct.smpType_struct* %10, i32 0, i32 1
  %12 = load i32* %11, align 4
  %13 = load i32* @smpType_id_list, align 4
  %14 = icmp eq i32 %12, %13
  br i1 %14, label %15, label %20

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = bitcast %struct.obj_struct* %1 to i8*
  %19 = bitcast %struct.obj_struct* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 16, i32 8, i1 false)
  br label %36

; <label>:20                                      ; preds = %0
  %21 = load %struct.obj_struct** %3, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %21, i64 0
  %23 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = load i8** %26, align 1
  %28 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %29 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %30 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %25, i8* %27, %struct.smpType_struct* %28, i8* %29)
  %31 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  br label %36

; <label>:36                                      ; preds = %20, %15
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = load { %struct.smpType_struct*, i8* }* %37, align 1
  ret { %struct.smpType_struct*, i8* } %38
}

define { %struct.smpType_struct*, i8* } @smpNil_add_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = getelementptr inbounds %struct.obj_struct* %8, i32 0, i32 0
  %10 = load %struct.smpType_struct** %9, align 8
  %11 = getelementptr inbounds %struct.smpType_struct* %10, i32 0, i32 1
  %12 = load i32* %11, align 4
  %13 = load i32* @smpType_id_list, align 4
  %14 = icmp eq i32 %12, %13
  br i1 %14, label %15, label %20

; <label>:15                                      ; preds = %0
  %16 = load %struct.obj_struct** %3, align 8
  %17 = getelementptr inbounds %struct.obj_struct* %16, i64 0
  %18 = bitcast %struct.obj_struct* %1 to i8*
  %19 = bitcast %struct.obj_struct* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %18, i8* %19, i64 16, i32 8, i1 false)
  br label %36

; <label>:20                                      ; preds = %0
  %21 = load %struct.obj_struct** %3, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %21, i64 0
  %23 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = load i8** %26, align 1
  %28 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %29 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_nil to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %30 = call { %struct.smpType_struct*, i8* } @smpObject_cons_c(%struct.smpType_struct* %25, i8* %27, %struct.smpType_struct* %28, i8* %29)
  %31 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  br label %36

; <label>:36                                      ; preds = %20, %15
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = load { %struct.smpType_struct*, i8* }* %37, align 1
  ret { %struct.smpType_struct*, i8* } %38
}

define i32 @smpNumber_create_class() nounwind {
  %number = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 0)
  %10 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %11 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = extractvalue { %struct.smpType_struct*, i8* } %10, 0
  store %struct.smpType_struct* %13, %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = extractvalue { %struct.smpType_struct*, i8* } %10, 1
  store i8* %15, i8** %14, align 1
  %16 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = load i8** %19, align 1
  %21 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, i8*, i32, ...)* @smpType_abstract_def(%struct.smpType_struct* %18, i8* %20, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str65, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %22 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = extractvalue { %struct.smpType_struct*, i8* } %21, 0
  store %struct.smpType_struct* %24, %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = extractvalue { %struct.smpType_struct*, i8* } %21, 1
  store i8* %26, i8** %25, align 1
  %27 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = load %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = load i8** %30, align 1
  %32 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, i8*, i32, ...)* @smpType_abstract_def(%struct.smpType_struct* %29, i8* %31, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str66, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %33 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 0
  %35 = extractvalue { %struct.smpType_struct*, i8* } %32, 0
  store %struct.smpType_struct* %35, %struct.smpType_struct** %34, align 1
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %33, i32 0, i32 1
  %37 = extractvalue { %struct.smpType_struct*, i8* } %32, 1
  store i8* %37, i8** %36, align 1
  %38 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = load %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = load i8** %41, align 1
  %43 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, i8*, i32, ...)* @smpType_abstract_def(%struct.smpType_struct* %40, i8* %42, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str67, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %44 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 0
  %46 = extractvalue { %struct.smpType_struct*, i8* } %43, 0
  store %struct.smpType_struct* %46, %struct.smpType_struct** %45, align 1
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 1
  %48 = extractvalue { %struct.smpType_struct*, i8* } %43, 1
  store i8* %48, i8** %47, align 1
  %49 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = load %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = load i8** %52, align 1
  %54 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, i8*, i32, ...)* @smpType_abstract_def(%struct.smpType_struct* %51, i8* %53, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str68, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str127, i32 0, i32 0))
  %55 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 0
  %57 = extractvalue { %struct.smpType_struct*, i8* } %54, 0
  store %struct.smpType_struct* %57, %struct.smpType_struct** %56, align 1
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 1
  %59 = extractvalue { %struct.smpType_struct*, i8* } %54, 1
  store i8* %59, i8** %58, align 1
  %60 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = load %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = load i8** %63, align 1
  %65 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, i8*, i32, ...)* @smpType_abstract_def(%struct.smpType_struct* %62, i8* %64, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str131, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %66 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = extractvalue { %struct.smpType_struct*, i8* } %65, 0
  store %struct.smpType_struct* %68, %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = extractvalue { %struct.smpType_struct*, i8* } %65, 1
  store i8* %70, i8** %69, align 1
  %71 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = load i8** %74, align 1
  %76 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, i8*, i32, ...)* @smpType_abstract_def(%struct.smpType_struct* %73, i8* %75, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str132, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %77 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 0
  %79 = extractvalue { %struct.smpType_struct*, i8* } %76, 0
  store %struct.smpType_struct* %79, %struct.smpType_struct** %78, align 1
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 1
  %81 = extractvalue { %struct.smpType_struct*, i8* } %76, 1
  store i8* %81, i8** %80, align 1
  %82 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 0
  %84 = load %struct.smpType_struct** %83, align 1
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 1
  %86 = load i8** %85, align 1
  %87 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, i8*, i32, ...)* @smpType_abstract_def(%struct.smpType_struct* %84, i8* %86, i32 0, i8* getelementptr inbounds ([3 x i8]* @.str133, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %88 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = extractvalue { %struct.smpType_struct*, i8* } %87, 0
  store %struct.smpType_struct* %90, %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = extractvalue { %struct.smpType_struct*, i8* } %87, 1
  store i8* %92, i8** %91, align 1
  %93 = bitcast %struct.obj_struct* %number to { %struct.smpType_struct*, i8* }*
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %93, i32 0, i32 0
  %95 = load %struct.smpType_struct** %94, align 1
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %93, i32 0, i32 1
  %97 = load i8** %96, align 1
  %98 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, i8*, i32, ...)* @smpType_abstract_def(%struct.smpType_struct* %95, i8* %97, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str134, i32 0, i32 0), i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %99 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %100 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 0
  %101 = extractvalue { %struct.smpType_struct*, i8* } %98, 0
  store %struct.smpType_struct* %101, %struct.smpType_struct** %100, align 1
  %102 = getelementptr { %struct.smpType_struct*, i8* }* %99, i32 0, i32 1
  %103 = extractvalue { %struct.smpType_struct*, i8* } %98, 1
  store i8* %103, i8** %102, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpType_abstract_def(%struct.smpType_struct* %type.coerce0, i8* %type.coerce1, i32 %scope, i8* %name, i32 %argc, ...) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %type = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %ap = alloca [1 x %struct.__va_list_tag], align 16
  %res = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %type.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %type.coerce1, i8** %8
  store i32 %scope, i32* %2, align 4
  store i8* %name, i8** %3, align 8
  store i32 %argc, i32* %4, align 4
  %9 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %10 = bitcast %struct.__va_list_tag* %9 to i8*
  call void @llvm.va_start(i8* %10)
  %11 = load i32* %2, align 4
  %12 = load i8** %3, align 8
  %13 = load i32* %4, align 4
  %14 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %15 = call { %struct.smpType_struct*, i8* } @smpFunction_init_v({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smp_abstract_function, i32 %13, %struct.__va_list_tag* %14)
  %16 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = extractvalue { %struct.smpType_struct*, i8* } %15, 0
  store %struct.smpType_struct* %18, %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = extractvalue { %struct.smpType_struct*, i8* } %15, 1
  store i8* %20, i8** %19, align 1
  %21 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = load %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = load i8** %24, align 1
  %26 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = load %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = load i8** %29, align 1
  %31 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %23, i8* %25, i32 %11, i8* %12, %struct.smpType_struct* %28, i8* %30)
  %32 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = getelementptr inbounds [1 x %struct.__va_list_tag]* %ap, i32 0, i32 0
  %38 = bitcast %struct.__va_list_tag* %37 to i8*
  call void @llvm.va_end(i8* %38)
  %39 = bitcast %struct.obj_struct* %1 to i8*
  %40 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 16, i32 8, i1 false)
  %41 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %42 = load { %struct.smpType_struct*, i8* }* %41, align 1
  ret { %struct.smpType_struct*, i8* } %42
}

define i32 @smpPair_create_class() nounwind {
  %pair = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([5 x i8]* @.str40, i32 0, i32 0))
  %12 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpPair_car, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = extractvalue { %struct.smpType_struct*, i8* } %17, 0
  store %struct.smpType_struct* %20, %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = extractvalue { %struct.smpType_struct*, i8* } %17, 1
  store i8* %22, i8** %21, align 1
  %23 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = load i8** %26, align 1
  %28 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 0
  %30 = load %struct.smpType_struct** %29, align 1
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %28, i32 0, i32 1
  %32 = load i8** %31, align 1
  %33 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %25, i8* %27, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str174, i32 0, i32 0), %struct.smpType_struct* %30, i8* %32)
  %34 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = extractvalue { %struct.smpType_struct*, i8* } %33, 0
  store %struct.smpType_struct* %36, %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = extractvalue { %struct.smpType_struct*, i8* } %33, 1
  store i8* %38, i8** %37, align 1
  %39 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpPair_cdr, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %40 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = extractvalue { %struct.smpType_struct*, i8* } %39, 0
  store %struct.smpType_struct* %42, %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = extractvalue { %struct.smpType_struct*, i8* } %39, 1
  store i8* %44, i8** %43, align 1
  %45 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = load i8** %48, align 1
  %50 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %51 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 0
  %52 = load %struct.smpType_struct** %51, align 1
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %50, i32 0, i32 1
  %54 = load i8** %53, align 1
  %55 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %47, i8* %49, i32 0, i8* getelementptr inbounds ([4 x i8]* @.str175, i32 0, i32 0), %struct.smpType_struct* %52, i8* %54)
  %56 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 0
  %58 = extractvalue { %struct.smpType_struct*, i8* } %55, 0
  store %struct.smpType_struct* %58, %struct.smpType_struct** %57, align 1
  %59 = getelementptr { %struct.smpType_struct*, i8* }* %56, i32 0, i32 1
  %60 = extractvalue { %struct.smpType_struct*, i8* } %55, 1
  store i8* %60, i8** %59, align 1
  %61 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpPair_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %62 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 0
  %64 = extractvalue { %struct.smpType_struct*, i8* } %61, 0
  store %struct.smpType_struct* %64, %struct.smpType_struct** %63, align 1
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %62, i32 0, i32 1
  %66 = extractvalue { %struct.smpType_struct*, i8* } %61, 1
  store i8* %66, i8** %65, align 1
  %67 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 0
  %69 = load %struct.smpType_struct** %68, align 1
  %70 = getelementptr { %struct.smpType_struct*, i8* }* %67, i32 0, i32 1
  %71 = load i8** %70, align 1
  %72 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 0
  %74 = load %struct.smpType_struct** %73, align 1
  %75 = getelementptr { %struct.smpType_struct*, i8* }* %72, i32 0, i32 1
  %76 = load i8** %75, align 1
  %77 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %69, i8* %71, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %74, i8* %76)
  %78 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 0
  %80 = extractvalue { %struct.smpType_struct*, i8* } %77, 0
  store %struct.smpType_struct* %80, %struct.smpType_struct** %79, align 1
  %81 = getelementptr { %struct.smpType_struct*, i8* }* %78, i32 0, i32 1
  %82 = extractvalue { %struct.smpType_struct*, i8* } %77, 1
  store i8* %82, i8** %81, align 1
  %83 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpPair_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %84 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = extractvalue { %struct.smpType_struct*, i8* } %83, 0
  store %struct.smpType_struct* %86, %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = extractvalue { %struct.smpType_struct*, i8* } %83, 1
  store i8* %88, i8** %87, align 1
  %89 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %90 = getelementptr { %struct.smpType_struct*, i8* }* %89, i32 0, i32 0
  %91 = load %struct.smpType_struct** %90, align 1
  %92 = getelementptr { %struct.smpType_struct*, i8* }* %89, i32 0, i32 1
  %93 = load i8** %92, align 1
  %94 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %95 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 0
  %96 = load %struct.smpType_struct** %95, align 1
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %94, i32 0, i32 1
  %98 = load i8** %97, align 1
  %99 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %91, i8* %93, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %96, i8* %98)
  %100 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 0
  %102 = extractvalue { %struct.smpType_struct*, i8* } %99, 0
  store %struct.smpType_struct* %102, %struct.smpType_struct** %101, align 1
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %100, i32 0, i32 1
  %104 = extractvalue { %struct.smpType_struct*, i8* } %99, 1
  store i8* %104, i8** %103, align 1
  %105 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpPair_write, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %106 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 0
  %108 = extractvalue { %struct.smpType_struct*, i8* } %105, 0
  store %struct.smpType_struct* %108, %struct.smpType_struct** %107, align 1
  %109 = getelementptr { %struct.smpType_struct*, i8* }* %106, i32 0, i32 1
  %110 = extractvalue { %struct.smpType_struct*, i8* } %105, 1
  store i8* %110, i8** %109, align 1
  %111 = bitcast %struct.obj_struct* %pair to { %struct.smpType_struct*, i8* }*
  %112 = getelementptr { %struct.smpType_struct*, i8* }* %111, i32 0, i32 0
  %113 = load %struct.smpType_struct** %112, align 1
  %114 = getelementptr { %struct.smpType_struct*, i8* }* %111, i32 0, i32 1
  %115 = load i8** %114, align 1
  %116 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %117 = getelementptr { %struct.smpType_struct*, i8* }* %116, i32 0, i32 0
  %118 = load %struct.smpType_struct** %117, align 1
  %119 = getelementptr { %struct.smpType_struct*, i8* }* %116, i32 0, i32 1
  %120 = load i8** %119, align 1
  %121 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %113, i8* %115, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), %struct.smpType_struct* %118, i8* %120)
  %122 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 0
  %124 = extractvalue { %struct.smpType_struct*, i8* } %121, 0
  store %struct.smpType_struct* %124, %struct.smpType_struct** %123, align 1
  %125 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 1
  %126 = extractvalue { %struct.smpType_struct*, i8* } %121, 1
  store i8* %126, i8** %125, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpPair_car(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpPair_struct*
  %10 = getelementptr inbounds %struct.smpPair_struct* %9, i32 0, i32 0
  %11 = bitcast %struct.obj_struct* %1 to i8*
  %12 = bitcast %struct.obj_struct* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 16, i32 8, i1 false)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = load { %struct.smpType_struct*, i8* }* %13, align 1
  ret { %struct.smpType_struct*, i8* } %14
}

define { %struct.smpType_struct*, i8* } @smpPair_cdr(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %cdr = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpPair_struct*
  %10 = getelementptr inbounds %struct.smpPair_struct* %9, i32 0, i32 1
  %11 = load %struct.obj_struct** %10, align 8
  store %struct.obj_struct* %11, %struct.obj_struct** %cdr, align 8
  %12 = load %struct.obj_struct** %cdr, align 8
  %13 = icmp ne %struct.obj_struct* %12, null
  br i1 %13, label %14, label %18

; <label>:14                                      ; preds = %0
  %15 = load %struct.obj_struct** %cdr, align 8
  %16 = bitcast %struct.obj_struct* %1 to i8*
  %17 = bitcast %struct.obj_struct* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 16, i32 8, i1 false)
  br label %20

; <label>:18                                      ; preds = %0
  %19 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %20

; <label>:20                                      ; preds = %18, %14
  %21 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %22 = load { %struct.smpType_struct*, i8* }* %21, align 1
  ret { %struct.smpType_struct*, i8* } %22
}

define { %struct.smpType_struct*, i8* } @smpPair_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpPair_struct*
  %10 = getelementptr inbounds %struct.smpPair_struct* %9, i32 0, i32 1
  %11 = load %struct.obj_struct** %10, align 8
  %12 = bitcast %struct.obj_struct* %11 to i8*
  call void @GC_free(i8* %12)
  %13 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %13, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %14 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %15 = load { %struct.smpType_struct*, i8* }* %14, align 1
  ret { %struct.smpType_struct*, i8* } %15
}

define { %struct.smpType_struct*, i8* } @smpPair_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %9 = load i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.smpPair_struct*
  %11 = getelementptr inbounds %struct.smpPair_struct* %10, i32 0, i32 0
  %12 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %13 = load i8** %12, align 8
  %14 = bitcast i8* %13 to %struct.smpPair_struct*
  %15 = getelementptr inbounds %struct.smpPair_struct* %14, i32 0, i32 1
  %16 = load %struct.obj_struct** %15, align 8
  %17 = icmp ne %struct.obj_struct* %16, null
  br i1 %17, label %18, label %26

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %20 = load i8** %19, align 8
  %21 = bitcast i8* %20 to %struct.smpPair_struct*
  %22 = getelementptr inbounds %struct.smpPair_struct* %21, i32 0, i32 1
  %23 = load %struct.obj_struct** %22, align 8
  %24 = bitcast %struct.obj_struct* %4 to i8*
  %25 = bitcast %struct.obj_struct* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false)
  br label %28

; <label>:26                                      ; preds = %0
  %27 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %28

; <label>:28                                      ; preds = %26, %18
  %29 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = load i8** %32, align 1
  %34 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = load i8** %37, align 1
  %39 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpGlobal_sprintf(i8* getelementptr inbounds ([11 x i8]* @.str185, i32 0, i32 0), %struct.smpType_struct* %31, i8* %33, %struct.smpType_struct* %36, i8* %38)
  %40 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = extractvalue { %struct.smpType_struct*, i8* } %39, 0
  store %struct.smpType_struct* %42, %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = extractvalue { %struct.smpType_struct*, i8* } %39, 1
  store i8* %44, i8** %43, align 1
  %45 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %46 = load { %struct.smpType_struct*, i8* }* %45, align 1
  ret { %struct.smpType_struct*, i8* } %46
}

define { %struct.smpType_struct*, i8* } @smpPair_write(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %6
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  store i8* %obj.coerce1, i8** %7
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %9 = load i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.smpPair_struct*
  %11 = getelementptr inbounds %struct.smpPair_struct* %10, i32 0, i32 0
  %12 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %13 = load i8** %12, align 8
  %14 = bitcast i8* %13 to %struct.smpPair_struct*
  %15 = getelementptr inbounds %struct.smpPair_struct* %14, i32 0, i32 1
  %16 = load %struct.obj_struct** %15, align 8
  %17 = icmp ne %struct.obj_struct* %16, null
  br i1 %17, label %18, label %26

; <label>:18                                      ; preds = %0
  %19 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %20 = load i8** %19, align 8
  %21 = bitcast i8* %20 to %struct.smpPair_struct*
  %22 = getelementptr inbounds %struct.smpPair_struct* %21, i32 0, i32 1
  %23 = load %struct.obj_struct** %22, align 8
  %24 = bitcast %struct.obj_struct* %4 to i8*
  %25 = bitcast %struct.obj_struct* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %24, i8* %25, i64 16, i32 8, i1 false)
  br label %28

; <label>:26                                      ; preds = %0
  %27 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %28

; <label>:28                                      ; preds = %26, %18
  %29 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = load %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = load i8** %32, align 1
  %34 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = load i8** %37, align 1
  %39 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smpGlobal_sprintf(i8* getelementptr inbounds ([11 x i8]* @.str186, i32 0, i32 0), %struct.smpType_struct* %31, i8* %33, %struct.smpType_struct* %36, i8* %38)
  %40 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = extractvalue { %struct.smpType_struct*, i8* } %39, 0
  store %struct.smpType_struct* %42, %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = extractvalue { %struct.smpType_struct*, i8* } %39, 1
  store i8* %44, i8** %43, align 1
  %45 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %46 = load { %struct.smpType_struct*, i8* }* %45, align 1
  ret { %struct.smpType_struct*, i8* } %46
}

define { %struct.smpType_struct*, i8* } @smpPair_set_car_now(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpPair_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpPair_struct*
  store %struct.smpPair_struct* %9, %struct.smpPair_struct** %core, align 8
  %10 = load %struct.smpPair_struct** %core, align 8
  %11 = getelementptr inbounds %struct.smpPair_struct* %10, i32 0, i32 0
  %12 = load %struct.obj_struct** %3, align 8
  %13 = getelementptr inbounds %struct.obj_struct* %12, i64 0
  %14 = bitcast %struct.obj_struct* %11 to i8*
  %15 = bitcast %struct.obj_struct* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %14, i8* %15, i64 16, i32 8, i1 false)
  %16 = bitcast %struct.obj_struct* %1 to i8*
  %17 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* %17, i64 16, i32 8, i1 false)
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define i32 @smpRegex_create_class() nounwind {
  %regmatch = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([11 x i8]* @.str187, i32 0, i32 0), %struct.smpType_struct* @smpType_object, i32 0)
  %4 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([11 x i8]* @.str187, i32 0, i32 0))
  %5 = bitcast %struct.obj_struct* %regmatch to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  %7 = extractvalue { %struct.smpType_struct*, i8* } %4, 0
  store %struct.smpType_struct* %7, %struct.smpType_struct** %6, align 1
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  %9 = extractvalue { %struct.smpType_struct*, i8* } %4, 1
  store i8* %9, i8** %8, align 1
  %10 = getelementptr inbounds %struct.obj_struct* %regmatch, i32 0, i32 1
  %11 = load i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.smpType_struct*
  %13 = bitcast %struct.smpType_struct* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* bitcast (%struct.smpType_struct* @smpType_regmatch to i8*), i8* %13, i64 64, i32 8, i1 false)
  %14 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpregmatch_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %regmatch to { %struct.smpType_struct*, i8* }*
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 1
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 1
  %24 = load i8** %23, align 1
  %25 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 0
  %27 = load %struct.smpType_struct** %26, align 1
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %25, i32 0, i32 1
  %29 = load i8** %28, align 1
  %30 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %22, i8* %24, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %27, i8* %29)
  %31 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpregmatch_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %core = alloca %struct.smpregexmatch_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpregexmatch_struct*
  %10 = bitcast %struct.smpregexmatch_struct* %core to i8*
  %11 = bitcast %struct.smpregexmatch_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 16, i32 8, i1 false)
  %12 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 0
  %13 = load %struct.regmatch_t** %12, align 8
  %14 = bitcast %struct.regmatch_t* %13 to i8*
  call void @GC_free(i8* %14)
  %15 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %16 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %17 = load { %struct.smpType_struct*, i8* }* %16, align 1
  ret { %struct.smpType_struct*, i8* } %17
}

define { %struct.smpType_struct*, i8* } @smpRegex_compile(%struct.regex_t* %compiled, %struct.smpType_struct* %regex.coerce0, i8* %regex.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.regex_t*, align 8
  %regex = alloca %struct.obj_struct, align 8
  store %struct.regex_t* %compiled, %struct.regex_t** %2, align 8
  %3 = bitcast %struct.obj_struct* %regex to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %regex.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %regex.coerce1, i8** %5
  %6 = load %struct.regex_t** %2, align 8
  %7 = bitcast %struct.obj_struct* %regex to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } @smpRegex_compile_flags(%struct.regex_t* %6, %struct.smpType_struct* %9, i8* %11, i32 1)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpRegex_compile_flags(%struct.regex_t* %compiled, %struct.smpType_struct* %regex.coerce0, i8* %regex.coerce1, i32 %flags) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.regex_t*, align 8
  %regex = alloca %struct.obj_struct, align 8
  %3 = alloca i32, align 4
  store %struct.regex_t* %compiled, %struct.regex_t** %2, align 8
  %4 = bitcast %struct.obj_struct* %regex to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %regex.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %regex.coerce1, i8** %6
  store i32 %flags, i32* %3, align 4
  %7 = load %struct.regex_t** %2, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %regex, i32 0, i32 1
  %9 = load i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.smpstrstruct*
  %11 = getelementptr inbounds %struct.smpstrstruct* %10, i32 0, i32 0
  %12 = load i8** %11, align 8
  %13 = load i32* %3, align 4
  %14 = call { %struct.smpType_struct*, i8* } @smpRegex_compile_str_flags(%struct.regex_t* %7, i8* %12, i32 %13)
  %15 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = load { %struct.smpType_struct*, i8* }* %20, align 1
  ret { %struct.smpType_struct*, i8* } %21
}

define { %struct.smpType_struct*, i8* } @smpRegex_compile_str_flags(%struct.regex_t* %compiled, i8* %pattern, i32 %flags) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.regex_t*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %code = alloca i32, align 4
  store %struct.regex_t* %compiled, %struct.regex_t** %2, align 8
  store i8* %pattern, i8** %3, align 8
  store i32 %flags, i32* %4, align 4
  %5 = load %struct.regex_t** %2, align 8
  %6 = load i8** %3, align 8
  %7 = load i32* %4, align 4
  %8 = call i32 @"\01_regcomp"(%struct.regex_t* %5, i8* %6, i32 %7)
  store i32 %8, i32* %code, align 4
  %9 = load i8** %3, align 8
  %10 = load i32* %code, align 4
  %11 = call { %struct.smpType_struct*, i8* } @smpRegex_compile_handle_errors(i8* %9, i32 %10)
  %12 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = extractvalue { %struct.smpType_struct*, i8* } %11, 0
  store %struct.smpType_struct* %14, %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = extractvalue { %struct.smpType_struct*, i8* } %11, 1
  store i8* %16, i8** %15, align 1
  %17 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %18 = load { %struct.smpType_struct*, i8* }* %17, align 1
  ret { %struct.smpType_struct*, i8* } %18
}

define { %struct.smpType_struct*, i8* } @smpRegex_compile_str(%struct.regex_t* %compiled, i8* %pattern) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.regex_t*, align 8
  %3 = alloca i8*, align 8
  store %struct.regex_t* %compiled, %struct.regex_t** %2, align 8
  store i8* %pattern, i8** %3, align 8
  %4 = load %struct.regex_t** %2, align 8
  %5 = load i8** %3, align 8
  %6 = call { %struct.smpType_struct*, i8* } @smpRegex_compile_str_flags(%struct.regex_t* %4, i8* %5, i32 1)
  %7 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = extractvalue { %struct.smpType_struct*, i8* } %6, 0
  store %struct.smpType_struct* %9, %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = extractvalue { %struct.smpType_struct*, i8* } %6, 1
  store i8* %11, i8** %10, align 1
  %12 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %13 = load { %struct.smpType_struct*, i8* }* %12, align 1
  ret { %struct.smpType_struct*, i8* } %13
}

declare i32 @"\01_regcomp"(%struct.regex_t*, i8*, i32)

define { %struct.smpType_struct*, i8* } @smpRegex_compile_handle_errors(i8* %pattern, i32 %code) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = alloca %struct.obj_struct, align 8
  %16 = alloca %struct.obj_struct, align 8
  %17 = alloca %struct.obj_struct, align 8
  %18 = alloca %struct.obj_struct, align 8
  %19 = alloca %struct.obj_struct, align 8
  %20 = alloca %struct.obj_struct, align 8
  %21 = alloca %struct.obj_struct, align 8
  %22 = alloca %struct.obj_struct, align 8
  %23 = alloca %struct.obj_struct, align 8
  %24 = alloca %struct.obj_struct, align 8
  %25 = alloca %struct.obj_struct, align 8
  %26 = alloca %struct.obj_struct, align 8
  %27 = alloca %struct.obj_struct, align 8
  store i8* %pattern, i8** %2, align 8
  store i32 %code, i32* %3, align 4
  %28 = load i32* %3, align 4
  %29 = icmp eq i32 %28, 10
  br i1 %29, label %30, label %60

; <label>:30                                      ; preds = %0
  %31 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %32 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  %37 = load i8** %2, align 8
  %38 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = load %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = load i8** %41, align 1
  %43 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %40, i8* %42, i8* getelementptr inbounds ([55 x i8]* @.str188, i32 0, i32 0), i8* %37)
  %44 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 0
  %46 = extractvalue { %struct.smpType_struct*, i8* } %43, 0
  store %struct.smpType_struct* %46, %struct.smpType_struct** %45, align 1
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 1
  %48 = extractvalue { %struct.smpType_struct*, i8* } %43, 1
  store i8* %48, i8** %47, align 1
  %49 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = load %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = load i8** %52, align 1
  %54 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %51, i8* %53)
  %55 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %56 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 0
  %57 = extractvalue { %struct.smpType_struct*, i8* } %54, 0
  store %struct.smpType_struct* %57, %struct.smpType_struct** %56, align 1
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %55, i32 0, i32 1
  %59 = extractvalue { %struct.smpType_struct*, i8* } %54, 1
  store i8* %59, i8** %58, align 1
  br label %425

; <label>:60                                      ; preds = %0
  %61 = load i32* %3, align 4
  %62 = icmp eq i32 %61, 2
  br i1 %62, label %63, label %93

; <label>:63                                      ; preds = %60
  %64 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %65 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = extractvalue { %struct.smpType_struct*, i8* } %64, 0
  store %struct.smpType_struct* %67, %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = extractvalue { %struct.smpType_struct*, i8* } %64, 1
  store i8* %69, i8** %68, align 1
  %70 = load i8** %2, align 8
  %71 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = load i8** %74, align 1
  %76 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %73, i8* %75, i8* getelementptr inbounds ([41 x i8]* @.str189, i32 0, i32 0), i8* %70)
  %77 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 0
  %79 = extractvalue { %struct.smpType_struct*, i8* } %76, 0
  store %struct.smpType_struct* %79, %struct.smpType_struct** %78, align 1
  %80 = getelementptr { %struct.smpType_struct*, i8* }* %77, i32 0, i32 1
  %81 = extractvalue { %struct.smpType_struct*, i8* } %76, 1
  store i8* %81, i8** %80, align 1
  %82 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 0
  %84 = load %struct.smpType_struct** %83, align 1
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 1
  %86 = load i8** %85, align 1
  %87 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %84, i8* %86)
  %88 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = extractvalue { %struct.smpType_struct*, i8* } %87, 0
  store %struct.smpType_struct* %90, %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = extractvalue { %struct.smpType_struct*, i8* } %87, 1
  store i8* %92, i8** %91, align 1
  br label %425

; <label>:93                                      ; preds = %60
  %94 = load i32* %3, align 4
  %95 = icmp eq i32 %94, 13
  br i1 %95, label %96, label %126

; <label>:96                                      ; preds = %93
  %97 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %98 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 0
  %100 = extractvalue { %struct.smpType_struct*, i8* } %97, 0
  store %struct.smpType_struct* %100, %struct.smpType_struct** %99, align 1
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 1
  %102 = extractvalue { %struct.smpType_struct*, i8* } %97, 1
  store i8* %102, i8** %101, align 1
  %103 = load i8** %2, align 8
  %104 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 0
  %106 = load %struct.smpType_struct** %105, align 1
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 1
  %108 = load i8** %107, align 1
  %109 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %106, i8* %108, i8* getelementptr inbounds ([97 x i8]* @.str190, i32 0, i32 0), i8* %103)
  %110 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 0
  %112 = extractvalue { %struct.smpType_struct*, i8* } %109, 0
  store %struct.smpType_struct* %112, %struct.smpType_struct** %111, align 1
  %113 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 1
  %114 = extractvalue { %struct.smpType_struct*, i8* } %109, 1
  store i8* %114, i8** %113, align 1
  %115 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 0
  %117 = load %struct.smpType_struct** %116, align 1
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 1
  %119 = load i8** %118, align 1
  %120 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %117, i8* %119)
  %121 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %122 = getelementptr { %struct.smpType_struct*, i8* }* %121, i32 0, i32 0
  %123 = extractvalue { %struct.smpType_struct*, i8* } %120, 0
  store %struct.smpType_struct* %123, %struct.smpType_struct** %122, align 1
  %124 = getelementptr { %struct.smpType_struct*, i8* }* %121, i32 0, i32 1
  %125 = extractvalue { %struct.smpType_struct*, i8* } %120, 1
  store i8* %125, i8** %124, align 1
  br label %425

; <label>:126                                     ; preds = %93
  %127 = load i32* %3, align 4
  %128 = icmp eq i32 %127, 3
  br i1 %128, label %129, label %159

; <label>:129                                     ; preds = %126
  %130 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %131 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %132 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 0
  %133 = extractvalue { %struct.smpType_struct*, i8* } %130, 0
  store %struct.smpType_struct* %133, %struct.smpType_struct** %132, align 1
  %134 = getelementptr { %struct.smpType_struct*, i8* }* %131, i32 0, i32 1
  %135 = extractvalue { %struct.smpType_struct*, i8* } %130, 1
  store i8* %135, i8** %134, align 1
  %136 = load i8** %2, align 8
  %137 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 0
  %139 = load %struct.smpType_struct** %138, align 1
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 1
  %141 = load i8** %140, align 1
  %142 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %139, i8* %141, i8* getelementptr inbounds ([66 x i8]* @.str191, i32 0, i32 0), i8* %136)
  %143 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %144 = getelementptr { %struct.smpType_struct*, i8* }* %143, i32 0, i32 0
  %145 = extractvalue { %struct.smpType_struct*, i8* } %142, 0
  store %struct.smpType_struct* %145, %struct.smpType_struct** %144, align 1
  %146 = getelementptr { %struct.smpType_struct*, i8* }* %143, i32 0, i32 1
  %147 = extractvalue { %struct.smpType_struct*, i8* } %142, 1
  store i8* %147, i8** %146, align 1
  %148 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %149 = getelementptr { %struct.smpType_struct*, i8* }* %148, i32 0, i32 0
  %150 = load %struct.smpType_struct** %149, align 1
  %151 = getelementptr { %struct.smpType_struct*, i8* }* %148, i32 0, i32 1
  %152 = load i8** %151, align 1
  %153 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %150, i8* %152)
  %154 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 0
  %156 = extractvalue { %struct.smpType_struct*, i8* } %153, 0
  store %struct.smpType_struct* %156, %struct.smpType_struct** %155, align 1
  %157 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 1
  %158 = extractvalue { %struct.smpType_struct*, i8* } %153, 1
  store i8* %158, i8** %157, align 1
  br label %425

; <label>:159                                     ; preds = %126
  %160 = load i32* %3, align 4
  %161 = icmp eq i32 %160, 4
  br i1 %161, label %162, label %192

; <label>:162                                     ; preds = %159
  %163 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %164 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %165 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 0
  %166 = extractvalue { %struct.smpType_struct*, i8* } %163, 0
  store %struct.smpType_struct* %166, %struct.smpType_struct** %165, align 1
  %167 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 1
  %168 = extractvalue { %struct.smpType_struct*, i8* } %163, 1
  store i8* %168, i8** %167, align 1
  %169 = load i8** %2, align 8
  %170 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %171 = getelementptr { %struct.smpType_struct*, i8* }* %170, i32 0, i32 0
  %172 = load %struct.smpType_struct** %171, align 1
  %173 = getelementptr { %struct.smpType_struct*, i8* }* %170, i32 0, i32 1
  %174 = load i8** %173, align 1
  %175 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %172, i8* %174, i8* getelementptr inbounds ([69 x i8]* @.str192, i32 0, i32 0), i8* %169)
  %176 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %177 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 0
  %178 = extractvalue { %struct.smpType_struct*, i8* } %175, 0
  store %struct.smpType_struct* %178, %struct.smpType_struct** %177, align 1
  %179 = getelementptr { %struct.smpType_struct*, i8* }* %176, i32 0, i32 1
  %180 = extractvalue { %struct.smpType_struct*, i8* } %175, 1
  store i8* %180, i8** %179, align 1
  %181 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %182 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 0
  %183 = load %struct.smpType_struct** %182, align 1
  %184 = getelementptr { %struct.smpType_struct*, i8* }* %181, i32 0, i32 1
  %185 = load i8** %184, align 1
  %186 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %183, i8* %185)
  %187 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %188 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 0
  %189 = extractvalue { %struct.smpType_struct*, i8* } %186, 0
  store %struct.smpType_struct* %189, %struct.smpType_struct** %188, align 1
  %190 = getelementptr { %struct.smpType_struct*, i8* }* %187, i32 0, i32 1
  %191 = extractvalue { %struct.smpType_struct*, i8* } %186, 1
  store i8* %191, i8** %190, align 1
  br label %425

; <label>:192                                     ; preds = %159
  %193 = load i32* %3, align 4
  %194 = icmp eq i32 %193, 5
  br i1 %194, label %195, label %225

; <label>:195                                     ; preds = %192
  %196 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %197 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %198 = getelementptr { %struct.smpType_struct*, i8* }* %197, i32 0, i32 0
  %199 = extractvalue { %struct.smpType_struct*, i8* } %196, 0
  store %struct.smpType_struct* %199, %struct.smpType_struct** %198, align 1
  %200 = getelementptr { %struct.smpType_struct*, i8* }* %197, i32 0, i32 1
  %201 = extractvalue { %struct.smpType_struct*, i8* } %196, 1
  store i8* %201, i8** %200, align 1
  %202 = load i8** %2, align 8
  %203 = bitcast %struct.obj_struct* %15 to { %struct.smpType_struct*, i8* }*
  %204 = getelementptr { %struct.smpType_struct*, i8* }* %203, i32 0, i32 0
  %205 = load %struct.smpType_struct** %204, align 1
  %206 = getelementptr { %struct.smpType_struct*, i8* }* %203, i32 0, i32 1
  %207 = load i8** %206, align 1
  %208 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %205, i8* %207, i8* getelementptr inbounds ([40 x i8]* @.str193, i32 0, i32 0), i8* %202)
  %209 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %210 = getelementptr { %struct.smpType_struct*, i8* }* %209, i32 0, i32 0
  %211 = extractvalue { %struct.smpType_struct*, i8* } %208, 0
  store %struct.smpType_struct* %211, %struct.smpType_struct** %210, align 1
  %212 = getelementptr { %struct.smpType_struct*, i8* }* %209, i32 0, i32 1
  %213 = extractvalue { %struct.smpType_struct*, i8* } %208, 1
  store i8* %213, i8** %212, align 1
  %214 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %215 = getelementptr { %struct.smpType_struct*, i8* }* %214, i32 0, i32 0
  %216 = load %struct.smpType_struct** %215, align 1
  %217 = getelementptr { %struct.smpType_struct*, i8* }* %214, i32 0, i32 1
  %218 = load i8** %217, align 1
  %219 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %216, i8* %218)
  %220 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %221 = getelementptr { %struct.smpType_struct*, i8* }* %220, i32 0, i32 0
  %222 = extractvalue { %struct.smpType_struct*, i8* } %219, 0
  store %struct.smpType_struct* %222, %struct.smpType_struct** %221, align 1
  %223 = getelementptr { %struct.smpType_struct*, i8* }* %220, i32 0, i32 1
  %224 = extractvalue { %struct.smpType_struct*, i8* } %219, 1
  store i8* %224, i8** %223, align 1
  br label %425

; <label>:225                                     ; preds = %192
  %226 = load i32* %3, align 4
  %227 = icmp eq i32 %226, 6
  br i1 %227, label %228, label %258

; <label>:228                                     ; preds = %225
  %229 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %230 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %231 = getelementptr { %struct.smpType_struct*, i8* }* %230, i32 0, i32 0
  %232 = extractvalue { %struct.smpType_struct*, i8* } %229, 0
  store %struct.smpType_struct* %232, %struct.smpType_struct** %231, align 1
  %233 = getelementptr { %struct.smpType_struct*, i8* }* %230, i32 0, i32 1
  %234 = extractvalue { %struct.smpType_struct*, i8* } %229, 1
  store i8* %234, i8** %233, align 1
  %235 = load i8** %2, align 8
  %236 = bitcast %struct.obj_struct* %17 to { %struct.smpType_struct*, i8* }*
  %237 = getelementptr { %struct.smpType_struct*, i8* }* %236, i32 0, i32 0
  %238 = load %struct.smpType_struct** %237, align 1
  %239 = getelementptr { %struct.smpType_struct*, i8* }* %236, i32 0, i32 1
  %240 = load i8** %239, align 1
  %241 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %238, i8* %240, i8* getelementptr inbounds ([70 x i8]* @.str194, i32 0, i32 0), i8* %235)
  %242 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %243 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 0
  %244 = extractvalue { %struct.smpType_struct*, i8* } %241, 0
  store %struct.smpType_struct* %244, %struct.smpType_struct** %243, align 1
  %245 = getelementptr { %struct.smpType_struct*, i8* }* %242, i32 0, i32 1
  %246 = extractvalue { %struct.smpType_struct*, i8* } %241, 1
  store i8* %246, i8** %245, align 1
  %247 = bitcast %struct.obj_struct* %16 to { %struct.smpType_struct*, i8* }*
  %248 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 0
  %249 = load %struct.smpType_struct** %248, align 1
  %250 = getelementptr { %struct.smpType_struct*, i8* }* %247, i32 0, i32 1
  %251 = load i8** %250, align 1
  %252 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %249, i8* %251)
  %253 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %254 = getelementptr { %struct.smpType_struct*, i8* }* %253, i32 0, i32 0
  %255 = extractvalue { %struct.smpType_struct*, i8* } %252, 0
  store %struct.smpType_struct* %255, %struct.smpType_struct** %254, align 1
  %256 = getelementptr { %struct.smpType_struct*, i8* }* %253, i32 0, i32 1
  %257 = extractvalue { %struct.smpType_struct*, i8* } %252, 1
  store i8* %257, i8** %256, align 1
  br label %425

; <label>:258                                     ; preds = %225
  %259 = load i32* %3, align 4
  %260 = icmp eq i32 %259, 7
  br i1 %260, label %261, label %291

; <label>:261                                     ; preds = %258
  %262 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %263 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %264 = getelementptr { %struct.smpType_struct*, i8* }* %263, i32 0, i32 0
  %265 = extractvalue { %struct.smpType_struct*, i8* } %262, 0
  store %struct.smpType_struct* %265, %struct.smpType_struct** %264, align 1
  %266 = getelementptr { %struct.smpType_struct*, i8* }* %263, i32 0, i32 1
  %267 = extractvalue { %struct.smpType_struct*, i8* } %262, 1
  store i8* %267, i8** %266, align 1
  %268 = load i8** %2, align 8
  %269 = bitcast %struct.obj_struct* %19 to { %struct.smpType_struct*, i8* }*
  %270 = getelementptr { %struct.smpType_struct*, i8* }* %269, i32 0, i32 0
  %271 = load %struct.smpType_struct** %270, align 1
  %272 = getelementptr { %struct.smpType_struct*, i8* }* %269, i32 0, i32 1
  %273 = load i8** %272, align 1
  %274 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %271, i8* %273, i8* getelementptr inbounds ([56 x i8]* @.str195, i32 0, i32 0), i8* %268)
  %275 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %276 = getelementptr { %struct.smpType_struct*, i8* }* %275, i32 0, i32 0
  %277 = extractvalue { %struct.smpType_struct*, i8* } %274, 0
  store %struct.smpType_struct* %277, %struct.smpType_struct** %276, align 1
  %278 = getelementptr { %struct.smpType_struct*, i8* }* %275, i32 0, i32 1
  %279 = extractvalue { %struct.smpType_struct*, i8* } %274, 1
  store i8* %279, i8** %278, align 1
  %280 = bitcast %struct.obj_struct* %18 to { %struct.smpType_struct*, i8* }*
  %281 = getelementptr { %struct.smpType_struct*, i8* }* %280, i32 0, i32 0
  %282 = load %struct.smpType_struct** %281, align 1
  %283 = getelementptr { %struct.smpType_struct*, i8* }* %280, i32 0, i32 1
  %284 = load i8** %283, align 1
  %285 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %282, i8* %284)
  %286 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %287 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 0
  %288 = extractvalue { %struct.smpType_struct*, i8* } %285, 0
  store %struct.smpType_struct* %288, %struct.smpType_struct** %287, align 1
  %289 = getelementptr { %struct.smpType_struct*, i8* }* %286, i32 0, i32 1
  %290 = extractvalue { %struct.smpType_struct*, i8* } %285, 1
  store i8* %290, i8** %289, align 1
  br label %425

; <label>:291                                     ; preds = %258
  %292 = load i32* %3, align 4
  %293 = icmp eq i32 %292, 8
  br i1 %293, label %294, label %324

; <label>:294                                     ; preds = %291
  %295 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %296 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %297 = getelementptr { %struct.smpType_struct*, i8* }* %296, i32 0, i32 0
  %298 = extractvalue { %struct.smpType_struct*, i8* } %295, 0
  store %struct.smpType_struct* %298, %struct.smpType_struct** %297, align 1
  %299 = getelementptr { %struct.smpType_struct*, i8* }* %296, i32 0, i32 1
  %300 = extractvalue { %struct.smpType_struct*, i8* } %295, 1
  store i8* %300, i8** %299, align 1
  %301 = load i8** %2, align 8
  %302 = bitcast %struct.obj_struct* %21 to { %struct.smpType_struct*, i8* }*
  %303 = getelementptr { %struct.smpType_struct*, i8* }* %302, i32 0, i32 0
  %304 = load %struct.smpType_struct** %303, align 1
  %305 = getelementptr { %struct.smpType_struct*, i8* }* %302, i32 0, i32 1
  %306 = load i8** %305, align 1
  %307 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %304, i8* %306, i8* getelementptr inbounds ([52 x i8]* @.str196, i32 0, i32 0), i8* %301)
  %308 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %309 = getelementptr { %struct.smpType_struct*, i8* }* %308, i32 0, i32 0
  %310 = extractvalue { %struct.smpType_struct*, i8* } %307, 0
  store %struct.smpType_struct* %310, %struct.smpType_struct** %309, align 1
  %311 = getelementptr { %struct.smpType_struct*, i8* }* %308, i32 0, i32 1
  %312 = extractvalue { %struct.smpType_struct*, i8* } %307, 1
  store i8* %312, i8** %311, align 1
  %313 = bitcast %struct.obj_struct* %20 to { %struct.smpType_struct*, i8* }*
  %314 = getelementptr { %struct.smpType_struct*, i8* }* %313, i32 0, i32 0
  %315 = load %struct.smpType_struct** %314, align 1
  %316 = getelementptr { %struct.smpType_struct*, i8* }* %313, i32 0, i32 1
  %317 = load i8** %316, align 1
  %318 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %315, i8* %317)
  %319 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %320 = getelementptr { %struct.smpType_struct*, i8* }* %319, i32 0, i32 0
  %321 = extractvalue { %struct.smpType_struct*, i8* } %318, 0
  store %struct.smpType_struct* %321, %struct.smpType_struct** %320, align 1
  %322 = getelementptr { %struct.smpType_struct*, i8* }* %319, i32 0, i32 1
  %323 = extractvalue { %struct.smpType_struct*, i8* } %318, 1
  store i8* %323, i8** %322, align 1
  br label %425

; <label>:324                                     ; preds = %291
  %325 = load i32* %3, align 4
  %326 = icmp eq i32 %325, 9
  br i1 %326, label %327, label %357

; <label>:327                                     ; preds = %324
  %328 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %329 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %330 = getelementptr { %struct.smpType_struct*, i8* }* %329, i32 0, i32 0
  %331 = extractvalue { %struct.smpType_struct*, i8* } %328, 0
  store %struct.smpType_struct* %331, %struct.smpType_struct** %330, align 1
  %332 = getelementptr { %struct.smpType_struct*, i8* }* %329, i32 0, i32 1
  %333 = extractvalue { %struct.smpType_struct*, i8* } %328, 1
  store i8* %333, i8** %332, align 1
  %334 = load i8** %2, align 8
  %335 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %336 = getelementptr { %struct.smpType_struct*, i8* }* %335, i32 0, i32 0
  %337 = load %struct.smpType_struct** %336, align 1
  %338 = getelementptr { %struct.smpType_struct*, i8* }* %335, i32 0, i32 1
  %339 = load i8** %338, align 1
  %340 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %337, i8* %339, i8* getelementptr inbounds ([53 x i8]* @.str197, i32 0, i32 0), i8* %334)
  %341 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %342 = getelementptr { %struct.smpType_struct*, i8* }* %341, i32 0, i32 0
  %343 = extractvalue { %struct.smpType_struct*, i8* } %340, 0
  store %struct.smpType_struct* %343, %struct.smpType_struct** %342, align 1
  %344 = getelementptr { %struct.smpType_struct*, i8* }* %341, i32 0, i32 1
  %345 = extractvalue { %struct.smpType_struct*, i8* } %340, 1
  store i8* %345, i8** %344, align 1
  %346 = bitcast %struct.obj_struct* %22 to { %struct.smpType_struct*, i8* }*
  %347 = getelementptr { %struct.smpType_struct*, i8* }* %346, i32 0, i32 0
  %348 = load %struct.smpType_struct** %347, align 1
  %349 = getelementptr { %struct.smpType_struct*, i8* }* %346, i32 0, i32 1
  %350 = load i8** %349, align 1
  %351 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %348, i8* %350)
  %352 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %353 = getelementptr { %struct.smpType_struct*, i8* }* %352, i32 0, i32 0
  %354 = extractvalue { %struct.smpType_struct*, i8* } %351, 0
  store %struct.smpType_struct* %354, %struct.smpType_struct** %353, align 1
  %355 = getelementptr { %struct.smpType_struct*, i8* }* %352, i32 0, i32 1
  %356 = extractvalue { %struct.smpType_struct*, i8* } %351, 1
  store i8* %356, i8** %355, align 1
  br label %425

; <label>:357                                     ; preds = %324
  %358 = load i32* %3, align 4
  %359 = icmp eq i32 %358, 11
  br i1 %359, label %360, label %390

; <label>:360                                     ; preds = %357
  %361 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %362 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %363 = getelementptr { %struct.smpType_struct*, i8* }* %362, i32 0, i32 0
  %364 = extractvalue { %struct.smpType_struct*, i8* } %361, 0
  store %struct.smpType_struct* %364, %struct.smpType_struct** %363, align 1
  %365 = getelementptr { %struct.smpType_struct*, i8* }* %362, i32 0, i32 1
  %366 = extractvalue { %struct.smpType_struct*, i8* } %361, 1
  store i8* %366, i8** %365, align 1
  %367 = load i8** %2, align 8
  %368 = bitcast %struct.obj_struct* %25 to { %struct.smpType_struct*, i8* }*
  %369 = getelementptr { %struct.smpType_struct*, i8* }* %368, i32 0, i32 0
  %370 = load %struct.smpType_struct** %369, align 1
  %371 = getelementptr { %struct.smpType_struct*, i8* }* %368, i32 0, i32 1
  %372 = load i8** %371, align 1
  %373 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %370, i8* %372, i8* getelementptr inbounds ([84 x i8]* @.str198, i32 0, i32 0), i8* %367)
  %374 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %375 = getelementptr { %struct.smpType_struct*, i8* }* %374, i32 0, i32 0
  %376 = extractvalue { %struct.smpType_struct*, i8* } %373, 0
  store %struct.smpType_struct* %376, %struct.smpType_struct** %375, align 1
  %377 = getelementptr { %struct.smpType_struct*, i8* }* %374, i32 0, i32 1
  %378 = extractvalue { %struct.smpType_struct*, i8* } %373, 1
  store i8* %378, i8** %377, align 1
  %379 = bitcast %struct.obj_struct* %24 to { %struct.smpType_struct*, i8* }*
  %380 = getelementptr { %struct.smpType_struct*, i8* }* %379, i32 0, i32 0
  %381 = load %struct.smpType_struct** %380, align 1
  %382 = getelementptr { %struct.smpType_struct*, i8* }* %379, i32 0, i32 1
  %383 = load i8** %382, align 1
  %384 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %381, i8* %383)
  %385 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %386 = getelementptr { %struct.smpType_struct*, i8* }* %385, i32 0, i32 0
  %387 = extractvalue { %struct.smpType_struct*, i8* } %384, 0
  store %struct.smpType_struct* %387, %struct.smpType_struct** %386, align 1
  %388 = getelementptr { %struct.smpType_struct*, i8* }* %385, i32 0, i32 1
  %389 = extractvalue { %struct.smpType_struct*, i8* } %384, 1
  store i8* %389, i8** %388, align 1
  br label %425

; <label>:390                                     ; preds = %357
  %391 = load i32* %3, align 4
  %392 = icmp eq i32 %391, 12
  br i1 %392, label %393, label %423

; <label>:393                                     ; preds = %390
  %394 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([24 x i8]* @.str14, i32 0, i32 0))
  %395 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %396 = getelementptr { %struct.smpType_struct*, i8* }* %395, i32 0, i32 0
  %397 = extractvalue { %struct.smpType_struct*, i8* } %394, 0
  store %struct.smpType_struct* %397, %struct.smpType_struct** %396, align 1
  %398 = getelementptr { %struct.smpType_struct*, i8* }* %395, i32 0, i32 1
  %399 = extractvalue { %struct.smpType_struct*, i8* } %394, 1
  store i8* %399, i8** %398, align 1
  %400 = load i8** %2, align 8
  %401 = bitcast %struct.obj_struct* %27 to { %struct.smpType_struct*, i8* }*
  %402 = getelementptr { %struct.smpType_struct*, i8* }* %401, i32 0, i32 0
  %403 = load %struct.smpType_struct** %402, align 1
  %404 = getelementptr { %struct.smpType_struct*, i8* }* %401, i32 0, i32 1
  %405 = load i8** %404, align 1
  %406 = call { %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i8*, ...)* @smpException_init_fmt(%struct.smpType_struct* %403, i8* %405, i8* getelementptr inbounds ([59 x i8]* @.str199, i32 0, i32 0), i8* %400)
  %407 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %408 = getelementptr { %struct.smpType_struct*, i8* }* %407, i32 0, i32 0
  %409 = extractvalue { %struct.smpType_struct*, i8* } %406, 0
  store %struct.smpType_struct* %409, %struct.smpType_struct** %408, align 1
  %410 = getelementptr { %struct.smpType_struct*, i8* }* %407, i32 0, i32 1
  %411 = extractvalue { %struct.smpType_struct*, i8* } %406, 1
  store i8* %411, i8** %410, align 1
  %412 = bitcast %struct.obj_struct* %26 to { %struct.smpType_struct*, i8* }*
  %413 = getelementptr { %struct.smpType_struct*, i8* }* %412, i32 0, i32 0
  %414 = load %struct.smpType_struct** %413, align 1
  %415 = getelementptr { %struct.smpType_struct*, i8* }* %412, i32 0, i32 1
  %416 = load i8** %415, align 1
  %417 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %414, i8* %416)
  %418 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %419 = getelementptr { %struct.smpType_struct*, i8* }* %418, i32 0, i32 0
  %420 = extractvalue { %struct.smpType_struct*, i8* } %417, 0
  store %struct.smpType_struct* %420, %struct.smpType_struct** %419, align 1
  %421 = getelementptr { %struct.smpType_struct*, i8* }* %418, i32 0, i32 1
  %422 = extractvalue { %struct.smpType_struct*, i8* } %417, 1
  store i8* %422, i8** %421, align 1
  br label %425

; <label>:423                                     ; preds = %390
  %424 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %424, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %425

; <label>:425                                     ; preds = %423, %393, %360, %327, %294, %261, %228, %195, %162, %129, %96, %63, %30
  %426 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %427 = load { %struct.smpType_struct*, i8* }* %426, align 1
  ret { %struct.smpType_struct*, i8* } %427
}

define { %struct.smpType_struct*, i8* } @smpregmatch_init(%struct.regmatch_t* %matches, i64 %length) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.regmatch_t*, align 8
  %3 = alloca i64, align 8
  %true_len = alloca i64, align 8
  %core = alloca %struct.smpregexmatch_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  store %struct.regmatch_t* %matches, %struct.regmatch_t** %2, align 8
  store i64 %length, i64* %3, align 8
  store i64 0, i64* %true_len, align 8
  br label %4

; <label>:4                                       ; preds = %26, %0
  %5 = load i64* %true_len, align 8
  %6 = load i64* %3, align 8
  %7 = icmp ult i64 %5, %6
  br i1 %7, label %8, label %29

; <label>:8                                       ; preds = %4
  %9 = load i64* %true_len, align 8
  %10 = load %struct.regmatch_t** %2, align 8
  %11 = getelementptr inbounds %struct.regmatch_t* %10, i64 %9
  %12 = getelementptr inbounds %struct.regmatch_t* %11, i32 0, i32 0
  %13 = load i64* %12, align 8
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %15, label %25

; <label>:15                                      ; preds = %8
  %16 = load i64* %true_len, align 8
  %17 = load %struct.regmatch_t** %2, align 8
  %18 = getelementptr inbounds %struct.regmatch_t* %17, i64 %16
  %19 = getelementptr inbounds %struct.regmatch_t* %18, i32 0, i32 1
  %20 = load i64* %19, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %15
  %23 = load i64* %true_len, align 8
  %24 = add i64 %23, 1
  store i64 %24, i64* %true_len, align 8
  br label %29

; <label>:25                                      ; preds = %15, %8
  br label %26

; <label>:26                                      ; preds = %25
  %27 = load i64* %true_len, align 8
  %28 = add i64 %27, 1
  store i64 %28, i64* %true_len, align 8
  br label %4

; <label>:29                                      ; preds = %22, %4
  %30 = load i64* %true_len, align 8
  %31 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 1
  store i64 %30, i64* %31, align 8
  %32 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 1
  %33 = load i64* %32, align 8
  %34 = mul i64 16, %33
  %35 = call noalias i8* @GC_malloc(i64 %34)
  %36 = bitcast i8* %35 to %struct.regmatch_t*
  %37 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 0
  store %struct.regmatch_t* %36, %struct.regmatch_t** %37, align 8
  %38 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 0
  %39 = load %struct.regmatch_t** %38, align 8
  %40 = bitcast %struct.regmatch_t* %39 to i8*
  %41 = call i64 @llvm.objectsize.i64(i8* %40, i1 false)
  %42 = icmp ne i64 %41, -1
  br i1 %42, label %43, label %57

; <label>:43                                      ; preds = %29
  %44 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 0
  %45 = load %struct.regmatch_t** %44, align 8
  %46 = bitcast %struct.regmatch_t* %45 to i8*
  %47 = load %struct.regmatch_t** %2, align 8
  %48 = bitcast %struct.regmatch_t* %47 to i8*
  %49 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 1
  %50 = load i64* %49, align 8
  %51 = mul i64 16, %50
  %52 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 0
  %53 = load %struct.regmatch_t** %52, align 8
  %54 = bitcast %struct.regmatch_t* %53 to i8*
  %55 = call i64 @llvm.objectsize.i64(i8* %54, i1 false)
  %56 = call i8* @__memcpy_chk(i8* %46, i8* %48, i64 %51, i64 %55) nounwind
  br label %67

; <label>:57                                      ; preds = %29
  %58 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 0
  %59 = load %struct.regmatch_t** %58, align 8
  %60 = bitcast %struct.regmatch_t* %59 to i8*
  %61 = load %struct.regmatch_t** %2, align 8
  %62 = bitcast %struct.regmatch_t* %61 to i8*
  %63 = getelementptr inbounds %struct.smpregexmatch_struct* %core, i32 0, i32 1
  %64 = load i64* %63, align 8
  %65 = mul i64 16, %64
  %66 = call i8* @__inline_memcpy_chk(i8* %60, i8* %62, i64 %65)
  br label %67

; <label>:67                                      ; preds = %57, %43
  %68 = phi i8* [ %56, %43 ], [ %66, %57 ]
  %69 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_regmatch)
  %70 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = extractvalue { %struct.smpType_struct*, i8* } %69, 0
  store %struct.smpType_struct* %72, %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = extractvalue { %struct.smpType_struct*, i8* } %69, 1
  store i8* %74, i8** %73, align 1
  %75 = call noalias i8* @GC_malloc(i64 16)
  %76 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %75, i8** %76, align 8
  %77 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %78 = load i8** %77, align 8
  %79 = bitcast i8* %78 to %struct.smpregexmatch_struct*
  %80 = bitcast %struct.smpregexmatch_struct* %79 to i8*
  %81 = bitcast %struct.smpregexmatch_struct* %core to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %80, i8* %81, i64 16, i32 8, i1 false)
  %82 = bitcast %struct.obj_struct* %1 to i8*
  %83 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %82, i8* %83, i64 16, i32 8, i1 false)
  %84 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %85 = load { %struct.smpType_struct*, i8* }* %84, align 1
  ret { %struct.smpType_struct*, i8* } %85
}

define { %struct.smpType_struct*, i8* } @smpRegex_match(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call i8* @smpString_to_cstr(%struct.smpType_struct* %9, i8* %11)
  %13 = load %struct.obj_struct** %3, align 8
  %14 = getelementptr inbounds %struct.obj_struct* %13, i64 0
  %15 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call { %struct.smpType_struct*, i8* } @smpRegex_match_str(i8* %12, %struct.smpType_struct* %17, i8* %19)
  %21 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 0
  %23 = extractvalue { %struct.smpType_struct*, i8* } %20, 0
  store %struct.smpType_struct* %23, %struct.smpType_struct** %22, align 1
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %21, i32 0, i32 1
  %25 = extractvalue { %struct.smpType_struct*, i8* } %20, 1
  store i8* %25, i8** %24, align 1
  %26 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %27 = load { %struct.smpType_struct*, i8* }* %26, align 1
  ret { %struct.smpType_struct*, i8* } %27
}

define { %struct.smpType_struct*, i8* } @smpRegex_match_str(i8* %pattern, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %obj = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %compiled = alloca %struct.regex_t*, align 8
  %obj_code = alloca %struct.obj_struct, align 8
  %length = alloca i64, align 8
  %5 = alloca i8*
  %code = alloca i32, align 4
  %res = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca i32
  store i8* %pattern, i8** %2, align 8
  %8 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %9 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %9
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %8, i32 0, i32 1
  store i8* %obj.coerce1, i8** %10
  %11 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %12 = load %struct.smpType_struct** %11, align 8
  %13 = call i32 @smpObject_instancep_cstr(%struct.smpType_struct* %12, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %57, label %15

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 8
  %18 = getelementptr inbounds %struct.smpType_struct* %17, i32 0, i32 0
  %19 = load i8** %18, align 8
  %20 = call i32 @strcmp(i8* %19, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %15
  %23 = bitcast %struct.obj_struct* %1 to i8*
  %24 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 16, i32 8, i1 false)
  br label %129

; <label>:25                                      ; preds = %15
  %26 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %27 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = extractvalue { %struct.smpType_struct*, i8* } %26, 0
  store %struct.smpType_struct* %29, %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = extractvalue { %struct.smpType_struct*, i8* } %26, 1
  store i8* %31, i8** %30, align 1
  %32 = getelementptr inbounds %struct.obj_struct* %4, i32 0, i32 1
  %33 = load i8** %32, align 8
  %34 = bitcast i8* %33 to %struct.smpType_struct*
  %35 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = load %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = load i8** %38, align 1
  %40 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* %34, %struct.smpType_struct* %37, i8* %39)
  %41 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = extractvalue { %struct.smpType_struct*, i8* } %40, 0
  store %struct.smpType_struct* %43, %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = extractvalue { %struct.smpType_struct*, i8* } %40, 1
  store i8* %45, i8** %44, align 1
  %46 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 0
  %48 = load %struct.smpType_struct** %47, align 1
  %49 = getelementptr { %struct.smpType_struct*, i8* }* %46, i32 0, i32 1
  %50 = load i8** %49, align 1
  %51 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %48, i8* %50)
  %52 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = extractvalue { %struct.smpType_struct*, i8* } %51, 0
  store %struct.smpType_struct* %54, %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = extractvalue { %struct.smpType_struct*, i8* } %51, 1
  store i8* %56, i8** %55, align 1
  br label %129

; <label>:57                                      ; preds = %0
  %58 = call noalias i8* @GC_malloc(i64 32)
  %59 = bitcast i8* %58 to %struct.regex_t*
  store %struct.regex_t* %59, %struct.regex_t** %compiled, align 8
  %60 = load %struct.regex_t** %compiled, align 8
  %61 = load i8** %2, align 8
  %62 = call { %struct.smpType_struct*, i8* } @smpRegex_compile_str(%struct.regex_t* %60, i8* %61)
  %63 = bitcast %struct.obj_struct* %obj_code to { %struct.smpType_struct*, i8* }*
  %64 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 0
  %65 = extractvalue { %struct.smpType_struct*, i8* } %62, 0
  store %struct.smpType_struct* %65, %struct.smpType_struct** %64, align 1
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %63, i32 0, i32 1
  %67 = extractvalue { %struct.smpType_struct*, i8* } %62, 1
  store i8* %67, i8** %66, align 1
  %68 = bitcast %struct.obj_struct* %obj_code to { %struct.smpType_struct*, i8* }*
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 0
  %70 = load %struct.smpType_struct** %69, align 1
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %68, i32 0, i32 1
  %72 = load i8** %71, align 1
  %73 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %70, i8* %72)
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %80

; <label>:75                                      ; preds = %57
  %76 = load %struct.regex_t** %compiled, align 8
  %77 = bitcast %struct.regex_t* %76 to i8*
  call void @GC_free(i8* %77)
  %78 = bitcast %struct.obj_struct* %1 to i8*
  %79 = bitcast %struct.obj_struct* %obj_code to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %78, i8* %79, i64 16, i32 8, i1 false)
  br label %129

; <label>:80                                      ; preds = %57
  store i64 64, i64* %length, align 8
  %81 = load i64* %length, align 8
  %82 = call i8* @llvm.stacksave()
  store i8* %82, i8** %5
  %83 = alloca %struct.regmatch_t, i64 %81, align 16
  %84 = bitcast %struct.regmatch_t* %83 to i8*
  %85 = call i64 @llvm.objectsize.i64(i8* %84, i1 false)
  %86 = icmp ne i64 %85, -1
  br i1 %86, label %87, label %94

; <label>:87                                      ; preds = %80
  %88 = bitcast %struct.regmatch_t* %83 to i8*
  %89 = load i64* %length, align 8
  %90 = mul i64 16, %89
  %91 = bitcast %struct.regmatch_t* %83 to i8*
  %92 = call i64 @llvm.objectsize.i64(i8* %91, i1 false)
  %93 = call i8* @__memset_chk(i8* %88, i32 0, i64 %90, i64 %92) nounwind
  br label %99

; <label>:94                                      ; preds = %80
  %95 = bitcast %struct.regmatch_t* %83 to i8*
  %96 = load i64* %length, align 8
  %97 = mul i64 16, %96
  %98 = call i8* @__inline_memset_chk(i8* %95, i32 0, i64 %97)
  br label %99

; <label>:99                                      ; preds = %94, %87
  %100 = phi i8* [ %93, %87 ], [ %98, %94 ]
  %101 = load %struct.regex_t** %compiled, align 8
  %102 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %103 = load i8** %102, align 8
  %104 = bitcast i8* %103 to %struct.smpstrstruct*
  %105 = getelementptr inbounds %struct.smpstrstruct* %104, i32 0, i32 0
  %106 = load i8** %105, align 8
  %107 = load i64* %length, align 8
  %108 = call i32 @regexec(%struct.regex_t* %101, i8* %106, i64 %107, %struct.regmatch_t* %83, i32 0)
  store i32 %108, i32* %code, align 4
  %109 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %109, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %110 = load i32* %code, align 4
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %122

; <label>:112                                     ; preds = %99
  %113 = load i64* %length, align 8
  %114 = call { %struct.smpType_struct*, i8* } @smpregmatch_init(%struct.regmatch_t* %83, i64 %113)
  %115 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 0
  %117 = extractvalue { %struct.smpType_struct*, i8* } %114, 0
  store %struct.smpType_struct* %117, %struct.smpType_struct** %116, align 1
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 1
  %119 = extractvalue { %struct.smpType_struct*, i8* } %114, 1
  store i8* %119, i8** %118, align 1
  %120 = bitcast %struct.obj_struct* %res to i8*
  %121 = bitcast %struct.obj_struct* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %120, i8* %121, i64 16, i32 8, i1 false)
  br label %122

; <label>:122                                     ; preds = %112, %99
  %123 = load %struct.regex_t** %compiled, align 8
  call void @regfree(%struct.regex_t* %123)
  %124 = load %struct.regex_t** %compiled, align 8
  %125 = bitcast %struct.regex_t* %124 to i8*
  call void @GC_free(i8* %125)
  %126 = bitcast %struct.obj_struct* %1 to i8*
  %127 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %126, i8* %127, i64 16, i32 8, i1 false)
  store i32 1, i32* %7
  %128 = load i8** %5
  call void @llvm.stackrestore(i8* %128)
  br label %129

; <label>:129                                     ; preds = %122, %75, %25, %22
  %130 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %131 = load { %struct.smpType_struct*, i8* }* %130, align 1
  ret { %struct.smpType_struct*, i8* } %131
}

declare i32 @regexec(%struct.regex_t*, i8*, i64, %struct.regmatch_t*, i32)

declare void @regfree(%struct.regex_t*)

define i32 @smpRegex_matchp_cint(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca i32, align 4
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %match = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load i32* %2, align 4
  %8 = load %struct.obj_struct** %3, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  %11 = load %struct.smpType_struct** %10, align 1
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  %13 = load i8** %12, align 1
  %14 = call { %struct.smpType_struct*, i8* } @smpRegex_match(%struct.smpType_struct* %11, i8* %13, i32 %7, %struct.obj_struct* %8)
  %15 = bitcast %struct.obj_struct* %match to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = extractvalue { %struct.smpType_struct*, i8* } %14, 0
  store %struct.smpType_struct* %17, %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = extractvalue { %struct.smpType_struct*, i8* } %14, 1
  store i8* %19, i8** %18, align 1
  %20 = getelementptr inbounds %struct.obj_struct* %match, i32 0, i32 0
  %21 = load %struct.smpType_struct** %20, align 8
  %22 = getelementptr inbounds %struct.smpType_struct* %21, i32 0, i32 0
  %23 = load i8** %22, align 8
  %24 = call i32 @strcmp(i8* %23, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %26, label %27

; <label>:26                                      ; preds = %0
  store i32 -1, i32* %1
  br label %36

; <label>:27                                      ; preds = %0
  %28 = getelementptr inbounds %struct.obj_struct* %match, i32 0, i32 0
  %29 = load %struct.smpType_struct** %28, align 8
  %30 = getelementptr inbounds %struct.smpType_struct* %29, i32 0, i32 0
  %31 = load i8** %30, align 8
  %32 = call i32 @strcmp(i8* %31, i8* getelementptr inbounds ([10 x i8]* @.str42, i32 0, i32 0))
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %35

; <label>:34                                      ; preds = %27
  store i32 1, i32* %1
  br label %36

; <label>:35                                      ; preds = %27
  store i32 0, i32* %1
  br label %36

; <label>:36                                      ; preds = %35, %34, %26
  %37 = load i32* %1
  ret i32 %37
}

define i32 @smpstrcreate_class() nounwind {
  %strclass = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  %7 = alloca %struct.obj_struct, align 8
  %8 = alloca %struct.obj_struct, align 8
  %9 = alloca %struct.obj_struct, align 8
  %10 = alloca %struct.obj_struct, align 8
  %11 = alloca %struct.obj_struct, align 8
  %12 = alloca %struct.obj_struct, align 8
  %13 = alloca %struct.obj_struct, align 8
  %14 = alloca %struct.obj_struct, align 8
  %15 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %16 = bitcast %struct.obj_struct* %strclass to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = extractvalue { %struct.smpType_struct*, i8* } %15, 0
  store %struct.smpType_struct* %18, %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = extractvalue { %struct.smpType_struct*, i8* } %15, 1
  store i8* %20, i8** %19, align 1
  %21 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpString_add, i32 2, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %22 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = extractvalue { %struct.smpType_struct*, i8* } %21, 0
  store %struct.smpType_struct* %24, %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = extractvalue { %struct.smpType_struct*, i8* } %21, 1
  store i8* %26, i8** %25, align 1
  %27 = bitcast %struct.obj_struct* %strclass to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = load %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = load i8** %30, align 1
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = load %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = load i8** %35, align 1
  %37 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %29, i8* %31, i32 0, i8* getelementptr inbounds ([2 x i8]* @.str65, i32 0, i32 0), %struct.smpType_struct* %34, i8* %36)
  %38 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 0
  %40 = extractvalue { %struct.smpType_struct*, i8* } %37, 0
  store %struct.smpType_struct* %40, %struct.smpType_struct** %39, align 1
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %38, i32 0, i32 1
  %42 = extractvalue { %struct.smpType_struct*, i8* } %37, 1
  store i8* %42, i8** %41, align 1
  %43 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpString_clear, i32 1, i8* getelementptr inbounds ([4 x i8]* @.str41, i32 0, i32 0))
  %44 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 0
  %46 = extractvalue { %struct.smpType_struct*, i8* } %43, 0
  store %struct.smpType_struct* %46, %struct.smpType_struct** %45, align 1
  %47 = getelementptr { %struct.smpType_struct*, i8* }* %44, i32 0, i32 1
  %48 = extractvalue { %struct.smpType_struct*, i8* } %43, 1
  store i8* %48, i8** %47, align 1
  %49 = bitcast %struct.obj_struct* %strclass to { %struct.smpType_struct*, i8* }*
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 0
  %51 = load %struct.smpType_struct** %50, align 1
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %49, i32 0, i32 1
  %53 = load i8** %52, align 1
  %54 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 0
  %56 = load %struct.smpType_struct** %55, align 1
  %57 = getelementptr { %struct.smpType_struct*, i8* }* %54, i32 0, i32 1
  %58 = load i8** %57, align 1
  %59 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %51, i8* %53, i32 64, i8* getelementptr inbounds ([6 x i8]* @.str18, i32 0, i32 0), %struct.smpType_struct* %56, i8* %58)
  %60 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %61 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 0
  %62 = extractvalue { %struct.smpType_struct*, i8* } %59, 0
  store %struct.smpType_struct* %62, %struct.smpType_struct** %61, align 1
  %63 = getelementptr { %struct.smpType_struct*, i8* }* %60, i32 0, i32 1
  %64 = extractvalue { %struct.smpType_struct*, i8* } %59, 1
  store i8* %64, i8** %63, align 1
  %65 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpString_equalp, i32 2, i8* getelementptr inbounds ([5 x i8]* @.str38, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8]* @.str35, i32 0, i32 0))
  %66 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 0
  %68 = extractvalue { %struct.smpType_struct*, i8* } %65, 0
  store %struct.smpType_struct* %68, %struct.smpType_struct** %67, align 1
  %69 = getelementptr { %struct.smpType_struct*, i8* }* %66, i32 0, i32 1
  %70 = extractvalue { %struct.smpType_struct*, i8* } %65, 1
  store i8* %70, i8** %69, align 1
  %71 = bitcast %struct.obj_struct* %strclass to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = load %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = load i8** %74, align 1
  %76 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %77 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 0
  %78 = load %struct.smpType_struct** %77, align 1
  %79 = getelementptr { %struct.smpType_struct*, i8* }* %76, i32 0, i32 1
  %80 = load i8** %79, align 1
  %81 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %73, i8* %75, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str22, i32 0, i32 0), %struct.smpType_struct* %78, i8* %80)
  %82 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %83 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 0
  %84 = extractvalue { %struct.smpType_struct*, i8* } %81, 0
  store %struct.smpType_struct* %84, %struct.smpType_struct** %83, align 1
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %82, i32 0, i32 1
  %86 = extractvalue { %struct.smpType_struct*, i8* } %81, 1
  store i8* %86, i8** %85, align 1
  %87 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpString_length, i32 1, i8* getelementptr inbounds ([8 x i8]* @.str57, i32 0, i32 0))
  %88 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %89 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 0
  %90 = extractvalue { %struct.smpType_struct*, i8* } %87, 0
  store %struct.smpType_struct* %90, %struct.smpType_struct** %89, align 1
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %88, i32 0, i32 1
  %92 = extractvalue { %struct.smpType_struct*, i8* } %87, 1
  store i8* %92, i8** %91, align 1
  %93 = bitcast %struct.obj_struct* %strclass to { %struct.smpType_struct*, i8* }*
  %94 = getelementptr { %struct.smpType_struct*, i8* }* %93, i32 0, i32 0
  %95 = load %struct.smpType_struct** %94, align 1
  %96 = getelementptr { %struct.smpType_struct*, i8* }* %93, i32 0, i32 1
  %97 = load i8** %96, align 1
  %98 = bitcast %struct.obj_struct* %7 to { %struct.smpType_struct*, i8* }*
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 0
  %100 = load %struct.smpType_struct** %99, align 1
  %101 = getelementptr { %struct.smpType_struct*, i8* }* %98, i32 0, i32 1
  %102 = load i8** %101, align 1
  %103 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %95, i8* %97, i32 0, i8* getelementptr inbounds ([7 x i8]* @.str180, i32 0, i32 0), %struct.smpType_struct* %100, i8* %102)
  %104 = bitcast %struct.obj_struct* %8 to { %struct.smpType_struct*, i8* }*
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 0
  %106 = extractvalue { %struct.smpType_struct*, i8* } %103, 0
  store %struct.smpType_struct* %106, %struct.smpType_struct** %105, align 1
  %107 = getelementptr { %struct.smpType_struct*, i8* }* %104, i32 0, i32 1
  %108 = extractvalue { %struct.smpType_struct*, i8* } %103, 1
  store i8* %108, i8** %107, align 1
  %109 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpString_reverse, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %110 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %111 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 0
  %112 = extractvalue { %struct.smpType_struct*, i8* } %109, 0
  store %struct.smpType_struct* %112, %struct.smpType_struct** %111, align 1
  %113 = getelementptr { %struct.smpType_struct*, i8* }* %110, i32 0, i32 1
  %114 = extractvalue { %struct.smpType_struct*, i8* } %109, 1
  store i8* %114, i8** %113, align 1
  %115 = bitcast %struct.obj_struct* %strclass to { %struct.smpType_struct*, i8* }*
  %116 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 0
  %117 = load %struct.smpType_struct** %116, align 1
  %118 = getelementptr { %struct.smpType_struct*, i8* }* %115, i32 0, i32 1
  %119 = load i8** %118, align 1
  %120 = bitcast %struct.obj_struct* %9 to { %struct.smpType_struct*, i8* }*
  %121 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 0
  %122 = load %struct.smpType_struct** %121, align 1
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %120, i32 0, i32 1
  %124 = load i8** %123, align 1
  %125 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %117, i8* %119, i32 0, i8* getelementptr inbounds ([8 x i8]* @.str102, i32 0, i32 0), %struct.smpType_struct* %122, i8* %124)
  %126 = bitcast %struct.obj_struct* %10 to { %struct.smpType_struct*, i8* }*
  %127 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 0
  %128 = extractvalue { %struct.smpType_struct*, i8* } %125, 0
  store %struct.smpType_struct* %128, %struct.smpType_struct** %127, align 1
  %129 = getelementptr { %struct.smpType_struct*, i8* }* %126, i32 0, i32 1
  %130 = extractvalue { %struct.smpType_struct*, i8* } %125, 1
  store i8* %130, i8** %129, align 1
  %131 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpString_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %132 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %133 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 0
  %134 = extractvalue { %struct.smpType_struct*, i8* } %131, 0
  store %struct.smpType_struct* %134, %struct.smpType_struct** %133, align 1
  %135 = getelementptr { %struct.smpType_struct*, i8* }* %132, i32 0, i32 1
  %136 = extractvalue { %struct.smpType_struct*, i8* } %131, 1
  store i8* %136, i8** %135, align 1
  %137 = bitcast %struct.obj_struct* %strclass to { %struct.smpType_struct*, i8* }*
  %138 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 0
  %139 = load %struct.smpType_struct** %138, align 1
  %140 = getelementptr { %struct.smpType_struct*, i8* }* %137, i32 0, i32 1
  %141 = load i8** %140, align 1
  %142 = bitcast %struct.obj_struct* %11 to { %struct.smpType_struct*, i8* }*
  %143 = getelementptr { %struct.smpType_struct*, i8* }* %142, i32 0, i32 0
  %144 = load %struct.smpType_struct** %143, align 1
  %145 = getelementptr { %struct.smpType_struct*, i8* }* %142, i32 0, i32 1
  %146 = load i8** %145, align 1
  %147 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %139, i8* %141, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %144, i8* %146)
  %148 = bitcast %struct.obj_struct* %12 to { %struct.smpType_struct*, i8* }*
  %149 = getelementptr { %struct.smpType_struct*, i8* }* %148, i32 0, i32 0
  %150 = extractvalue { %struct.smpType_struct*, i8* } %147, 0
  store %struct.smpType_struct* %150, %struct.smpType_struct** %149, align 1
  %151 = getelementptr { %struct.smpType_struct*, i8* }* %148, i32 0, i32 1
  %152 = extractvalue { %struct.smpType_struct*, i8* } %147, 1
  store i8* %152, i8** %151, align 1
  %153 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpString_write, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %154 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %155 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 0
  %156 = extractvalue { %struct.smpType_struct*, i8* } %153, 0
  store %struct.smpType_struct* %156, %struct.smpType_struct** %155, align 1
  %157 = getelementptr { %struct.smpType_struct*, i8* }* %154, i32 0, i32 1
  %158 = extractvalue { %struct.smpType_struct*, i8* } %153, 1
  store i8* %158, i8** %157, align 1
  %159 = bitcast %struct.obj_struct* %strclass to { %struct.smpType_struct*, i8* }*
  %160 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 0
  %161 = load %struct.smpType_struct** %160, align 1
  %162 = getelementptr { %struct.smpType_struct*, i8* }* %159, i32 0, i32 1
  %163 = load i8** %162, align 1
  %164 = bitcast %struct.obj_struct* %13 to { %struct.smpType_struct*, i8* }*
  %165 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 0
  %166 = load %struct.smpType_struct** %165, align 1
  %167 = getelementptr { %struct.smpType_struct*, i8* }* %164, i32 0, i32 1
  %168 = load i8** %167, align 1
  %169 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %161, i8* %163, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), %struct.smpType_struct* %166, i8* %168)
  %170 = bitcast %struct.obj_struct* %14 to { %struct.smpType_struct*, i8* }*
  %171 = getelementptr { %struct.smpType_struct*, i8* }* %170, i32 0, i32 0
  %172 = extractvalue { %struct.smpType_struct*, i8* } %169, 0
  store %struct.smpType_struct* %172, %struct.smpType_struct** %171, align 1
  %173 = getelementptr { %struct.smpType_struct*, i8* }* %170, i32 0, i32 1
  %174 = extractvalue { %struct.smpType_struct*, i8* } %169, 1
  store i8* %174, i8** %173, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpString_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpstrstruct*
  %10 = getelementptr inbounds %struct.smpstrstruct* %9, i32 0, i32 0
  %11 = load i8** %10, align 8
  call void @GC_free(i8* %11)
  %12 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %13 = load i8** %12, align 8
  %14 = bitcast i8* %13 to %struct.smpstrstruct*
  %15 = getelementptr inbounds %struct.smpstrstruct* %14, i32 0, i32 1
  store i64 0, i64* %15, align 8
  %16 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %16, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %17 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %18 = load { %struct.smpType_struct*, i8* }* %17, align 1
  ret { %struct.smpType_struct*, i8* } %18
}

define { %struct.smpType_struct*, i8* } @smpString_equalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = getelementptr inbounds %struct.obj_struct* %8, i32 0, i32 0
  %10 = load %struct.smpType_struct** %9, align 8
  %11 = getelementptr inbounds %struct.smpType_struct* %10, i32 0, i32 0
  %12 = load i8** %11, align 8
  %13 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %34

; <label>:15                                      ; preds = %0
  %16 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = load i8** %19, align 1
  %21 = call i8* @smpString_to_cstr(%struct.smpType_struct* %18, i8* %20)
  %22 = load %struct.obj_struct** %3, align 8
  %23 = getelementptr inbounds %struct.obj_struct* %22, i64 0
  %24 = bitcast %struct.obj_struct* %23 to { %struct.smpType_struct*, i8* }*
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 0
  %26 = load %struct.smpType_struct** %25, align 1
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %24, i32 0, i32 1
  %28 = load i8** %27, align 1
  %29 = call i8* @smpString_to_cstr(%struct.smpType_struct* %26, i8* %28)
  %30 = call i32 @strcmp(i8* %21, i8* %29)
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %34

; <label>:32                                      ; preds = %15
  %33 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %33, i8* bitcast (%struct.obj_struct* @smp_true to i8*), i64 16, i32 8, i1 false)
  br label %36

; <label>:34                                      ; preds = %15, %0
  %35 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %36

; <label>:36                                      ; preds = %34, %32
  %37 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %38 = load { %struct.smpType_struct*, i8* }* %37, align 1
  ret { %struct.smpType_struct*, i8* } %38
}

define { %struct.smpType_struct*, i8* } @smpString_length(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpstrstruct*
  %10 = getelementptr inbounds %struct.smpstrstruct* %9, i32 0, i32 1
  %11 = load i64* %10, align 8
  %12 = call { %struct.smpType_struct*, i8* } @smpInteger_init_clong(i64 %11)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpString_reverse(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %str = alloca i8*, align 8
  %other = alloca i8*, align 8
  %ptr = alloca i8*, align 8
  %i = alloca i32, align 4
  %res = alloca %struct.obj_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call i8* @smpString_to_cstr(%struct.smpType_struct* %9, i8* %11)
  store i8* %12, i8** %str, align 8
  %13 = load i8** %str, align 8
  %14 = call i64 @strlen(i8* %13)
  %15 = add i64 %14, 1
  %16 = mul i64 1, %15
  %17 = call noalias i8* @GC_malloc(i64 %16)
  store i8* %17, i8** %other, align 8
  %18 = load i8** %str, align 8
  %19 = load i8** %str, align 8
  %20 = call i64 @strlen(i8* %19)
  %21 = getelementptr inbounds i8* %18, i64 %20
  store i8* %21, i8** %ptr, align 8
  store i32 0, i32* %i, align 4
  br label %22

; <label>:22                                      ; preds = %27, %0
  %23 = load i8** %ptr, align 8
  %24 = getelementptr inbounds i8* %23, i32 -1
  store i8* %24, i8** %ptr, align 8
  %25 = load i8** %str, align 8
  %26 = icmp uge i8* %24, %25
  br i1 %26, label %27, label %35

; <label>:27                                      ; preds = %22
  %28 = load i8** %ptr, align 8
  %29 = load i8* %28, align 1
  %30 = load i32* %i, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %i, align 4
  %32 = sext i32 %30 to i64
  %33 = load i8** %other, align 8
  %34 = getelementptr inbounds i8* %33, i64 %32
  store i8 %29, i8* %34, align 1
  br label %22

; <label>:35                                      ; preds = %22
  %36 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_string)
  %37 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 0
  %39 = extractvalue { %struct.smpType_struct*, i8* } %36, 0
  store %struct.smpType_struct* %39, %struct.smpType_struct** %38, align 1
  %40 = getelementptr { %struct.smpType_struct*, i8* }* %37, i32 0, i32 1
  %41 = extractvalue { %struct.smpType_struct*, i8* } %36, 1
  store i8* %41, i8** %40, align 1
  %42 = load i8** %other, align 8
  %43 = call i32 @obj_init_str(%struct.obj_struct* %res, i8* %42)
  %44 = bitcast %struct.obj_struct* %1 to i8*
  %45 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %44, i8* %45, i64 16, i32 8, i1 false)
  %46 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %47 = load { %struct.smpType_struct*, i8* }* %46, align 1
  ret { %struct.smpType_struct*, i8* } %47
}

define { %struct.smpType_struct*, i8* } @smpString_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = bitcast %struct.obj_struct* %1 to i8*
  %8 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %7, i8* %8, i64 16, i32 8, i1 false)
  %9 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %10 = load { %struct.smpType_struct*, i8* }* %9, align 1
  ret { %struct.smpType_struct*, i8* } %10
}

define { %struct.smpType_struct*, i8* } @smpString_write(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca i8*
  %i = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %5 = alloca i32
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %10 = load i8** %9, align 8
  %11 = bitcast i8* %10 to %struct.smpstrstruct*
  %12 = getelementptr inbounds %struct.smpstrstruct* %11, i32 0, i32 1
  %13 = load i64* %12, align 8
  %14 = mul i64 2, %13
  %15 = add i64 3, %14
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %4
  %17 = alloca i8, i64 %15, align 16
  store i64 0, i64* %i, align 8
  %18 = load i64* %i, align 8
  %19 = add i64 %18, 1
  store i64 %19, i64* %i, align 8
  %20 = getelementptr inbounds i8* %17, i64 %18
  store i8 34, i8* %20, align 1
  %21 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %22 = load i8** %21, align 8
  %23 = bitcast i8* %22 to %struct.smpstrstruct*
  %24 = getelementptr inbounds %struct.smpstrstruct* %23, i32 0, i32 0
  %25 = load i8** %24, align 8
  store i8* %25, i8** %ptr, align 8
  br label %26

; <label>:26                                      ; preds = %114, %0
  %27 = load i8** %ptr, align 8
  %28 = load i8* %27, align 1
  %29 = icmp ne i8 %28, 0
  br i1 %29, label %30, label %117

; <label>:30                                      ; preds = %26
  %31 = load i8** %ptr, align 8
  %32 = load i8* %31, align 1
  %33 = sext i8 %32 to i32
  %34 = icmp eq i32 %33, 34
  br i1 %34, label %55, label %35

; <label>:35                                      ; preds = %30
  %36 = load i8** %ptr, align 8
  %37 = load i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp eq i32 %38, 92
  br i1 %39, label %55, label %40

; <label>:40                                      ; preds = %35
  %41 = load i8** %ptr, align 8
  %42 = load i8* %41, align 1
  %43 = sext i8 %42 to i32
  %44 = icmp eq i32 %43, 10
  br i1 %44, label %55, label %45

; <label>:45                                      ; preds = %40
  %46 = load i8** %ptr, align 8
  %47 = load i8* %46, align 1
  %48 = sext i8 %47 to i32
  %49 = icmp eq i32 %48, 13
  br i1 %49, label %55, label %50

; <label>:50                                      ; preds = %45
  %51 = load i8** %ptr, align 8
  %52 = load i8* %51, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %53, 9
  br i1 %54, label %55, label %108

; <label>:55                                      ; preds = %50, %45, %40, %35, %30
  %56 = load i64* %i, align 8
  %57 = add i64 %56, 1
  store i64 %57, i64* %i, align 8
  %58 = getelementptr inbounds i8* %17, i64 %56
  store i8 92, i8* %58, align 1
  %59 = load i8** %ptr, align 8
  %60 = load i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = icmp eq i32 %61, 34
  br i1 %62, label %63, label %67

; <label>:63                                      ; preds = %55
  %64 = load i64* %i, align 8
  %65 = add i64 %64, 1
  store i64 %65, i64* %i, align 8
  %66 = getelementptr inbounds i8* %17, i64 %64
  store i8 34, i8* %66, align 1
  br label %107

; <label>:67                                      ; preds = %55
  %68 = load i8** %ptr, align 8
  %69 = load i8* %68, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp eq i32 %70, 92
  br i1 %71, label %72, label %76

; <label>:72                                      ; preds = %67
  %73 = load i64* %i, align 8
  %74 = add i64 %73, 1
  store i64 %74, i64* %i, align 8
  %75 = getelementptr inbounds i8* %17, i64 %73
  store i8 92, i8* %75, align 1
  br label %106

; <label>:76                                      ; preds = %67
  %77 = load i8** %ptr, align 8
  %78 = load i8* %77, align 1
  %79 = sext i8 %78 to i32
  %80 = icmp eq i32 %79, 10
  br i1 %80, label %81, label %85

; <label>:81                                      ; preds = %76
  %82 = load i64* %i, align 8
  %83 = add i64 %82, 1
  store i64 %83, i64* %i, align 8
  %84 = getelementptr inbounds i8* %17, i64 %82
  store i8 110, i8* %84, align 1
  br label %105

; <label>:85                                      ; preds = %76
  %86 = load i8** %ptr, align 8
  %87 = load i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = icmp eq i32 %88, 13
  br i1 %89, label %90, label %94

; <label>:90                                      ; preds = %85
  %91 = load i64* %i, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %i, align 8
  %93 = getelementptr inbounds i8* %17, i64 %91
  store i8 114, i8* %93, align 1
  br label %104

; <label>:94                                      ; preds = %85
  %95 = load i8** %ptr, align 8
  %96 = load i8* %95, align 1
  %97 = sext i8 %96 to i32
  %98 = icmp eq i32 %97, 9
  br i1 %98, label %99, label %103

; <label>:99                                      ; preds = %94
  %100 = load i64* %i, align 8
  %101 = add i64 %100, 1
  store i64 %101, i64* %i, align 8
  %102 = getelementptr inbounds i8* %17, i64 %100
  store i8 116, i8* %102, align 1
  br label %103

; <label>:103                                     ; preds = %99, %94
  br label %104

; <label>:104                                     ; preds = %103, %90
  br label %105

; <label>:105                                     ; preds = %104, %81
  br label %106

; <label>:106                                     ; preds = %105, %72
  br label %107

; <label>:107                                     ; preds = %106, %63
  br label %114

; <label>:108                                     ; preds = %50
  %109 = load i8** %ptr, align 8
  %110 = load i8* %109, align 1
  %111 = load i64* %i, align 8
  %112 = add i64 %111, 1
  store i64 %112, i64* %i, align 8
  %113 = getelementptr inbounds i8* %17, i64 %111
  store i8 %110, i8* %113, align 1
  br label %114

; <label>:114                                     ; preds = %108, %107
  %115 = load i8** %ptr, align 8
  %116 = getelementptr inbounds i8* %115, i32 1
  store i8* %116, i8** %ptr, align 8
  br label %26

; <label>:117                                     ; preds = %26
  %118 = load i64* %i, align 8
  %119 = add i64 %118, 1
  store i64 %119, i64* %i, align 8
  %120 = getelementptr inbounds i8* %17, i64 %118
  store i8 34, i8* %120, align 1
  %121 = load i64* %i, align 8
  %122 = add i64 %121, 1
  store i64 %122, i64* %i, align 8
  %123 = getelementptr inbounds i8* %17, i64 %121
  store i8 0, i8* %123, align 1
  %124 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %17)
  %125 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %126 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 0
  %127 = extractvalue { %struct.smpType_struct*, i8* } %124, 0
  store %struct.smpType_struct* %127, %struct.smpType_struct** %126, align 1
  %128 = getelementptr { %struct.smpType_struct*, i8* }* %125, i32 0, i32 1
  %129 = extractvalue { %struct.smpType_struct*, i8* } %124, 1
  store i8* %129, i8** %128, align 1
  store i32 1, i32* %5
  %130 = load i8** %4
  call void @llvm.stackrestore(i8* %130)
  %131 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %132 = load { %struct.smpType_struct*, i8* }* %131, align 1
  ret { %struct.smpType_struct*, i8* } %132
}

define i32 @obj_init_str(%struct.obj_struct* %obj, i8* %str) nounwind {
  %1 = alloca %struct.obj_struct*, align 8
  %2 = alloca i8*, align 8
  %core = alloca %struct.smpstrstruct, align 8
  store %struct.obj_struct* %obj, %struct.obj_struct** %1, align 8
  store i8* %str, i8** %2, align 8
  %3 = call noalias i8* @GC_malloc(i64 16)
  %4 = load %struct.obj_struct** %1, align 8
  %5 = getelementptr inbounds %struct.obj_struct* %4, i32 0, i32 1
  store i8* %3, i8** %5, align 8
  %6 = load i8** %2, align 8
  %7 = call i64 @strlen(i8* %6)
  %8 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 1
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 1
  %10 = load i64* %9, align 8
  %11 = add i64 %10, 1
  %12 = mul i64 1, %11
  %13 = call noalias i8* @GC_malloc(i64 %12)
  %14 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  store i8* %13, i8** %14, align 8
  %15 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %16 = load i8** %15, align 8
  %17 = call i64 @llvm.objectsize.i64(i8* %16, i1 false)
  %18 = icmp ne i64 %17, -1
  br i1 %18, label %19, label %27

; <label>:19                                      ; preds = %0
  %20 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %21 = load i8** %20, align 8
  %22 = load i8** %2, align 8
  %23 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %24 = load i8** %23, align 8
  %25 = call i64 @llvm.objectsize.i64(i8* %24, i1 false)
  %26 = call i8* @__strcpy_chk(i8* %21, i8* %22, i64 %25) nounwind
  br label %32

; <label>:27                                      ; preds = %0
  %28 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %29 = load i8** %28, align 8
  %30 = load i8** %2, align 8
  %31 = call i8* @__inline_strcpy_chk(i8* %29, i8* %30)
  br label %32

; <label>:32                                      ; preds = %27, %19
  %33 = phi i8* [ %26, %19 ], [ %31, %27 ]
  %34 = load %struct.obj_struct** %1, align 8
  %35 = getelementptr inbounds %struct.obj_struct* %34, i32 0, i32 1
  %36 = load i8** %35, align 8
  %37 = bitcast i8* %36 to %struct.smpstrstruct*
  %38 = bitcast %struct.smpstrstruct* %37 to i8*
  %39 = bitcast %struct.smpstrstruct* %core to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %38, i8* %39, i64 16, i32 8, i1 false)
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpString_init_length(i8* %str, i64 %length) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %res = alloca %struct.obj_struct, align 8
  %str_len = alloca i64, align 8
  %core = alloca %struct.smpstrstruct, align 8
  store i8* %str, i8** %2, align 8
  store i64 %length, i64* %3, align 8
  %4 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* @smpType_string)
  %5 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  %7 = extractvalue { %struct.smpType_struct*, i8* } %4, 0
  store %struct.smpType_struct* %7, %struct.smpType_struct** %6, align 1
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  %9 = extractvalue { %struct.smpType_struct*, i8* } %4, 1
  store i8* %9, i8** %8, align 1
  %10 = call noalias i8* @GC_malloc(i64 16)
  %11 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  store i8* %10, i8** %11, align 8
  %12 = load i8** %2, align 8
  %13 = call i64 @strlen(i8* %12)
  store i64 %13, i64* %str_len, align 8
  %14 = load i64* %str_len, align 8
  %15 = load i64* %3, align 8
  %16 = icmp ult i64 %14, %15
  br i1 %16, label %17, label %19

; <label>:17                                      ; preds = %0
  %18 = load i64* %str_len, align 8
  store i64 %18, i64* %3, align 8
  br label %19

; <label>:19                                      ; preds = %17, %0
  %20 = load i64* %3, align 8
  %21 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 1
  store i64 %20, i64* %21, align 8
  %22 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 1
  %23 = load i64* %22, align 8
  %24 = add i64 %23, 1
  %25 = mul i64 1, %24
  %26 = call noalias i8* @GC_malloc(i64 %25)
  %27 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  store i8* %26, i8** %27, align 8
  %28 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %29 = load i8** %28, align 8
  %30 = call i64 @llvm.objectsize.i64(i8* %29, i1 false)
  %31 = icmp ne i64 %30, -1
  br i1 %31, label %32, label %41

; <label>:32                                      ; preds = %19
  %33 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %34 = load i8** %33, align 8
  %35 = load i8** %2, align 8
  %36 = load i64* %3, align 8
  %37 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %38 = load i8** %37, align 8
  %39 = call i64 @llvm.objectsize.i64(i8* %38, i1 false)
  %40 = call i8* @__strncpy_chk(i8* %34, i8* %35, i64 %36, i64 %39) nounwind
  br label %47

; <label>:41                                      ; preds = %19
  %42 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %43 = load i8** %42, align 8
  %44 = load i8** %2, align 8
  %45 = load i64* %3, align 8
  %46 = call i8* @__inline_strncpy_chk(i8* %43, i8* %44, i64 %45)
  br label %47

; <label>:47                                      ; preds = %41, %32
  %48 = phi i8* [ %40, %32 ], [ %46, %41 ]
  %49 = load i64* %3, align 8
  %50 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %51 = load i8** %50, align 8
  %52 = getelementptr inbounds i8* %51, i64 %49
  store i8 0, i8* %52, align 1
  %53 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %54 = load i8** %53, align 8
  %55 = bitcast i8* %54 to %struct.smpstrstruct*
  %56 = bitcast %struct.smpstrstruct* %55 to i8*
  %57 = bitcast %struct.smpstrstruct* %core to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %56, i8* %57, i64 16, i32 8, i1 false)
  %58 = bitcast %struct.obj_struct* %1 to i8*
  %59 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %58, i8* %59, i64 16, i32 8, i1 false)
  %60 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %61 = load { %struct.smpType_struct*, i8* }* %60, align 1
  ret { %struct.smpType_struct*, i8* } %61
}

declare i8* @__strncpy_chk(i8*, i8*, i64, i64) nounwind

define internal i8* @__inline_strncpy_chk(i8* noalias %__dest, i8* noalias %__src, i64 %__len) nounwind inlinehint {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  store i8* %__dest, i8** %1, align 8
  store i8* %__src, i8** %2, align 8
  store i64 %__len, i64* %3, align 8
  %4 = load i8** %1, align 8
  %5 = load i8** %2, align 8
  %6 = load i64* %3, align 8
  %7 = load i8** %1, align 8
  %8 = call i64 @llvm.objectsize.i64(i8* %7, i1 false)
  %9 = call i8* @__strncpy_chk(i8* %4, i8* %5, i64 %6, i64 %8) nounwind
  ret i8* %9
}

define { %struct.smpType_struct*, i8* } @smpString_substring(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %start, i32 %length) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %str = alloca i8*, align 8
  %copy = alloca i8*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %start, i32* %2, align 4
  store i32 %length, i32* %3, align 4
  %7 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = load i8** %10, align 1
  %12 = call i8* @smpString_to_cstr(%struct.smpType_struct* %9, i8* %11)
  store i8* %12, i8** %str, align 8
  %13 = load i32* %2, align 4
  %14 = load i32* %3, align 4
  %15 = add nsw i32 %13, %14
  %16 = sext i32 %15 to i64
  %17 = load i8** %str, align 8
  %18 = call i64 @strlen(i8* %17)
  %19 = icmp ugt i64 %16, %18
  br i1 %19, label %20, label %27

; <label>:20                                      ; preds = %0
  %21 = load i8** %str, align 8
  %22 = call i64 @strlen(i8* %21)
  %23 = load i32* %2, align 4
  %24 = sext i32 %23 to i64
  %25 = sub i64 %22, %24
  %26 = trunc i64 %25 to i32
  store i32 %26, i32* %3, align 4
  br label %27

; <label>:27                                      ; preds = %20, %0
  %28 = load i32* %3, align 4
  %29 = icmp sle i32 %28, 0
  br i1 %29, label %30, label %37

; <label>:30                                      ; preds = %27
  %31 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([1 x i8]* @.str200, i32 0, i32 0))
  %32 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = extractvalue { %struct.smpType_struct*, i8* } %31, 0
  store %struct.smpType_struct* %34, %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = extractvalue { %struct.smpType_struct*, i8* } %31, 1
  store i8* %36, i8** %35, align 1
  br label %70

; <label>:37                                      ; preds = %27
  %38 = load i32* %3, align 4
  %39 = add nsw i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = mul i64 1, %40
  %42 = call noalias i8* @GC_malloc(i64 %41)
  store i8* %42, i8** %copy, align 8
  %43 = load i8** %copy, align 8
  %44 = call i64 @llvm.objectsize.i64(i8* %43, i1 false)
  %45 = icmp ne i64 %44, -1
  br i1 %45, label %46, label %55

; <label>:46                                      ; preds = %37
  %47 = load i8** %copy, align 8
  %48 = load i8** %str, align 8
  %49 = load i32* %2, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8* %48, i64 %50
  %52 = load i8** %copy, align 8
  %53 = call i64 @llvm.objectsize.i64(i8* %52, i1 false)
  %54 = call i8* @__strcpy_chk(i8* %47, i8* %51, i64 %53) nounwind
  br label %62

; <label>:55                                      ; preds = %37
  %56 = load i8** %copy, align 8
  %57 = load i8** %str, align 8
  %58 = load i32* %2, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8* %57, i64 %59
  %61 = call i8* @__inline_strcpy_chk(i8* %56, i8* %60)
  br label %62

; <label>:62                                      ; preds = %55, %46
  %63 = phi i8* [ %54, %46 ], [ %61, %55 ]
  %64 = call { %struct.smpType_struct*, i8* } @smpString_init_ref(i8** %copy)
  %65 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = extractvalue { %struct.smpType_struct*, i8* } %64, 0
  store %struct.smpType_struct* %67, %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = extractvalue { %struct.smpType_struct*, i8* } %64, 1
  store i8* %69, i8** %68, align 1
  br label %70

; <label>:70                                      ; preds = %62, %30
  %71 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %72 = load { %struct.smpType_struct*, i8* }* %71, align 1
  ret { %struct.smpType_struct*, i8* } %72
}

define i32 @smpSymbol_create_class() nounwind {
  %symbol = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = call i32 @smpGlobal_class(i8* getelementptr inbounds ([7 x i8]* @.str201, i32 0, i32 0), %struct.smpType_struct* @smpType_string, i32 0)
  %6 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str201, i32 0, i32 0))
  %7 = bitcast %struct.obj_struct* %symbol to { %struct.smpType_struct*, i8* }*
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 0
  %9 = extractvalue { %struct.smpType_struct*, i8* } %6, 0
  store %struct.smpType_struct* %9, %struct.smpType_struct** %8, align 1
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %7, i32 0, i32 1
  %11 = extractvalue { %struct.smpType_struct*, i8* } %6, 1
  store i8* %11, i8** %10, align 1
  %12 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpSymbol_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %symbol to { %struct.smpType_struct*, i8* }*
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 0
  %20 = load %struct.smpType_struct** %19, align 1
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %18, i32 0, i32 1
  %22 = load i8** %21, align 1
  %23 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %24 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 0
  %25 = load %struct.smpType_struct** %24, align 1
  %26 = getelementptr { %struct.smpType_struct*, i8* }* %23, i32 0, i32 1
  %27 = load i8** %26, align 1
  %28 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %20, i8* %22, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %25, i8* %27)
  %29 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 0
  %31 = extractvalue { %struct.smpType_struct*, i8* } %28, 0
  store %struct.smpType_struct* %31, %struct.smpType_struct** %30, align 1
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %29, i32 0, i32 1
  %33 = extractvalue { %struct.smpType_struct*, i8* } %28, 1
  store i8* %33, i8** %32, align 1
  %34 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpSymbol_write, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %35 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %36 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 0
  %37 = extractvalue { %struct.smpType_struct*, i8* } %34, 0
  store %struct.smpType_struct* %37, %struct.smpType_struct** %36, align 1
  %38 = getelementptr { %struct.smpType_struct*, i8* }* %35, i32 0, i32 1
  %39 = extractvalue { %struct.smpType_struct*, i8* } %34, 1
  store i8* %39, i8** %38, align 1
  %40 = bitcast %struct.obj_struct* %symbol to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = load %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = load i8** %43, align 1
  %45 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %46 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 0
  %47 = load %struct.smpType_struct** %46, align 1
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %45, i32 0, i32 1
  %49 = load i8** %48, align 1
  %50 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %42, i8* %44, i32 0, i8* getelementptr inbounds ([6 x i8]* @.str60, i32 0, i32 0), %struct.smpType_struct* %47, i8* %49)
  %51 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %52 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 0
  %53 = extractvalue { %struct.smpType_struct*, i8* } %50, 0
  store %struct.smpType_struct* %53, %struct.smpType_struct** %52, align 1
  %54 = getelementptr { %struct.smpType_struct*, i8* }* %51, i32 0, i32 1
  %55 = extractvalue { %struct.smpType_struct*, i8* } %50, 1
  store i8* %55, i8** %54, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpSymbol_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpstrstruct*
  %10 = getelementptr inbounds %struct.smpstrstruct* %9, i32 0, i32 0
  %11 = load i8** %10, align 8
  %12 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %11)
  %13 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 0
  %15 = extractvalue { %struct.smpType_struct*, i8* } %12, 0
  store %struct.smpType_struct* %15, %struct.smpType_struct** %14, align 1
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %13, i32 0, i32 1
  %17 = extractvalue { %struct.smpType_struct*, i8* } %12, 1
  store i8* %17, i8** %16, align 1
  %18 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %19 = load { %struct.smpType_struct*, i8* }* %18, align 1
  ret { %struct.smpType_struct*, i8* } %19
}

define { %struct.smpType_struct*, i8* } @smpSymbol_write(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = alloca i8*
  %5 = alloca i32
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %10 = load i8** %9, align 8
  %11 = bitcast i8* %10 to %struct.smpstrstruct*
  %12 = getelementptr inbounds %struct.smpstrstruct* %11, i32 0, i32 1
  %13 = load i64* %12, align 8
  %14 = add i64 %13, 2
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %4
  %16 = alloca i8, i64 %14, align 16
  %17 = getelementptr inbounds i8* %16, i64 0
  store i8 96, i8* %17, align 1
  %18 = getelementptr inbounds i8* %16, i64 1
  %19 = call i64 @llvm.objectsize.i64(i8* %18, i1 false)
  %20 = icmp ne i64 %19, -1
  br i1 %20, label %21, label %31

; <label>:21                                      ; preds = %0
  %22 = getelementptr inbounds i8* %16, i64 1
  %23 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to %struct.smpstrstruct*
  %26 = getelementptr inbounds %struct.smpstrstruct* %25, i32 0, i32 0
  %27 = load i8** %26, align 8
  %28 = getelementptr inbounds i8* %16, i64 1
  %29 = call i64 @llvm.objectsize.i64(i8* %28, i1 false)
  %30 = call i8* @__strcpy_chk(i8* %22, i8* %27, i64 %29) nounwind
  br label %39

; <label>:31                                      ; preds = %0
  %32 = getelementptr inbounds i8* %16, i64 1
  %33 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %34 = load i8** %33, align 8
  %35 = bitcast i8* %34 to %struct.smpstrstruct*
  %36 = getelementptr inbounds %struct.smpstrstruct* %35, i32 0, i32 0
  %37 = load i8** %36, align 8
  %38 = call i8* @__inline_strcpy_chk(i8* %32, i8* %37)
  br label %39

; <label>:39                                      ; preds = %31, %21
  %40 = phi i8* [ %30, %21 ], [ %38, %31 ]
  %41 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %16)
  %42 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 0
  %44 = extractvalue { %struct.smpType_struct*, i8* } %41, 0
  store %struct.smpType_struct* %44, %struct.smpType_struct** %43, align 1
  %45 = getelementptr { %struct.smpType_struct*, i8* }* %42, i32 0, i32 1
  %46 = extractvalue { %struct.smpType_struct*, i8* } %41, 1
  store i8* %46, i8** %45, align 1
  store i32 1, i32* %5
  %47 = load i8** %4
  call void @llvm.stackrestore(i8* %47)
  %48 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %49 = load { %struct.smpType_struct*, i8* }* %48, align 1
  ret { %struct.smpType_struct*, i8* } %49
}

define { %struct.smpType_struct*, i8* } @smpSymbol_init(i8* %str) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %res = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %core = alloca %struct.smpstrstruct, align 8
  store i8* %str, i8** %2, align 8
  %4 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str201, i32 0, i32 0))
  %5 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 0
  %7 = extractvalue { %struct.smpType_struct*, i8* } %4, 0
  store %struct.smpType_struct* %7, %struct.smpType_struct** %6, align 1
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %5, i32 0, i32 1
  %9 = extractvalue { %struct.smpType_struct*, i8* } %4, 1
  store i8* %9, i8** %8, align 1
  %10 = getelementptr inbounds %struct.obj_struct* %3, i32 0, i32 1
  %11 = load i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.smpType_struct*
  %13 = call { %struct.smpType_struct*, i8* } @obj_init(%struct.smpType_struct* %12)
  %14 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 0
  %16 = extractvalue { %struct.smpType_struct*, i8* } %13, 0
  store %struct.smpType_struct* %16, %struct.smpType_struct** %15, align 1
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %14, i32 0, i32 1
  %18 = extractvalue { %struct.smpType_struct*, i8* } %13, 1
  store i8* %18, i8** %17, align 1
  %19 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %20 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 0
  %21 = load %struct.smpType_struct** %20, align 1
  %22 = getelementptr { %struct.smpType_struct*, i8* }* %19, i32 0, i32 1
  %23 = load i8** %22, align 1
  %24 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %21, i8* %23)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %29

; <label>:26                                      ; preds = %0
  %27 = bitcast %struct.obj_struct* %1 to i8*
  %28 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  br label %65

; <label>:29                                      ; preds = %0
  %30 = load i8** %2, align 8
  %31 = call i64 @strlen(i8* %30)
  %32 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 1
  store i64 %31, i64* %32, align 8
  %33 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 1
  %34 = load i64* %33, align 8
  %35 = add i64 %34, 1
  %36 = mul i64 1, %35
  %37 = call noalias i8* @GC_malloc(i64 %36)
  %38 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  store i8* %37, i8** %38, align 8
  %39 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %40 = load i8** %39, align 8
  %41 = call i64 @llvm.objectsize.i64(i8* %40, i1 false)
  %42 = icmp ne i64 %41, -1
  br i1 %42, label %43, label %51

; <label>:43                                      ; preds = %29
  %44 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %45 = load i8** %44, align 8
  %46 = load i8** %2, align 8
  %47 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %48 = load i8** %47, align 8
  %49 = call i64 @llvm.objectsize.i64(i8* %48, i1 false)
  %50 = call i8* @__strcpy_chk(i8* %45, i8* %46, i64 %49) nounwind
  br label %56

; <label>:51                                      ; preds = %29
  %52 = getelementptr inbounds %struct.smpstrstruct* %core, i32 0, i32 0
  %53 = load i8** %52, align 8
  %54 = load i8** %2, align 8
  %55 = call i8* @__inline_strcpy_chk(i8* %53, i8* %54)
  br label %56

; <label>:56                                      ; preds = %51, %43
  %57 = phi i8* [ %50, %43 ], [ %55, %51 ]
  %58 = getelementptr inbounds %struct.obj_struct* %res, i32 0, i32 1
  %59 = load i8** %58, align 8
  %60 = bitcast i8* %59 to %struct.smpstrstruct*
  %61 = bitcast %struct.smpstrstruct* %60 to i8*
  %62 = bitcast %struct.smpstrstruct* %core to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* %62, i64 16, i32 8, i1 false)
  %63 = bitcast %struct.obj_struct* %1 to i8*
  %64 = bitcast %struct.obj_struct* %res to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %64, i64 16, i32 8, i1 false)
  br label %65

; <label>:65                                      ; preds = %56, %26
  %66 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %67 = load { %struct.smpType_struct*, i8* }* %66, align 1
  ret { %struct.smpType_struct*, i8* } %67
}

define i8* @smpSymbol_to_cstr(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %obj = alloca %struct.obj_struct, align 8
  %1 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %2 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %2
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 1
  store i8* %obj.coerce1, i8** %3
  %4 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %5 = load i8** %4, align 8
  %6 = bitcast i8* %5 to %struct.smpstrstruct*
  %7 = getelementptr inbounds %struct.smpstrstruct* %6, i32 0, i32 0
  %8 = load i8** %7, align 8
  ret i8* %8
}

define i32 @smpThrown_create_class() nounwind {
  %thrown = alloca %struct.obj_struct, align 8
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct, align 8
  %3 = call { %struct.smpType_struct*, i8* } @smp_getclass(i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %4 = bitcast %struct.obj_struct* %thrown to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  %6 = extractvalue { %struct.smpType_struct*, i8* } %3, 0
  store %struct.smpType_struct* %6, %struct.smpType_struct** %5, align 1
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  %8 = extractvalue { %struct.smpType_struct*, i8* } %3, 1
  store i8* %8, i8** %7, align 1
  %9 = call { %struct.smpType_struct*, i8* } ({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)*, i32, ...)* @smpFunction_init({ %struct.smpType_struct*, i8* } (%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)* @smpThrown_to_s, i32 1, i8* getelementptr inbounds ([7 x i8]* @.str16, i32 0, i32 0))
  %10 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %thrown to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 0
  %22 = load %struct.smpType_struct** %21, align 1
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 1
  %24 = load i8** %23, align 1
  %25 = call { %struct.smpType_struct*, i8* } @smpType_def(%struct.smpType_struct* %17, i8* %19, i32 0, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), %struct.smpType_struct* %22, i8* %24)
  %26 = bitcast %struct.obj_struct* %2 to { %struct.smpType_struct*, i8* }*
  %27 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 0
  %28 = extractvalue { %struct.smpType_struct*, i8* } %25, 0
  store %struct.smpType_struct* %28, %struct.smpType_struct** %27, align 1
  %29 = getelementptr { %struct.smpType_struct*, i8* }* %26, i32 0, i32 1
  %30 = extractvalue { %struct.smpType_struct*, i8* } %25, 1
  store i8* %30, i8** %29, align 1
  ret i32 0
}

define { %struct.smpType_struct*, i8* } @smpThrown_to_s(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %exc_str = alloca %struct.obj_struct, align 8
  %divider = alloca %struct.obj_struct, align 8
  %i = alloca i64, align 8
  %new_str = alloca %struct.obj_struct, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %str = alloca i8*, align 8
  %6 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %obj.coerce1, i8** %8
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %9 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([1 x i8]* @.str200, i32 0, i32 0))
  %10 = bitcast %struct.obj_struct* %exc_str to { %struct.smpType_struct*, i8* }*
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 0
  %12 = extractvalue { %struct.smpType_struct*, i8* } %9, 0
  store %struct.smpType_struct* %12, %struct.smpType_struct** %11, align 1
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %10, i32 0, i32 1
  %14 = extractvalue { %struct.smpType_struct*, i8* } %9, 1
  store i8* %14, i8** %13, align 1
  %15 = bitcast %struct.obj_struct* %exc_str to { %struct.smpType_struct*, i8* }*
  %16 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 0
  %17 = load %struct.smpType_struct** %16, align 1
  %18 = getelementptr { %struct.smpType_struct*, i8* }* %15, i32 0, i32 1
  %19 = load i8** %18, align 1
  %20 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %17, i8* %19)
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %25

; <label>:22                                      ; preds = %0
  %23 = bitcast %struct.obj_struct* %1 to i8*
  %24 = bitcast %struct.obj_struct* %exc_str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %23, i8* %24, i64 16, i32 8, i1 false)
  br label %135

; <label>:25                                      ; preds = %0
  %26 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* getelementptr inbounds ([2 x i8]* @.str13, i32 0, i32 0))
  %27 = bitcast %struct.obj_struct* %divider to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = extractvalue { %struct.smpType_struct*, i8* } %26, 0
  store %struct.smpType_struct* %29, %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = extractvalue { %struct.smpType_struct*, i8* } %26, 1
  store i8* %31, i8** %30, align 1
  %32 = bitcast %struct.obj_struct* %divider to { %struct.smpType_struct*, i8* }*
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 0
  %34 = load %struct.smpType_struct** %33, align 1
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %32, i32 0, i32 1
  %36 = load i8** %35, align 1
  %37 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %34, i8* %36)
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %42

; <label>:39                                      ; preds = %25
  %40 = bitcast %struct.obj_struct* %1 to i8*
  %41 = bitcast %struct.obj_struct* %divider to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* %41, i64 16, i32 8, i1 false)
  br label %135

; <label>:42                                      ; preds = %25
  store i64 0, i64* %i, align 8
  br label %43

; <label>:43                                      ; preds = %118, %42
  %44 = load i64* %i, align 8
  %45 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %46 = load i8** %45, align 8
  %47 = bitcast i8* %46 to %struct.smpThrown_struct*
  %48 = getelementptr inbounds %struct.smpThrown_struct* %47, i32 0, i32 2
  %49 = load i64* %48, align 8
  %50 = icmp ult i64 %44, %49
  br i1 %50, label %51, label %121

; <label>:51                                      ; preds = %43
  %52 = load i64* %i, align 8
  %53 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %54 = load i8** %53, align 8
  %55 = bitcast i8* %54 to %struct.smpThrown_struct*
  %56 = getelementptr inbounds %struct.smpThrown_struct* %55, i32 0, i32 1
  %57 = load %struct.obj_struct** %56, align 8
  %58 = getelementptr inbounds %struct.obj_struct* %57, i64 %52
  %59 = bitcast %struct.obj_struct* %58 to { %struct.smpType_struct*, i8* }*
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 0
  %61 = load %struct.smpType_struct** %60, align 1
  %62 = getelementptr { %struct.smpType_struct*, i8* }* %59, i32 0, i32 1
  %63 = load i8** %62, align 1
  %64 = call { %struct.smpType_struct*, i8* } @smpObject_funcall(%struct.smpType_struct* %61, i8* %63, i8* getelementptr inbounds ([5 x i8]* @.str33, i32 0, i32 0), i32 0, %struct.obj_struct* null)
  %65 = bitcast %struct.obj_struct* %new_str to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = extractvalue { %struct.smpType_struct*, i8* } %64, 0
  store %struct.smpType_struct* %67, %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = extractvalue { %struct.smpType_struct*, i8* } %64, 1
  store i8* %69, i8** %68, align 1
  %70 = bitcast %struct.obj_struct* %new_str to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = load %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = load i8** %73, align 1
  %75 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %72, i8* %74)
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %80

; <label>:77                                      ; preds = %51
  %78 = bitcast %struct.obj_struct* %1 to i8*
  %79 = bitcast %struct.obj_struct* %new_str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %78, i8* %79, i64 16, i32 8, i1 false)
  br label %135

; <label>:80                                      ; preds = %51
  %81 = load i64* %i, align 8
  %82 = icmp ugt i64 %81, 0
  br i1 %82, label %83, label %95

; <label>:83                                      ; preds = %80
  %84 = bitcast %struct.obj_struct* %exc_str to { %struct.smpType_struct*, i8* }*
  %85 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 0
  %86 = load %struct.smpType_struct** %85, align 1
  %87 = getelementptr { %struct.smpType_struct*, i8* }* %84, i32 0, i32 1
  %88 = load i8** %87, align 1
  %89 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %86, i8* %88, i32 1, %struct.obj_struct* %divider)
  %90 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %91 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 0
  %92 = extractvalue { %struct.smpType_struct*, i8* } %89, 0
  store %struct.smpType_struct* %92, %struct.smpType_struct** %91, align 1
  %93 = getelementptr { %struct.smpType_struct*, i8* }* %90, i32 0, i32 1
  %94 = extractvalue { %struct.smpType_struct*, i8* } %89, 1
  store i8* %94, i8** %93, align 1
  br label %95

; <label>:95                                      ; preds = %83, %80
  %96 = bitcast %struct.obj_struct* %exc_str to { %struct.smpType_struct*, i8* }*
  %97 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 0
  %98 = load %struct.smpType_struct** %97, align 1
  %99 = getelementptr { %struct.smpType_struct*, i8* }* %96, i32 0, i32 1
  %100 = load i8** %99, align 1
  %101 = call { %struct.smpType_struct*, i8* } @smpString_add_now(%struct.smpType_struct* %98, i8* %100, i32 1, %struct.obj_struct* %new_str)
  %102 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %103 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 0
  %104 = extractvalue { %struct.smpType_struct*, i8* } %101, 0
  store %struct.smpType_struct* %104, %struct.smpType_struct** %103, align 1
  %105 = getelementptr { %struct.smpType_struct*, i8* }* %102, i32 0, i32 1
  %106 = extractvalue { %struct.smpType_struct*, i8* } %101, 1
  store i8* %106, i8** %105, align 1
  %107 = bitcast %struct.obj_struct* %exc_str to { %struct.smpType_struct*, i8* }*
  %108 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 0
  %109 = load %struct.smpType_struct** %108, align 1
  %110 = getelementptr { %struct.smpType_struct*, i8* }* %107, i32 0, i32 1
  %111 = load i8** %110, align 1
  %112 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %109, i8* %111)
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %117

; <label>:114                                     ; preds = %95
  %115 = bitcast %struct.obj_struct* %1 to i8*
  %116 = bitcast %struct.obj_struct* %exc_str to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %115, i8* %116, i64 16, i32 8, i1 false)
  br label %135

; <label>:117                                     ; preds = %95
  br label %118

; <label>:118                                     ; preds = %117
  %119 = load i64* %i, align 8
  %120 = add i64 %119, 1
  store i64 %120, i64* %i, align 8
  br label %43

; <label>:121                                     ; preds = %43
  %122 = bitcast %struct.obj_struct* %exc_str to { %struct.smpType_struct*, i8* }*
  %123 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 0
  %124 = load %struct.smpType_struct** %123, align 1
  %125 = getelementptr { %struct.smpType_struct*, i8* }* %122, i32 0, i32 1
  %126 = load i8** %125, align 1
  %127 = call i8* @smpString_to_cstr(%struct.smpType_struct* %124, i8* %126)
  %128 = call i32 (i8**, i8*, ...)* @asprintf(i8** %str, i8* getelementptr inbounds ([13 x i8]* @.str202, i32 0, i32 0), i8* %127)
  %129 = call { %struct.smpType_struct*, i8* } @smpString_init_ref(i8** %str)
  %130 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %131 = getelementptr { %struct.smpType_struct*, i8* }* %130, i32 0, i32 0
  %132 = extractvalue { %struct.smpType_struct*, i8* } %129, 0
  store %struct.smpType_struct* %132, %struct.smpType_struct** %131, align 1
  %133 = getelementptr { %struct.smpType_struct*, i8* }* %130, i32 0, i32 1
  %134 = extractvalue { %struct.smpType_struct*, i8* } %129, 1
  store i8* %134, i8** %133, align 1
  br label %135

; <label>:135                                     ; preds = %121, %114, %77, %39, %22
  %136 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %137 = load { %struct.smpType_struct*, i8* }* %136, align 1
  ret { %struct.smpType_struct*, i8* } %137
}

define { %struct.smpType_struct*, i8* } @smpThrown_add_exception_now(%struct.obj_struct* %obj, %struct.smpType_struct* %exc.coerce0, i8* %exc.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %2 = alloca %struct.obj_struct*, align 8
  %exc = alloca %struct.obj_struct, align 8
  %3 = alloca %struct.obj_struct, align 8
  %core = alloca %struct.smpThrown_struct*, align 8
  %other_core = alloca %struct.smpThrown_struct, align 8
  %old_length = alloca i64, align 8
  store %struct.obj_struct* %obj, %struct.obj_struct** %2, align 8
  %4 = bitcast %struct.obj_struct* %exc to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %exc.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %exc.coerce1, i8** %6
  %7 = load %struct.obj_struct** %2, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i32 0, i32 0
  %9 = load %struct.smpType_struct** %8, align 8
  %10 = getelementptr inbounds %struct.smpType_struct* %9, i32 0, i32 1
  %11 = load i32* %10, align 4
  %12 = load i32* @smpType_id_nil, align 4
  %13 = icmp eq i32 %11, %12
  br i1 %13, label %14, label %30

; <label>:14                                      ; preds = %0
  %15 = load %struct.obj_struct** %2, align 8
  %16 = bitcast %struct.obj_struct* %exc to { %struct.smpType_struct*, i8* }*
  %17 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 0
  %18 = load %struct.smpType_struct** %17, align 1
  %19 = getelementptr { %struct.smpType_struct*, i8* }* %16, i32 0, i32 1
  %20 = load i8** %19, align 1
  %21 = call { %struct.smpType_struct*, i8* } @smpThrown_init(i32 0, %struct.smpType_struct* %18, i8* %20)
  %22 = bitcast %struct.obj_struct* %3 to { %struct.smpType_struct*, i8* }*
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 0
  %24 = extractvalue { %struct.smpType_struct*, i8* } %21, 0
  store %struct.smpType_struct* %24, %struct.smpType_struct** %23, align 1
  %25 = getelementptr { %struct.smpType_struct*, i8* }* %22, i32 0, i32 1
  %26 = extractvalue { %struct.smpType_struct*, i8* } %21, 1
  store i8* %26, i8** %25, align 1
  %27 = bitcast %struct.obj_struct* %15 to i8*
  %28 = bitcast %struct.obj_struct* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %27, i8* %28, i64 16, i32 8, i1 false)
  %29 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %29, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %142

; <label>:30                                      ; preds = %0
  %31 = load %struct.obj_struct** %2, align 8
  %32 = getelementptr inbounds %struct.obj_struct* %31, i32 0, i32 1
  %33 = load i8** %32, align 8
  %34 = bitcast i8* %33 to %struct.smpThrown_struct*
  store %struct.smpThrown_struct* %34, %struct.smpThrown_struct** %core, align 8
  %35 = getelementptr inbounds %struct.obj_struct* %exc, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 8
  %37 = getelementptr inbounds %struct.smpType_struct* %36, i32 0, i32 0
  %38 = load i8** %37, align 8
  %39 = call i32 @strcmp(i8* %38, i8* getelementptr inbounds ([7 x i8]* @.str25, i32 0, i32 0))
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %113

; <label>:41                                      ; preds = %30
  %42 = getelementptr inbounds %struct.obj_struct* %exc, i32 0, i32 1
  %43 = load i8** %42, align 8
  %44 = bitcast i8* %43 to %struct.smpThrown_struct*
  %45 = bitcast %struct.smpThrown_struct* %other_core to i8*
  %46 = bitcast %struct.smpThrown_struct* %44 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %45, i8* %46, i64 24, i32 8, i1 false)
  %47 = load %struct.smpThrown_struct** %core, align 8
  %48 = getelementptr inbounds %struct.smpThrown_struct* %47, i32 0, i32 2
  %49 = load i64* %48, align 8
  store i64 %49, i64* %old_length, align 8
  %50 = getelementptr inbounds %struct.smpThrown_struct* %other_core, i32 0, i32 2
  %51 = load i64* %50, align 8
  %52 = load %struct.smpThrown_struct** %core, align 8
  %53 = getelementptr inbounds %struct.smpThrown_struct* %52, i32 0, i32 2
  %54 = load i64* %53, align 8
  %55 = add i64 %54, %51
  store i64 %55, i64* %53, align 8
  %56 = load %struct.smpThrown_struct** %core, align 8
  %57 = getelementptr inbounds %struct.smpThrown_struct* %56, i32 0, i32 1
  %58 = load %struct.obj_struct** %57, align 8
  %59 = bitcast %struct.obj_struct* %58 to i8*
  %60 = load %struct.smpThrown_struct** %core, align 8
  %61 = getelementptr inbounds %struct.smpThrown_struct* %60, i32 0, i32 2
  %62 = load i64* %61, align 8
  %63 = mul i64 16, %62
  %64 = call i8* @GC_realloc(i8* %59, i64 %63)
  %65 = bitcast i8* %64 to %struct.obj_struct*
  %66 = load %struct.smpThrown_struct** %core, align 8
  %67 = getelementptr inbounds %struct.smpThrown_struct* %66, i32 0, i32 1
  store %struct.obj_struct* %65, %struct.obj_struct** %67, align 8
  %68 = load %struct.smpThrown_struct** %core, align 8
  %69 = getelementptr inbounds %struct.smpThrown_struct* %68, i32 0, i32 1
  %70 = load %struct.obj_struct** %69, align 8
  %71 = load i64* %old_length, align 8
  %72 = getelementptr inbounds %struct.obj_struct* %70, i64 %71
  %73 = bitcast %struct.obj_struct* %72 to i8*
  %74 = call i64 @llvm.objectsize.i64(i8* %73, i1 false)
  %75 = icmp ne i64 %74, -1
  br i1 %75, label %76, label %97

; <label>:76                                      ; preds = %41
  %77 = load %struct.smpThrown_struct** %core, align 8
  %78 = getelementptr inbounds %struct.smpThrown_struct* %77, i32 0, i32 1
  %79 = load %struct.obj_struct** %78, align 8
  %80 = load i64* %old_length, align 8
  %81 = getelementptr inbounds %struct.obj_struct* %79, i64 %80
  %82 = bitcast %struct.obj_struct* %81 to i8*
  %83 = getelementptr inbounds %struct.smpThrown_struct* %other_core, i32 0, i32 1
  %84 = load %struct.obj_struct** %83, align 8
  %85 = bitcast %struct.obj_struct* %84 to i8*
  %86 = getelementptr inbounds %struct.smpThrown_struct* %other_core, i32 0, i32 2
  %87 = load i64* %86, align 8
  %88 = mul i64 16, %87
  %89 = load %struct.smpThrown_struct** %core, align 8
  %90 = getelementptr inbounds %struct.smpThrown_struct* %89, i32 0, i32 1
  %91 = load %struct.obj_struct** %90, align 8
  %92 = load i64* %old_length, align 8
  %93 = getelementptr inbounds %struct.obj_struct* %91, i64 %92
  %94 = bitcast %struct.obj_struct* %93 to i8*
  %95 = call i64 @llvm.objectsize.i64(i8* %94, i1 false)
  %96 = call i8* @__memcpy_chk(i8* %82, i8* %85, i64 %88, i64 %95) nounwind
  br label %111

; <label>:97                                      ; preds = %41
  %98 = load %struct.smpThrown_struct** %core, align 8
  %99 = getelementptr inbounds %struct.smpThrown_struct* %98, i32 0, i32 1
  %100 = load %struct.obj_struct** %99, align 8
  %101 = load i64* %old_length, align 8
  %102 = getelementptr inbounds %struct.obj_struct* %100, i64 %101
  %103 = bitcast %struct.obj_struct* %102 to i8*
  %104 = getelementptr inbounds %struct.smpThrown_struct* %other_core, i32 0, i32 1
  %105 = load %struct.obj_struct** %104, align 8
  %106 = bitcast %struct.obj_struct* %105 to i8*
  %107 = getelementptr inbounds %struct.smpThrown_struct* %other_core, i32 0, i32 2
  %108 = load i64* %107, align 8
  %109 = mul i64 16, %108
  %110 = call i8* @__inline_memcpy_chk(i8* %103, i8* %106, i64 %109)
  br label %111

; <label>:111                                     ; preds = %97, %76
  %112 = phi i8* [ %96, %76 ], [ %110, %97 ]
  br label %140

; <label>:113                                     ; preds = %30
  %114 = load %struct.smpThrown_struct** %core, align 8
  %115 = getelementptr inbounds %struct.smpThrown_struct* %114, i32 0, i32 2
  %116 = load i64* %115, align 8
  %117 = add i64 %116, 1
  store i64 %117, i64* %115, align 8
  %118 = load %struct.smpThrown_struct** %core, align 8
  %119 = getelementptr inbounds %struct.smpThrown_struct* %118, i32 0, i32 1
  %120 = load %struct.obj_struct** %119, align 8
  %121 = bitcast %struct.obj_struct* %120 to i8*
  %122 = load %struct.smpThrown_struct** %core, align 8
  %123 = getelementptr inbounds %struct.smpThrown_struct* %122, i32 0, i32 2
  %124 = load i64* %123, align 8
  %125 = mul i64 16, %124
  %126 = call i8* @GC_realloc(i8* %121, i64 %125)
  %127 = bitcast i8* %126 to %struct.obj_struct*
  %128 = load %struct.smpThrown_struct** %core, align 8
  %129 = getelementptr inbounds %struct.smpThrown_struct* %128, i32 0, i32 1
  store %struct.obj_struct* %127, %struct.obj_struct** %129, align 8
  %130 = load %struct.smpThrown_struct** %core, align 8
  %131 = getelementptr inbounds %struct.smpThrown_struct* %130, i32 0, i32 2
  %132 = load i64* %131, align 8
  %133 = sub i64 %132, 1
  %134 = load %struct.smpThrown_struct** %core, align 8
  %135 = getelementptr inbounds %struct.smpThrown_struct* %134, i32 0, i32 1
  %136 = load %struct.obj_struct** %135, align 8
  %137 = getelementptr inbounds %struct.obj_struct* %136, i64 %133
  %138 = bitcast %struct.obj_struct* %137 to i8*
  %139 = bitcast %struct.obj_struct* %exc to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %138, i8* %139, i64 16, i32 8, i1 false)
  br label %140

; <label>:140                                     ; preds = %113, %111
  %141 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %141, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %142

; <label>:142                                     ; preds = %140, %14
  %143 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %144 = load { %struct.smpType_struct*, i8* }* %143, align 1
  ret { %struct.smpType_struct*, i8* } %144
}

define i32 @smpThrown_contains_namep(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i8* %name) nounwind {
  %1 = alloca i32, align 4
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i8*, align 8
  %i = alloca i64, align 8
  %3 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %4
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %3, i32 0, i32 1
  store i8* %obj.coerce1, i8** %5
  store i8* %name, i8** %2, align 8
  store i64 0, i64* %i, align 8
  br label %6

; <label>:6                                       ; preds = %31, %0
  %7 = load i64* %i, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %9 = load i8** %8, align 8
  %10 = bitcast i8* %9 to %struct.smpThrown_struct*
  %11 = getelementptr inbounds %struct.smpThrown_struct* %10, i32 0, i32 2
  %12 = load i64* %11, align 8
  %13 = icmp ult i64 %7, %12
  br i1 %13, label %14, label %34

; <label>:14                                      ; preds = %6
  %15 = load i64* %i, align 8
  %16 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %17 = load i8** %16, align 8
  %18 = bitcast i8* %17 to %struct.smpThrown_struct*
  %19 = getelementptr inbounds %struct.smpThrown_struct* %18, i32 0, i32 1
  %20 = load %struct.obj_struct** %19, align 8
  %21 = getelementptr inbounds %struct.obj_struct* %20, i64 %15
  %22 = getelementptr inbounds %struct.obj_struct* %21, i32 0, i32 0
  %23 = load %struct.smpType_struct** %22, align 8
  %24 = getelementptr inbounds %struct.smpType_struct* %23, i32 0, i32 0
  %25 = load i8** %24, align 8
  %26 = load i8** %2, align 8
  %27 = call i32 @strcmp(i8* %25, i8* %26)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %30

; <label>:29                                      ; preds = %14
  store i32 1, i32* %1
  br label %35

; <label>:30                                      ; preds = %14
  br label %31

; <label>:31                                      ; preds = %30
  %32 = load i64* %i, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %i, align 8
  br label %6

; <label>:34                                      ; preds = %6
  store i32 0, i32* %1
  br label %35

; <label>:35                                      ; preds = %34, %29
  %36 = load i32* %1
  ret i32 %36
}

define { %struct.smpType_struct*, i8* } @smpThrown_get_first_value(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %3
  %4 = getelementptr { %struct.smpType_struct*, i8* }* %2, i32 0, i32 1
  store i8* %obj.coerce1, i8** %4
  %5 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %6 = load i8** %5, align 8
  %7 = bitcast i8* %6 to %struct.smpThrown_struct*
  %8 = getelementptr inbounds %struct.smpThrown_struct* %7, i32 0, i32 2
  %9 = load i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %13

; <label>:11                                      ; preds = %0
  %12 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %12, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %22

; <label>:13                                      ; preds = %0
  %14 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %15 = load i8** %14, align 8
  %16 = bitcast i8* %15 to %struct.smpThrown_struct*
  %17 = getelementptr inbounds %struct.smpThrown_struct* %16, i32 0, i32 1
  %18 = load %struct.obj_struct** %17, align 8
  %19 = getelementptr inbounds %struct.obj_struct* %18, i64 0
  %20 = bitcast %struct.obj_struct* %1 to i8*
  %21 = bitcast %struct.obj_struct* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i32 8, i1 false)
  br label %22

; <label>:22                                      ; preds = %13, %11
  %23 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %24 = load { %struct.smpType_struct*, i8* }* %23, align 1
  ret { %struct.smpType_struct*, i8* } %24
}

define i32 @smp_should_breakp_c(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %obj = alloca %struct.obj_struct, align 8
  %1 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %2 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %2
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 1
  store i8* %obj.coerce1, i8** %3
  %4 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %5 = load %struct.smpType_struct** %4, align 8
  %6 = getelementptr inbounds %struct.smpType_struct* %5, i32 0, i32 1
  %7 = load i32* %6, align 4
  %8 = load i32* @smpType_id_thrown, align 4
  %9 = icmp eq i32 %7, %8
  %10 = zext i1 %9 to i32
  ret i32 %10
}

define i32 @smp_should_returnp_c(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %obj = alloca %struct.obj_struct, align 8
  %1 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %2 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %2
  %3 = getelementptr { %struct.smpType_struct*, i8* }* %1, i32 0, i32 1
  store i8* %obj.coerce1, i8** %3
  %4 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %5 = load %struct.smpType_struct** %4, align 8
  %6 = getelementptr inbounds %struct.smpType_struct* %5, i32 0, i32 1
  %7 = load i32* %6, align 4
  %8 = load i32* @smpType_id_thrown, align 4
  %9 = icmp eq i32 %7, %8
  br i1 %9, label %10, label %32

; <label>:10                                      ; preds = %0
  %11 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %12 = load i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.smpThrown_struct*
  %14 = bitcast %struct.smpThrown_struct* %13 to i32*
  %15 = load i32* %14, align 8
  %16 = and i32 %15, 15
  %17 = shl i32 %16, 28
  %18 = ashr i32 %17, 28
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %30, label %20

; <label>:20                                      ; preds = %10
  %21 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %22 = load i8** %21, align 8
  %23 = bitcast i8* %22 to %struct.smpThrown_struct*
  %24 = bitcast %struct.smpThrown_struct* %23 to i32*
  %25 = load i32* %24, align 8
  %26 = and i32 %25, 15
  %27 = shl i32 %26, 28
  %28 = ashr i32 %27, 28
  %29 = icmp eq i32 %28, 1
  br label %30

; <label>:30                                      ; preds = %20, %10
  %31 = phi i1 [ true, %10 ], [ %29, %20 ]
  br label %32

; <label>:32                                      ; preds = %30, %0
  %33 = phi i1 [ false, %0 ], [ %31, %30 ]
  %34 = zext i1 %33 to i32
  ret i32 %34
}

declare i32 @asprintf(i8**, i8*, ...)

define { %struct.smpType_struct*, i8* } @smpType_clear(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %type = alloca %struct.smpType_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpType_struct*
  %10 = bitcast %struct.smpType_struct* %type to i8*
  %11 = bitcast %struct.smpType_struct* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* %11, i64 64, i32 8, i1 false)
  %12 = getelementptr inbounds %struct.smpType_struct* %type, i32 0, i32 7
  %13 = load %struct.minihash_struct** %12, align 8
  %14 = call i32 @minihash_clear(%struct.minihash_struct* %13)
  %15 = getelementptr inbounds %struct.smpType_struct* %type, i32 0, i32 8
  %16 = load %struct.minihash_struct** %15, align 8
  %17 = call i32 @minihash_clear(%struct.minihash_struct* %16)
  %18 = getelementptr inbounds %struct.smpType_struct* %type, i32 0, i32 0
  %19 = load i8** %18, align 8
  call void @GC_free(i8* %19)
  %20 = getelementptr inbounds %struct.smpType_struct* %type, i32 0, i32 3
  %21 = load %struct.smpType_struct*** %20, align 8
  %22 = bitcast %struct.smpType_struct** %21 to i8*
  call void @GC_free(i8* %22)
  %23 = getelementptr inbounds %struct.smpType_struct* %type, i32 0, i32 3
  store %struct.smpType_struct** null, %struct.smpType_struct*** %23, align 8
  %24 = getelementptr inbounds %struct.smpType_struct* %type, i32 0, i32 5
  %25 = load %struct.minihash_struct** %24, align 8
  %26 = call i32 @minihash_clear(%struct.minihash_struct* %25)
  %27 = getelementptr inbounds %struct.smpType_struct* %type, i32 0, i32 6
  %28 = load %struct.minihash_struct** %27, align 8
  %29 = call i32 @minihash_clear(%struct.minihash_struct* %28)
  %30 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %30, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  %31 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %32 = load { %struct.smpType_struct*, i8* }* %31, align 1
  ret { %struct.smpType_struct*, i8* } %32
}

define { %struct.smpType_struct*, i8* } @smpType_def_general(%struct.smpType_struct* %type.coerce0, i8* %type.coerce1, i32 %flags, i8* %name, %struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %type = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %obj = alloca %struct.obj_struct, align 8
  %data = alloca %struct.minihash_struct*, align 8
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %6 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %7 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 0
  store %struct.smpType_struct* %type.coerce0, %struct.smpType_struct** %7
  %8 = getelementptr { %struct.smpType_struct*, i8* }* %6, i32 0, i32 1
  store i8* %type.coerce1, i8** %8
  store i32 %flags, i32* %2, align 4
  store i8* %name, i8** %3, align 8
  %9 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %10 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %10
  %11 = getelementptr { %struct.smpType_struct*, i8* }* %9, i32 0, i32 1
  store i8* %obj.coerce1, i8** %11
  %12 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %13 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 0
  %14 = load %struct.smpType_struct** %13, align 1
  %15 = getelementptr { %struct.smpType_struct*, i8* }* %12, i32 0, i32 1
  %16 = load i8** %15, align 1
  %17 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %14, i8* %16)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %22

; <label>:19                                      ; preds = %0
  %20 = bitcast %struct.obj_struct* %1 to i8*
  %21 = bitcast %struct.obj_struct* %type to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %20, i8* %21, i64 16, i32 8, i1 false)
  br label %217

; <label>:22                                      ; preds = %0
  store %struct.minihash_struct* null, %struct.minihash_struct** %data, align 8
  %23 = getelementptr inbounds %struct.obj_struct* %type, i32 0, i32 0
  %24 = load %struct.smpType_struct** %23, align 8
  %25 = getelementptr inbounds %struct.smpType_struct* %24, i32 0, i32 0
  %26 = load i8** %25, align 8
  %27 = call i32 @strcmp(i8* %26, i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0))
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %52, label %29

; <label>:29                                      ; preds = %22
  %30 = bitcast %struct.obj_struct* %type to { %struct.smpType_struct*, i8* }*
  %31 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 0
  %32 = load %struct.smpType_struct** %31, align 1
  %33 = getelementptr { %struct.smpType_struct*, i8* }* %30, i32 0, i32 1
  %34 = load i8** %33, align 1
  %35 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_class, %struct.smpType_struct* %32, i8* %34)
  %36 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 0
  %38 = extractvalue { %struct.smpType_struct*, i8* } %35, 0
  store %struct.smpType_struct* %38, %struct.smpType_struct** %37, align 1
  %39 = getelementptr { %struct.smpType_struct*, i8* }* %36, i32 0, i32 1
  %40 = extractvalue { %struct.smpType_struct*, i8* } %35, 1
  store i8* %40, i8** %39, align 1
  %41 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %42 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 0
  %43 = load %struct.smpType_struct** %42, align 1
  %44 = getelementptr { %struct.smpType_struct*, i8* }* %41, i32 0, i32 1
  %45 = load i8** %44, align 1
  %46 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %43, i8* %45)
  %47 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %48 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 0
  %49 = extractvalue { %struct.smpType_struct*, i8* } %46, 0
  store %struct.smpType_struct* %49, %struct.smpType_struct** %48, align 1
  %50 = getelementptr { %struct.smpType_struct*, i8* }* %47, i32 0, i32 1
  %51 = extractvalue { %struct.smpType_struct*, i8* } %46, 1
  store i8* %51, i8** %50, align 1
  br label %217

; <label>:52                                      ; preds = %22
  %53 = load i32* %2, align 4
  %54 = and i32 %53, 3840
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %86

; <label>:56                                      ; preds = %52
  %57 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 0
  %58 = load %struct.smpType_struct** %57, align 8
  %59 = getelementptr inbounds %struct.smpType_struct* %58, i32 0, i32 0
  %60 = load i8** %59, align 8
  %61 = call i32 @strcmp(i8* %60, i8* getelementptr inbounds ([9 x i8]* @.str24, i32 0, i32 0))
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %86, label %63

; <label>:63                                      ; preds = %56
  %64 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %65 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 0
  %66 = load %struct.smpType_struct** %65, align 1
  %67 = getelementptr { %struct.smpType_struct*, i8* }* %64, i32 0, i32 1
  %68 = load i8** %67, align 1
  %69 = call { %struct.smpType_struct*, i8* } @smpTypeError_init(%struct.smpType_struct* @smpType_function, %struct.smpType_struct* %66, i8* %68)
  %70 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %71 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 0
  %72 = extractvalue { %struct.smpType_struct*, i8* } %69, 0
  store %struct.smpType_struct* %72, %struct.smpType_struct** %71, align 1
  %73 = getelementptr { %struct.smpType_struct*, i8* }* %70, i32 0, i32 1
  %74 = extractvalue { %struct.smpType_struct*, i8* } %69, 1
  store i8* %74, i8** %73, align 1
  %75 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %76 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 0
  %77 = load %struct.smpType_struct** %76, align 1
  %78 = getelementptr { %struct.smpType_struct*, i8* }* %75, i32 0, i32 1
  %79 = load i8** %78, align 1
  %80 = call { %struct.smpType_struct*, i8* } @smpGlobal_throw(%struct.smpType_struct* %77, i8* %79)
  %81 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %82 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 0
  %83 = extractvalue { %struct.smpType_struct*, i8* } %80, 0
  store %struct.smpType_struct* %83, %struct.smpType_struct** %82, align 1
  %84 = getelementptr { %struct.smpType_struct*, i8* }* %81, i32 0, i32 1
  %85 = extractvalue { %struct.smpType_struct*, i8* } %80, 1
  store i8* %85, i8** %84, align 1
  br label %217

; <label>:86                                      ; preds = %56, %52
  %87 = load i32* %2, align 4
  %88 = and i32 %87, 3840
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %144

; <label>:90                                      ; preds = %86
  %91 = load i8** %3, align 8
  %92 = call i64 @strlen(i8* %91)
  %93 = add i64 %92, 1
  %94 = mul i64 1, %93
  %95 = call noalias i8* @GC_malloc(i64 %94)
  %96 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %97 = load i8** %96, align 8
  %98 = bitcast i8* %97 to %struct.smpFunction_struct*
  %99 = getelementptr inbounds %struct.smpFunction_struct* %98, i32 0, i32 1
  store i8* %95, i8** %99, align 8
  %100 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %101 = load i8** %100, align 8
  %102 = bitcast i8* %101 to %struct.smpFunction_struct*
  %103 = getelementptr inbounds %struct.smpFunction_struct* %102, i32 0, i32 1
  %104 = load i8** %103, align 8
  %105 = call i64 @llvm.objectsize.i64(i8* %104, i1 false)
  %106 = icmp ne i64 %105, -1
  br i1 %106, label %107, label %121

; <label>:107                                     ; preds = %90
  %108 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %109 = load i8** %108, align 8
  %110 = bitcast i8* %109 to %struct.smpFunction_struct*
  %111 = getelementptr inbounds %struct.smpFunction_struct* %110, i32 0, i32 1
  %112 = load i8** %111, align 8
  %113 = load i8** %3, align 8
  %114 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %115 = load i8** %114, align 8
  %116 = bitcast i8* %115 to %struct.smpFunction_struct*
  %117 = getelementptr inbounds %struct.smpFunction_struct* %116, i32 0, i32 1
  %118 = load i8** %117, align 8
  %119 = call i64 @llvm.objectsize.i64(i8* %118, i1 false)
  %120 = call i8* @__strcpy_chk(i8* %112, i8* %113, i64 %119) nounwind
  br label %129

; <label>:121                                     ; preds = %90
  %122 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %123 = load i8** %122, align 8
  %124 = bitcast i8* %123 to %struct.smpFunction_struct*
  %125 = getelementptr inbounds %struct.smpFunction_struct* %124, i32 0, i32 1
  %126 = load i8** %125, align 8
  %127 = load i8** %3, align 8
  %128 = call i8* @__inline_strcpy_chk(i8* %126, i8* %127)
  br label %129

; <label>:129                                     ; preds = %121, %107
  %130 = phi i8* [ %120, %107 ], [ %128, %121 ]
  %131 = load i32* %2, align 4
  %132 = and i32 %131, 240
  %133 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %134 = load i8** %133, align 8
  %135 = bitcast i8* %134 to %struct.smpFunction_struct*
  %136 = and i32 %132, 255
  %137 = shl i32 %136, 24
  %138 = ashr i32 %137, 24
  %139 = bitcast %struct.smpFunction_struct* %135 to i32*
  %140 = and i32 %136, 255
  %141 = load i32* %139, align 8
  %142 = and i32 %141, -256
  %143 = or i32 %142, %140
  store i32 %143, i32* %139, align 8
  br label %144

; <label>:144                                     ; preds = %129, %86
  %145 = load i32* %2, align 4
  %146 = and i32 %145, 15
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %148, label %173

; <label>:148                                     ; preds = %144
  %149 = load i32* %2, align 4
  %150 = and i32 %149, 3840
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %158

; <label>:152                                     ; preds = %148
  %153 = getelementptr inbounds %struct.obj_struct* %type, i32 0, i32 1
  %154 = load i8** %153, align 8
  %155 = bitcast i8* %154 to %struct.smpType_struct*
  %156 = getelementptr inbounds %struct.smpType_struct* %155, i32 0, i32 5
  %157 = load %struct.minihash_struct** %156, align 8
  store %struct.minihash_struct* %157, %struct.minihash_struct** %data, align 8
  br label %172

; <label>:158                                     ; preds = %148
  %159 = load i32* %2, align 4
  %160 = and i32 %159, 3840
  %161 = icmp eq i32 %160, 256
  br i1 %161, label %162, label %168

; <label>:162                                     ; preds = %158
  %163 = getelementptr inbounds %struct.obj_struct* %type, i32 0, i32 1
  %164 = load i8** %163, align 8
  %165 = bitcast i8* %164 to %struct.smpType_struct*
  %166 = getelementptr inbounds %struct.smpType_struct* %165, i32 0, i32 6
  %167 = load %struct.minihash_struct** %166, align 8
  store %struct.minihash_struct* %167, %struct.minihash_struct** %data, align 8
  br label %171

; <label>:168                                     ; preds = %158
  %169 = load i32* %2, align 4
  %170 = and i32 %169, 3840
  call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([38 x i8]* @.str203, i32 0, i32 0), i32 %170)
  br label %171

; <label>:171                                     ; preds = %168, %162
  br label %172

; <label>:172                                     ; preds = %171, %152
  br label %206

; <label>:173                                     ; preds = %144
  %174 = load i32* %2, align 4
  %175 = and i32 %174, 15
  %176 = icmp eq i32 %175, 1
  br i1 %176, label %177, label %202

; <label>:177                                     ; preds = %173
  %178 = load i32* %2, align 4
  %179 = and i32 %178, 3840
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %187

; <label>:181                                     ; preds = %177
  %182 = getelementptr inbounds %struct.obj_struct* %type, i32 0, i32 1
  %183 = load i8** %182, align 8
  %184 = bitcast i8* %183 to %struct.smpType_struct*
  %185 = getelementptr inbounds %struct.smpType_struct* %184, i32 0, i32 7
  %186 = load %struct.minihash_struct** %185, align 8
  store %struct.minihash_struct* %186, %struct.minihash_struct** %data, align 8
  br label %201

; <label>:187                                     ; preds = %177
  %188 = load i32* %2, align 4
  %189 = and i32 %188, 3840
  %190 = icmp eq i32 %189, 256
  br i1 %190, label %191, label %197

; <label>:191                                     ; preds = %187
  %192 = getelementptr inbounds %struct.obj_struct* %type, i32 0, i32 1
  %193 = load i8** %192, align 8
  %194 = bitcast i8* %193 to %struct.smpType_struct*
  %195 = getelementptr inbounds %struct.smpType_struct* %194, i32 0, i32 8
  %196 = load %struct.minihash_struct** %195, align 8
  store %struct.minihash_struct* %196, %struct.minihash_struct** %data, align 8
  br label %200

; <label>:197                                     ; preds = %187
  %198 = load i32* %2, align 4
  %199 = and i32 %198, 3840
  call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([38 x i8]* @.str203, i32 0, i32 0), i32 %199)
  br label %200

; <label>:200                                     ; preds = %197, %191
  br label %201

; <label>:201                                     ; preds = %200, %181
  br label %205

; <label>:202                                     ; preds = %173
  %203 = load i32* %2, align 4
  %204 = and i32 %203, 15
  call void (i8*, ...)* @internal_error(i8* getelementptr inbounds ([26 x i8]* @.str204, i32 0, i32 0), i32 %204)
  br label %205

; <label>:205                                     ; preds = %202, %201
  br label %206

; <label>:206                                     ; preds = %205, %172
  %207 = load %struct.minihash_struct** %data, align 8
  %208 = load i8** %3, align 8
  %209 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %210 = getelementptr { %struct.smpType_struct*, i8* }* %209, i32 0, i32 0
  %211 = load %struct.smpType_struct** %210, align 1
  %212 = getelementptr { %struct.smpType_struct*, i8* }* %209, i32 0, i32 1
  %213 = load i8** %212, align 1
  %214 = call i32 @minihash_add(%struct.minihash_struct* %207, i8* %208, %struct.smpType_struct* %211, i8* %213)
  %215 = bitcast %struct.obj_struct* %1 to i8*
  %216 = bitcast %struct.obj_struct* %obj to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %215, i8* %216, i64 16, i32 8, i1 false)
  br label %217

; <label>:217                                     ; preds = %206, %63, %29, %19
  %218 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %219 = load { %struct.smpType_struct*, i8* }* %218, align 1
  ret { %struct.smpType_struct*, i8* } %219
}

define { %struct.smpType_struct*, i8* } @smpType_equalp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = load %struct.obj_struct** %3, align 8
  %8 = getelementptr inbounds %struct.obj_struct* %7, i64 0
  %9 = getelementptr inbounds %struct.obj_struct* %8, i32 0, i32 0
  %10 = load %struct.smpType_struct** %9, align 8
  %11 = getelementptr inbounds %struct.smpType_struct* %10, i32 0, i32 0
  %12 = load i8** %11, align 8
  %13 = call i32 @strcmp(i8* %12, i8* getelementptr inbounds ([6 x i8]* @.str31, i32 0, i32 0))
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %36

; <label>:15                                      ; preds = %0
  %16 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %17 = load i8** %16, align 8
  %18 = bitcast i8* %17 to %struct.smpType_struct*
  %19 = getelementptr inbounds %struct.smpType_struct* %18, i32 0, i32 1
  %20 = load i32* %19, align 4
  %21 = load %struct.obj_struct** %3, align 8
  %22 = getelementptr inbounds %struct.obj_struct* %21, i64 0
  %23 = getelementptr inbounds %struct.obj_struct* %22, i32 0, i32 1
  %24 = load i8** %23, align 8
  %25 = bitcast i8* %24 to %struct.smpType_struct*
  %26 = getelementptr inbounds %struct.smpType_struct* %25, i32 0, i32 1
  %27 = load i32* %26, align 4
  %28 = icmp eq i32 %20, %27
  %29 = zext i1 %28 to i32
  %30 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %29)
  %31 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %32 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 0
  %33 = extractvalue { %struct.smpType_struct*, i8* } %30, 0
  store %struct.smpType_struct* %33, %struct.smpType_struct** %32, align 1
  %34 = getelementptr { %struct.smpType_struct*, i8* }* %31, i32 0, i32 1
  %35 = extractvalue { %struct.smpType_struct*, i8* } %30, 1
  store i8* %35, i8** %34, align 1
  br label %38

; <label>:36                                      ; preds = %0
  %37 = bitcast %struct.obj_struct* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %37, i8* bitcast (%struct.obj_struct* @smp_nil to i8*), i64 16, i32 8, i1 false)
  br label %38

; <label>:38                                      ; preds = %36, %15
  %39 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %40 = load { %struct.smpType_struct*, i8* }* %39, align 1
  ret { %struct.smpType_struct*, i8* } %40
}

define { %struct.smpType_struct*, i8* } @smpType_relatedp(%struct.smpType_struct* %obj.coerce0, i8* %obj.coerce1, i32 %argc, %struct.obj_struct* %argv) nounwind {
  %1 = alloca %struct.obj_struct, align 8
  %obj = alloca %struct.obj_struct, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.obj_struct*, align 8
  %type1 = alloca %struct.smpType_struct*, align 8
  %type2 = alloca %struct.smpType_struct, align 8
  %4 = bitcast %struct.obj_struct* %obj to { %struct.smpType_struct*, i8* }*
  %5 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 0
  store %struct.smpType_struct* %obj.coerce0, %struct.smpType_struct** %5
  %6 = getelementptr { %struct.smpType_struct*, i8* }* %4, i32 0, i32 1
  store i8* %obj.coerce1, i8** %6
  store i32 %argc, i32* %2, align 4
  store %struct.obj_struct* %argv, %struct.obj_struct** %3, align 8
  %7 = getelementptr inbounds %struct.obj_struct* %obj, i32 0, i32 1
  %8 = load i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.smpType_struct*
  store %struct.smpType_struct* %9, %struct.smpType_struct** %type1, align 8
  %10 = load %struct.obj_struct** %3, align 8
  %11 = getelementptr inbounds %struct.obj_struct* %10, i64 0
  %12 = getelementptr inbounds %struct.obj_struct* %11, i32 0, i32 1
  %13 = load i8** %12, align 8
  %14 = bitcast i8* %13 to %struct.smpType_struct*
  %15 = bitcast %struct.smpType_struct* %type2 to i8*
  %16 = bitcast %struct.smpType_struct* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %15, i8* %16, i64 64, i32 8, i1 false)
  %17 = load %struct.smpType_struct** %type1, align 8
  %18 = call i32 @smpObject_instancep_c(%struct.smpType_struct* %17, %struct.smpType_struct* byval align 8 %type2)
  %19 = call { %struct.smpType_struct*, i8* } @smpBool_init(i32 %18)
  %20 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %21 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 0
  %22 = extractvalue { %struct.smpType_struct*, i8* } %19, 0
  store %struct.smpType_struct* %22, %struct.smpType_struct** %21, align 1
  %23 = getelementptr { %struct.smpType_struct*, i8* }* %20, i32 0, i32 1
  %24 = extractvalue { %struct.smpType_struct*, i8* } %19, 1
  store i8* %24, i8** %23, align 1
  %25 = bitcast %struct.obj_struct* %1 to { %struct.smpType_struct*, i8* }*
  %26 = load { %struct.smpType_struct*, i8* }* %25, align 1
  ret { %struct.smpType_struct*, i8* } %26
}

define i32 @main(i32 %argc, i8** %argv) nounwind {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8**, align 8
  %tmp = alloca %struct.obj_struct, align 8
  %arr = alloca %struct.obj_struct, align 8
  %i = alloca i32, align 4
  %4 = alloca %struct.obj_struct, align 8
  %5 = alloca %struct.obj_struct, align 8
  %res = alloca %struct.obj_struct, align 8
  %6 = alloca %struct.obj_struct, align 8
  store i32 0, i32* %1
  store i32 %argc, i32* %2, align 4
  store i8** %argv, i8*** %3, align 8
  %7 = call i32 @scope_init()
  %8 = call i32 @test_init()
  %9 = call i32 @init_smp_classes()
  %10 = call { %struct.smpType_struct*, i8* } @smpArray_init()
  %11 = bitcast %struct.obj_struct* %arr to { %struct.smpType_struct*, i8* }*
  %12 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 0
  %13 = extractvalue { %struct.smpType_struct*, i8* } %10, 0
  store %struct.smpType_struct* %13, %struct.smpType_struct** %12, align 1
  %14 = getelementptr { %struct.smpType_struct*, i8* }* %11, i32 0, i32 1
  %15 = extractvalue { %struct.smpType_struct*, i8* } %10, 1
  store i8* %15, i8** %14, align 1
  store i32 0, i32* %i, align 4
  br label %16

; <label>:16                                      ; preds = %45, %0
  %17 = load i32* %i, align 4
  %18 = load i32* %2, align 4
  %19 = icmp slt i32 %17, %18
  br i1 %19, label %20, label %48

; <label>:20                                      ; preds = %16
  %21 = load i32* %i, align 4
  %22 = sext i32 %21 to i64
  %23 = load i8*** %3, align 8
  %24 = getelementptr inbounds i8** %23, i64 %22
  %25 = load i8** %24, align 8
  %26 = call { %struct.smpType_struct*, i8* } @smpString_init(i8* %25)
  %27 = bitcast %struct.obj_struct* %4 to { %struct.smpType_struct*, i8* }*
  %28 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 0
  %29 = extractvalue { %struct.smpType_struct*, i8* } %26, 0
  store %struct.smpType_struct* %29, %struct.smpType_struct** %28, align 1
  %30 = getelementptr { %struct.smpType_struct*, i8* }* %27, i32 0, i32 1
  %31 = extractvalue { %struct.smpType_struct*, i8* } %26, 1
  store i8* %31, i8** %30, align 1
  %32 = bitcast %struct.obj_struct* %tmp to i8*
  %33 = bitcast %struct.obj_struct* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %32, i8* %33, i64 16, i32 8, i1 false)
  %34 = bitcast %struct.obj_struct* %arr to { %struct.smpType_struct*, i8* }*
  %35 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 0
  %36 = load %struct.smpType_struct** %35, align 1
  %37 = getelementptr { %struct.smpType_struct*, i8* }* %34, i32 0, i32 1
  %38 = load i8** %37, align 1
  %39 = call { %struct.smpType_struct*, i8* } @smpArray_add_now(%struct.smpType_struct* %36, i8* %38, i32 1, %struct.obj_struct* %tmp)
  %40 = bitcast %struct.obj_struct* %5 to { %struct.smpType_struct*, i8* }*
  %41 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 0
  %42 = extractvalue { %struct.smpType_struct*, i8* } %39, 0
  store %struct.smpType_struct* %42, %struct.smpType_struct** %41, align 1
  %43 = getelementptr { %struct.smpType_struct*, i8* }* %40, i32 0, i32 1
  %44 = extractvalue { %struct.smpType_struct*, i8* } %39, 1
  store i8* %44, i8** %43, align 1
  br label %45

; <label>:45                                      ; preds = %20
  %46 = load i32* %i, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %i, align 4
  br label %16

; <label>:48                                      ; preds = %16
  %49 = load %struct.smpType_struct** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 0), align 1
  %50 = load i8** getelementptr ({ %struct.smpType_struct*, i8* }* bitcast (%struct.obj_struct* @smp_global to { %struct.smpType_struct*, i8* }*), i32 0, i32 1), align 1
  %51 = call { %struct.smpType_struct*, i8* } @smpGlobal_main(%struct.smpType_struct* %49, i8* %50, i32 1, %struct.obj_struct* %arr)
  %52 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %53 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 0
  %54 = extractvalue { %struct.smpType_struct*, i8* } %51, 0
  store %struct.smpType_struct* %54, %struct.smpType_struct** %53, align 1
  %55 = getelementptr { %struct.smpType_struct*, i8* }* %52, i32 0, i32 1
  %56 = extractvalue { %struct.smpType_struct*, i8* } %51, 1
  store i8* %56, i8** %55, align 1
  %57 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %58 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 0
  %59 = load %struct.smpType_struct** %58, align 1
  %60 = getelementptr { %struct.smpType_struct*, i8* }* %57, i32 0, i32 1
  %61 = load i8** %60, align 1
  %62 = call i32 @smp_thrown_exceptionp_c(%struct.smpType_struct* %59, i8* %61)
  %63 = icmp ne i32 %62, 0
  br i1 %63, label %64, label %76

; <label>:64                                      ; preds = %48
  %65 = bitcast %struct.obj_struct* %res to { %struct.smpType_struct*, i8* }*
  %66 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 0
  %67 = load %struct.smpType_struct** %66, align 1
  %68 = getelementptr { %struct.smpType_struct*, i8* }* %65, i32 0, i32 1
  %69 = load i8** %68, align 1
  %70 = call { %struct.smpType_struct*, i8* } (i8*, ...)* @smp_printf(i8* getelementptr inbounds ([5 x i8]* @.str205, i32 0, i32 0), %struct.smpType_struct* %67, i8* %69)
  %71 = bitcast %struct.obj_struct* %6 to { %struct.smpType_struct*, i8* }*
  %72 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 0
  %73 = extractvalue { %struct.smpType_struct*, i8* } %70, 0
  store %struct.smpType_struct* %73, %struct.smpType_struct** %72, align 1
  %74 = getelementptr { %struct.smpType_struct*, i8* }* %71, i32 0, i32 1
  %75 = extractvalue { %struct.smpType_struct*, i8* } %70, 1
  store i8* %75, i8** %74, align 1
  br label %76

; <label>:76                                      ; preds = %64, %48
  ret i32 0
}

declare { %struct.smpType_struct*, i8* } @smpGlobal_main(%struct.smpType_struct*, i8*, i32, %struct.obj_struct*)

define internal double @to_real2(i32 %v) nounwind inlinehint {
  %1 = alloca i32, align 4
  store i32 %v, i32* %1, align 4
  %2 = load i32* %1, align 4
  %3 = uitofp i32 %2 to double
  %4 = fmul double %3, 0x3DF0000000000000
  ret double %4
}

define internal void @do_recursion(%struct.W128_T* %r, %struct.W128_T* %a, %struct.W128_T* %b, %struct.W128_T* %c, %struct.W128_T* %d) nounwind inlinehint {
  %1 = alloca %struct.W128_T*, align 8
  %2 = alloca %struct.W128_T*, align 8
  %3 = alloca %struct.W128_T*, align 8
  %4 = alloca %struct.W128_T*, align 8
  %5 = alloca %struct.W128_T*, align 8
  %x = alloca %struct.W128_T, align 4
  %y = alloca %struct.W128_T, align 4
  store %struct.W128_T* %r, %struct.W128_T** %1, align 8
  store %struct.W128_T* %a, %struct.W128_T** %2, align 8
  store %struct.W128_T* %b, %struct.W128_T** %3, align 8
  store %struct.W128_T* %c, %struct.W128_T** %4, align 8
  store %struct.W128_T* %d, %struct.W128_T** %5, align 8
  %6 = load %struct.W128_T** %2, align 8
  call void @lshift128(%struct.W128_T* %x, %struct.W128_T* %6, i32 1)
  %7 = load %struct.W128_T** %4, align 8
  call void @rshift128(%struct.W128_T* %y, %struct.W128_T* %7, i32 1)
  %8 = load %struct.W128_T** %2, align 8
  %9 = getelementptr inbounds %struct.W128_T* %8, i32 0, i32 0
  %10 = getelementptr inbounds [4 x i32]* %9, i32 0, i64 0
  %11 = load i32* %10, align 4
  %12 = getelementptr inbounds %struct.W128_T* %x, i32 0, i32 0
  %13 = getelementptr inbounds [4 x i32]* %12, i32 0, i64 0
  %14 = load i32* %13, align 4
  %15 = xor i32 %11, %14
  %16 = load %struct.W128_T** %3, align 8
  %17 = getelementptr inbounds %struct.W128_T* %16, i32 0, i32 0
  %18 = getelementptr inbounds [4 x i32]* %17, i32 0, i64 0
  %19 = load i32* %18, align 4
  %20 = lshr i32 %19, 11
  %21 = and i32 %20, -536870929
  %22 = xor i32 %15, %21
  %23 = getelementptr inbounds %struct.W128_T* %y, i32 0, i32 0
  %24 = getelementptr inbounds [4 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = xor i32 %22, %25
  %27 = load %struct.W128_T** %5, align 8
  %28 = getelementptr inbounds %struct.W128_T* %27, i32 0, i32 0
  %29 = getelementptr inbounds [4 x i32]* %28, i32 0, i64 0
  %30 = load i32* %29, align 4
  %31 = shl i32 %30, 18
  %32 = xor i32 %26, %31
  %33 = load %struct.W128_T** %1, align 8
  %34 = getelementptr inbounds %struct.W128_T* %33, i32 0, i32 0
  %35 = getelementptr inbounds [4 x i32]* %34, i32 0, i64 0
  store i32 %32, i32* %35, align 4
  %36 = load %struct.W128_T** %2, align 8
  %37 = getelementptr inbounds %struct.W128_T* %36, i32 0, i32 0
  %38 = getelementptr inbounds [4 x i32]* %37, i32 0, i64 1
  %39 = load i32* %38, align 4
  %40 = getelementptr inbounds %struct.W128_T* %x, i32 0, i32 0
  %41 = getelementptr inbounds [4 x i32]* %40, i32 0, i64 1
  %42 = load i32* %41, align 4
  %43 = xor i32 %39, %42
  %44 = load %struct.W128_T** %3, align 8
  %45 = getelementptr inbounds %struct.W128_T* %44, i32 0, i32 0
  %46 = getelementptr inbounds [4 x i32]* %45, i32 0, i64 1
  %47 = load i32* %46, align 4
  %48 = lshr i32 %47, 11
  %49 = and i32 %48, -570504321
  %50 = xor i32 %43, %49
  %51 = getelementptr inbounds %struct.W128_T* %y, i32 0, i32 0
  %52 = getelementptr inbounds [4 x i32]* %51, i32 0, i64 1
  %53 = load i32* %52, align 4
  %54 = xor i32 %50, %53
  %55 = load %struct.W128_T** %5, align 8
  %56 = getelementptr inbounds %struct.W128_T* %55, i32 0, i32 0
  %57 = getelementptr inbounds [4 x i32]* %56, i32 0, i64 1
  %58 = load i32* %57, align 4
  %59 = shl i32 %58, 18
  %60 = xor i32 %54, %59
  %61 = load %struct.W128_T** %1, align 8
  %62 = getelementptr inbounds %struct.W128_T* %61, i32 0, i32 0
  %63 = getelementptr inbounds [4 x i32]* %62, i32 0, i64 1
  store i32 %60, i32* %63, align 4
  %64 = load %struct.W128_T** %2, align 8
  %65 = getelementptr inbounds %struct.W128_T* %64, i32 0, i32 0
  %66 = getelementptr inbounds [4 x i32]* %65, i32 0, i64 2
  %67 = load i32* %66, align 4
  %68 = getelementptr inbounds %struct.W128_T* %x, i32 0, i32 0
  %69 = getelementptr inbounds [4 x i32]* %68, i32 0, i64 2
  %70 = load i32* %69, align 4
  %71 = xor i32 %67, %70
  %72 = load %struct.W128_T** %3, align 8
  %73 = getelementptr inbounds %struct.W128_T* %72, i32 0, i32 0
  %74 = getelementptr inbounds [4 x i32]* %73, i32 0, i64 2
  %75 = load i32* %74, align 4
  %76 = lshr i32 %75, 11
  %77 = and i32 %76, -1074069505
  %78 = xor i32 %71, %77
  %79 = getelementptr inbounds %struct.W128_T* %y, i32 0, i32 0
  %80 = getelementptr inbounds [4 x i32]* %79, i32 0, i64 2
  %81 = load i32* %80, align 4
  %82 = xor i32 %78, %81
  %83 = load %struct.W128_T** %5, align 8
  %84 = getelementptr inbounds %struct.W128_T* %83, i32 0, i32 0
  %85 = getelementptr inbounds [4 x i32]* %84, i32 0, i64 2
  %86 = load i32* %85, align 4
  %87 = shl i32 %86, 18
  %88 = xor i32 %82, %87
  %89 = load %struct.W128_T** %1, align 8
  %90 = getelementptr inbounds %struct.W128_T* %89, i32 0, i32 0
  %91 = getelementptr inbounds [4 x i32]* %90, i32 0, i64 2
  store i32 %88, i32* %91, align 4
  %92 = load %struct.W128_T** %2, align 8
  %93 = getelementptr inbounds %struct.W128_T* %92, i32 0, i32 0
  %94 = getelementptr inbounds [4 x i32]* %93, i32 0, i64 3
  %95 = load i32* %94, align 4
  %96 = getelementptr inbounds %struct.W128_T* %x, i32 0, i32 0
  %97 = getelementptr inbounds [4 x i32]* %96, i32 0, i64 3
  %98 = load i32* %97, align 4
  %99 = xor i32 %95, %98
  %100 = load %struct.W128_T** %3, align 8
  %101 = getelementptr inbounds %struct.W128_T* %100, i32 0, i32 0
  %102 = getelementptr inbounds [4 x i32]* %101, i32 0, i64 3
  %103 = load i32* %102, align 4
  %104 = lshr i32 %103, 11
  %105 = and i32 %104, -1073741834
  %106 = xor i32 %99, %105
  %107 = getelementptr inbounds %struct.W128_T* %y, i32 0, i32 0
  %108 = getelementptr inbounds [4 x i32]* %107, i32 0, i64 3
  %109 = load i32* %108, align 4
  %110 = xor i32 %106, %109
  %111 = load %struct.W128_T** %5, align 8
  %112 = getelementptr inbounds %struct.W128_T* %111, i32 0, i32 0
  %113 = getelementptr inbounds [4 x i32]* %112, i32 0, i64 3
  %114 = load i32* %113, align 4
  %115 = shl i32 %114, 18
  %116 = xor i32 %110, %115
  %117 = load %struct.W128_T** %1, align 8
  %118 = getelementptr inbounds %struct.W128_T* %117, i32 0, i32 0
  %119 = getelementptr inbounds [4 x i32]* %118, i32 0, i64 3
  store i32 %116, i32* %119, align 4
  ret void
}

define internal void @lshift128(%struct.W128_T* %out, %struct.W128_T* %in, i32 %shift) nounwind inlinehint {
  %1 = alloca %struct.W128_T*, align 8
  %2 = alloca %struct.W128_T*, align 8
  %3 = alloca i32, align 4
  %th = alloca i64, align 8
  %tl = alloca i64, align 8
  %oh = alloca i64, align 8
  %ol = alloca i64, align 8
  store %struct.W128_T* %out, %struct.W128_T** %1, align 8
  store %struct.W128_T* %in, %struct.W128_T** %2, align 8
  store i32 %shift, i32* %3, align 4
  %4 = load %struct.W128_T** %2, align 8
  %5 = getelementptr inbounds %struct.W128_T* %4, i32 0, i32 0
  %6 = getelementptr inbounds [4 x i32]* %5, i32 0, i64 3
  %7 = load i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = shl i64 %8, 32
  %10 = load %struct.W128_T** %2, align 8
  %11 = getelementptr inbounds %struct.W128_T* %10, i32 0, i32 0
  %12 = getelementptr inbounds [4 x i32]* %11, i32 0, i64 2
  %13 = load i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  store i64 %15, i64* %th, align 8
  %16 = load %struct.W128_T** %2, align 8
  %17 = getelementptr inbounds %struct.W128_T* %16, i32 0, i32 0
  %18 = getelementptr inbounds [4 x i32]* %17, i32 0, i64 1
  %19 = load i32* %18, align 4
  %20 = zext i32 %19 to i64
  %21 = shl i64 %20, 32
  %22 = load %struct.W128_T** %2, align 8
  %23 = getelementptr inbounds %struct.W128_T* %22, i32 0, i32 0
  %24 = getelementptr inbounds [4 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %21, %26
  store i64 %27, i64* %tl, align 8
  %28 = load i64* %th, align 8
  %29 = load i32* %3, align 4
  %30 = mul nsw i32 %29, 8
  %31 = zext i32 %30 to i64
  %32 = shl i64 %28, %31
  store i64 %32, i64* %oh, align 8
  %33 = load i64* %tl, align 8
  %34 = load i32* %3, align 4
  %35 = mul nsw i32 %34, 8
  %36 = zext i32 %35 to i64
  %37 = shl i64 %33, %36
  store i64 %37, i64* %ol, align 8
  %38 = load i64* %tl, align 8
  %39 = load i32* %3, align 4
  %40 = mul nsw i32 %39, 8
  %41 = sub nsw i32 64, %40
  %42 = zext i32 %41 to i64
  %43 = lshr i64 %38, %42
  %44 = load i64* %oh, align 8
  %45 = or i64 %44, %43
  store i64 %45, i64* %oh, align 8
  %46 = load i64* %ol, align 8
  %47 = lshr i64 %46, 32
  %48 = trunc i64 %47 to i32
  %49 = load %struct.W128_T** %1, align 8
  %50 = getelementptr inbounds %struct.W128_T* %49, i32 0, i32 0
  %51 = getelementptr inbounds [4 x i32]* %50, i32 0, i64 1
  store i32 %48, i32* %51, align 4
  %52 = load i64* %ol, align 8
  %53 = trunc i64 %52 to i32
  %54 = load %struct.W128_T** %1, align 8
  %55 = getelementptr inbounds %struct.W128_T* %54, i32 0, i32 0
  %56 = getelementptr inbounds [4 x i32]* %55, i32 0, i64 0
  store i32 %53, i32* %56, align 4
  %57 = load i64* %oh, align 8
  %58 = lshr i64 %57, 32
  %59 = trunc i64 %58 to i32
  %60 = load %struct.W128_T** %1, align 8
  %61 = getelementptr inbounds %struct.W128_T* %60, i32 0, i32 0
  %62 = getelementptr inbounds [4 x i32]* %61, i32 0, i64 3
  store i32 %59, i32* %62, align 4
  %63 = load i64* %oh, align 8
  %64 = trunc i64 %63 to i32
  %65 = load %struct.W128_T** %1, align 8
  %66 = getelementptr inbounds %struct.W128_T* %65, i32 0, i32 0
  %67 = getelementptr inbounds [4 x i32]* %66, i32 0, i64 2
  store i32 %64, i32* %67, align 4
  ret void
}

define internal void @rshift128(%struct.W128_T* %out, %struct.W128_T* %in, i32 %shift) nounwind inlinehint {
  %1 = alloca %struct.W128_T*, align 8
  %2 = alloca %struct.W128_T*, align 8
  %3 = alloca i32, align 4
  %th = alloca i64, align 8
  %tl = alloca i64, align 8
  %oh = alloca i64, align 8
  %ol = alloca i64, align 8
  store %struct.W128_T* %out, %struct.W128_T** %1, align 8
  store %struct.W128_T* %in, %struct.W128_T** %2, align 8
  store i32 %shift, i32* %3, align 4
  %4 = load %struct.W128_T** %2, align 8
  %5 = getelementptr inbounds %struct.W128_T* %4, i32 0, i32 0
  %6 = getelementptr inbounds [4 x i32]* %5, i32 0, i64 3
  %7 = load i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = shl i64 %8, 32
  %10 = load %struct.W128_T** %2, align 8
  %11 = getelementptr inbounds %struct.W128_T* %10, i32 0, i32 0
  %12 = getelementptr inbounds [4 x i32]* %11, i32 0, i64 2
  %13 = load i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %9, %14
  store i64 %15, i64* %th, align 8
  %16 = load %struct.W128_T** %2, align 8
  %17 = getelementptr inbounds %struct.W128_T* %16, i32 0, i32 0
  %18 = getelementptr inbounds [4 x i32]* %17, i32 0, i64 1
  %19 = load i32* %18, align 4
  %20 = zext i32 %19 to i64
  %21 = shl i64 %20, 32
  %22 = load %struct.W128_T** %2, align 8
  %23 = getelementptr inbounds %struct.W128_T* %22, i32 0, i32 0
  %24 = getelementptr inbounds [4 x i32]* %23, i32 0, i64 0
  %25 = load i32* %24, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %21, %26
  store i64 %27, i64* %tl, align 8
  %28 = load i64* %th, align 8
  %29 = load i32* %3, align 4
  %30 = mul nsw i32 %29, 8
  %31 = zext i32 %30 to i64
  %32 = lshr i64 %28, %31
  store i64 %32, i64* %oh, align 8
  %33 = load i64* %tl, align 8
  %34 = load i32* %3, align 4
  %35 = mul nsw i32 %34, 8
  %36 = zext i32 %35 to i64
  %37 = lshr i64 %33, %36
  store i64 %37, i64* %ol, align 8
  %38 = load i64* %th, align 8
  %39 = load i32* %3, align 4
  %40 = mul nsw i32 %39, 8
  %41 = sub nsw i32 64, %40
  %42 = zext i32 %41 to i64
  %43 = shl i64 %38, %42
  %44 = load i64* %ol, align 8
  %45 = or i64 %44, %43
  store i64 %45, i64* %ol, align 8
  %46 = load i64* %ol, align 8
  %47 = lshr i64 %46, 32
  %48 = trunc i64 %47 to i32
  %49 = load %struct.W128_T** %1, align 8
  %50 = getelementptr inbounds %struct.W128_T* %49, i32 0, i32 0
  %51 = getelementptr inbounds [4 x i32]* %50, i32 0, i64 1
  store i32 %48, i32* %51, align 4
  %52 = load i64* %ol, align 8
  %53 = trunc i64 %52 to i32
  %54 = load %struct.W128_T** %1, align 8
  %55 = getelementptr inbounds %struct.W128_T* %54, i32 0, i32 0
  %56 = getelementptr inbounds [4 x i32]* %55, i32 0, i64 0
  store i32 %53, i32* %56, align 4
  %57 = load i64* %oh, align 8
  %58 = lshr i64 %57, 32
  %59 = trunc i64 %58 to i32
  %60 = load %struct.W128_T** %1, align 8
  %61 = getelementptr inbounds %struct.W128_T* %60, i32 0, i32 0
  %62 = getelementptr inbounds [4 x i32]* %61, i32 0, i64 3
  store i32 %59, i32* %62, align 4
  %63 = load i64* %oh, align 8
  %64 = trunc i64 %63 to i32
  %65 = load %struct.W128_T** %1, align 8
  %66 = getelementptr inbounds %struct.W128_T* %65, i32 0, i32 0
  %67 = getelementptr inbounds [4 x i32]* %66, i32 0, i64 2
  store i32 %64, i32* %67, align 4
  ret void
}
